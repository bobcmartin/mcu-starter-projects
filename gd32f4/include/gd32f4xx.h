/*
 * Copyright (c) 2009-2019 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     GD32F4xx.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     31. October 2019
 * @note     Generated by SVDConv V3.3.27 on Thursday, 31.10.2019 18:46:35
 *           from File 'GD32F4xx.svd',
 *           last modified on Thursday, 31.10.2019 18:46:31
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup GD32F4xx
  * @{
  */


#ifndef GD32F4XX_H
#define GD32F4XX_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15 Reset Vector, invoked on Power up and warm reset */
  NonMaskableInt_IRQn       = -14,              /*!< -14 Non maskable Interrupt, cannot be stopped or preempted */
  HardFault_IRQn            = -13,              /*!< -13 Hard Fault, all classes of Fault */
  MemoryManagement_IRQn     = -12,              /*!< -12 Memory Management, MPU mismatch, including Access Violation and No Match */
  BusFault_IRQn             = -11,              /*!< -11 Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory related Fault */
  UsageFault_IRQn           = -10,              /*!< -10 Usage Fault, i.e. Undef Instruction, Illegal State Transition */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer */
/* ==========================================  GD32F4xx Specific Interrupt Numbers  ========================================== */
  WWDGT_IRQn                =   0,              /*!< 0 WWDGT */
  RTC_Tamper_IRQn           =   2,              /*!< 2 RTC_Tamper */
  RTC_WKUP_IRQn             =   3,              /*!< 3 RTC_WKUP */
  FMC_IRQn                  =   4,              /*!< 4 FMC */
  RCU_CTC_IRQn              =   5,              /*!< 5 RCU_CTC */
  EXTI_Line0_IRQn           =   6,              /*!< 6 EXTI_Line0 */
  EXTI_Line1_IRQn           =   7,              /*!< 7 EXTI_Line1 */
  EXTI_Line2_IRQn           =   8,              /*!< 8 EXTI_Line2 */
  EXTI_Line3_IRQn           =   9,              /*!< 9 EXTI_Line3 */
  EXTI_Line4_IRQn           =  10,              /*!< 10 EXTI_Line4 */
  DMA0_Channel0_IRQn        =  11,              /*!< 11 DMA0_Channel0 */
  DMA0_Channel1_IRQn        =  12,              /*!< 12 DMA0_Channel1 */
  DMA0_Channel2_IRQn        =  13,              /*!< 13 DMA0_Channel2 */
  DMA0_Channel3_IRQn        =  14,              /*!< 14 DMA0_Channel3 */
  DMA0_Channel4_IRQn        =  15,              /*!< 15 DMA0_Channel4 */
  DMA0_Channel5_IRQn        =  16,              /*!< 16 DMA0_Channel5 */
  DMA0_Channel6_IRQn        =  17,              /*!< 17 DMA0_Channel6 */
  ADC_IRQn                  =  18,              /*!< 18 ADC */
  CAN0_TX_IRQn              =  19,              /*!< 19 CAN0_TX */
  CAN0_RX0_IRQn             =  20,              /*!< 20 CAN0_RX0 */
  CAN0_RX1_IRQn             =  21,              /*!< 21 CAN0_RX1 */
  CAN0_EWMC_IRQn            =  22,              /*!< 22 CAN0_EWMC */
  EXTI_line9_5_IRQn         =  23,              /*!< 23 EXTI_line9_5 */
  TIMER0_BRK_TIMER8_IRQn    =  24,              /*!< 24 TIMER0_BRK_TIMER8 */
  TIMER0_UP_TIMER9_IRQn     =  25,              /*!< 25 TIMER0_UP_TIMER9 */
  TIMER0_TRG_CMT_TIMER10_IRQn=  26,             /*!< 26 TIMER0_TRG_CMT_TIMER10 */
  TIMER0_CC_IRQn            =  27,              /*!< 27 TIMER0_CC */
  TIMER1_IRQn               =  28,              /*!< 28 TIMER1 */
  TIMER2_IRQn               =  29,              /*!< 29 TIMER2 */
  TIMER3_IRQn               =  30,              /*!< 30 TIMER3 */
  I2C0_EV_IRQn              =  31,              /*!< 31 I2C0_EV */
  I2C0_ER_IRQn              =  32,              /*!< 32 I2C0_ER */
  I2C1_EV_IRQn              =  33,              /*!< 33 I2C1_EV */
  I2C1_ER_IRQn              =  34,              /*!< 34 I2C1_ER */
  SPI0_IRQn                 =  35,              /*!< 35 SPI0 */
  SPI1_IRQn                 =  36,              /*!< 36 SPI1 */
  USART0_IRQn               =  37,              /*!< 37 USART0 */
  USART1_IRQn               =  38,              /*!< 38 USART1 */
  USART2_IRQn               =  39,              /*!< 39 USART2 */
  EXTI_line15_10_IRQn       =  40,              /*!< 40 EXTI_line15_10 */
  RTC_Alarm_IRQn            =  41,              /*!< 41 RTC_Alarm */
  OTG_FS_WKUP_IRQn          =  42,              /*!< 42 OTG_FS_WKUP */
  TIMER7_BRK_TIMER11_IRQn   =  43,              /*!< 43 TIMER7_BRK_TIMER11 */
  TIMER7_UP_TIMER12_IRQn    =  44,              /*!< 44 TIMER7_UP_TIMER12 */
  TIMER7_TRG_CMT_TIMER13_IRQn=  45,             /*!< 45 TIMER7_TRG_CMT_TIMER13 */
  TIMER7_CC_IRQn            =  46,              /*!< 46 TIMER7_CC */
  DMA0_Channel7_IRQn        =  47,              /*!< 47 DMA0_Channel7 */
  EXMC_IRQn                 =  48,              /*!< 48 EXMC */
  SDIO_IRQn                 =  49,              /*!< 49 SDIO */
  TIMER4_IRQn               =  50,              /*!< 50 TIMER4 */
  SPI2_IRQn                 =  51,              /*!< 51 SPI2 */
  UART3_IRQn                =  52,              /*!< 52 UART3 */
  UART4_IRQn                =  53,              /*!< 53 UART4 */
  TIMER5_DAC_IRQn           =  54,              /*!< 54 TIMER5_DAC */
  TIMER6_IRQn               =  55,              /*!< 55 TIMER6 */
  DMA1_Channel0_IRQn        =  56,              /*!< 56 DMA1_Channel0 */
  DMA1_Channel1_IRQn        =  57,              /*!< 57 DMA1_Channel1 */
  DMA1_Channel2_IRQn        =  58,              /*!< 58 DMA1_Channel2 */
  DMA1_Channel3_IRQn        =  59,              /*!< 59 DMA1_Channel3 */
  DMA1_Channel4_IRQn        =  60,              /*!< 60 DMA1_Channel4 */
  ENET_IRQn                 =  61,              /*!< 61 ENET */
  ENET_WKUP_IRQn            =  62,              /*!< 62 ENET_WKUP */
  CAN1_TX_IRQn              =  63,              /*!< 63 CAN1_TX */
  CAN1_RX0_IRQn             =  64,              /*!< 64 CAN1_RX0 */
  CAN1_RX1_IRQn             =  65,              /*!< 65 CAN1_RX1 */
  CAN1_EWMC_IRQn            =  66,              /*!< 66 CAN1_EWMC */
  OTG_FS_IRQn               =  67,              /*!< 67 OTG_FS */
  DMA1_Channel5_IRQn        =  68,              /*!< 68 DMA1_Channel5 */
  DMA1_Channel6_IRQn        =  69,              /*!< 69 DMA1_Channel6 */
  DMA1_Channel7_IRQn        =  70,              /*!< 70 DMA1_Channel7 */
  USART5_IRQn               =  71,              /*!< 71 USART5 */
  I2C2_EV_IRQn              =  72,              /*!< 72 I2C2_EV */
  I2C2_ER_IRQn              =  73,              /*!< 73 I2C2_ER */
  USBHS_EP1_Out_IRQn        =  74,              /*!< 74 USBHS_EP1_Out */
  USBHS_EP1_In_IRQn         =  75,              /*!< 75 USBHS_EP1_In */
  USBHS_WKUP_IRQn           =  76,              /*!< 76 USBHS_WKUP */
  USBHS_IRQn                =  77,              /*!< 77 USBHS */
  DCI_IRQn                  =  78,              /*!< 78 DCI */
  TRNG_IRQn                 =  80,              /*!< 80 TRNG */
  UART6_IRQn                =  82,              /*!< 82 UART6 */
  UART7_IRQn                =  83,              /*!< 83 UART7 */
  SPI3_IRQn                 =  84,              /*!< 84 SPI3 */
  SPI4_IRQn                 =  85,              /*!< 85 SPI4 */
  SPI5_IRQn                 =  86,              /*!< 86 SPI5 */
  TLI_IRQn                  =  88,              /*!< 88 TLI */
  TLI_ER_IRQn               =  89,              /*!< 89 TLI_ER */
  IPA_IRQn                  =  90               /*!< 90 IPA */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M4 Processor and Core Peripherals  =========================== */
#define __CM4_REV                 0x0201U       /*!< CM4 Core Revision */
#define __NVIC_PRIO_BITS               4        /*!< Number of Bits used for Priority Levels */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used */
#define __MPU_PRESENT                  1        /*!< MPU present */
#define __FPU_PRESENT                  1        /*!< FPU present */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm4.h"                           /*!< ARM Cortex-M4 processor and core peripherals */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           ADC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to digital converter (ADC0)
  */

typedef struct {                                /*!< (@ 0x40012000) ADC0 Structure */
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000000) status register */
    
    struct {
      __IOM uint32_t WDE        : 1;            /*!< [0..0] Analog watchdog event flag */
      __IOM uint32_t EOC        : 1;            /*!< [1..1] End of group conversion flag */
      __IOM uint32_t EOIC       : 1;            /*!< [2..2] End of inserted group conversion flag */
      __IOM uint32_t STIC       : 1;            /*!< [3..3] Start flag of inserted channel group */
      __IOM uint32_t STRC       : 1;            /*!< [4..4] Start flag of regular channel group */
      __IOM uint32_t ROVF       : 1;            /*!< [5..5] Regular data register overflow */
    } STAT_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x00000004) control register 0 */
    
    struct {
      __IOM uint32_t WDCHSEL    : 5;            /*!< [4..0] Analog watchdog channel select */
      __IOM uint32_t EOCIE      : 1;            /*!< [5..5] Interrupt enable for EOC */
      __IOM uint32_t WDEIE      : 1;            /*!< [6..6] Analog watchdog WDE */
      __IOM uint32_t EOICIE     : 1;            /*!< [7..7] Interrupt enable for EOIC */
      __IOM uint32_t SM         : 1;            /*!< [8..8] Scan mode */
      __IOM uint32_t WDSC       : 1;            /*!< [9..9] When in scan mode, analog watchdog is effective on a single channel */
      __IOM uint32_t ICA        : 1;            /*!< [10..10] Inserted channel group convert automatically */
      __IOM uint32_t DISRC      : 1;            /*!< [11..11] Discontinuous mode on regular channels */
      __IOM uint32_t DISIC      : 1;            /*!< [12..12] Discontinuous mode on inserted channels */
      __IOM uint32_t DISNUM     : 3;            /*!< [15..13] Number of conversions in discontinuous mode */
      __IM  uint32_t            : 6;
      __IOM uint32_t IWDEN      : 1;            /*!< [22..22] Inserted channel analog watchdog enable */
      __IOM uint32_t RWDEN      : 1;            /*!< [23..23] Regular channel analog watchdog enable */
      __IOM uint32_t DRES       : 2;            /*!< [25..24] ADC data resolution */
      __IOM uint32_t ROVFIE     : 1;            /*!< [26..26] Interrupt enable for ROVF */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000008) control register 1 */
    
    struct {
      __IOM uint32_t ADCON      : 1;            /*!< [0..0] ADC on */
      __IOM uint32_t CTN        : 1;            /*!< [1..1] Continuous mode */
      __IOM uint32_t CLB        : 1;            /*!< [2..2] ADC calibration */
      __IOM uint32_t RSTCLB     : 1;            /*!< [3..3] Reset calibration */
      __IM  uint32_t            : 4;
      __IOM uint32_t DMA        : 1;            /*!< [8..8] DMA request enable */
      __IOM uint32_t DDM        : 1;            /*!< [9..9] DMA disable mode */
      __IOM uint32_t EOCM       : 1;            /*!< [10..10] End of conversion mode */
      __IOM uint32_t DAL        : 1;            /*!< [11..11] Data alignment */
      __IM  uint32_t            : 4;
      __IOM uint32_t ETSIC      : 4;            /*!< [19..16] External trigger select for inserted channel */
      __IOM uint32_t ETMIC      : 2;            /*!< [21..20] External trigger mode for inserted channel */
      __IOM uint32_t SWICST     : 1;            /*!< [22..22] Software start on inserted channel */
      __IM  uint32_t            : 1;
      __IOM uint32_t ETSRC      : 4;            /*!< [27..24] External trigger select for regular channel */
      __IOM uint32_t ETMRC      : 2;            /*!< [29..28] External trigger mode for regular channel */
      __IOM uint32_t SWRCST     : 1;            /*!< [30..30] Software start on regular channel */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t SAMPT0;                      /*!< (@ 0x0000000C) Sample time register 0 */
    
    struct {
      __IOM uint32_t SPT10      : 3;            /*!< [2..0] Channel 10 sample time selection */
      __IOM uint32_t SPT11      : 3;            /*!< [5..3] Channel 11 sample time selection */
      __IOM uint32_t SPT12      : 3;            /*!< [8..6] Channel 12 sample time selection */
      __IOM uint32_t SPT13      : 3;            /*!< [11..9] Channel 13 sample time selection */
      __IOM uint32_t SPT14      : 3;            /*!< [14..12] Channel 14 sample time selection */
      __IOM uint32_t SPT15      : 3;            /*!< [17..15] Channel 15 sample time selection */
      __IOM uint32_t SPT16      : 3;            /*!< [20..18] Channel 16 sample time selection */
      __IOM uint32_t SPT17      : 3;            /*!< [23..21] Channel 17 sample time selection */
      __IOM uint32_t SPT18      : 3;            /*!< [26..24] Channel 18 sample time selection */
    } SAMPT0_b;
  } ;
  
  union {
    __IOM uint32_t SAMPT1;                      /*!< (@ 0x00000010) Sample time register 1 */
    
    struct {
      __IOM uint32_t SPT0       : 3;            /*!< [2..0] Channel 0 sample time selection */
      __IOM uint32_t SPT1       : 3;            /*!< [5..3] Channel 1 sample time selection */
      __IOM uint32_t SPT2       : 3;            /*!< [8..6] Channel 2 sample time selection */
      __IOM uint32_t SPT3       : 3;            /*!< [11..9] Channel 3 sample time selection */
      __IOM uint32_t SPT4       : 3;            /*!< [14..12] Channel 4 sample time selection */
      __IOM uint32_t SPT5       : 3;            /*!< [17..15] Channel 5 sample time selection */
      __IOM uint32_t SPT6       : 3;            /*!< [20..18] Channel 6 sample time selection */
      __IOM uint32_t SPT7       : 3;            /*!< [23..21] Channel 7 sample time selection */
      __IOM uint32_t SPT8       : 3;            /*!< [26..24] Channel 8 sample time selection */
      __IOM uint32_t SPT9       : 3;            /*!< [29..27] Channel 9 sample time selection */
    } SAMPT1_b;
  } ;
  
  union {
    __IOM uint32_t IOFF0;                       /*!< (@ 0x00000014) Inserted channel data offset register 0 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 0 */
    } IOFF0_b;
  } ;
  
  union {
    __IOM uint32_t IOFF1;                       /*!< (@ 0x00000018) Inserted channel data offset register 1 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 1 */
    } IOFF1_b;
  } ;
  
  union {
    __IOM uint32_t IOFF2;                       /*!< (@ 0x0000001C) Inserted channel data offset register 2 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 2 */
    } IOFF2_b;
  } ;
  
  union {
    __IOM uint32_t IOFF3;                       /*!< (@ 0x00000020) Inserted channel data offset register 3 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 3 */
    } IOFF3_b;
  } ;
  
  union {
    __IOM uint32_t WDHT;                        /*!< (@ 0x00000024) watchdog higher threshold register */
    
    struct {
      __IOM uint32_t WDHT       : 12;           /*!< [11..0] Analog watchdog higher threshold */
    } WDHT_b;
  } ;
  
  union {
    __IOM uint32_t WDLT;                        /*!< (@ 0x00000028) watchdog lower threshold register */
    
    struct {
      __IOM uint32_t WDLT       : 12;           /*!< [11..0] Analog watchdog lower threshold */
    } WDLT_b;
  } ;
  
  union {
    __IOM uint32_t RSQ0;                        /*!< (@ 0x0000002C) regular sequence register 0 */
    
    struct {
      __IOM uint32_t RSQ12      : 5;            /*!< [4..0] 13th conversion in regular sequence */
      __IOM uint32_t RSQ13      : 5;            /*!< [9..5] 14th conversion in regular sequence */
      __IOM uint32_t RSQ14      : 5;            /*!< [14..10] 15th conversion in regular sequence */
      __IOM uint32_t RSQ15      : 5;            /*!< [19..15] 16th conversion in regular sequence */
      __IOM uint32_t RL         : 4;            /*!< [23..20] Regular channel group length */
    } RSQ0_b;
  } ;
  
  union {
    __IOM uint32_t RSQ1;                        /*!< (@ 0x00000030) regular sequence register 1 */
    
    struct {
      __IOM uint32_t RSQ6       : 5;            /*!< [4..0] 7th conversion in regular sequence */
      __IOM uint32_t RSQ7       : 5;            /*!< [9..5] 8th conversion in regular sequence */
      __IOM uint32_t RSQ8       : 5;            /*!< [14..10] 9th conversion in regular sequence */
      __IOM uint32_t RSQ9       : 5;            /*!< [19..15] 10th conversion in regular sequence */
      __IOM uint32_t RSQ10      : 5;            /*!< [24..20] 11th conversion in regular sequence */
      __IOM uint32_t RSQ11      : 5;            /*!< [29..25] 12th conversion in regular sequence */
    } RSQ1_b;
  } ;
  
  union {
    __IOM uint32_t RSQ2;                        /*!< (@ 0x00000034) regular sequence register 2 */
    
    struct {
      __IOM uint32_t RSQ0       : 5;            /*!< [4..0] 1st conversion in regular sequence */
      __IOM uint32_t RSQ1       : 5;            /*!< [9..5] 2nd conversion in regular sequence */
      __IOM uint32_t RSQ2       : 5;            /*!< [14..10] 3rd conversion in regular sequence */
      __IOM uint32_t RSQ3       : 5;            /*!< [19..15] 4th conversion in regular sequence */
      __IOM uint32_t RSQ4       : 5;            /*!< [24..20] 5th conversion in regular sequence */
      __IOM uint32_t RSQ5       : 5;            /*!< [29..25] 6th conversion in regular sequence */
    } RSQ2_b;
  } ;
  
  union {
    __IOM uint32_t ISQ;                         /*!< (@ 0x00000038) Inserted sequence register */
    
    struct {
      __IOM uint32_t ISQ0       : 5;            /*!< [4..0] 1st conversion in inserted sequence */
      __IOM uint32_t ISQ1       : 5;            /*!< [9..5] 2nd conversion in inserted sequence */
      __IOM uint32_t ISQ2       : 5;            /*!< [14..10] 3rd conversion in inserted sequence */
      __IOM uint32_t ISQ3       : 5;            /*!< [19..15] 4th conversion in inserted sequence */
      __IOM uint32_t IL         : 2;            /*!< [21..20] Inserted channel group length */
    } ISQ_b;
  } ;
  
  union {
    __IM  uint32_t IDATA0;                      /*!< (@ 0x0000003C) Inserted data register 0 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA0_b;
  } ;
  
  union {
    __IM  uint32_t IDATA1;                      /*!< (@ 0x00000040) Inserted data register 1 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA1_b;
  } ;
  
  union {
    __IM  uint32_t IDATA2;                      /*!< (@ 0x00000044) Inserted data register 2 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA2_b;
  } ;
  
  union {
    __IM  uint32_t IDATA3;                      /*!< (@ 0x00000048) Inserted data register 3 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA3_b;
  } ;
  
  union {
    __IM  uint32_t RDATA;                       /*!< (@ 0x0000004C) regular data register */
    
    struct {
      __IM  uint32_t RDATA      : 16;           /*!< [15..0] Regular channel data */
    } RDATA_b;
  } ;
  __IM  uint32_t  RESERVED[12];
  
  union {
    __IM  uint32_t OVSAMPCTL;                   /*!< (@ 0x00000080) Oversample control register */
    
    struct {
      __IM  uint32_t OVSEN      : 1;            /*!< [0..0] Oversampling Enable */
      __IM  uint32_t            : 1;
      __IM  uint32_t OVSR       : 3;            /*!< [4..2] Oversampling ratio */
      __IM  uint32_t OVSS       : 4;            /*!< [8..5] Oversampling shift */
      __IM  uint32_t TOVS       : 1;            /*!< [9..9] Triggered Oversampling */
    } OVSAMPCTL_b;
  } ;
} ADC0_Type;                                    /*!< Size = 132 (0x84) */



/* =========================================================================================================================== */
/* ================                                           ADC1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to digital converter (ADC1)
  */

typedef struct {                                /*!< (@ 0x40012100) ADC1 Structure */
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000000) status register */
    
    struct {
      __IOM uint32_t WDE        : 1;            /*!< [0..0] Analog watchdog event flag */
      __IOM uint32_t EOC        : 1;            /*!< [1..1] End of group conversion flag */
      __IOM uint32_t EOIC       : 1;            /*!< [2..2] End of inserted group conversion flag */
      __IOM uint32_t STIC       : 1;            /*!< [3..3] Start flag of inserted channel group */
      __IOM uint32_t STRC       : 1;            /*!< [4..4] Start flag of regular channel group */
      __IOM uint32_t ROVF       : 1;            /*!< [5..5] Regular data register overflow */
    } STAT_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x00000004) control register 0 */
    
    struct {
      __IOM uint32_t WDCHSEL    : 5;            /*!< [4..0] Analog watchdog channel select */
      __IOM uint32_t EOCIE      : 1;            /*!< [5..5] Interrupt enable for EOC */
      __IOM uint32_t WDEIE      : 1;            /*!< [6..6] Analog watchdog WDE */
      __IOM uint32_t EOICIE     : 1;            /*!< [7..7] Interrupt enable for EOIC */
      __IOM uint32_t SM         : 1;            /*!< [8..8] Scan mode */
      __IOM uint32_t WDSC       : 1;            /*!< [9..9] When in scan mode, analog watchdog is effective on a single channel */
      __IOM uint32_t ICA        : 1;            /*!< [10..10] Inserted channel group convert automatically */
      __IOM uint32_t DISRC      : 1;            /*!< [11..11] Discontinuous mode on regular channels */
      __IOM uint32_t DISIC      : 1;            /*!< [12..12] Discontinuous mode on inserted channels */
      __IOM uint32_t DISNUM     : 3;            /*!< [15..13] Number of conversions in discontinuous mode */
      __IM  uint32_t            : 6;
      __IOM uint32_t IWDEN      : 1;            /*!< [22..22] Inserted channel analog watchdog enable */
      __IOM uint32_t RWDEN      : 1;            /*!< [23..23] Regular channel analog watchdog enable */
      __IOM uint32_t DRES       : 2;            /*!< [25..24] ADC data resolution */
      __IOM uint32_t ROVFIE     : 1;            /*!< [26..26] Interrupt enable for ROVF */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000008) control register 1 */
    
    struct {
      __IOM uint32_t ADCON      : 1;            /*!< [0..0] ADC on */
      __IOM uint32_t CTN        : 1;            /*!< [1..1] Continuous mode */
      __IOM uint32_t CLB        : 1;            /*!< [2..2] ADC calibration */
      __IOM uint32_t RSTCLB     : 1;            /*!< [3..3] Reset calibration */
      __IM  uint32_t            : 4;
      __IOM uint32_t DMA        : 1;            /*!< [8..8] DMA request enable */
      __IOM uint32_t DDM        : 1;            /*!< [9..9] DMA disable mode */
      __IOM uint32_t EOCM       : 1;            /*!< [10..10] End of conversion mode */
      __IOM uint32_t DAL        : 1;            /*!< [11..11] Data alignment */
      __IM  uint32_t            : 4;
      __IOM uint32_t ETSIC      : 4;            /*!< [19..16] External trigger select for inserted channel */
      __IOM uint32_t ETMIC      : 2;            /*!< [21..20] External trigger mode for inserted channel */
      __IOM uint32_t SWICST     : 1;            /*!< [22..22] Software start on inserted channel */
      __IM  uint32_t            : 1;
      __IOM uint32_t ETSRC      : 4;            /*!< [27..24] External trigger select for regular channel */
      __IOM uint32_t ETMRC      : 2;            /*!< [29..28] External trigger mode for regular channel */
      __IOM uint32_t SWRCST     : 1;            /*!< [30..30] Software start on regular channel */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t SAMPT0;                      /*!< (@ 0x0000000C) Sample time register 0 */
    
    struct {
      __IOM uint32_t SPT10      : 3;            /*!< [2..0] Channel 10 sample time selection */
      __IOM uint32_t SPT11      : 3;            /*!< [5..3] Channel 11 sample time selection */
      __IOM uint32_t SPT12      : 3;            /*!< [8..6] Channel 12 sample time selection */
      __IOM uint32_t SPT13      : 3;            /*!< [11..9] Channel 13 sample time selection */
      __IOM uint32_t SPT14      : 3;            /*!< [14..12] Channel 14 sample time selection */
      __IOM uint32_t SPT15      : 3;            /*!< [17..15] Channel 15 sample time selection */
      __IOM uint32_t SPT16      : 3;            /*!< [20..18] Channel 16 sample time selection */
      __IOM uint32_t SPT17      : 3;            /*!< [23..21] Channel 17 sample time selection */
      __IOM uint32_t SPT18      : 3;            /*!< [26..24] Channel 18 sample time selection */
    } SAMPT0_b;
  } ;
  
  union {
    __IOM uint32_t SAMPT1;                      /*!< (@ 0x00000010) Sample time register 1 */
    
    struct {
      __IOM uint32_t SPT0       : 3;            /*!< [2..0] Channel 0 sample time selection */
      __IOM uint32_t SPT1       : 3;            /*!< [5..3] Channel 1 sample time selection */
      __IOM uint32_t SPT2       : 3;            /*!< [8..6] Channel 2 sample time selection */
      __IOM uint32_t SPT3       : 3;            /*!< [11..9] Channel 3 sample time selection */
      __IOM uint32_t SPT4       : 3;            /*!< [14..12] Channel 4 sample time selection */
      __IOM uint32_t SPT5       : 3;            /*!< [17..15] Channel 5 sample time selection */
      __IOM uint32_t SPT6       : 3;            /*!< [20..18] Channel 6 sample time selection */
      __IOM uint32_t SPT7       : 3;            /*!< [23..21] Channel 7 sample time selection */
      __IOM uint32_t SPT8       : 3;            /*!< [26..24] Channel 8 sample time selection */
      __IOM uint32_t SPT9       : 3;            /*!< [29..27] Channel 9 sample time selection */
    } SAMPT1_b;
  } ;
  
  union {
    __IOM uint32_t IOFF0;                       /*!< (@ 0x00000014) Inserted channel data offset register 0 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 0 */
    } IOFF0_b;
  } ;
  
  union {
    __IOM uint32_t IOFF1;                       /*!< (@ 0x00000018) Inserted channel data offset register 1 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 1 */
    } IOFF1_b;
  } ;
  
  union {
    __IOM uint32_t IOFF2;                       /*!< (@ 0x0000001C) Inserted channel data offset register 2 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 2 */
    } IOFF2_b;
  } ;
  
  union {
    __IOM uint32_t IOFF3;                       /*!< (@ 0x00000020) Inserted channel data offset register 3 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 3 */
    } IOFF3_b;
  } ;
  
  union {
    __IOM uint32_t WDHT;                        /*!< (@ 0x00000024) watchdog higher threshold register */
    
    struct {
      __IOM uint32_t WDHT       : 12;           /*!< [11..0] Analog watchdog higher threshold */
    } WDHT_b;
  } ;
  
  union {
    __IOM uint32_t WDLT;                        /*!< (@ 0x00000028) watchdog lower threshold register */
    
    struct {
      __IOM uint32_t WDLT       : 12;           /*!< [11..0] Analog watchdog lower threshold */
    } WDLT_b;
  } ;
  
  union {
    __IOM uint32_t RSQ0;                        /*!< (@ 0x0000002C) regular sequence register 0 */
    
    struct {
      __IOM uint32_t RSQ12      : 5;            /*!< [4..0] 13th conversion in regular sequence */
      __IOM uint32_t RSQ13      : 5;            /*!< [9..5] 14th conversion in regular sequence */
      __IOM uint32_t RSQ14      : 5;            /*!< [14..10] 15th conversion in regular sequence */
      __IOM uint32_t RSQ15      : 5;            /*!< [19..15] 16th conversion in regular sequence */
      __IOM uint32_t RL         : 4;            /*!< [23..20] Regular channel group length */
    } RSQ0_b;
  } ;
  
  union {
    __IOM uint32_t RSQ1;                        /*!< (@ 0x00000030) regular sequence register 1 */
    
    struct {
      __IOM uint32_t RSQ6       : 5;            /*!< [4..0] 7th conversion in regular sequence */
      __IOM uint32_t RSQ7       : 5;            /*!< [9..5] 8th conversion in regular sequence */
      __IOM uint32_t RSQ8       : 5;            /*!< [14..10] 9th conversion in regular sequence */
      __IOM uint32_t RSQ9       : 5;            /*!< [19..15] 10th conversion in regular sequence */
      __IOM uint32_t RSQ10      : 5;            /*!< [24..20] 11th conversion in regular sequence */
      __IOM uint32_t RSQ11      : 5;            /*!< [29..25] 12th conversion in regular sequence */
    } RSQ1_b;
  } ;
  
  union {
    __IOM uint32_t RSQ2;                        /*!< (@ 0x00000034) regular sequence register 2 */
    
    struct {
      __IOM uint32_t RSQ0       : 5;            /*!< [4..0] 1st conversion in regular sequence */
      __IOM uint32_t RSQ1       : 5;            /*!< [9..5] 2nd conversion in regular sequence */
      __IOM uint32_t RSQ2       : 5;            /*!< [14..10] 3rd conversion in regular sequence */
      __IOM uint32_t RSQ3       : 5;            /*!< [19..15] 4th conversion in regular sequence */
      __IOM uint32_t RSQ4       : 5;            /*!< [24..20] 5th conversion in regular sequence */
      __IOM uint32_t RSQ5       : 5;            /*!< [29..25] 6th conversion in regular sequence */
    } RSQ2_b;
  } ;
  
  union {
    __IOM uint32_t ISQ;                         /*!< (@ 0x00000038) Inserted sequence register */
    
    struct {
      __IOM uint32_t ISQ0       : 5;            /*!< [4..0] 1st conversion in inserted sequence */
      __IOM uint32_t ISQ1       : 5;            /*!< [9..5] 2nd conversion in inserted sequence */
      __IOM uint32_t ISQ2       : 5;            /*!< [14..10] 3rd conversion in inserted sequence */
      __IOM uint32_t ISQ3       : 5;            /*!< [19..15] 4th conversion in inserted sequence */
      __IOM uint32_t IL         : 2;            /*!< [21..20] Inserted channel group length */
    } ISQ_b;
  } ;
  
  union {
    __IM  uint32_t IDATA0;                      /*!< (@ 0x0000003C) Inserted data register 0 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA0_b;
  } ;
  
  union {
    __IM  uint32_t IDATA1;                      /*!< (@ 0x00000040) Inserted data register 1 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA1_b;
  } ;
  
  union {
    __IM  uint32_t IDATA2;                      /*!< (@ 0x00000044) Inserted data register 2 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA2_b;
  } ;
  
  union {
    __IM  uint32_t IDATA3;                      /*!< (@ 0x00000048) Inserted data register 3 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA3_b;
  } ;
  
  union {
    __IM  uint32_t RDATA;                       /*!< (@ 0x0000004C) regular data register */
    
    struct {
      __IM  uint32_t RDATA      : 16;           /*!< [15..0] Regular channel data */
    } RDATA_b;
  } ;
  __IM  uint32_t  RESERVED[12];
  
  union {
    __IM  uint32_t OVSAMPCTL;                   /*!< (@ 0x00000080) Oversample control register */
    
    struct {
      __IM  uint32_t OVSEN      : 1;            /*!< [0..0] Oversampling Enable */
      __IM  uint32_t            : 1;
      __IM  uint32_t OVSR       : 3;            /*!< [4..2] Oversampling ratio */
      __IM  uint32_t OVSS       : 4;            /*!< [8..5] Oversampling shift */
      __IM  uint32_t TOVS       : 1;            /*!< [9..9] Triggered Oversampling */
    } OVSAMPCTL_b;
  } ;
} ADC1_Type;                                    /*!< Size = 132 (0x84) */



/* =========================================================================================================================== */
/* ================                                           ADC2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to digital converter (ADC2)
  */

typedef struct {                                /*!< (@ 0x40012200) ADC2 Structure */
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000000) status register */
    
    struct {
      __IOM uint32_t WDE        : 1;            /*!< [0..0] Analog watchdog event flag */
      __IOM uint32_t EOC        : 1;            /*!< [1..1] End of group conversion flag */
      __IOM uint32_t EOIC       : 1;            /*!< [2..2] End of inserted group conversion flag */
      __IOM uint32_t STIC       : 1;            /*!< [3..3] Start flag of inserted channel group */
      __IOM uint32_t STRC       : 1;            /*!< [4..4] Start flag of regular channel group */
      __IOM uint32_t ROVF       : 1;            /*!< [5..5] Regular data register overflow */
    } STAT_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x00000004) control register 0 */
    
    struct {
      __IOM uint32_t WDCHSEL    : 5;            /*!< [4..0] Analog watchdog channel select */
      __IOM uint32_t EOCIE      : 1;            /*!< [5..5] Interrupt enable for EOC */
      __IOM uint32_t WDEIE      : 1;            /*!< [6..6] Analog watchdog WDE */
      __IOM uint32_t EOICIE     : 1;            /*!< [7..7] Interrupt enable for EOIC */
      __IOM uint32_t SM         : 1;            /*!< [8..8] Scan mode */
      __IOM uint32_t WDSC       : 1;            /*!< [9..9] When in scan mode, analog watchdog is effective on a single channel */
      __IOM uint32_t ICA        : 1;            /*!< [10..10] Inserted channel group convert automatically */
      __IOM uint32_t DISRC      : 1;            /*!< [11..11] Discontinuous mode on regular channels */
      __IOM uint32_t DISIC      : 1;            /*!< [12..12] Discontinuous mode on inserted channels */
      __IOM uint32_t DISNUM     : 3;            /*!< [15..13] Number of conversions in discontinuous mode */
      __IM  uint32_t            : 6;
      __IOM uint32_t IWDEN      : 1;            /*!< [22..22] Inserted channel analog watchdog enable */
      __IOM uint32_t RWDEN      : 1;            /*!< [23..23] Regular channel analog watchdog enable */
      __IOM uint32_t DRES       : 2;            /*!< [25..24] ADC data resolution */
      __IOM uint32_t ROVFIE     : 1;            /*!< [26..26] Interrupt enable for ROVF */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000008) control register 1 */
    
    struct {
      __IOM uint32_t ADCON      : 1;            /*!< [0..0] ADC on */
      __IOM uint32_t CTN        : 1;            /*!< [1..1] Continuous mode */
      __IOM uint32_t CLB        : 1;            /*!< [2..2] ADC calibration */
      __IOM uint32_t RSTCLB     : 1;            /*!< [3..3] Reset calibration */
      __IM  uint32_t            : 4;
      __IOM uint32_t DMA        : 1;            /*!< [8..8] DMA request enable */
      __IOM uint32_t DDM        : 1;            /*!< [9..9] DMA disable mode */
      __IOM uint32_t EOCM       : 1;            /*!< [10..10] End of conversion mode */
      __IOM uint32_t DAL        : 1;            /*!< [11..11] Data alignment */
      __IM  uint32_t            : 4;
      __IOM uint32_t ETSIC      : 4;            /*!< [19..16] External trigger select for inserted channel */
      __IOM uint32_t ETMIC      : 2;            /*!< [21..20] External trigger mode for inserted channel */
      __IOM uint32_t SWICST     : 1;            /*!< [22..22] Software start on inserted channel */
      __IM  uint32_t            : 1;
      __IOM uint32_t ETSRC      : 4;            /*!< [27..24] External trigger select for regular channel */
      __IOM uint32_t ETMRC      : 2;            /*!< [29..28] External trigger mode for regular channel */
      __IOM uint32_t SWRCST     : 1;            /*!< [30..30] Software start on regular channel */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t SAMPT0;                      /*!< (@ 0x0000000C) Sample time register 0 */
    
    struct {
      __IOM uint32_t SPT10      : 3;            /*!< [2..0] Channel 10 sample time selection */
      __IOM uint32_t SPT11      : 3;            /*!< [5..3] Channel 11 sample time selection */
      __IOM uint32_t SPT12      : 3;            /*!< [8..6] Channel 12 sample time selection */
      __IOM uint32_t SPT13      : 3;            /*!< [11..9] Channel 13 sample time selection */
      __IOM uint32_t SPT14      : 3;            /*!< [14..12] Channel 14 sample time selection */
      __IOM uint32_t SPT15      : 3;            /*!< [17..15] Channel 15 sample time selection */
      __IOM uint32_t SPT16      : 3;            /*!< [20..18] Channel 16 sample time selection */
      __IOM uint32_t SPT17      : 3;            /*!< [23..21] Channel 17 sample time selection */
      __IOM uint32_t SPT18      : 3;            /*!< [26..24] Channel 18 sample time selection */
    } SAMPT0_b;
  } ;
  
  union {
    __IOM uint32_t SAMPT1;                      /*!< (@ 0x00000010) Sample time register 1 */
    
    struct {
      __IOM uint32_t SPT0       : 3;            /*!< [2..0] Channel 0 sample time selection */
      __IOM uint32_t SPT1       : 3;            /*!< [5..3] Channel 1 sample time selection */
      __IOM uint32_t SPT2       : 3;            /*!< [8..6] Channel 2 sample time selection */
      __IOM uint32_t SPT3       : 3;            /*!< [11..9] Channel 3 sample time selection */
      __IOM uint32_t SPT4       : 3;            /*!< [14..12] Channel 4 sample time selection */
      __IOM uint32_t SPT5       : 3;            /*!< [17..15] Channel 5 sample time selection */
      __IOM uint32_t SPT6       : 3;            /*!< [20..18] Channel 6 sample time selection */
      __IOM uint32_t SPT7       : 3;            /*!< [23..21] Channel 7 sample time selection */
      __IOM uint32_t SPT8       : 3;            /*!< [26..24] Channel 8 sample time selection */
      __IOM uint32_t SPT9       : 3;            /*!< [29..27] Channel 9 sample time selection */
    } SAMPT1_b;
  } ;
  
  union {
    __IOM uint32_t IOFF0;                       /*!< (@ 0x00000014) Inserted channel data offset register 0 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 0 */
    } IOFF0_b;
  } ;
  
  union {
    __IOM uint32_t IOFF1;                       /*!< (@ 0x00000018) Inserted channel data offset register 1 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 1 */
    } IOFF1_b;
  } ;
  
  union {
    __IOM uint32_t IOFF2;                       /*!< (@ 0x0000001C) Inserted channel data offset register 2 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 2 */
    } IOFF2_b;
  } ;
  
  union {
    __IOM uint32_t IOFF3;                       /*!< (@ 0x00000020) Inserted channel data offset register 3 */
    
    struct {
      __IOM uint32_t IOFF       : 12;           /*!< [11..0] Data offset for inserted channel 3 */
    } IOFF3_b;
  } ;
  
  union {
    __IOM uint32_t WDHT;                        /*!< (@ 0x00000024) watchdog higher threshold register */
    
    struct {
      __IOM uint32_t WDHT       : 12;           /*!< [11..0] Analog watchdog higher threshold */
    } WDHT_b;
  } ;
  
  union {
    __IOM uint32_t WDLT;                        /*!< (@ 0x00000028) watchdog lower threshold register */
    
    struct {
      __IOM uint32_t WDLT       : 12;           /*!< [11..0] Analog watchdog lower threshold */
    } WDLT_b;
  } ;
  
  union {
    __IOM uint32_t RSQ0;                        /*!< (@ 0x0000002C) regular sequence register 0 */
    
    struct {
      __IOM uint32_t RSQ12      : 5;            /*!< [4..0] 13th conversion in regular sequence */
      __IOM uint32_t RSQ13      : 5;            /*!< [9..5] 14th conversion in regular sequence */
      __IOM uint32_t RSQ14      : 5;            /*!< [14..10] 15th conversion in regular sequence */
      __IOM uint32_t RSQ15      : 5;            /*!< [19..15] 16th conversion in regular sequence */
      __IOM uint32_t RL         : 4;            /*!< [23..20] Regular channel group length */
    } RSQ0_b;
  } ;
  
  union {
    __IOM uint32_t RSQ1;                        /*!< (@ 0x00000030) regular sequence register 1 */
    
    struct {
      __IOM uint32_t RSQ6       : 5;            /*!< [4..0] 7th conversion in regular sequence */
      __IOM uint32_t RSQ7       : 5;            /*!< [9..5] 8th conversion in regular sequence */
      __IOM uint32_t RSQ8       : 5;            /*!< [14..10] 9th conversion in regular sequence */
      __IOM uint32_t RSQ9       : 5;            /*!< [19..15] 10th conversion in regular sequence */
      __IOM uint32_t RSQ10      : 5;            /*!< [24..20] 11th conversion in regular sequence */
      __IOM uint32_t RSQ11      : 5;            /*!< [29..25] 12th conversion in regular sequence */
    } RSQ1_b;
  } ;
  
  union {
    __IOM uint32_t RSQ2;                        /*!< (@ 0x00000034) regular sequence register 2 */
    
    struct {
      __IOM uint32_t RSQ0       : 5;            /*!< [4..0] 1st conversion in regular sequence */
      __IOM uint32_t RSQ1       : 5;            /*!< [9..5] 2nd conversion in regular sequence */
      __IOM uint32_t RSQ2       : 5;            /*!< [14..10] 3rd conversion in regular sequence */
      __IOM uint32_t RSQ3       : 5;            /*!< [19..15] 4th conversion in regular sequence */
      __IOM uint32_t RSQ4       : 5;            /*!< [24..20] 5th conversion in regular sequence */
      __IOM uint32_t RSQ5       : 5;            /*!< [29..25] 6th conversion in regular sequence */
    } RSQ2_b;
  } ;
  
  union {
    __IOM uint32_t ISQ;                         /*!< (@ 0x00000038) Inserted sequence register */
    
    struct {
      __IOM uint32_t ISQ0       : 5;            /*!< [4..0] 1st conversion in inserted sequence */
      __IOM uint32_t ISQ1       : 5;            /*!< [9..5] 2nd conversion in inserted sequence */
      __IOM uint32_t ISQ2       : 5;            /*!< [14..10] 3rd conversion in inserted sequence */
      __IOM uint32_t ISQ3       : 5;            /*!< [19..15] 4th conversion in inserted sequence */
      __IOM uint32_t IL         : 2;            /*!< [21..20] Inserted channel group length */
    } ISQ_b;
  } ;
  
  union {
    __IM  uint32_t IDATA0;                      /*!< (@ 0x0000003C) Inserted data register 0 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA0_b;
  } ;
  
  union {
    __IM  uint32_t IDATA1;                      /*!< (@ 0x00000040) Inserted data register 1 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA1_b;
  } ;
  
  union {
    __IM  uint32_t IDATA2;                      /*!< (@ 0x00000044) Inserted data register 2 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA2_b;
  } ;
  
  union {
    __IM  uint32_t IDATA3;                      /*!< (@ 0x00000048) Inserted data register 3 */
    
    struct {
      __IM  uint32_t IDATAn     : 16;           /*!< [15..0] Inserted number n conversion data */
    } IDATA3_b;
  } ;
  
  union {
    __IM  uint32_t RDATA;                       /*!< (@ 0x0000004C) regular data register */
    
    struct {
      __IM  uint32_t RDATA      : 16;           /*!< [15..0] Regular channel data */
    } RDATA_b;
  } ;
  __IM  uint32_t  RESERVED[12];
  
  union {
    __IM  uint32_t OVSAMPCTL;                   /*!< (@ 0x00000080) Oversample control register */
    
    struct {
      __IM  uint32_t OVSEN      : 1;            /*!< [0..0] Oversampling Enable */
      __IM  uint32_t            : 1;
      __IM  uint32_t OVSR       : 3;            /*!< [4..2] Oversampling ratio */
      __IM  uint32_t OVSS       : 4;            /*!< [8..5] Oversampling shift */
      __IM  uint32_t TOVS       : 1;            /*!< [9..9] Triggered Oversampling */
    } OVSAMPCTL_b;
  } ;
} ADC2_Type;                                    /*!< Size = 132 (0x84) */



/* =========================================================================================================================== */
/* ================                                        ADC_Common                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief common ADC register (ADC_Common)
  */

typedef struct {                                /*!< (@ 0x40012300) ADC_Common Structure */
  
  union {
    __IM  uint32_t SSTAT;                       /*!< (@ 0x00000000) summary status register */
    
    struct {
      __IM  uint32_t WDE0       : 1;            /*!< [0..0] This bit equals to the WDE bit of ADC0 */
      __IM  uint32_t EOC0       : 1;            /*!< [1..1] This bit equals to the EOC bit of ADC0 */
      __IM  uint32_t EOIC0      : 1;            /*!< [2..2] This bit equals to the EOIC bit of ADC0 */
      __IM  uint32_t STIC0      : 1;            /*!< [3..3] This bit equals to the STIC bit of ADC0 */
      __IM  uint32_t STRC0      : 1;            /*!< [4..4] This bit equals to the STRC bit of ADC0 */
      __IM  uint32_t ROVF0      : 1;            /*!< [5..5] This bit equals to the ROVF bit of ADC0 */
      __IM  uint32_t            : 2;
      __IM  uint32_t WDE1       : 1;            /*!< [8..8] This bit equals to the WDE bit of ADC1 */
      __IM  uint32_t EOC1       : 1;            /*!< [9..9] This bit equals to the EOC bit of ADC1 */
      __IM  uint32_t EOIC1      : 1;            /*!< [10..10] This bit equals to the EOIC bit of ADC1 */
      __IM  uint32_t STIC1      : 1;            /*!< [11..11] This bit equals to the STIC bit of ADC1 */
      __IM  uint32_t STRC1      : 1;            /*!< [12..12] This bit equals to the STRC bit of ADC1 */
      __IM  uint32_t ROVF1      : 1;            /*!< [13..13] This bit equals to the ROVF bit of ADC1 */
      __IM  uint32_t            : 2;
      __IM  uint32_t WDE2       : 1;            /*!< [16..16] This bit equals to the WDE bit of ADC2 */
      __IM  uint32_t EOC2       : 1;            /*!< [17..17] This bit equals to the EOC bit of ADC2 */
      __IM  uint32_t EOIC2      : 1;            /*!< [18..18] This bit equals to the EOIC bit of ADC2 */
      __IM  uint32_t STIC2      : 1;            /*!< [19..19] This bit equals to the STIC bit of ADC2 */
      __IM  uint32_t STRC2      : 1;            /*!< [20..20] This bit equals to the STRC bit of ADC2 */
      __IM  uint32_t ROVF2      : 1;            /*!< [21..21] This bit equals to the ROVF bit of ADC2 */
    } SSTAT_b;
  } ;
  
  union {
    __IOM uint32_t SYNCCTL;                     /*!< (@ 0x00000004) sync control register */
    
    struct {
      __IOM uint32_t SYNCM      : 5;            /*!< [4..0] ADC sync mode */
      __IM  uint32_t            : 3;
      __IOM uint32_t SYNCDLY    : 4;            /*!< [11..8] ADC sync delay */
      __IM  uint32_t            : 1;
      __IOM uint32_t SYNCDDM    : 1;            /*!< [13..13] ADC sync DMA disable mode */
      __IOM uint32_t SYNCDMA    : 2;            /*!< [15..14] ADC sync DMA mode selection */
      __IOM uint32_t ADCCK      : 3;            /*!< [18..16] ADC clock */
      __IM  uint32_t            : 3;
      __IOM uint32_t VBATEN     : 1;            /*!< [22..22] Channel 18 (1/4 voltate of external battery) enable of ADC0 */
      __IOM uint32_t TSVREN     : 1;            /*!< [23..23] Channel 16 (temperature sensor) and 17 (internal reference voltage) enable of ADC0 */
    } SYNCCTL_b;
  } ;
  
  union {
    __IM  uint32_t SYNCDATA;                    /*!< (@ 0x00000008) Sync regular data register */
    
    struct {
      __IM  uint32_t SYNCDATA1  : 16;           /*!< [15..0] Regular data1 in ADC sync mode */
      __IM  uint32_t SYNCDATA2  : 16;           /*!< [31..16] Regular data2 in ADC sync mode */
    } SYNCDATA_b;
  } ;
} ADC_Common_Type;                              /*!< Size = 12 (0xc) */



/* =========================================================================================================================== */
/* ================                                           CAN0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Controller area network (CAN0)
  */

typedef struct {                                /*!< (@ 0x40006400) CAN0 Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) Control register */
    
    struct {
      __IOM uint32_t IWMOD      : 1;            /*!< [0..0] Initial working mode */
      __IOM uint32_t SLPWMOD    : 1;            /*!< [1..1] Sleep working mode */
      __IOM uint32_t TFO        : 1;            /*!< [2..2] Transmit FIFO order */
      __IOM uint32_t RFOD       : 1;            /*!< [3..3] Receive FIFO overwrite disable */
      __IOM uint32_t ARD        : 1;            /*!< [4..4] Automatic retransmission disable */
      __IOM uint32_t AWU        : 1;            /*!< [5..5] Automatic wakeup */
      __IOM uint32_t ABOR       : 1;            /*!< [6..6] Automatic bus-off recovery */
      __IOM uint32_t TTC        : 1;            /*!< [7..7] Time-triggered communication */
      __IM  uint32_t            : 7;
      __IOM uint32_t SWRST      : 1;            /*!< [15..15] Software reset */
      __IOM uint32_t DFZ        : 1;            /*!< [16..16] Debug freeze */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000004) Status register */
    
    struct {
      __IM  uint32_t IWS        : 1;            /*!< [0..0] Initial working state */
      __IM  uint32_t SLPWS      : 1;            /*!< [1..1] Sleep working state */
      __IOM uint32_t ERRIF      : 1;            /*!< [2..2] Error interrupt flag */
      __IOM uint32_t WUIF       : 1;            /*!< [3..3] Status change interrupt flag of wakeup from sleep working mode */
      __IOM uint32_t SLPIF      : 1;            /*!< [4..4] Status change interrupt flag of sleep working mode entering */
      __IM  uint32_t            : 3;
      __IM  uint32_t TS         : 1;            /*!< [8..8] Transmitting state */
      __IM  uint32_t RS         : 1;            /*!< [9..9] Receiving state */
      __IM  uint32_t LASTRX     : 1;            /*!< [10..10] Last sample value of RX pin */
      __IM  uint32_t RXL        : 1;            /*!< [11..11] RX level */
    } STAT_b;
  } ;
  
  union {
    __IOM uint32_t TSTAT;                       /*!< (@ 0x00000008) Transmit status register */
    
    struct {
      __IOM uint32_t MTF0       : 1;            /*!< [0..0] Mailbox 0 transmit finished */
      __IOM uint32_t MTFNERR0   : 1;            /*!< [1..1] Mailbox 0 transmit finished and no error */
      __IOM uint32_t MAL0       : 1;            /*!< [2..2] Mailbox 0 arbitration lost */
      __IOM uint32_t MTE0       : 1;            /*!< [3..3] Mailbox 0 transmit error */
      __IM  uint32_t            : 3;
      __IOM uint32_t MST0       : 1;            /*!< [7..7] Mailbox 0 stop transmitting */
      __IOM uint32_t MTF1       : 1;            /*!< [8..8] Mailbox 1 transmit finished */
      __IOM uint32_t MTFNERR1   : 1;            /*!< [9..9] Mailbox 1 transmit finished and no error */
      __IOM uint32_t MAL1       : 1;            /*!< [10..10] Mailbox 1 arbitration lost */
      __IOM uint32_t MTE1       : 1;            /*!< [11..11] Mailbox 1 transmit error */
      __IM  uint32_t            : 3;
      __IOM uint32_t MST1       : 1;            /*!< [15..15] Mailbox 1 stop transmitting */
      __IOM uint32_t MTF2       : 1;            /*!< [16..16] Mailbox 2 transmit finished */
      __IOM uint32_t MTFNERR2   : 1;            /*!< [17..17] Mailbox 2 transmit finished and no error */
      __IOM uint32_t MAL2       : 1;            /*!< [18..18] Mailbox 2 arbitration lost */
      __IOM uint32_t MTE2       : 1;            /*!< [19..19] Mailbox 2 transmit error */
      __IM  uint32_t            : 3;
      __IOM uint32_t MST2       : 1;            /*!< [23..23] Mailbox 2 stop transmitting */
      __IM  uint32_t NUM        : 2;            /*!< [25..24] number of the transmit FIFO mailbox in which the frame will be transmitted if at least one mailbox is empty */
      __IM  uint32_t TME0       : 1;            /*!< [26..26] Transmit mailbox 0 empty */
      __IM  uint32_t TME1       : 1;            /*!< [27..27] Transmit mailbox 1 empty */
      __IM  uint32_t TME2       : 1;            /*!< [28..28] Transmit mailbox 2 empty */
      __IM  uint32_t TMLS0      : 1;            /*!< [29..29] Transmit mailbox 0 last sending in transmit FIFO */
      __IM  uint32_t TMLS1      : 1;            /*!< [30..30] Transmit mailbox 1 last sending in transmit FIFO */
      __IM  uint32_t TMLS2      : 1;            /*!< [31..31] Transmit mailbox 2 last sending in transmit FIFO */
    } TSTAT_b;
  } ;
  
  union {
    __IOM uint32_t RFIFO0;                      /*!< (@ 0x0000000C) Receive message FIFO0 register */
    
    struct {
      __IM  uint32_t RFL0       : 2;            /*!< [1..0] Receive FIFO0 length */
      __IM  uint32_t            : 1;
      __IOM uint32_t RFF0       : 1;            /*!< [3..3] Receive FIFO0 full */
      __IOM uint32_t RFO0       : 1;            /*!< [4..4] Receive FIFO0 overfull */
      __IOM uint32_t RFD0       : 1;            /*!< [5..5] Receive FIFO0 dequeue */
    } RFIFO0_b;
  } ;
  
  union {
    __IOM uint32_t RFIFO1;                      /*!< (@ 0x00000010) Receive message FIFO1 register */
    
    struct {
      __IM  uint32_t RFL1       : 2;            /*!< [1..0] Receive FIFO1 length */
      __IM  uint32_t            : 1;
      __IOM uint32_t RFF1       : 1;            /*!< [3..3] Receive FIFO1 full */
      __IOM uint32_t RFO1       : 1;            /*!< [4..4] Receive FIFO1 overfull */
      __IOM uint32_t RFD1       : 1;            /*!< [5..5] Receive FIFO1 dequeue */
    } RFIFO1_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000014) Interrupt enable register */
    
    struct {
      __IOM uint32_t TMEIE      : 1;            /*!< [0..0] Transmit mailbox empty interrupt enable */
      __IOM uint32_t RFNEIE0    : 1;            /*!< [1..1] Receive FIFO0 not empty interrupt enable */
      __IOM uint32_t RFFIE0     : 1;            /*!< [2..2] Receive FIFO0 full interrupt enable */
      __IOM uint32_t RFOIE0     : 1;            /*!< [3..3] Receive FIFO0 overfull interrupt enable */
      __IOM uint32_t RFNEIE1    : 1;            /*!< [4..4] Receive FIFO1 not empty interrupt enable */
      __IOM uint32_t RFFIE1     : 1;            /*!< [5..5] Receive FIFO1 full interrupt enable */
      __IOM uint32_t RFOIE1     : 1;            /*!< [6..6] Receive FIFO1 overfull interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t WERRIE     : 1;            /*!< [8..8] Warning error interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [9..9] Passive error interrupt enable */
      __IOM uint32_t BOIE       : 1;            /*!< [10..10] Bus-off interrupt enable */
      __IOM uint32_t ERRNIE     : 1;            /*!< [11..11] Error number interrupt enable */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERRIE      : 1;            /*!< [15..15] Error interrupt enable */
      __IOM uint32_t WIE        : 1;            /*!< [16..16] Wakeup interrupt enable */
      __IOM uint32_t SLPWIE     : 1;            /*!< [17..17] Sleep working interrupt enable */
    } INTEN_b;
  } ;
  
  union {
    __IOM uint32_t ERR;                         /*!< (@ 0x00000018) Error register */
    
    struct {
      __IM  uint32_t WERR       : 1;            /*!< [0..0] Warning error */
      __IM  uint32_t PERR       : 1;            /*!< [1..1] Passive error */
      __IM  uint32_t BOERR      : 1;            /*!< [2..2] Bus-off error */
      __IM  uint32_t            : 1;
      __IOM uint32_t ERRN       : 3;            /*!< [6..4] Error number */
      __IM  uint32_t            : 9;
      __IM  uint32_t TECNT      : 8;            /*!< [23..16] Transmit Error Count defined by the CAN standard */
      __IM  uint32_t RECNT      : 8;            /*!< [31..24] Receive Error Count defined by the CAN standard */
    } ERR_b;
  } ;
  
  union {
    __IOM uint32_t BT;                          /*!< (@ 0x0000001C) Bit timing register */
    
    struct {
      __IOM uint32_t BUADPSC    : 10;           /*!< [9..0] Baud rate prescaler */
      __IM  uint32_t            : 6;
      __IOM uint32_t BS1        : 4;            /*!< [19..16] Bit segment 1 */
      __IOM uint32_t BS2        : 3;            /*!< [22..20] Bit segment 2 */
      __IM  uint32_t            : 1;
      __IOM uint32_t SJW        : 2;            /*!< [25..24] Resynchronization jump width */
      __IM  uint32_t            : 4;
      __IOM uint32_t LCMOD      : 1;            /*!< [30..30] Loopback communication mode */
      __IOM uint32_t SCMOD      : 1;            /*!< [31..31] Silent communication mode */
    } BT_b;
  } ;
  __IM  uint32_t  RESERVED[88];
  
  union {
    __IOM uint32_t TMI0;                        /*!< (@ 0x00000180) Transmit mailbox identifier register 0 */
    
    struct {
      __IOM uint32_t TEN        : 1;            /*!< [0..0] Transmit enable */
      __IOM uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IOM uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IOM uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IOM uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } TMI0_b;
  } ;
  
  union {
    __IOM uint32_t TMP0;                        /*!< (@ 0x00000184) Transmit mailbox property register 0 */
    
    struct {
      __IOM uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IOM uint32_t TSEN       : 1;            /*!< [8..8] Time stamp enable */
      __IM  uint32_t            : 7;
      __IOM uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } TMP0_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA00;                    /*!< (@ 0x00000188) Transmit mailbox data0 register */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } TMDATA00_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA10;                    /*!< (@ 0x0000018C) Transmit mailbox data1 register */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } TMDATA10_b;
  } ;
  
  union {
    __IOM uint32_t TMI1;                        /*!< (@ 0x00000190) Transmit mailbox identifier register 1 */
    
    struct {
      __IOM uint32_t TEN        : 1;            /*!< [0..0] Transmit enable */
      __IOM uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IOM uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IOM uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IOM uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } TMI1_b;
  } ;
  
  union {
    __IOM uint32_t TMP1;                        /*!< (@ 0x00000194) Transmit mailbox property register 1 */
    
    struct {
      __IOM uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IOM uint32_t TSEN       : 1;            /*!< [8..8] Time stamp enable */
      __IM  uint32_t            : 7;
      __IOM uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } TMP1_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA01;                    /*!< (@ 0x00000198) Transmit mailbox data0 register */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } TMDATA01_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA11;                    /*!< (@ 0x0000019C) Transmit mailbox data1 register */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } TMDATA11_b;
  } ;
  
  union {
    __IOM uint32_t TMI2;                        /*!< (@ 0x000001A0) Transmit mailbox identifier register 2 */
    
    struct {
      __IOM uint32_t TEN        : 1;            /*!< [0..0] Transmit enable */
      __IOM uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IOM uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IOM uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IOM uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } TMI2_b;
  } ;
  
  union {
    __IOM uint32_t TMP2;                        /*!< (@ 0x000001A4) Transmit mailbox property register 2 */
    
    struct {
      __IOM uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IOM uint32_t TSEN       : 1;            /*!< [8..8] Time stamp enable */
      __IM  uint32_t            : 7;
      __IOM uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } TMP2_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA02;                    /*!< (@ 0x000001A8) Transmit mailbox data0 register */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } TMDATA02_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA12;                    /*!< (@ 0x000001AC) Transmit mailbox data1 register */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } TMDATA12_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMI0;                    /*!< (@ 0x000001B0) Receive FIFO mailbox identifier register */
    
    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IM  uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IM  uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IM  uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } RFIFOMI0_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMP0;                    /*!< (@ 0x000001B4) Receive FIFO0 mailbox property register */
    
    struct {
      __IM  uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IM  uint32_t FI         : 8;            /*!< [15..8] Filtering index */
      __IM  uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } RFIFOMP0_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMDATA00;                /*!< (@ 0x000001B8) Receive FIFO0 mailbox data0 register */
    
    struct {
      __IM  uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IM  uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IM  uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IM  uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } RFIFOMDATA00_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMDATA10;                /*!< (@ 0x000001BC) Receive FIFO0 mailbox data1 register */
    
    struct {
      __IM  uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IM  uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IM  uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IM  uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } RFIFOMDATA10_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMI1;                    /*!< (@ 0x000001C0) Receive FIFO1 mailbox identifier register */
    
    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IM  uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IM  uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IM  uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } RFIFOMI1_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMP1;                    /*!< (@ 0x000001C4) Receive FIFO1 mailbox property register */
    
    struct {
      __IM  uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IM  uint32_t FI         : 8;            /*!< [15..8] Filtering index */
      __IM  uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } RFIFOMP1_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMDATA01;                /*!< (@ 0x000001C8) Receive FIFO1 mailbox data0 register */
    
    struct {
      __IM  uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IM  uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IM  uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IM  uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } RFIFOMDATA01_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMDATA11;                /*!< (@ 0x000001CC) Receive FIFO1 mailbox data1 register */
    
    struct {
      __IM  uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IM  uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IM  uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IM  uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } RFIFOMDATA11_b;
  } ;
  __IM  uint32_t  RESERVED1[12];
  
  union {
    __IOM uint32_t FCTL;                        /*!< (@ 0x00000200) Filter control register */
    
    struct {
      __IOM uint32_t FLD        : 1;            /*!< [0..0] Filter lock disable */
      __IM  uint32_t            : 7;
      __IOM uint32_t HBC1F      : 6;            /*!< [13..8] Header bank of CAN1 filter */
    } FCTL_b;
  } ;
  __IOM uint32_t  FMCFG;                        /*!< (@ 0x00000204) Filter mode configuration register */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  FSCFG;                        /*!< (@ 0x0000020C) Filter scale configuration register */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  FAFIFO;                       /*!< (@ 0x00000214) Filter associated FIFO register */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  FW;                           /*!< (@ 0x0000021C) Filter working register */
  __IM  uint32_t  RESERVED5[8];
  __IOM uint32_t  F0DATA0;                      /*!< (@ 0x00000240) Filter 0 data 0 register */
  __IOM uint32_t  F0DATA1;                      /*!< (@ 0x00000244) Filter 0 data 1 register */
  __IOM uint32_t  F1DATA0;                      /*!< (@ 0x00000248) Filter 1 data 0 register */
  __IOM uint32_t  F1DATA1;                      /*!< (@ 0x0000024C) Filter 1 data 1 register */
  __IOM uint32_t  F2DATA0;                      /*!< (@ 0x00000250) Filter 2 data 0 register */
  __IOM uint32_t  F2DATA1;                      /*!< (@ 0x00000254) Filter 2 data 1 register */
  __IOM uint32_t  F3DATA0;                      /*!< (@ 0x00000258) Filter 3 data 0 register */
  __IOM uint32_t  F3DATA1;                      /*!< (@ 0x0000025C) Filter 3 data 1 register */
  __IOM uint32_t  F4DATA0;                      /*!< (@ 0x00000260) Filter 4 data 0 register */
  __IOM uint32_t  F4DATA1;                      /*!< (@ 0x00000264) Filter 4 data 1 register */
  __IOM uint32_t  F5DATA0;                      /*!< (@ 0x00000268) Filter 5 data 0 register */
  __IOM uint32_t  F5DATA1;                      /*!< (@ 0x0000026C) Filter 5 data 1 register */
  __IOM uint32_t  F6DATA0;                      /*!< (@ 0x00000270) Filter 6 data 0 register */
  __IOM uint32_t  F6DATA1;                      /*!< (@ 0x00000274) Filter 6 data 1 register */
  __IOM uint32_t  F7DATA0;                      /*!< (@ 0x00000278) Filter 7 data 0 register */
  __IOM uint32_t  F7DATA1;                      /*!< (@ 0x0000027C) Filter 7 data 1 register */
  __IOM uint32_t  F8DATA0;                      /*!< (@ 0x00000280) Filter 8 data 0 register */
  __IOM uint32_t  F8DATA1;                      /*!< (@ 0x00000284) Filter 8 data 1 register */
  __IOM uint32_t  F9DATA0;                      /*!< (@ 0x00000288) Filter 9 data 0 register */
  __IOM uint32_t  F9DATA1;                      /*!< (@ 0x0000028C) Filter 9 data 1 register */
  __IOM uint32_t  F10DATA0;                     /*!< (@ 0x00000290) Filter 10 data 0 register */
  __IOM uint32_t  F10DATA1;                     /*!< (@ 0x00000294) Filter 10 data 1 register */
  __IOM uint32_t  F11DATA0;                     /*!< (@ 0x00000298) Filter 11 data 0 register */
  __IOM uint32_t  F11DATA1;                     /*!< (@ 0x0000029C) Filter 11 data 1 register */
  __IOM uint32_t  F12DATA0;                     /*!< (@ 0x000002A0) Filter 12 data 0 register */
  __IOM uint32_t  F12DATA1;                     /*!< (@ 0x000002A4) Filter 12 data 1 register */
  __IOM uint32_t  F13DATA0;                     /*!< (@ 0x000002A8) Filter 13 data 0 register */
  __IOM uint32_t  F13DATA1;                     /*!< (@ 0x000002AC) Filter 13 data 1 register */
  __IOM uint32_t  F14DATA0;                     /*!< (@ 0x000002B0) Filter 14 data 0 register */
  __IOM uint32_t  F14DATA1;                     /*!< (@ 0x000002B4) Filter 14 data 1 register */
  __IOM uint32_t  F15DATA0;                     /*!< (@ 0x000002B8) Filter 15 data 0 register */
  __IOM uint32_t  F15DATA1;                     /*!< (@ 0x000002BC) Filter 15 data 1 register */
  __IOM uint32_t  F16DATA0;                     /*!< (@ 0x000002C0) Filter 16 data 0 register */
  __IOM uint32_t  F16DATA1;                     /*!< (@ 0x000002C4) Filter 16 data 1 register */
  __IOM uint32_t  F17DATA0;                     /*!< (@ 0x000002C8) Filter 17 data 0 register */
  __IOM uint32_t  F17DATA1;                     /*!< (@ 0x000002CC) Filter 17 data 1 register */
  __IOM uint32_t  F18DATA0;                     /*!< (@ 0x000002D0) Filter 18 data 0 register */
  __IOM uint32_t  F18DATA1;                     /*!< (@ 0x000002D4) Filter 18 data 1 register */
  __IOM uint32_t  F19DATA0;                     /*!< (@ 0x000002D8) Filter 19 data 0 register */
  __IOM uint32_t  F19DATA1;                     /*!< (@ 0x000002DC) Filter 19 data 1 register */
  __IOM uint32_t  F20DATA0;                     /*!< (@ 0x000002E0) Filter 20 data 0 register */
  __IOM uint32_t  F20DATA1;                     /*!< (@ 0x000002E4) Filter 20 data 1 register */
  __IOM uint32_t  F21DATA0;                     /*!< (@ 0x000002E8) Filter 21 data 0 register */
  __IOM uint32_t  F21DATA1;                     /*!< (@ 0x000002EC) Filter 21 data 1 register */
  __IOM uint32_t  F22DATA0;                     /*!< (@ 0x000002F0) Filter 22 data 0 register */
  __IOM uint32_t  F22DATA1;                     /*!< (@ 0x000002F4) Filter 22 data 1 register */
  __IOM uint32_t  F23DATA0;                     /*!< (@ 0x000002F8) Filter 23 data 0 register */
  __IOM uint32_t  F23DATA1;                     /*!< (@ 0x000002FC) Filter 23 data 1 register */
  __IOM uint32_t  F24DATA0;                     /*!< (@ 0x00000300) Filter 24 data 0 register */
  __IOM uint32_t  F24DATA1;                     /*!< (@ 0x00000304) Filter 24 data 1 register */
  __IOM uint32_t  F25DATA0;                     /*!< (@ 0x00000308) Filter 25 data 0 register */
  __IOM uint32_t  F25DATA1;                     /*!< (@ 0x0000030C) Filter 25 data 1 register */
  __IOM uint32_t  F26DATA0;                     /*!< (@ 0x00000310) Filter 26 data 0 register */
  __IOM uint32_t  F26DATA1;                     /*!< (@ 0x00000314) Filter 26 data 1 register */
  __IOM uint32_t  F27DATA0;                     /*!< (@ 0x00000318) Filter 27 data 0 register */
  __IOM uint32_t  F27DATA1;                     /*!< (@ 0x0000031C) Filter 27 data 1 register */
} CAN0_Type;                                    /*!< Size = 800 (0x320) */



/* =========================================================================================================================== */
/* ================                                           CAN1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Controller area network (CAN1)
  */

typedef struct {                                /*!< (@ 0x40006800) CAN1 Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) Control register */
    
    struct {
      __IOM uint32_t IWMOD      : 1;            /*!< [0..0] Initial working mode */
      __IOM uint32_t SLPWMOD    : 1;            /*!< [1..1] Sleep working mode */
      __IOM uint32_t TFO        : 1;            /*!< [2..2] Transmit FIFO order */
      __IOM uint32_t RFOD       : 1;            /*!< [3..3] Receive FIFO overwrite disable */
      __IOM uint32_t ARD        : 1;            /*!< [4..4] Automatic retransmission disable */
      __IOM uint32_t AWU        : 1;            /*!< [5..5] Automatic wakeup */
      __IOM uint32_t ABOR       : 1;            /*!< [6..6] Automatic bus-off recovery */
      __IOM uint32_t TTC        : 1;            /*!< [7..7] Time-triggered communication */
      __IM  uint32_t            : 7;
      __IOM uint32_t SWRST      : 1;            /*!< [15..15] Software reset */
      __IOM uint32_t DFZ        : 1;            /*!< [16..16] Debug freeze */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000004) Status register */
    
    struct {
      __IM  uint32_t IWS        : 1;            /*!< [0..0] Initial working state */
      __IM  uint32_t SLPWS      : 1;            /*!< [1..1] Sleep working state */
      __IOM uint32_t ERRIF      : 1;            /*!< [2..2] Error interrupt flag */
      __IOM uint32_t WUIF       : 1;            /*!< [3..3] Status change interrupt flag of wakeup from sleep working mode */
      __IOM uint32_t SLPIF      : 1;            /*!< [4..4] Status change interrupt flag of sleep working mode entering */
      __IM  uint32_t            : 3;
      __IM  uint32_t TS         : 1;            /*!< [8..8] Transmitting state */
      __IM  uint32_t RS         : 1;            /*!< [9..9] Receiving state */
      __IM  uint32_t LASTRX     : 1;            /*!< [10..10] Last sample value of RX pin */
      __IM  uint32_t RXL        : 1;            /*!< [11..11] RX level */
    } STAT_b;
  } ;
  
  union {
    __IOM uint32_t TSTAT;                       /*!< (@ 0x00000008) Transmit status register */
    
    struct {
      __IOM uint32_t MTF0       : 1;            /*!< [0..0] Mailbox 0 transmit finished */
      __IOM uint32_t MTFNERR0   : 1;            /*!< [1..1] Mailbox 0 transmit finished and no error */
      __IOM uint32_t MAL0       : 1;            /*!< [2..2] Mailbox 0 arbitration lost */
      __IOM uint32_t MTE0       : 1;            /*!< [3..3] Mailbox 0 transmit error */
      __IM  uint32_t            : 3;
      __IOM uint32_t MST0       : 1;            /*!< [7..7] Mailbox 0 stop transmitting */
      __IOM uint32_t MTF1       : 1;            /*!< [8..8] Mailbox 1 transmit finished */
      __IOM uint32_t MTFNERR1   : 1;            /*!< [9..9] Mailbox 1 transmit finished and no error */
      __IOM uint32_t MAL1       : 1;            /*!< [10..10] Mailbox 1 arbitration lost */
      __IOM uint32_t MTE1       : 1;            /*!< [11..11] Mailbox 1 transmit error */
      __IM  uint32_t            : 3;
      __IOM uint32_t MST1       : 1;            /*!< [15..15] Mailbox 1 stop transmitting */
      __IOM uint32_t MTF2       : 1;            /*!< [16..16] Mailbox 2 transmit finished */
      __IOM uint32_t MTFNERR2   : 1;            /*!< [17..17] Mailbox 2 transmit finished and no error */
      __IOM uint32_t MAL2       : 1;            /*!< [18..18] Mailbox 2 arbitration lost */
      __IOM uint32_t MTE2       : 1;            /*!< [19..19] Mailbox 2 transmit error */
      __IM  uint32_t            : 3;
      __IOM uint32_t MST2       : 1;            /*!< [23..23] Mailbox 2 stop transmitting */
      __IM  uint32_t NUM        : 2;            /*!< [25..24] number of the transmit FIFO mailbox in which the frame will be transmitted if at least one mailbox is empty */
      __IM  uint32_t TME0       : 1;            /*!< [26..26] Transmit mailbox 0 empty */
      __IM  uint32_t TME1       : 1;            /*!< [27..27] Transmit mailbox 1 empty */
      __IM  uint32_t TME2       : 1;            /*!< [28..28] Transmit mailbox 2 empty */
      __IM  uint32_t TMLS0      : 1;            /*!< [29..29] Transmit mailbox 0 last sending in transmit FIFO */
      __IM  uint32_t TMLS1      : 1;            /*!< [30..30] Transmit mailbox 1 last sending in transmit FIFO */
      __IM  uint32_t TMLS2      : 1;            /*!< [31..31] Transmit mailbox 2 last sending in transmit FIFO */
    } TSTAT_b;
  } ;
  
  union {
    __IOM uint32_t RFIFO0;                      /*!< (@ 0x0000000C) Receive message FIFO0 register */
    
    struct {
      __IM  uint32_t RFL0       : 2;            /*!< [1..0] Receive FIFO0 length */
      __IM  uint32_t            : 1;
      __IOM uint32_t RFF0       : 1;            /*!< [3..3] Receive FIFO0 full */
      __IOM uint32_t RFO0       : 1;            /*!< [4..4] Receive FIFO0 overfull */
      __IOM uint32_t RFD0       : 1;            /*!< [5..5] Receive FIFO0 dequeue */
    } RFIFO0_b;
  } ;
  
  union {
    __IOM uint32_t RFIFO1;                      /*!< (@ 0x00000010) Receive message FIFO1 register */
    
    struct {
      __IM  uint32_t RFL1       : 2;            /*!< [1..0] Receive FIFO1 length */
      __IM  uint32_t            : 1;
      __IOM uint32_t RFF1       : 1;            /*!< [3..3] Receive FIFO1 full */
      __IOM uint32_t RFO1       : 1;            /*!< [4..4] Receive FIFO1 overfull */
      __IOM uint32_t RFD1       : 1;            /*!< [5..5] Receive FIFO1 dequeue */
    } RFIFO1_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000014) Interrupt enable register */
    
    struct {
      __IOM uint32_t TMEIE      : 1;            /*!< [0..0] Transmit mailbox empty interrupt enable */
      __IOM uint32_t RFNEIE0    : 1;            /*!< [1..1] Receive FIFO0 not empty interrupt enable */
      __IOM uint32_t RFFIE0     : 1;            /*!< [2..2] Receive FIFO0 full interrupt enable */
      __IOM uint32_t RFOIE0     : 1;            /*!< [3..3] Receive FIFO0 overfull interrupt enable */
      __IOM uint32_t RFNEIE1    : 1;            /*!< [4..4] Receive FIFO1 not empty interrupt enable */
      __IOM uint32_t RFFIE1     : 1;            /*!< [5..5] Receive FIFO1 full interrupt enable */
      __IOM uint32_t RFOIE1     : 1;            /*!< [6..6] Receive FIFO1 overfull interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t WERRIE     : 1;            /*!< [8..8] Warning error interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [9..9] Passive error interrupt enable */
      __IOM uint32_t BOIE       : 1;            /*!< [10..10] Bus-off interrupt enable */
      __IOM uint32_t ERRNIE     : 1;            /*!< [11..11] Error number interrupt enable */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERRIE      : 1;            /*!< [15..15] Error interrupt enable */
      __IOM uint32_t WIE        : 1;            /*!< [16..16] Wakeup interrupt enable */
      __IOM uint32_t SLPWIE     : 1;            /*!< [17..17] Sleep working interrupt enable */
    } INTEN_b;
  } ;
  
  union {
    __IOM uint32_t ERR;                         /*!< (@ 0x00000018) Error register */
    
    struct {
      __IM  uint32_t WERR       : 1;            /*!< [0..0] Warning error */
      __IM  uint32_t PERR       : 1;            /*!< [1..1] Passive error */
      __IM  uint32_t BOERR      : 1;            /*!< [2..2] Bus-off error */
      __IM  uint32_t            : 1;
      __IOM uint32_t ERRN       : 3;            /*!< [6..4] Error number */
      __IM  uint32_t            : 9;
      __IM  uint32_t TECNT      : 8;            /*!< [23..16] Transmit Error Count defined by the CAN standard */
      __IM  uint32_t RECNT      : 8;            /*!< [31..24] Receive Error Count defined by the CAN standard */
    } ERR_b;
  } ;
  
  union {
    __IOM uint32_t BT;                          /*!< (@ 0x0000001C) Bit timing register */
    
    struct {
      __IOM uint32_t BUADPSC    : 10;           /*!< [9..0] Baud rate prescaler */
      __IM  uint32_t            : 6;
      __IOM uint32_t BS1        : 4;            /*!< [19..16] Bit segment 1 */
      __IOM uint32_t BS2        : 3;            /*!< [22..20] Bit segment 2 */
      __IM  uint32_t            : 1;
      __IOM uint32_t SJW        : 2;            /*!< [25..24] Resynchronization jump width */
      __IM  uint32_t            : 4;
      __IOM uint32_t LCMOD      : 1;            /*!< [30..30] Loopback communication mode */
      __IOM uint32_t SCMOD      : 1;            /*!< [31..31] Silent communication mode */
    } BT_b;
  } ;
  __IM  uint32_t  RESERVED[88];
  
  union {
    __IOM uint32_t TMI0;                        /*!< (@ 0x00000180) Transmit mailbox identifier register 0 */
    
    struct {
      __IOM uint32_t TEN        : 1;            /*!< [0..0] Transmit enable */
      __IOM uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IOM uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IOM uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IOM uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } TMI0_b;
  } ;
  
  union {
    __IOM uint32_t TMP0;                        /*!< (@ 0x00000184) Transmit mailbox property register 0 */
    
    struct {
      __IOM uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IOM uint32_t TSEN       : 1;            /*!< [8..8] Time stamp enable */
      __IM  uint32_t            : 7;
      __IOM uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } TMP0_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA00;                    /*!< (@ 0x00000188) Transmit mailbox data0 register */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } TMDATA00_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA10;                    /*!< (@ 0x0000018C) Transmit mailbox data1 register */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } TMDATA10_b;
  } ;
  
  union {
    __IOM uint32_t TMI1;                        /*!< (@ 0x00000190) Transmit mailbox identifier register 1 */
    
    struct {
      __IOM uint32_t TEN        : 1;            /*!< [0..0] Transmit enable */
      __IOM uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IOM uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IOM uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IOM uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } TMI1_b;
  } ;
  
  union {
    __IOM uint32_t TMP1;                        /*!< (@ 0x00000194) Transmit mailbox property register 1 */
    
    struct {
      __IOM uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IOM uint32_t TSEN       : 1;            /*!< [8..8] Time stamp enable */
      __IM  uint32_t            : 7;
      __IOM uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } TMP1_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA01;                    /*!< (@ 0x00000198) Transmit mailbox data0 register */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } TMDATA01_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA11;                    /*!< (@ 0x0000019C) Transmit mailbox data1 register */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } TMDATA11_b;
  } ;
  
  union {
    __IOM uint32_t TMI2;                        /*!< (@ 0x000001A0) Transmit mailbox identifier register 2 */
    
    struct {
      __IOM uint32_t TEN        : 1;            /*!< [0..0] Transmit enable */
      __IOM uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IOM uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IOM uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IOM uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } TMI2_b;
  } ;
  
  union {
    __IOM uint32_t TMP2;                        /*!< (@ 0x000001A4) Transmit mailbox property register 2 */
    
    struct {
      __IOM uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IOM uint32_t TSEN       : 1;            /*!< [8..8] Time stamp enable */
      __IM  uint32_t            : 7;
      __IOM uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } TMP2_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA02;                    /*!< (@ 0x000001A8) Transmit mailbox data0 register */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } TMDATA02_b;
  } ;
  
  union {
    __IOM uint32_t TMDATA12;                    /*!< (@ 0x000001AC) Transmit mailbox data1 register */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } TMDATA12_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMI0;                    /*!< (@ 0x000001B0) Receive FIFO mailbox identifier register */
    
    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IM  uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IM  uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IM  uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } RFIFOMI0_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMP0;                    /*!< (@ 0x000001B4) Receive FIFO0 mailbox property register */
    
    struct {
      __IM  uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IM  uint32_t FI         : 8;            /*!< [15..8] Filtering index */
      __IM  uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } RFIFOMP0_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMDATA00;                /*!< (@ 0x000001B8) Receive FIFO0 mailbox data0 register */
    
    struct {
      __IM  uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IM  uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IM  uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IM  uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } RFIFOMDATA00_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMDATA10;                /*!< (@ 0x000001BC) Receive FIFO0 mailbox data1 register */
    
    struct {
      __IM  uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IM  uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IM  uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IM  uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } RFIFOMDATA10_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMI1;                    /*!< (@ 0x000001C0) Receive FIFO1 mailbox identifier register */
    
    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t FT         : 1;            /*!< [1..1] Frame type */
      __IM  uint32_t FF         : 1;            /*!< [2..2] Frame format */
      __IM  uint32_t EFID       : 18;           /*!< [20..3] The frame identifier */
      __IM  uint32_t SFID_EFID  : 11;           /*!< [31..21] The frame identifier */
    } RFIFOMI1_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMP1;                    /*!< (@ 0x000001C4) Receive FIFO1 mailbox property register */
    
    struct {
      __IM  uint32_t DLENC      : 4;            /*!< [3..0] Data length code */
      __IM  uint32_t            : 4;
      __IM  uint32_t FI         : 8;            /*!< [15..8] Filtering index */
      __IM  uint32_t TS         : 16;           /*!< [31..16] Time stamp */
    } RFIFOMP1_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMDATA01;                /*!< (@ 0x000001C8) Receive FIFO1 mailbox data0 register */
    
    struct {
      __IM  uint32_t DB0        : 8;            /*!< [7..0] Data byte 0 */
      __IM  uint32_t DB1        : 8;            /*!< [15..8] Data byte 1 */
      __IM  uint32_t DB2        : 8;            /*!< [23..16] Data byte 2 */
      __IM  uint32_t DB3        : 8;            /*!< [31..24] Data byte 3 */
    } RFIFOMDATA01_b;
  } ;
  
  union {
    __IM  uint32_t RFIFOMDATA11;                /*!< (@ 0x000001CC) Receive FIFO1 mailbox data1 register */
    
    struct {
      __IM  uint32_t DB4        : 8;            /*!< [7..0] Data byte 4 */
      __IM  uint32_t DB5        : 8;            /*!< [15..8] Data byte 5 */
      __IM  uint32_t DB6        : 8;            /*!< [23..16] Data byte 6 */
      __IM  uint32_t DB7        : 8;            /*!< [31..24] Data byte 7 */
    } RFIFOMDATA11_b;
  } ;
  __IM  uint32_t  RESERVED1[12];
  
  union {
    __IOM uint32_t FCTL;                        /*!< (@ 0x00000200) Filter control register */
    
    struct {
      __IOM uint32_t FLD        : 1;            /*!< [0..0] Filter lock disable */
      __IM  uint32_t            : 7;
      __IOM uint32_t HBC1F      : 6;            /*!< [13..8] Header bank of CAN1 filter */
    } FCTL_b;
  } ;
  __IOM uint32_t  FMCFG;                        /*!< (@ 0x00000204) Filter mode configuration register */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  FSCFG;                        /*!< (@ 0x0000020C) Filter scale configuration register */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  FAFIFO;                       /*!< (@ 0x00000214) Filter associated FIFO register */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  FW;                           /*!< (@ 0x0000021C) Filter working register */
  __IM  uint32_t  RESERVED5[8];
  __IOM uint32_t  F0DATA0;                      /*!< (@ 0x00000240) Filter 0 data 0 register */
  __IOM uint32_t  F0DATA1;                      /*!< (@ 0x00000244) Filter 0 data 1 register */
  __IOM uint32_t  F1DATA0;                      /*!< (@ 0x00000248) Filter 1 data 0 register */
  __IOM uint32_t  F1DATA1;                      /*!< (@ 0x0000024C) Filter 1 data 1 register */
  __IOM uint32_t  F2DATA0;                      /*!< (@ 0x00000250) Filter 2 data 0 register */
  __IOM uint32_t  F2DATA1;                      /*!< (@ 0x00000254) Filter 2 data 1 register */
  __IOM uint32_t  F3DATA0;                      /*!< (@ 0x00000258) Filter 3 data 0 register */
  __IOM uint32_t  F3DATA1;                      /*!< (@ 0x0000025C) Filter 3 data 1 register */
  __IOM uint32_t  F4DATA0;                      /*!< (@ 0x00000260) Filter 4 data 0 register */
  __IOM uint32_t  F4DATA1;                      /*!< (@ 0x00000264) Filter 4 data 1 register */
  __IOM uint32_t  F5DATA0;                      /*!< (@ 0x00000268) Filter 5 data 0 register */
  __IOM uint32_t  F5DATA1;                      /*!< (@ 0x0000026C) Filter 5 data 1 register */
  __IOM uint32_t  F6DATA0;                      /*!< (@ 0x00000270) Filter 6 data 0 register */
  __IOM uint32_t  F6DATA1;                      /*!< (@ 0x00000274) Filter 6 data 1 register */
  __IOM uint32_t  F7DATA0;                      /*!< (@ 0x00000278) Filter 7 data 0 register */
  __IOM uint32_t  F7DATA1;                      /*!< (@ 0x0000027C) Filter 7 data 1 register */
  __IOM uint32_t  F8DATA0;                      /*!< (@ 0x00000280) Filter 8 data 0 register */
  __IOM uint32_t  F8DATA1;                      /*!< (@ 0x00000284) Filter 8 data 1 register */
  __IOM uint32_t  F9DATA0;                      /*!< (@ 0x00000288) Filter 9 data 0 register */
  __IOM uint32_t  F9DATA1;                      /*!< (@ 0x0000028C) Filter 9 data 1 register */
  __IOM uint32_t  F10DATA0;                     /*!< (@ 0x00000290) Filter 10 data 0 register */
  __IOM uint32_t  F10DATA1;                     /*!< (@ 0x00000294) Filter 10 data 1 register */
  __IOM uint32_t  F11DATA0;                     /*!< (@ 0x00000298) Filter 11 data 0 register */
  __IOM uint32_t  F11DATA1;                     /*!< (@ 0x0000029C) Filter 11 data 1 register */
  __IOM uint32_t  F12DATA0;                     /*!< (@ 0x000002A0) Filter 12 data 0 register */
  __IOM uint32_t  F12DATA1;                     /*!< (@ 0x000002A4) Filter 12 data 1 register */
  __IOM uint32_t  F13DATA0;                     /*!< (@ 0x000002A8) Filter 13 data 0 register */
  __IOM uint32_t  F13DATA1;                     /*!< (@ 0x000002AC) Filter 13 data 1 register */
  __IOM uint32_t  F14DATA0;                     /*!< (@ 0x000002B0) Filter 14 data 0 register */
  __IOM uint32_t  F14DATA1;                     /*!< (@ 0x000002B4) Filter 14 data 1 register */
  __IOM uint32_t  F15DATA0;                     /*!< (@ 0x000002B8) Filter 15 data 0 register */
  __IOM uint32_t  F15DATA1;                     /*!< (@ 0x000002BC) Filter 15 data 1 register */
  __IOM uint32_t  F16DATA0;                     /*!< (@ 0x000002C0) Filter 16 data 0 register */
  __IOM uint32_t  F16DATA1;                     /*!< (@ 0x000002C4) Filter 16 data 1 register */
  __IOM uint32_t  F17DATA0;                     /*!< (@ 0x000002C8) Filter 17 data 0 register */
  __IOM uint32_t  F17DATA1;                     /*!< (@ 0x000002CC) Filter 17 data 1 register */
  __IOM uint32_t  F18DATA0;                     /*!< (@ 0x000002D0) Filter 18 data 0 register */
  __IOM uint32_t  F18DATA1;                     /*!< (@ 0x000002D4) Filter 18 data 1 register */
  __IOM uint32_t  F19DATA0;                     /*!< (@ 0x000002D8) Filter 19 data 0 register */
  __IOM uint32_t  F19DATA1;                     /*!< (@ 0x000002DC) Filter 19 data 1 register */
  __IOM uint32_t  F20DATA0;                     /*!< (@ 0x000002E0) Filter 20 data 0 register */
  __IOM uint32_t  F20DATA1;                     /*!< (@ 0x000002E4) Filter 20 data 1 register */
  __IOM uint32_t  F21DATA0;                     /*!< (@ 0x000002E8) Filter 21 data 0 register */
  __IOM uint32_t  F21DATA1;                     /*!< (@ 0x000002EC) Filter 21 data 1 register */
  __IOM uint32_t  F22DATA0;                     /*!< (@ 0x000002F0) Filter 22 data 0 register */
  __IOM uint32_t  F22DATA1;                     /*!< (@ 0x000002F4) Filter 22 data 1 register */
  __IOM uint32_t  F23DATA0;                     /*!< (@ 0x000002F8) Filter 23 data 0 register */
  __IOM uint32_t  F23DATA1;                     /*!< (@ 0x000002FC) Filter 23 data 1 register */
  __IOM uint32_t  F24DATA0;                     /*!< (@ 0x00000300) Filter 24 data 0 register */
  __IOM uint32_t  F24DATA1;                     /*!< (@ 0x00000304) Filter 24 data 1 register */
  __IOM uint32_t  F25DATA0;                     /*!< (@ 0x00000308) Filter 25 data 0 register */
  __IOM uint32_t  F25DATA1;                     /*!< (@ 0x0000030C) Filter 25 data 1 register */
  __IOM uint32_t  F26DATA0;                     /*!< (@ 0x00000310) Filter 26 data 0 register */
  __IOM uint32_t  F26DATA1;                     /*!< (@ 0x00000314) Filter 26 data 1 register */
  __IOM uint32_t  F27DATA0;                     /*!< (@ 0x00000318) Filter 27 data 0 register */
  __IOM uint32_t  F27DATA1;                     /*!< (@ 0x0000031C) Filter 27 data 1 register */
} CAN1_Type;                                    /*!< Size = 800 (0x320) */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief cyclic redundancy check calculation unit (CRC)
  */

typedef struct {                                /*!< (@ 0x40023000) CRC Structure */
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000000) Data register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] CRC calculation result bits */
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t FDATA;                       /*!< (@ 0x00000004) Free data register */
    
    struct {
      __IOM uint32_t FDATA      : 8;            /*!< [7..0] Free Data Register bits */
    } FDATA_b;
  } ;
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000008) Control register */
    
    struct {
      __IOM uint32_t RST        : 1;            /*!< [0..0] reset bit */
    } CTL_b;
  } ;
} CRC_Type;                                     /*!< Size = 12 (0xc) */



/* =========================================================================================================================== */
/* ================                                            CTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Clock trim controller (CTC)
  */

typedef struct {                                /*!< (@ 0x40006C00) CTC Structure */
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x00000000) Control register 0 */
    
    struct {
      __IOM uint32_t CKOKIE     : 1;            /*!< [0..0] Clock trim ok interrupt enable */
      __IOM uint32_t CKWARNIE   : 1;            /*!< [1..1] Clock trim warning interrupt enable */
      __IOM uint32_t ERRIE      : 1;            /*!< [2..2] Error interrupt enable */
      __IOM uint32_t EREFIE     : 1;            /*!< [3..3] EREFIF interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CNTEN      : 1;            /*!< [5..5] CTC counter enable */
      __IOM uint32_t AUTOTRIM   : 1;            /*!< [6..6] Hardware automatically trim mode */
      __IOM uint32_t SWREFPUL   : 1;            /*!< [7..7] Software reference source sync pulse */
      __IOM uint32_t TRIMVALUE  : 6;            /*!< [13..8] IRC48M trim value */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000004) Control register 1 */
    
    struct {
      __IOM uint32_t RLVALUE    : 16;           /*!< [15..0] CTC counter reload value */
      __IOM uint32_t CKLIM      : 8;            /*!< [23..16] Clock trim base limit value */
      __IOM uint32_t REFPSC     : 3;            /*!< [26..24] Reference signal source prescaler */
      __IM  uint32_t            : 1;
      __IOM uint32_t REFSEL     : 2;            /*!< [29..28] Reference signal source selection */
      __IOM uint32_t USBSOFSEL  : 1;            /*!< [30..30] SOF signal selection */
      __IOM uint32_t REFPOL     : 1;            /*!< [31..31] Reference signal source polarity */
    } CTL1_b;
  } ;
  
  union {
    __IM  uint32_t STAT;                        /*!< (@ 0x00000008) Status register */
    
    struct {
      __IM  uint32_t CKOKIF     : 1;            /*!< [0..0] Clock trim OK interrupt flag */
      __IM  uint32_t CKWARNIF   : 1;            /*!< [1..1] Clock trim warning interrupt flag */
      __IM  uint32_t ERRIF      : 1;            /*!< [2..2] Error interrupt flag */
      __IM  uint32_t EREFIF     : 1;            /*!< [3..3] Expect reference interrupt flag */
      __IM  uint32_t            : 4;
      __IM  uint32_t CKERR      : 1;            /*!< [8..8] Clock trim error bit */
      __IM  uint32_t REFMISS    : 1;            /*!< [9..9] Reference sync pulse miss */
      __IM  uint32_t TRIMERR    : 1;            /*!< [10..10] Trim value error bit */
      __IM  uint32_t            : 4;
      __IM  uint32_t REFDIR     : 1;            /*!< [15..15] CTC trim counter direction when reference sync pulse */
      __IM  uint32_t REFCAP     : 16;           /*!< [31..16] CTC counter capture when reference sync pulse */
    } STAT_b;
  } ;
  
  union {
    __IOM uint32_t INTC;                        /*!< (@ 0x0000000C) Interrupt clear register */
    
    struct {
      __IOM uint32_t CKOKIC     : 1;            /*!< [0..0] CKOKIF interrupt clear bit */
      __IOM uint32_t CKWARNIC   : 1;            /*!< [1..1] CKWARNIF interrupt clear bit */
      __IOM uint32_t ERRIC      : 1;            /*!< [2..2] ERRIF interrupt clear bit */
      __IOM uint32_t EREFIC     : 1;            /*!< [3..3] EREFIF interrupt clear bit */
    } INTC_b;
  } ;
} CTC_Type;                                     /*!< Size = 16 (0x10) */



/* =========================================================================================================================== */
/* ================                                            DAC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital-to-analog converter (DAC)
  */

typedef struct {                                /*!< (@ 0x40007400) DAC Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) control register */
    
    struct {
      __IOM uint32_t DEN0       : 1;            /*!< [0..0] DAC0 enable */
      __IOM uint32_t DBOFF0     : 1;            /*!< [1..1] DAC0 output buffer turn off */
      __IOM uint32_t DTEN0      : 1;            /*!< [2..2] DAC0 trigger enable */
      __IOM uint32_t DTSEL0     : 3;            /*!< [5..3] DAC0 trigger selection */
      __IOM uint32_t DWM0       : 2;            /*!< [7..6] DAC0 noise wave mode */
      __IOM uint32_t DWBW0      : 4;            /*!< [11..8] DAC0 noise wave bit width */
      __IOM uint32_t DDMAEN0    : 1;            /*!< [12..12] DAC0 DMA enable */
      __IOM uint32_t DDUDRIE0   : 1;            /*!< [13..13] DAC0 DMA Underrun Interrupt enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t DEN1       : 1;            /*!< [16..16] DAC1 enable */
      __IOM uint32_t DBOFF1     : 1;            /*!< [17..17] DAC1 output buffer turn off */
      __IOM uint32_t DTEN1      : 1;            /*!< [18..18] DAC1 trigger enable */
      __IOM uint32_t DTSEL1     : 3;            /*!< [21..19] DAC1 trigger selection */
      __IOM uint32_t DWM1       : 2;            /*!< [23..22] DAC1 noise wave mode */
      __IOM uint32_t DWBW1      : 4;            /*!< [27..24] DAC1 noise wave bit width */
      __IOM uint32_t DDMAEN1    : 1;            /*!< [28..28] DAC1 DMA enable */
      __IOM uint32_t DDUDRIE1   : 1;            /*!< [29..29] DAC1 DMA Underrun Interrupt enable */
    } CTL_b;
  } ;
  
  union {
    __OM  uint32_t SWT;                         /*!< (@ 0x00000004) software trigger register */
    
    struct {
      __OM  uint32_t SWTR0      : 1;            /*!< [0..0] DAC0 software trigger */
      __OM  uint32_t SWTR1      : 1;            /*!< [1..1] DAC1 software trigger */
    } SWT_b;
  } ;
  
  union {
    __IOM uint32_t DAC0_R12DH;                  /*!< (@ 0x00000008) DAC0 12-bit right-aligned data holding register */
    
    struct {
      __IOM uint32_t DAC0_DH    : 12;           /*!< [11..0] DAC0 12-bit right-aligned data */
    } DAC0_R12DH_b;
  } ;
  
  union {
    __IOM uint32_t DAC0_L12DH;                  /*!< (@ 0x0000000C) DAC0 12-bit left-aligned data holding register */
    
    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t DAC0_DH    : 12;           /*!< [15..4] DAC0 12-bit left-aligned data */
    } DAC0_L12DH_b;
  } ;
  
  union {
    __IOM uint32_t DAC0_R8DH;                   /*!< (@ 0x00000010) DAC0 8-bit right aligned data holding register */
    
    struct {
      __IOM uint32_t DAC0_DH    : 8;            /*!< [7..0] DAC0 8-bit right-aligned data */
    } DAC0_R8DH_b;
  } ;
  
  union {
    __IOM uint32_t DAC1_R12DH;                  /*!< (@ 0x00000014) DAC1 12-bit right-aligned data holding register */
    
    struct {
      __IOM uint32_t DAC1_DH    : 12;           /*!< [11..0] DAC1 12-bit right-aligned data */
    } DAC1_R12DH_b;
  } ;
  
  union {
    __IOM uint32_t DAC1_L12DH;                  /*!< (@ 0x00000018) DAC1 12-bit left aligned data holding register */
    
    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t DAC1_DH    : 12;           /*!< [15..4] DAC1 12-bit left-aligned data */
    } DAC1_L12DH_b;
  } ;
  
  union {
    __IOM uint32_t DAC1_R8DH;                   /*!< (@ 0x0000001C) DAC1 8-bit right aligned data holding register */
    
    struct {
      __IOM uint32_t DAC1_DH    : 8;            /*!< [7..0] DAC1 8-bit right-aligned data */
    } DAC1_R8DH_b;
  } ;
  
  union {
    __IOM uint32_t DACC_R12DH;                  /*!< (@ 0x00000020) DAC concurrent mode 12-bit right-aligned data holding register */
    
    struct {
      __IOM uint32_t DAC0_DH    : 12;           /*!< [11..0] DAC0 12-bit right-aligned data */
      __IM  uint32_t            : 4;
      __IOM uint32_t DAC1_DH    : 12;           /*!< [27..16] DAC1 12-bit right-aligned data */
    } DACC_R12DH_b;
  } ;
  
  union {
    __IOM uint32_t DACC_L12DH;                  /*!< (@ 0x00000024) DAC concurrent mode 12-bit left aligned data holding register */
    
    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t DAC0_DH    : 12;           /*!< [15..4] DAC0 12-bit left-aligned data */
      __IM  uint32_t            : 4;
      __IOM uint32_t DAC1_DH    : 12;           /*!< [31..20] DAC1 12-bit left-aligned data */
    } DACC_L12DH_b;
  } ;
  
  union {
    __IOM uint32_t DACC_R8DH;                   /*!< (@ 0x00000028) DAC concurrent mode 8-bit right aligned data holding register */
    
    struct {
      __IOM uint32_t DAC0_DH    : 8;            /*!< [7..0] DAC0 8-bit right-aligned data */
      __IOM uint32_t DAC1_DH    : 8;            /*!< [15..8] DAC1 8-bit right-aligned data */
    } DACC_R8DH_b;
  } ;
  
  union {
    __IM  uint32_t DAC0_DO;                     /*!< (@ 0x0000002C) DAC0 data output register */
    
    struct {
      __IM  uint32_t DAC0_DO    : 12;           /*!< [11..0] DAC0 data output */
    } DAC0_DO_b;
  } ;
  
  union {
    __IM  uint32_t DAC1_DO;                     /*!< (@ 0x00000030) DAC1 data output register */
    
    struct {
      __IM  uint32_t DAC1_DO    : 12;           /*!< [11..0] DAC1 data output */
    } DAC1_DO_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000034) status register */
    
    struct {
      __IM  uint32_t            : 13;
      __IOM uint32_t DDUDR0     : 1;            /*!< [13..13] DAC0 DMA underrun flag */
      __IM  uint32_t            : 15;
      __IOM uint32_t DDUDR1     : 1;            /*!< [29..29] DAC1 DMA underrun flag */
    } STAT_b;
  } ;
} DAC_Type;                                     /*!< Size = 56 (0x38) */



/* =========================================================================================================================== */
/* ================                                            DBG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug support (DBG)
  */

typedef struct {                                /*!< (@ 0xE0042000) DBG Structure */
  
  union {
    __IM  uint32_t ID;                          /*!< (@ 0x00000000) ID code register */
    
    struct {
      __IM  uint32_t ID_CODE    : 32;           /*!< [31..0] DBG ID code register */
    } ID_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x00000004) Control register 0 */
    
    struct {
      __IOM uint32_t SLP_HOLD   : 1;            /*!< [0..0] Sleep mode hold register */
      __IOM uint32_t DSLP_HOLD  : 1;            /*!< [1..1] Deep-sleep mode hold register */
      __IOM uint32_t STB_HOLD   : 1;            /*!< [2..2] Standby mode hold register */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRACE_IOEN : 1;            /*!< [5..5] Trace pin allocation enable */
      __IOM uint32_t TRACE_MODE : 2;            /*!< [7..6] Trace pin allocation mode */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000008) Control register 1 */
    
    struct {
      __IOM uint32_t TIMER1_HOLD : 1;           /*!< [0..0] TIMER 1 hold register */
      __IOM uint32_t TIMER2_HOLD : 1;           /*!< [1..1] TIMER 2 hold register */
      __IOM uint32_t TIMER3_HOLD : 1;           /*!< [2..2] TIMER 3 hold register */
      __IOM uint32_t TIMER4_HOLD : 1;           /*!< [3..3] TIMER 4 hold register */
      __IOM uint32_t TIMER5_HOLD : 1;           /*!< [4..4] TIMER 5 hold register */
      __IOM uint32_t TIMER6_HOLD : 1;           /*!< [5..5] TIMER 6 hold register */
      __IOM uint32_t TIMER11_HOLD : 1;          /*!< [6..6] TIMER 11 hold register */
      __IOM uint32_t TIMER12_HOLD : 1;          /*!< [7..7] TIMER 12 hold register */
      __IOM uint32_t TIMER13_HOLD : 1;          /*!< [8..8] TIMER 13 hold register */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTC_HOLD   : 1;            /*!< [10..10] RTC hold register */
      __IOM uint32_t WWDGT_HOLD : 1;            /*!< [11..11] WWDGT hold register */
      __IOM uint32_t FWDGT_HOLD : 1;            /*!< [12..12] FWDGT hold register */
      __IM  uint32_t            : 8;
      __IOM uint32_t I2C0_HOLD  : 1;            /*!< [21..21] I2C0 hold register */
      __IOM uint32_t I2C1_HOLD  : 1;            /*!< [22..22] I2C1 hold register */
      __IOM uint32_t I2C2_HOLD  : 1;            /*!< [23..23] I2C2 hold register */
      __IM  uint32_t            : 1;
      __IOM uint32_t CAN0_HOLD  : 1;            /*!< [25..25] CAN0 hold register */
      __IOM uint32_t CAN1_HOLD  : 1;            /*!< [26..26] CAN1 hold register */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t CTL2;                        /*!< (@ 0x0000000C) Control register 2 */
    
    struct {
      __IOM uint32_t TIMER0_HOLD : 1;           /*!< [0..0] TIMER 0 hold register */
      __IOM uint32_t TIMER7_HOLD : 1;           /*!< [1..1] TIMER 7 hold register */
      __IM  uint32_t            : 14;
      __IOM uint32_t TIMER8_HOLD : 1;           /*!< [16..16] TIMER 8 hold register */
      __IOM uint32_t TIMER9_HOLD : 1;           /*!< [17..17] TIMER 9 hold register */
      __IOM uint32_t TIMER10_HOLD : 1;          /*!< [18..18] TIMER 10 hold register */
    } CTL2_b;
  } ;
} DBG_Type;                                     /*!< Size = 16 (0x10) */



/* =========================================================================================================================== */
/* ================                                            DCI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital Camera Interface (DCI)
  */

typedef struct {                                /*!< (@ 0x50050000) DCI Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) Control register */
    
    struct {
      __IOM uint32_t CAP        : 1;            /*!< [0..0] Capture Enable */
      __IOM uint32_t SNAP       : 1;            /*!< [1..1] Snapshot mode */
      __IOM uint32_t WDEN       : 1;            /*!< [2..2] Window Enable */
      __IOM uint32_t JM         : 1;            /*!< [3..3] JPEG mode */
      __IOM uint32_t ESM        : 1;            /*!< [4..4] Embedded Synchronous Mode */
      __IOM uint32_t CKS        : 1;            /*!< [5..5] Clock Polarity Selection */
      __IOM uint32_t HPS        : 1;            /*!< [6..6] Horizontal Polarity Selection */
      __IOM uint32_t VPS        : 1;            /*!< [7..7] Vertical Polarity Selection */
      __IOM uint32_t FR         : 2;            /*!< [9..8] Frame rate */
      __IOM uint32_t DCIF       : 2;            /*!< [11..10] Digital camera interface format */
      __IM  uint32_t            : 2;
      __IOM uint32_t DCIEN      : 1;            /*!< [14..14] DCI Enable */
    } CTL_b;
  } ;
  
  union {
    __IM  uint32_t STAT0;                       /*!< (@ 0x00000004) Status register 0 */
    
    struct {
      __IM  uint32_t HS         : 1;            /*!< [0..0] HS line status */
      __IM  uint32_t VS         : 1;            /*!< [1..1] VS line status */
      __IM  uint32_t FV         : 1;            /*!< [2..2] FIFO Valid */
    } STAT0_b;
  } ;
  
  union {
    __IM  uint32_t STAT1;                       /*!< (@ 0x00000008) Status register 1 */
    
    struct {
      __IM  uint32_t EFF        : 1;            /*!< [0..0] End of Frame Flag */
      __IM  uint32_t OVRF       : 1;            /*!< [1..1] FIFO Overrun Flag */
      __IM  uint32_t ESEF       : 1;            /*!< [2..2] Embedded Synchronous Error Flag */
      __IM  uint32_t VSF        : 1;            /*!< [3..3] Vsync Flag */
      __IM  uint32_t ELF        : 1;            /*!< [4..4] End of Line Flag */
    } STAT1_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x0000000C) Interrupt enable register */
    
    struct {
      __IOM uint32_t EFIE       : 1;            /*!< [0..0] End of Frame Interrupt Enable */
      __IOM uint32_t OVRIE      : 1;            /*!< [1..1] FIFO Overrun Interrupt Enable */
      __IOM uint32_t ESEIE      : 1;            /*!< [2..2] Embedded Synchronous Error Interrupt Enable */
      __IOM uint32_t VSIE       : 1;            /*!< [3..3] Vsync Interrupt Enable */
      __IOM uint32_t ELIE       : 1;            /*!< [4..4] End of Line Interrupt Enable */
    } INTEN_b;
  } ;
  
  union {
    __IM  uint32_t INTF;                        /*!< (@ 0x00000010) Interrupt flag register */
    
    struct {
      __IM  uint32_t EFIF       : 1;            /*!< [0..0] End of Frame Interrupt Flag */
      __IM  uint32_t OVRIF      : 1;            /*!< [1..1] FIFO Overrun Interrupt Flag */
      __IM  uint32_t ESEIF      : 1;            /*!< [2..2] Embedded Synchronous Error Interrupt Flag */
      __IM  uint32_t VSIF       : 1;            /*!< [3..3] Vsync Interrupt Flag */
      __IM  uint32_t ELIF       : 1;            /*!< [4..4] End of Line Interrupt Flag */
    } INTF_b;
  } ;
  
  union {
    __OM  uint32_t INTC;                        /*!< (@ 0x00000014) Interrupt flag clear register */
    
    struct {
      __OM  uint32_t EFFC       : 1;            /*!< [0..0] Clear End of Frame Flag */
      __OM  uint32_t OVRFC      : 1;            /*!< [1..1] Clear FIFO Overrun Flag */
      __OM  uint32_t ESEFC      : 1;            /*!< [2..2] Clear embedded synchronous Error Flag */
      __OM  uint32_t VSFC       : 1;            /*!< [3..3] Vsync flag clear */
      __OM  uint32_t ELFC       : 1;            /*!< [4..4] End of Line Flag Clear */
    } INTC_b;
  } ;
  
  union {
    __IOM uint32_t SC;                          /*!< (@ 0x00000018) Synchronization codes register */
    
    struct {
      __IOM uint32_t FS         : 8;            /*!< [7..0] Frame Start Code in Embedded Synchronous Mode */
      __IOM uint32_t LS         : 8;            /*!< [15..8] Line Start Code in Embedded Synchronous Mode */
      __IOM uint32_t LE         : 8;            /*!< [23..16] Line End Code in Embedded Synchronous Mode */
      __IOM uint32_t FE         : 8;            /*!< [31..24] Frame End Code in Embedded Synchronous Mode */
    } SC_b;
  } ;
  
  union {
    __IOM uint32_t SCUMSK;                      /*!< (@ 0x0000001C) Synchronization codes unmask register */
    
    struct {
      __IOM uint32_t FSM        : 8;            /*!< [7..0] Frame Start Code unMask Bits in Embedded Synchronous Mode */
      __IOM uint32_t LSM        : 8;            /*!< [15..8] Line Start Code unMask Bits in Embedded Synchronous Mode */
      __IOM uint32_t LEM        : 8;            /*!< [23..16] Line End Code unMask Bits in Embedded Synchronous Mode */
      __IOM uint32_t FEM        : 8;            /*!< [31..24] Frame End Code unMask Bits in Embedded Synchronous Mode */
    } SCUMSK_b;
  } ;
  
  union {
    __IOM uint32_t CWSPOS;                      /*!< (@ 0x00000020) Cropping window start position register */
    
    struct {
      __IOM uint32_t WHSP       : 14;           /*!< [13..0] Window Horizontal Start Position */
      __IM  uint32_t            : 2;
      __IOM uint32_t WVSP       : 13;           /*!< [28..16] Window Vertical Start Position */
    } CWSPOS_b;
  } ;
  
  union {
    __IOM uint32_t CWSZ;                        /*!< (@ 0x00000024) Cropping window size register */
    
    struct {
      __IOM uint32_t WHSZ       : 14;           /*!< [13..0] Window Horizontal Size */
      __IM  uint32_t            : 2;
      __IOM uint32_t WVSZ       : 14;           /*!< [29..16] Window Vertical Size */
    } CWSZ_b;
  } ;
  
  union {
    __IM  uint32_t DATA;                        /*!< (@ 0x00000028) DATA register */
    
    struct {
      __IM  uint32_t DT0        : 8;            /*!< [7..0] Pixel Data 0 */
      __IM  uint32_t DT1        : 8;            /*!< [15..8] Pixel Data 1 */
      __IM  uint32_t DT2        : 8;            /*!< [23..16] Pixel Data 2 */
      __IM  uint32_t DT3        : 8;            /*!< [31..24] Pixel Data 3 */
    } DATA_b;
  } ;
} DCI_Type;                                     /*!< Size = 44 (0x2c) */



/* =========================================================================================================================== */
/* ================                                           DMA0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA controller (DMA0)
  */

typedef struct {                                /*!< (@ 0x40026000) DMA0 Structure */
  
  union {
    __IM  uint32_t INTF0;                       /*!< (@ 0x00000000) Interrupt flag register 0 */
    
    struct {
      __IM  uint32_t FEEIF0     : 1;            /*!< [0..0] FIFO error and exception of channel 0 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF0     : 1;            /*!< [2..2] Single data mode exception of channel 0 */
      __IM  uint32_t TAEIF0     : 1;            /*!< [3..3] Transfer access error flag of channel 0 */
      __IM  uint32_t HTFIF0     : 1;            /*!< [4..4] Half transfer finish flag of channel 0 */
      __IM  uint32_t FTFIF0     : 1;            /*!< [5..5] Full Transfer finish flag of channel 0 */
      __IM  uint32_t FEEIF1     : 1;            /*!< [6..6] FIFO error and exception of channel 1 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF1     : 1;            /*!< [8..8] Single data mode exception of channel 1 */
      __IM  uint32_t TAEIF1     : 1;            /*!< [9..9] Transfer access error flag of channel 1 */
      __IM  uint32_t HTFIF1     : 1;            /*!< [10..10] Half transfer finish flag of channel 1 */
      __IM  uint32_t FTFIF1     : 1;            /*!< [11..11] Full Transfer finish flag of channel 1 */
      __IM  uint32_t            : 4;
      __IM  uint32_t FEEIF2     : 1;            /*!< [16..16] FIFO error and exception of channel 2 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF2     : 1;            /*!< [18..18] Single data mode exception of channel 2 */
      __IM  uint32_t TAEIF2     : 1;            /*!< [19..19] Transfer access error flag of channel 2 */
      __IM  uint32_t HTFIF2     : 1;            /*!< [20..20] Half transfer finish flag of channel 2 */
      __IM  uint32_t FTFIF2     : 1;            /*!< [21..21] Full Transfer finish flag of channel 2 */
      __IM  uint32_t FEEIF3     : 1;            /*!< [22..22] FIFO error and exception of channel 3 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF3     : 1;            /*!< [24..24] Single data mode exception of channel 3 */
      __IM  uint32_t TAEIF3     : 1;            /*!< [25..25] Transfer access error flag of channel 3 */
      __IM  uint32_t HTFIF3     : 1;            /*!< [26..26] Half transfer finish flag of channel 3 */
      __IM  uint32_t FTFIF3     : 1;            /*!< [27..27] Full Transfer finish flag of channel 3 */
    } INTF0_b;
  } ;
  
  union {
    __IM  uint32_t INTF1;                       /*!< (@ 0x00000004) Interrupt flag register 1 */
    
    struct {
      __IM  uint32_t FEEIF4     : 1;            /*!< [0..0] FIFO error and exception of channel 4 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF4     : 1;            /*!< [2..2] Single data mode exception of channel 4 */
      __IM  uint32_t TAEIF4     : 1;            /*!< [3..3] Transfer access error flag of channel 4 */
      __IM  uint32_t HTFIF4     : 1;            /*!< [4..4] Half transfer finish flag of channel 4 */
      __IM  uint32_t FTFIF4     : 1;            /*!< [5..5] Full Transfer finish flag of channel 4 */
      __IM  uint32_t FEEIF5     : 1;            /*!< [6..6] FIFO error and exception of channel 5 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF5     : 1;            /*!< [8..8] Single data mode exception of channel 5 */
      __IM  uint32_t TAEIF5     : 1;            /*!< [9..9] Transfer access error flag of channel 5 */
      __IM  uint32_t HTFIF5     : 1;            /*!< [10..10] Half transfer finish flag of channel 5 */
      __IM  uint32_t FTFIF5     : 1;            /*!< [11..11] Full Transfer finish flag of channel 5 */
      __IM  uint32_t            : 4;
      __IM  uint32_t FEEIF6     : 1;            /*!< [16..16] FIFO error and exception of channel 6 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF6     : 1;            /*!< [18..18] Single data mode exception of channel 6 */
      __IM  uint32_t TAEIF6     : 1;            /*!< [19..19] Transfer access error flag of channel 6 */
      __IM  uint32_t HTFIF6     : 1;            /*!< [20..20] Half transfer finish flag of channel 6 */
      __IM  uint32_t FTFIF6     : 1;            /*!< [21..21] Full Transfer finish flag of channel 6 */
      __IM  uint32_t FEEIF7     : 1;            /*!< [22..22] FIFO error and exception of channel 7 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF7     : 1;            /*!< [24..24] Single data mode exception of channel 7 */
      __IM  uint32_t TAEIF7     : 1;            /*!< [25..25] Transfer access error flag of channel 7 */
      __IM  uint32_t HTFIF7     : 1;            /*!< [26..26] Half transfer finish flag of channel 7 */
      __IM  uint32_t FTFIF7     : 1;            /*!< [27..27] Full Transfer finish flag of channel 7 */
    } INTF1_b;
  } ;
  
  union {
    __OM  uint32_t INTC0;                       /*!< (@ 0x00000008) Interrupt flag clear register 0 */
    
    struct {
      __OM  uint32_t FEEIFC0    : 1;            /*!< [0..0] Clear bit for FIFO error and exception of channel 0 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC0    : 1;            /*!< [2..2] Clear bit for single data mode exception of channel 0 */
      __OM  uint32_t TAEIFC0    : 1;            /*!< [3..3] Clear bit for transfer access error flag of channel 0 */
      __OM  uint32_t HTFIFC0    : 1;            /*!< [4..4] Clear bit for half transfer finish flag of channel 0 */
      __OM  uint32_t FTFIFC0    : 1;            /*!< [5..5] Clear bit for Full transfer finish flag of channel 0 */
      __OM  uint32_t FEEIFC1    : 1;            /*!< [6..6] Clear bit for FIFO error and exception of channel 1 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC1    : 1;            /*!< [8..8] Clear bit for single data mode exception of channel 1 */
      __OM  uint32_t TAEIFC1    : 1;            /*!< [9..9] Clear bit for transfer access error flag of channel 1 */
      __OM  uint32_t HTFIFC1    : 1;            /*!< [10..10] Clear bit for half transfer finish flag of channel 1 */
      __OM  uint32_t FTFIFC1    : 1;            /*!< [11..11] Clear bit for Full transfer finish flag of channel 1 */
      __IM  uint32_t            : 4;
      __OM  uint32_t FEEIFC2    : 1;            /*!< [16..16] Clear bit for FIFO error and exception of channel 2 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC2    : 1;            /*!< [18..18] Clear bit for single data mode exception of channel 2 */
      __OM  uint32_t TAEIFC2    : 1;            /*!< [19..19] Clear bit for transfer access error flag of channel 2 */
      __OM  uint32_t HTFIFC2    : 1;            /*!< [20..20] Clear bit for half transfer finish flag of channel 2 */
      __OM  uint32_t FTFIFC2    : 1;            /*!< [21..21] Clear bit for Full transfer finish flag of channel 2 */
      __OM  uint32_t FEEIFC3    : 1;            /*!< [22..22] Clear bit for FIFO error and exception of channel 3 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC3    : 1;            /*!< [24..24] Clear bit for single data mode exception of channel 3 */
      __OM  uint32_t TAEIFC3    : 1;            /*!< [25..25] Clear bit for transfer access error flag of channel 3 */
      __OM  uint32_t HTFIFC3    : 1;            /*!< [26..26] Clear bit for half transfer finish flag of channel 3 */
      __OM  uint32_t FTFIFC3    : 1;            /*!< [27..27] Clear bit for Full transfer finish flag of channel 3 */
    } INTC0_b;
  } ;
  
  union {
    __OM  uint32_t INTC1;                       /*!< (@ 0x0000000C) Interrupt flag clear register 1 */
    
    struct {
      __OM  uint32_t FEEIFC4    : 1;            /*!< [0..0] Clear bit for FIFO error and exception of channel 4 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC4    : 1;            /*!< [2..2] Clear bit for single data mode exception of channel 4 */
      __OM  uint32_t TAEIFC4    : 1;            /*!< [3..3] Clear bit for transfer access error flag of channel 4 */
      __OM  uint32_t HTFIFC4    : 1;            /*!< [4..4] Clear bit for half transfer finish flag of channel 4 */
      __OM  uint32_t FTFIFC4    : 1;            /*!< [5..5] Clear bit for Full transfer finish flag of channel 4 */
      __OM  uint32_t FEEIFC5    : 1;            /*!< [6..6] Clear bit for FIFO error and exception of channel 5 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC5    : 1;            /*!< [8..8] Clear bit for single data mode exception of channel 5 */
      __OM  uint32_t TAEIFC5    : 1;            /*!< [9..9] Clear bit for transfer access error flag of channel 5 */
      __OM  uint32_t HTFIFC5    : 1;            /*!< [10..10] Clear bit for half transfer finish flag of channel 5 */
      __OM  uint32_t FTFIFC5    : 1;            /*!< [11..11] Clear bit for Full transfer finish flag of channel 5 */
      __IM  uint32_t            : 4;
      __OM  uint32_t FEEIFC6    : 1;            /*!< [16..16] Clear bit for FIFO error and exception of channel 6 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC6    : 1;            /*!< [18..18] Clear bit for single data mode exception of channel 6 */
      __OM  uint32_t TAEIFC6    : 1;            /*!< [19..19] Clear bit for transfer access error flag of channel 6 */
      __OM  uint32_t HTFIFC6    : 1;            /*!< [20..20] Clear bit for half transfer finish flag of channel 6 */
      __OM  uint32_t FTFIFC6    : 1;            /*!< [21..21] Clear bit for Full transfer finish flag of channel 6 */
      __OM  uint32_t FEEIFC7    : 1;            /*!< [22..22] Clear bit for FIFO error and exception of channel 7 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC7    : 1;            /*!< [24..24] Clear bit for single data mode exception of channel 7 */
      __OM  uint32_t TAEIFC7    : 1;            /*!< [25..25] Clear bit for transfer access error flag of channel 7 */
      __OM  uint32_t HTFIFC7    : 1;            /*!< [26..26] Clear bit for half transfer finish flag of channel 7 */
      __OM  uint32_t FTFIFC7    : 1;            /*!< [27..27] Clear bit for Full transfer finish flag of channel 7 */
    } INTC1_b;
  } ;
  
  union {
    __IOM uint32_t CH0CTL;                      /*!< (@ 0x00000010) Channel 0 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH0CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH0CNT;                      /*!< (@ 0x00000014) Channel 0 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH0CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH0PADDR;                    /*!< (@ 0x00000018) Channel 0 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH0PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH0M0ADDR;                   /*!< (@ 0x0000001C) Channel 0 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH0M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH0M1ADDR;                   /*!< (@ 0x00000020) Channel 0 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH0M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH0FCTL;                     /*!< (@ 0x00000024) Channel 0 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH0FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH1CTL;                      /*!< (@ 0x00000028) Channel 1 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH1CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH1CNT;                      /*!< (@ 0x0000002C) Channel 1 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH1CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH1PADDR;                    /*!< (@ 0x00000030) Channel 1 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH1PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH1M0ADDR;                   /*!< (@ 0x00000034) Channel 1 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH1M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH1M1ADDR;                   /*!< (@ 0x00000038) Channel 1 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH1M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH1FCTL;                     /*!< (@ 0x0000003C) Channel 1 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH1FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH2CTL;                      /*!< (@ 0x00000040) Channel 2 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH2CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH2CNT;                      /*!< (@ 0x00000044) Channel 2 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH2CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH2PADDR;                    /*!< (@ 0x00000048) Channel 2 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH2PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH2M0ADDR;                   /*!< (@ 0x0000004C) Channel 2 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH2M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH2M1ADDR;                   /*!< (@ 0x00000050) Channel 2 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH2M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH2FCTL;                     /*!< (@ 0x00000054) Channel 2 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH2FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH3CTL;                      /*!< (@ 0x00000058) Channel 3 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH3CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH3CNT;                      /*!< (@ 0x0000005C) Channel 3 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH3CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH3PADDR;                    /*!< (@ 0x00000060) Channel 3 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH3PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH3M0ADDR;                   /*!< (@ 0x00000064) Channel 3 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH3M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH3M1ADDR;                   /*!< (@ 0x00000068) Channel 3 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH3M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH3FCTL;                     /*!< (@ 0x0000006C) Channel 3 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH3FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH4CTL;                      /*!< (@ 0x00000070) Channel 4 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH4CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH4CNT;                      /*!< (@ 0x00000074) Channel 4 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH4CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH4PADDR;                    /*!< (@ 0x00000078) Channel 4 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH4PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH4M0ADDR;                   /*!< (@ 0x0000007C) Channel 4 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH4M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH4M1ADDR;                   /*!< (@ 0x00000080) Channel 4 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH4M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH4FCTL;                     /*!< (@ 0x00000084) Channel 4 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH4FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH5CTL;                      /*!< (@ 0x00000088) Channel 5 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH5CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH5CNT;                      /*!< (@ 0x0000008C) Channel 5 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH5CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH5PADDR;                    /*!< (@ 0x00000090) Channel 5 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH5PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH5M0ADDR;                   /*!< (@ 0x00000094) Channel 5 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH5M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH5M1ADDR;                   /*!< (@ 0x00000098) Channel 5 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH5M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH5FCTL;                     /*!< (@ 0x0000009C) Channel 5 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH5FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH6CTL;                      /*!< (@ 0x000000A0) Channel 6 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH6CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH6CNT;                      /*!< (@ 0x000000A4) Channel 6 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH6CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH6PADDR;                    /*!< (@ 0x000000A8) Channel 6 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH6PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH6M0ADDR;                   /*!< (@ 0x000000AC) Channel 6 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH6M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH6M1ADDR;                   /*!< (@ 0x000000B0) Channel 6 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH6M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH6FCTL;                     /*!< (@ 0x000000B4) Channel 6 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH6FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH7CTL;                      /*!< (@ 0x000000B8) Channel 7 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH7CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH7CNT;                      /*!< (@ 0x000000BC) Channel 7 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH7CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH7PADDR;                    /*!< (@ 0x000000C0) Channel 7 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH7PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH7M0ADDR;                   /*!< (@ 0x000000C4) Channel 7 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH7M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH7M1ADDR;                   /*!< (@ 0x000000C8) Channel 7 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH7M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH7FCTL;                     /*!< (@ 0x000000CC) Channel 7 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH7FCTL_b;
  } ;
} DMA0_Type;                                    /*!< Size = 208 (0xd0) */



/* =========================================================================================================================== */
/* ================                                           DMA1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA controller (DMA1)
  */

typedef struct {                                /*!< (@ 0x40026400) DMA1 Structure */
  
  union {
    __IM  uint32_t INTF0;                       /*!< (@ 0x00000000) Interrupt flag register 0 */
    
    struct {
      __IM  uint32_t FEEIF0     : 1;            /*!< [0..0] FIFO error and exception of channel 0 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF0     : 1;            /*!< [2..2] Single data mode exception of channel 0 */
      __IM  uint32_t TAEIF0     : 1;            /*!< [3..3] Transfer access error flag of channel 0 */
      __IM  uint32_t HTFIF0     : 1;            /*!< [4..4] Half transfer finish flag of channel 0 */
      __IM  uint32_t FTFIF0     : 1;            /*!< [5..5] Full Transfer finish flag of channel 0 */
      __IM  uint32_t FEEIF1     : 1;            /*!< [6..6] FIFO error and exception of channel 1 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF1     : 1;            /*!< [8..8] Single data mode exception of channel 1 */
      __IM  uint32_t TAEIF1     : 1;            /*!< [9..9] Transfer access error flag of channel 1 */
      __IM  uint32_t HTFIF1     : 1;            /*!< [10..10] Half transfer finish flag of channel 1 */
      __IM  uint32_t FTFIF1     : 1;            /*!< [11..11] Full Transfer finish flag of channel 1 */
      __IM  uint32_t            : 4;
      __IM  uint32_t FEEIF2     : 1;            /*!< [16..16] FIFO error and exception of channel 2 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF2     : 1;            /*!< [18..18] Single data mode exception of channel 2 */
      __IM  uint32_t TAEIF2     : 1;            /*!< [19..19] Transfer access error flag of channel 2 */
      __IM  uint32_t HTFIF2     : 1;            /*!< [20..20] Half transfer finish flag of channel 2 */
      __IM  uint32_t FTFIF2     : 1;            /*!< [21..21] Full Transfer finish flag of channel 2 */
      __IM  uint32_t FEEIF3     : 1;            /*!< [22..22] FIFO error and exception of channel 3 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF3     : 1;            /*!< [24..24] Single data mode exception of channel 3 */
      __IM  uint32_t TAEIF3     : 1;            /*!< [25..25] Transfer access error flag of channel 3 */
      __IM  uint32_t HTFIF3     : 1;            /*!< [26..26] Half transfer finish flag of channel 3 */
      __IM  uint32_t FTFIF3     : 1;            /*!< [27..27] Full Transfer finish flag of channel 3 */
    } INTF0_b;
  } ;
  
  union {
    __IM  uint32_t INTF1;                       /*!< (@ 0x00000004) Interrupt flag register 1 */
    
    struct {
      __IM  uint32_t FEEIF4     : 1;            /*!< [0..0] FIFO error and exception of channel 4 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF4     : 1;            /*!< [2..2] Single data mode exception of channel 4 */
      __IM  uint32_t TAEIF4     : 1;            /*!< [3..3] Transfer access error flag of channel 4 */
      __IM  uint32_t HTFIF4     : 1;            /*!< [4..4] Half transfer finish flag of channel 4 */
      __IM  uint32_t FTFIF4     : 1;            /*!< [5..5] Full Transfer finish flag of channel 4 */
      __IM  uint32_t FEEIF5     : 1;            /*!< [6..6] FIFO error and exception of channel 5 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF5     : 1;            /*!< [8..8] Single data mode exception of channel 5 */
      __IM  uint32_t TAEIF5     : 1;            /*!< [9..9] Transfer access error flag of channel 5 */
      __IM  uint32_t HTFIF5     : 1;            /*!< [10..10] Half transfer finish flag of channel 5 */
      __IM  uint32_t FTFIF5     : 1;            /*!< [11..11] Full Transfer finish flag of channel 5 */
      __IM  uint32_t            : 4;
      __IM  uint32_t FEEIF6     : 1;            /*!< [16..16] FIFO error and exception of channel 6 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF6     : 1;            /*!< [18..18] Single data mode exception of channel 6 */
      __IM  uint32_t TAEIF6     : 1;            /*!< [19..19] Transfer access error flag of channel 6 */
      __IM  uint32_t HTFIF6     : 1;            /*!< [20..20] Half transfer finish flag of channel 6 */
      __IM  uint32_t FTFIF6     : 1;            /*!< [21..21] Full Transfer finish flag of channel 6 */
      __IM  uint32_t FEEIF7     : 1;            /*!< [22..22] FIFO error and exception of channel 7 */
      __IM  uint32_t            : 1;
      __IM  uint32_t SDEIF7     : 1;            /*!< [24..24] Single data mode exception of channel 7 */
      __IM  uint32_t TAEIF7     : 1;            /*!< [25..25] Transfer access error flag of channel 7 */
      __IM  uint32_t HTFIF7     : 1;            /*!< [26..26] Half transfer finish flag of channel 7 */
      __IM  uint32_t FTFIF7     : 1;            /*!< [27..27] Full Transfer finish flag of channel 7 */
    } INTF1_b;
  } ;
  
  union {
    __OM  uint32_t INTC0;                       /*!< (@ 0x00000008) Interrupt flag clear register 0 */
    
    struct {
      __OM  uint32_t FEEIFC0    : 1;            /*!< [0..0] Clear bit for FIFO error and exception of channel 0 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC0    : 1;            /*!< [2..2] Clear bit for single data mode exception of channel 0 */
      __OM  uint32_t TAEIFC0    : 1;            /*!< [3..3] Clear bit for transfer access error flag of channel 0 */
      __OM  uint32_t HTFIFC0    : 1;            /*!< [4..4] Clear bit for half transfer finish flag of channel 0 */
      __OM  uint32_t FTFIFC0    : 1;            /*!< [5..5] Clear bit for Full transfer finish flag of channel 0 */
      __OM  uint32_t FEEIFC1    : 1;            /*!< [6..6] Clear bit for FIFO error and exception of channel 1 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC1    : 1;            /*!< [8..8] Clear bit for single data mode exception of channel 1 */
      __OM  uint32_t TAEIFC1    : 1;            /*!< [9..9] Clear bit for transfer access error flag of channel 1 */
      __OM  uint32_t HTFIFC1    : 1;            /*!< [10..10] Clear bit for half transfer finish flag of channel 1 */
      __OM  uint32_t FTFIFC1    : 1;            /*!< [11..11] Clear bit for Full transfer finish flag of channel 1 */
      __IM  uint32_t            : 4;
      __OM  uint32_t FEEIFC2    : 1;            /*!< [16..16] Clear bit for FIFO error and exception of channel 2 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC2    : 1;            /*!< [18..18] Clear bit for single data mode exception of channel 2 */
      __OM  uint32_t TAEIFC2    : 1;            /*!< [19..19] Clear bit for transfer access error flag of channel 2 */
      __OM  uint32_t HTFIFC2    : 1;            /*!< [20..20] Clear bit for half transfer finish flag of channel 2 */
      __OM  uint32_t FTFIFC2    : 1;            /*!< [21..21] Clear bit for Full transfer finish flag of channel 2 */
      __OM  uint32_t FEEIFC3    : 1;            /*!< [22..22] Clear bit for FIFO error and exception of channel 3 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC3    : 1;            /*!< [24..24] Clear bit for single data mode exception of channel 3 */
      __OM  uint32_t TAEIFC3    : 1;            /*!< [25..25] Clear bit for transfer access error flag of channel 3 */
      __OM  uint32_t HTFIFC3    : 1;            /*!< [26..26] Clear bit for half transfer finish flag of channel 3 */
      __OM  uint32_t FTFIFC3    : 1;            /*!< [27..27] Clear bit for Full transfer finish flag of channel 3 */
    } INTC0_b;
  } ;
  
  union {
    __OM  uint32_t INTC1;                       /*!< (@ 0x0000000C) Interrupt flag clear register 1 */
    
    struct {
      __OM  uint32_t FEEIFC4    : 1;            /*!< [0..0] Clear bit for FIFO error and exception of channel 4 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC4    : 1;            /*!< [2..2] Clear bit for single data mode exception of channel 4 */
      __OM  uint32_t TAEIFC4    : 1;            /*!< [3..3] Clear bit for transfer access error flag of channel 4 */
      __OM  uint32_t HTFIFC4    : 1;            /*!< [4..4] Clear bit for half transfer finish flag of channel 4 */
      __OM  uint32_t FTFIFC4    : 1;            /*!< [5..5] Clear bit for Full transfer finish flag of channel 4 */
      __OM  uint32_t FEEIFC5    : 1;            /*!< [6..6] Clear bit for FIFO error and exception of channel 5 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC5    : 1;            /*!< [8..8] Clear bit for single data mode exception of channel 5 */
      __OM  uint32_t TAEIFC5    : 1;            /*!< [9..9] Clear bit for transfer access error flag of channel 5 */
      __OM  uint32_t HTFIFC5    : 1;            /*!< [10..10] Clear bit for half transfer finish flag of channel 5 */
      __OM  uint32_t FTFIFC5    : 1;            /*!< [11..11] Clear bit for Full transfer finish flag of channel 5 */
      __IM  uint32_t            : 4;
      __OM  uint32_t FEEIFC6    : 1;            /*!< [16..16] Clear bit for FIFO error and exception of channel 6 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC6    : 1;            /*!< [18..18] Clear bit for single data mode exception of channel 6 */
      __OM  uint32_t TAEIFC6    : 1;            /*!< [19..19] Clear bit for transfer access error flag of channel 6 */
      __OM  uint32_t HTFIFC6    : 1;            /*!< [20..20] Clear bit for half transfer finish flag of channel 6 */
      __OM  uint32_t FTFIFC6    : 1;            /*!< [21..21] Clear bit for Full transfer finish flag of channel 6 */
      __OM  uint32_t FEEIFC7    : 1;            /*!< [22..22] Clear bit for FIFO error and exception of channel 7 */
      __IM  uint32_t            : 1;
      __OM  uint32_t SDEIFC7    : 1;            /*!< [24..24] Clear bit for single data mode exception of channel 7 */
      __OM  uint32_t TAEIFC7    : 1;            /*!< [25..25] Clear bit for transfer access error flag of channel 7 */
      __OM  uint32_t HTFIFC7    : 1;            /*!< [26..26] Clear bit for half transfer finish flag of channel 7 */
      __OM  uint32_t FTFIFC7    : 1;            /*!< [27..27] Clear bit for Full transfer finish flag of channel 7 */
    } INTC1_b;
  } ;
  
  union {
    __IOM uint32_t CH0CTL;                      /*!< (@ 0x00000010) Channel 0 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH0CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH0CNT;                      /*!< (@ 0x00000014) Channel 0 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH0CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH0PADDR;                    /*!< (@ 0x00000018) Channel 0 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH0PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH0M0ADDR;                   /*!< (@ 0x0000001C) Channel 0 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH0M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH0M1ADDR;                   /*!< (@ 0x00000020) Channel 0 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH0M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH0FCTL;                     /*!< (@ 0x00000024) Channel 0 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH0FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH1CTL;                      /*!< (@ 0x00000028) Channel 1 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH1CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH1CNT;                      /*!< (@ 0x0000002C) Channel 1 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH1CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH1PADDR;                    /*!< (@ 0x00000030) Channel 1 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH1PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH1M0ADDR;                   /*!< (@ 0x00000034) Channel 1 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH1M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH1M1ADDR;                   /*!< (@ 0x00000038) Channel 1 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH1M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH1FCTL;                     /*!< (@ 0x0000003C) Channel 1 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH1FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH2CTL;                      /*!< (@ 0x00000040) Channel 2 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH2CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH2CNT;                      /*!< (@ 0x00000044) Channel 2 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH2CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH2PADDR;                    /*!< (@ 0x00000048) Channel 2 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH2PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH2M0ADDR;                   /*!< (@ 0x0000004C) Channel 2 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH2M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH2M1ADDR;                   /*!< (@ 0x00000050) Channel 2 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH2M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH2FCTL;                     /*!< (@ 0x00000054) Channel 2 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH2FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH3CTL;                      /*!< (@ 0x00000058) Channel 3 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH3CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH3CNT;                      /*!< (@ 0x0000005C) Channel 3 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH3CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH3PADDR;                    /*!< (@ 0x00000060) Channel 3 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH3PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH3M0ADDR;                   /*!< (@ 0x00000064) Channel 3 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH3M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH3M1ADDR;                   /*!< (@ 0x00000068) Channel 3 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH3M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH3FCTL;                     /*!< (@ 0x0000006C) Channel 3 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH3FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH4CTL;                      /*!< (@ 0x00000070) Channel 4 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH4CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH4CNT;                      /*!< (@ 0x00000074) Channel 4 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH4CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH4PADDR;                    /*!< (@ 0x00000078) Channel 4 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH4PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH4M0ADDR;                   /*!< (@ 0x0000007C) Channel 4 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH4M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH4M1ADDR;                   /*!< (@ 0x00000080) Channel 4 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH4M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH4FCTL;                     /*!< (@ 0x00000084) Channel 4 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH4FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH5CTL;                      /*!< (@ 0x00000088) Channel 5 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH5CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH5CNT;                      /*!< (@ 0x0000008C) Channel 5 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH5CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH5PADDR;                    /*!< (@ 0x00000090) Channel 5 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH5PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH5M0ADDR;                   /*!< (@ 0x00000094) Channel 5 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH5M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH5M1ADDR;                   /*!< (@ 0x00000098) Channel 5 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH5M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH5FCTL;                     /*!< (@ 0x0000009C) Channel 5 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH5FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH6CTL;                      /*!< (@ 0x000000A0) Channel 6 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH6CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH6CNT;                      /*!< (@ 0x000000A4) Channel 6 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH6CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH6PADDR;                    /*!< (@ 0x000000A8) Channel 6 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH6PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH6M0ADDR;                   /*!< (@ 0x000000AC) Channel 6 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH6M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH6M1ADDR;                   /*!< (@ 0x000000B0) Channel 6 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH6M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH6FCTL;                     /*!< (@ 0x000000B4) Channel 6 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH6FCTL_b;
  } ;
  
  union {
    __IOM uint32_t CH7CTL;                      /*!< (@ 0x000000B8) Channel 7 control register */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Channel enable */
      __IOM uint32_t SDEIE      : 1;            /*!< [1..1] Enable bit for single data mode exception interrupt */
      __IOM uint32_t TAEIE      : 1;            /*!< [2..2] Enable bit for tranfer access error interrupt */
      __IOM uint32_t HTFIE      : 1;            /*!< [3..3] Enable bit for half transfer finish interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [4..4] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TFCS       : 1;            /*!< [5..5] Transfer flow controller select */
      __IOM uint32_t TM         : 2;            /*!< [7..6] Transfer mode */
      __IOM uint32_t CMEN       : 1;            /*!< [8..8] Circulation mode enable */
      __IOM uint32_t PNAGA      : 1;            /*!< [9..9] Next address generation algorithm of peripheral */
      __IOM uint32_t MNAGA      : 1;            /*!< [10..10] Next address generation algorithm of memory */
      __IOM uint32_t PWIDTH     : 2;            /*!< [12..11] Transfer width of peripheral */
      __IOM uint32_t MWIDTH     : 2;            /*!< [14..13] Transfer width of memory */
      __IOM uint32_t PAIF       : 1;            /*!< [15..15] Peripheral address increment fixed */
      __IOM uint32_t PRIO       : 2;            /*!< [17..16] Priority level */
      __IOM uint32_t SBMEN      : 1;            /*!< [18..18] Switch-buffer mode enable */
      __IOM uint32_t MBS        : 1;            /*!< [19..19] Memory buffer select */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBURST     : 2;            /*!< [22..21] Transfer burst type of peripheral */
      __IOM uint32_t MBURST     : 2;            /*!< [24..23] Transfer burst type of memory */
      __IOM uint32_t PERIEN     : 3;            /*!< [27..25] Peripheral enable */
    } CH7CTL_b;
  } ;
  
  union {
    __IOM uint32_t CH7CNT;                      /*!< (@ 0x000000BC) Channel 7 counter register */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Transfer counter */
    } CH7CNT_b;
  } ;
  
  union {
    __IOM uint32_t CH7PADDR;                    /*!< (@ 0x000000C0) Channel 7 peripheral base address register */
    
    struct {
      __IOM uint32_t PADDR      : 32;           /*!< [31..0] Peripheral base address */
    } CH7PADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH7M0ADDR;                   /*!< (@ 0x000000C4) Channel 7 memory 0 base address register */
    
    struct {
      __IOM uint32_t M0ADDR     : 32;           /*!< [31..0] Memory 0 base address */
    } CH7M0ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH7M1ADDR;                   /*!< (@ 0x000000C8) Channel 7 memory 1 base address register */
    
    struct {
      __IOM uint32_t M1ADDR     : 32;           /*!< [31..0] Memory 1 base address */
    } CH7M1ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CH7FCTL;                     /*!< (@ 0x000000CC) Channel 7 FIFO control register */
    
    struct {
      __IOM uint32_t FCCV       : 2;            /*!< [1..0] FIFO counter critical value */
      __IOM uint32_t MDMEN      : 1;            /*!< [2..2] Multi-data mode enable */
      __IOM uint32_t FCNT       : 3;            /*!< [5..3] FIFO counter */
      __IM  uint32_t            : 1;
      __IOM uint32_t FEEIE      : 1;            /*!< [7..7] Enable bit for FIFO error and exception interrupt */
    } CH7FCTL_b;
  } ;
} DMA1_Type;                                    /*!< Size = 208 (0xd0) */



/* =========================================================================================================================== */
/* ================                                         ENET_DMA                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: DMA controller operation (ENET_DMA)
  */

typedef struct {                                /*!< (@ 0x40029000) ENET_DMA Structure */
  
  union {
    __IOM uint32_t DMA_BCTL;                    /*!< (@ 0x00000000) Ethernet DMA bus control register */
    
    struct {
      __IOM uint32_t SWR        : 1;            /*!< [0..0] Software reset */
      __IOM uint32_t DAB        : 1;            /*!< [1..1] DMA Arbitration */
      __IOM uint32_t DPSL       : 5;            /*!< [6..2] Descriptor skip length */
      __IOM uint32_t DFM        : 1;            /*!< [7..7] Descriptor format mode */
      __IOM uint32_t PGBL       : 6;            /*!< [13..8] Programmable burst length */
      __IOM uint32_t RTPR       : 2;            /*!< [15..14] RxDMA and TxDMA transfer priority ratio */
      __IOM uint32_t FB         : 1;            /*!< [16..16] Fixed burst */
      __IOM uint32_t RXDP       : 6;            /*!< [22..17] Rx DMA PGBL */
      __IOM uint32_t UIP        : 1;            /*!< [23..23] Use independent PGBL */
      __IOM uint32_t FPBL       : 1;            /*!< [24..24] Four times PGBL mode */
      __IOM uint32_t AA         : 1;            /*!< [25..25] Address-aligned */
      __IOM uint32_t MB         : 1;            /*!< [26..26] Mixed burst */
    } DMA_BCTL_b;
  } ;
  
  union {
    __IOM uint32_t DMA_TPEN;                    /*!< (@ 0x00000004) Ethernet DMA transmit poll enable register */
    
    struct {
      __IOM uint32_t TPE        : 32;           /*!< [31..0] Transmit poll enable */
    } DMA_TPEN_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RPEN;                    /*!< (@ 0x00000008) Ethernet DMA receive poll enable register */
    
    struct {
      __IOM uint32_t RPE        : 32;           /*!< [31..0] Receive poll enable */
    } DMA_RPEN_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RDTADDR;                 /*!< (@ 0x0000000C) Ethernet DMA receive descriptor table address register */
    
    struct {
      __IOM uint32_t SRT        : 32;           /*!< [31..0] Start address of receive table */
    } DMA_RDTADDR_b;
  } ;
  
  union {
    __IOM uint32_t DMA_TDTADDR;                 /*!< (@ 0x00000010) Ethernet DMA transmit descriptor table address register */
    
    struct {
      __IOM uint32_t STT        : 32;           /*!< [31..0] Start address of transmit table */
    } DMA_TDTADDR_b;
  } ;
  
  union {
    __IOM uint32_t DMA_STAT;                    /*!< (@ 0x00000014) Ethernet DMA status register */
    
    struct {
      __IOM uint32_t TS         : 1;            /*!< [0..0] Transmit status */
      __IOM uint32_t TPS        : 1;            /*!< [1..1] Transmit process stopped status */
      __IOM uint32_t TBU        : 1;            /*!< [2..2] Transmit buffer unavailable status */
      __IOM uint32_t TJT        : 1;            /*!< [3..3] Transmit jabber timeout status */
      __IOM uint32_t RO         : 1;            /*!< [4..4] Receive overflow status */
      __IOM uint32_t TU         : 1;            /*!< [5..5] Transmit underflow status */
      __IOM uint32_t RS         : 1;            /*!< [6..6] Receive status */
      __IOM uint32_t RBU        : 1;            /*!< [7..7] Receive buffer unavailable status */
      __IOM uint32_t RPS        : 1;            /*!< [8..8] Receive process stopped status */
      __IOM uint32_t RWT        : 1;            /*!< [9..9] Receive watchdog timeout status */
      __IOM uint32_t ET         : 1;            /*!< [10..10] Early transmit status */
      __IM  uint32_t            : 2;
      __IOM uint32_t FBE        : 1;            /*!< [13..13] Fatal bus error status */
      __IOM uint32_t ER         : 1;            /*!< [14..14] Early receive status */
      __IOM uint32_t AI         : 1;            /*!< [15..15] Abnormal interrupt summary */
      __IOM uint32_t NI         : 1;            /*!< [16..16] Normal interrupt summary */
      __IM  uint32_t RP         : 3;            /*!< [19..17] Receive process state */
      __IM  uint32_t TP         : 3;            /*!< [22..20] Transmit process state */
      __IM  uint32_t EB         : 3;            /*!< [25..23] Error bits status */
      __IM  uint32_t            : 1;
      __IM  uint32_t MSC        : 1;            /*!< [27..27] MSC status */
      __IM  uint32_t WUM        : 1;            /*!< [28..28] WUM status */
      __IM  uint32_t TST        : 1;            /*!< [29..29] Time stamp trigger status */
    } DMA_STAT_b;
  } ;
  
  union {
    __IOM uint32_t DMA_CTL;                     /*!< (@ 0x00000018) Ethernet DMA control register */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t SRE        : 1;            /*!< [1..1] Start/stop receive enable */
      __IOM uint32_t OSF        : 1;            /*!< [2..2] Operate on second frame */
      __IOM uint32_t RTHC       : 2;            /*!< [4..3] Receive threshold control */
      __IM  uint32_t            : 1;
      __IOM uint32_t FUF        : 1;            /*!< [6..6] Forward undersized good frames */
      __IOM uint32_t FERF       : 1;            /*!< [7..7] Forward error frames */
      __IM  uint32_t            : 5;
      __IOM uint32_t STE        : 1;            /*!< [13..13] Start/stop transmission enable */
      __IOM uint32_t TTHC       : 3;            /*!< [16..14] Transmit threshold control */
      __IM  uint32_t            : 3;
      __IOM uint32_t FTF        : 1;            /*!< [20..20] Flush transmit FIFO */
      __IOM uint32_t TSFD       : 1;            /*!< [21..21] Transmit Store-and-Forward */
      __IM  uint32_t            : 2;
      __IOM uint32_t DAFRF      : 1;            /*!< [24..24] Disable flushing of received frames */
      __IOM uint32_t RSFD       : 1;            /*!< [25..25] Receive Store-and-Forward */
      __IOM uint32_t DTCERFD    : 1;            /*!< [26..26] Dropping of TCP/IP checksum error frames disable */
    } DMA_CTL_b;
  } ;
  
  union {
    __IOM uint32_t DMA_INTEN;                   /*!< (@ 0x0000001C) Ethernet DMA interrupt enable register */
    
    struct {
      __IOM uint32_t TIEN       : 1;            /*!< [0..0] Transmit interrupt enable */
      __IOM uint32_t TPSIEN     : 1;            /*!< [1..1] Transmit process stopped interrupt enable */
      __IOM uint32_t TBUIEN     : 1;            /*!< [2..2] Transmit buffer unavailable interrupt enable */
      __IOM uint32_t TJTIEN     : 1;            /*!< [3..3] Transmit jabber timeout interrupt enable */
      __IOM uint32_t ROIEN      : 1;            /*!< [4..4] Receive overflow interrupt enable */
      __IOM uint32_t TUIEN      : 1;            /*!< [5..5] Transmit underflow interrupt enable */
      __IOM uint32_t RIEN       : 1;            /*!< [6..6] Receive interrupt enable */
      __IOM uint32_t RBUIEN     : 1;            /*!< [7..7] Receive buffer unavailable interrupt enable */
      __IOM uint32_t RPSIEN     : 1;            /*!< [8..8] Receive process stopped interrupt enable */
      __IOM uint32_t RWTIEN     : 1;            /*!< [9..9] receive watchdog timeout interrupt enable */
      __IOM uint32_t ETIEN      : 1;            /*!< [10..10] Early transmit interrupt enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t FBEIEN     : 1;            /*!< [13..13] Fatal bus error interrupt enable */
      __IOM uint32_t ERIEN      : 1;            /*!< [14..14] Early receive interrupt enable */
      __IOM uint32_t AIEN       : 1;            /*!< [15..15] Abnormal interrupt summary enable */
      __IOM uint32_t NIEN       : 1;            /*!< [16..16] Normal interrupt summary enable */
    } DMA_INTEN_b;
  } ;
  
  union {
    __IM  uint32_t DMA_MFBOCNT;                 /*!< (@ 0x00000020) Ethernet DMA missed frame and buffer overflow counter register */
    
    struct {
      __IM  uint32_t MSFC       : 16;           /*!< [15..0] Missed frames by the controller */
      __IM  uint32_t            : 1;
      __IM  uint32_t MSFA       : 11;           /*!< [27..17] Missed frames by the application */
    } DMA_MFBOCNT_b;
  } ;
  
  union {
    __IOM uint32_t DMA_RSWDC;                   /*!< (@ 0x00000024) Ethernet DMA receive state watchdog counter register */
    
    struct {
      __IOM uint32_t WDCFRS     : 8;            /*!< [7..0] Watchdog counter for receive status (RS) */
    } DMA_RSWDC_b;
  } ;
  __IM  uint32_t  RESERVED[8];
  
  union {
    __IM  uint32_t DMA_CTDADDR;                 /*!< (@ 0x00000048) DMA current transmit descriptor address register */
    
    struct {
      __IM  uint32_t TDAP       : 32;           /*!< [31..0] transmit descriptor address pointer */
    } DMA_CTDADDR_b;
  } ;
  
  union {
    __IM  uint32_t DMA_CRDADDR;                 /*!< (@ 0x0000004C) Ethernet DMA current receive descriptor address register */
    
    struct {
      __IM  uint32_t RDAP       : 32;           /*!< [31..0] Receive descriptor address pointer */
    } DMA_CRDADDR_b;
  } ;
  
  union {
    __IM  uint32_t DMA_CTBADDR;                 /*!< (@ 0x00000050) Ethernet DMA current transmit buffer address register */
    
    struct {
      __IM  uint32_t TBAP       : 32;           /*!< [31..0] Transmit buffer address pointer */
    } DMA_CTBADDR_b;
  } ;
  
  union {
    __IM  uint32_t DMA_CRBADDR;                 /*!< (@ 0x00000054) Ethernet DMA current receive buffer address register */
    
    struct {
      __IM  uint32_t RBAP       : 32;           /*!< [31..0] receive buffer address pointer */
    } DMA_CRBADDR_b;
  } ;
} ENET_DMA_Type;                                /*!< Size = 88 (0x58) */



/* =========================================================================================================================== */
/* ================                                       ENET_MAC_FCTH                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief MAC flow control threshold register (ENET_MAC_FCTH)
  */

typedef struct {                                /*!< (@ 0x40029080) ENET_MAC_FCTH Structure */
  
  union {
    __IOM uint32_t MAC_FCTH;                    /*!< (@ 0x00000000) Ethernet MAC flow control threshold register */
    
    struct {
      __IOM uint32_t RFA        : 3;            /*!< [2..0] Threshold of active flow control */
      __IM  uint32_t            : 1;
      __IOM uint32_t RFD        : 3;            /*!< [6..4] Threshold of deactive flow control */
    } MAC_FCTH_b;
  } ;
} ENET_MAC_FCTH_Type;                           /*!< Size = 4 (0x4) */



/* =========================================================================================================================== */
/* ================                                         ENET_MAC                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: media access control (ENET_MAC)
  */

typedef struct {                                /*!< (@ 0x40028000) ENET_MAC Structure */
  
  union {
    __IOM uint32_t MAC_CFG;                     /*!< (@ 0x00000000) Ethernet MAC configuration register (MAC_CFG) */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t REN        : 1;            /*!< [2..2] Receiver enable */
      __IOM uint32_t TEN        : 1;            /*!< [3..3] Transmitter enable */
      __IOM uint32_t DFC        : 1;            /*!< [4..4] Deferral check */
      __IOM uint32_t BOL        : 2;            /*!< [6..5] Back-off limit */
      __IOM uint32_t APCD       : 1;            /*!< [7..7] Automatic pad/CRC drop */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTD        : 1;            /*!< [9..9] Retry disable */
      __IOM uint32_t IPFCO      : 1;            /*!< [10..10] IP frame checksum offload */
      __IOM uint32_t DPM        : 1;            /*!< [11..11] Duplex mode */
      __IOM uint32_t LBM        : 1;            /*!< [12..12] Loopback mode */
      __IOM uint32_t ROD        : 1;            /*!< [13..13] Receive own disable */
      __IOM uint32_t SPD        : 1;            /*!< [14..14] Fast Ethernet speed */
      __IM  uint32_t            : 1;
      __IOM uint32_t CSD        : 1;            /*!< [16..16] Carrier sense disable */
      __IOM uint32_t IGBS       : 3;            /*!< [19..17] Inter frame gap bit selection */
      __IM  uint32_t            : 2;
      __IOM uint32_t JBD        : 1;            /*!< [22..22] Jabber disable */
      __IOM uint32_t WDD        : 1;            /*!< [23..23] Watchdog disable */
      __IM  uint32_t            : 1;
      __IOM uint32_t TFCD       : 1;            /*!< [25..25] Type Frame CRC Dropping */
    } MAC_CFG_b;
  } ;
  
  union {
    __IOM uint32_t MAC_FRMF;                    /*!< (@ 0x00000004) Ethernet MAC frame filter register (MAC_FRMF) */
    
    struct {
      __IOM uint32_t PM         : 1;            /*!< [0..0] Promiscuous mode */
      __IOM uint32_t HUF        : 1;            /*!< [1..1] Hash unicast filter */
      __IOM uint32_t HMF        : 1;            /*!< [2..2] Hash multicast filter */
      __IOM uint32_t DAIFLT     : 1;            /*!< [3..3] Destination address inverse filtering */
      __IOM uint32_t MFD        : 1;            /*!< [4..4] multicast filter disable */
      __IOM uint32_t BFRMD      : 1;            /*!< [5..5] Broadcast frames disable */
      __IOM uint32_t PCFRM      : 2;            /*!< [7..6] Pass control frames */
      __IOM uint32_t SAIFLT     : 1;            /*!< [8..8] Source address inverse filtering */
      __IOM uint32_t SAFLT      : 1;            /*!< [9..9] Source address filter */
      __IOM uint32_t HPFLT      : 1;            /*!< [10..10] Hash or perfect filter */
      __IM  uint32_t            : 20;
      __IOM uint32_t FAR        : 1;            /*!< [31..31] Frames all receive */
    } MAC_FRMF_b;
  } ;
  
  union {
    __IOM uint32_t MAC_HLH;                     /*!< (@ 0x00000008) Ethernet MAC hash list high register */
    
    struct {
      __IOM uint32_t HLH        : 32;           /*!< [31..0] Hash list high */
    } MAC_HLH_b;
  } ;
  
  union {
    __IOM uint32_t MAC_HLL;                     /*!< (@ 0x0000000C) Ethernet MAC hash list low register */
    
    struct {
      __IOM uint32_t HLL        : 32;           /*!< [31..0] Hash list low */
    } MAC_HLL_b;
  } ;
  
  union {
    __IOM uint32_t MAC_PHY_CTL;                 /*!< (@ 0x00000010) Ethernet MAC PHY control register (MAC_PHY_CTL) */
    
    struct {
      __IOM uint32_t PB         : 1;            /*!< [0..0] PHY busy */
      __IOM uint32_t PW         : 1;            /*!< [1..1] PHY write */
      __IOM uint32_t CLR        : 3;            /*!< [4..2] Clock range */
      __IM  uint32_t            : 1;
      __IOM uint32_t PR         : 5;            /*!< [10..6] PHY register */
      __IOM uint32_t PA         : 5;            /*!< [15..11] PHY address */
    } MAC_PHY_CTL_b;
  } ;
  
  union {
    __IOM uint32_t MAC_PHY_DATA;                /*!< (@ 0x00000014) Ethernet MAC MII data register (MAC_PHY_DATA) */
    
    struct {
      __IOM uint32_t PD         : 16;           /*!< [15..0] PHY data */
    } MAC_PHY_DATA_b;
  } ;
  
  union {
    __IOM uint32_t MAC_FCTL;                    /*!< (@ 0x00000018) Ethernet MAC flow control register (MAC_FCTL) */
    
    struct {
      __IOM uint32_t FLCB_BKPA  : 1;            /*!< [0..0] Flow control busy/back pressure activate */
      __IOM uint32_t TFCEN      : 1;            /*!< [1..1] Transmit flow control enable */
      __IOM uint32_t RFCEN      : 1;            /*!< [2..2] Receive flow control enable */
      __IOM uint32_t UPFDT      : 1;            /*!< [3..3] Unicast pause frame detect */
      __IOM uint32_t PLTS       : 2;            /*!< [5..4] Pause low threshold */
      __IM  uint32_t            : 1;
      __IOM uint32_t DZQP       : 1;            /*!< [7..7] Disable Zero-quanta pause */
      __IM  uint32_t            : 8;
      __IOM uint32_t PTM        : 16;           /*!< [31..16] Pause time */
    } MAC_FCTL_b;
  } ;
  
  union {
    __IOM uint32_t MAC_VLT;                     /*!< (@ 0x0000001C) Ethernet MAC VLAN tag register (MAC_VLT) */
    
    struct {
      __IOM uint32_t VLTI       : 16;           /*!< [15..0] VLAN tag identifier (for receive frames) */
      __IOM uint32_t VLTC       : 1;            /*!< [16..16] 12-bit VLAN tag comparison */
    } MAC_VLT_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  MAC_RWFF;                     /*!< (@ 0x00000028) Ethernet MAC remote wakeup frame filter register (MAC_RWFF) */
  
  union {
    __IOM uint32_t MAC_WUM;                     /*!< (@ 0x0000002C) Ethernet MAC wakeup management register (MAC_WUM) */
    
    struct {
      __IOM uint32_t PWD        : 1;            /*!< [0..0] Power down */
      __IOM uint32_t MPEN       : 1;            /*!< [1..1] Magic Packet enable */
      __IOM uint32_t WFEN       : 1;            /*!< [2..2] Wakeup frame enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t MPKR       : 1;            /*!< [5..5] Magic packet received */
      __IOM uint32_t WUFR       : 1;            /*!< [6..6] Wakeup frame received */
      __IM  uint32_t            : 2;
      __IOM uint32_t GU         : 1;            /*!< [9..9] Global unicast */
      __IM  uint32_t            : 21;
      __IOM uint32_t WUFFRPR    : 1;            /*!< [31..31] Wakeup frame filter register pointer reset */
    } MAC_WUM_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IM  uint32_t MAC_DBG;                     /*!< (@ 0x00000034) Ethernet MAC debug register (MAC_DBG) */
    
    struct {
      __IM  uint32_t MRNI       : 1;            /*!< [0..0] MAC receive state not idle */
      __IM  uint32_t RXAFS      : 2;            /*!< [2..1] Rx asynchronous FIFO status */
      __IM  uint32_t            : 1;
      __IM  uint32_t RXFW       : 1;            /*!< [4..4] RxFIFO is writing */
      __IM  uint32_t RXFRS      : 2;            /*!< [6..5] RxFIFO read operation status */
      __IM  uint32_t            : 1;
      __IM  uint32_t RXFS       : 2;            /*!< [9..8] RxFIFO state */
      __IM  uint32_t            : 6;
      __IM  uint32_t MTNI       : 1;            /*!< [16..16] MAC transmit state not idle */
      __IM  uint32_t SOMT       : 2;            /*!< [18..17] Status of MAC transmitter */
      __IM  uint32_t PCS        : 1;            /*!< [19..19] Pause condition status */
      __IM  uint32_t TXFRS      : 2;            /*!< [21..20] TxFIFO read operation status */
      __IM  uint32_t TXFW       : 1;            /*!< [22..22] TxFIFO is writing */
      __IM  uint32_t            : 1;
      __IM  uint32_t TXFNE      : 1;            /*!< [24..24] TxFIFO not empty flag */
      __IM  uint32_t TXFF       : 1;            /*!< [25..25] TxFIFO Full flag */
    } MAC_DBG_b;
  } ;
  
  union {
    __IM  uint32_t MAC_INTF;                    /*!< (@ 0x00000038) Ethernet MAC interrupt flag register (MAC_INTF) */
    
    struct {
      __IM  uint32_t            : 3;
      __IM  uint32_t WUM        : 1;            /*!< [3..3] WUM status */
      __IM  uint32_t MSC        : 1;            /*!< [4..4] MSC status */
      __IM  uint32_t MSCR       : 1;            /*!< [5..5] MSC receive status */
      __IM  uint32_t MSCT       : 1;            /*!< [6..6] MSC transmit status */
      __IM  uint32_t            : 2;
      __IM  uint32_t TMST       : 1;            /*!< [9..9] Time stamp trigger status */
    } MAC_INTF_b;
  } ;
  
  union {
    __IOM uint32_t MAC_INTMSK;                  /*!< (@ 0x0000003C) Ethernet MAC interrupt mask register (MAC_INTMSK) */
    
    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t WUMIM      : 1;            /*!< [3..3] WUM interrupt mask */
      __IM  uint32_t            : 5;
      __IOM uint32_t TMSTIM     : 1;            /*!< [9..9] Time stamp trigger interrupt mask */
    } MAC_INTMSK_b;
  } ;
  
  union {
    __IOM uint32_t MAC_ADDR0H;                  /*!< (@ 0x00000040) Ethernet MAC address 0 high register (MAC_ADDR0H) */
    
    struct {
      __IOM uint32_t ADDR0H     : 16;           /*!< [15..0] MAC address0 high */
      __IM  uint32_t            : 15;
      __IOM uint32_t MO         : 1;            /*!< [31..31] Always 1 */
    } MAC_ADDR0H_b;
  } ;
  
  union {
    __IOM uint32_t MAC_ADDR0L;                  /*!< (@ 0x00000044) Ethernet MAC address 0 low register */
    
    struct {
      __IOM uint32_t ADDR0L     : 32;           /*!< [31..0] MAC address0 low */
    } MAC_ADDR0L_b;
  } ;
  
  union {
    __IOM uint32_t MAC_ADDR1H;                  /*!< (@ 0x00000048) Ethernet MAC address 1 high register (MAC_ADDR1H) */
    
    struct {
      __IOM uint32_t ADDR1H     : 16;           /*!< [15..0] MAC address1 high */
      __IM  uint32_t            : 8;
      __IOM uint32_t MB         : 6;            /*!< [29..24] Mask byte */
      __IOM uint32_t SAF        : 1;            /*!< [30..30] Source address filter */
      __IOM uint32_t AFE        : 1;            /*!< [31..31] Address filter enable */
    } MAC_ADDR1H_b;
  } ;
  
  union {
    __IOM uint32_t MAC_ADDR1L;                  /*!< (@ 0x0000004C) Ethernet MAC address1 low register */
    
    struct {
      __IOM uint32_t ADDR1L     : 32;           /*!< [31..0] MAC address1 low */
    } MAC_ADDR1L_b;
  } ;
  
  union {
    __IOM uint32_t MAC_ADDR2H;                  /*!< (@ 0x00000050) Ethernet MAC address 2 high register (MAC_ADDR2H) */
    
    struct {
      __IOM uint32_t ADDR2H     : 16;           /*!< [15..0] Ethernet MAC address 2 high register */
      __IM  uint32_t            : 8;
      __IOM uint32_t MB         : 6;            /*!< [29..24] Mask byte */
      __IOM uint32_t SAF        : 1;            /*!< [30..30] Source address filter */
      __IOM uint32_t AFE        : 1;            /*!< [31..31] Address filter enable */
    } MAC_ADDR2H_b;
  } ;
  
  union {
    __IOM uint32_t MAC_ADDR2L;                  /*!< (@ 0x00000054) Ethernet MAC address 2 low register */
    
    struct {
      __IOM uint32_t ADDR2L     : 32;           /*!< [31..0] MAC address2 low */
    } MAC_ADDR2L_b;
  } ;
  
  union {
    __IOM uint32_t MAC_ADDR3H;                  /*!< (@ 0x00000058) Ethernet MAC address 3 high register (MAC_ADDR3H) */
    
    struct {
      __IOM uint32_t ADDR3H     : 16;           /*!< [15..0] MAC address3 high */
      __IM  uint32_t            : 8;
      __IOM uint32_t MB         : 6;            /*!< [29..24] Mask byte */
      __IOM uint32_t SAF        : 1;            /*!< [30..30] Source address filter */
      __IOM uint32_t AFE        : 1;            /*!< [31..31] Address filter enable */
    } MAC_ADDR3H_b;
  } ;
  
  union {
    __IOM uint32_t MAC_ADDR3L;                  /*!< (@ 0x0000005C) Ethernet MAC address 3 low register */
    
    struct {
      __IOM uint32_t ADDR3L     : 32;           /*!< [31..0] MAC address3 low */
    } MAC_ADDR3L_b;
  } ;
} ENET_MAC_Type;                                /*!< Size = 96 (0x60) */



/* =========================================================================================================================== */
/* ================                                         ENET_MSC                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: MAC statistics counters (ENET_MSC)
  */

typedef struct {                                /*!< (@ 0x40028100) ENET_MSC Structure */
  
  union {
    __IOM uint32_t MSC_CTL;                     /*!< (@ 0x00000000) Ethernet MSC control register (MSC_CTL) */
    
    struct {
      __IOM uint32_t CTR        : 1;            /*!< [0..0] Counter reset */
      __IOM uint32_t CTSR       : 1;            /*!< [1..1] Counter stop rollover */
      __IOM uint32_t RTOR       : 1;            /*!< [2..2] Reset on read */
      __IOM uint32_t MCFZ       : 1;            /*!< [3..3] MSC counter freeze */
      __OM  uint32_t PMC        : 1;            /*!< [4..4] Preset MSC counter */
      __IOM uint32_t AFHPM      : 1;            /*!< [5..5] Almost full or half preset mode */
    } MSC_CTL_b;
  } ;
  
  union {
    __IM  uint32_t MSC_RINTF;                   /*!< (@ 0x00000004) Ethernet MSC receive interrupt flag register (MSC_RINTF) */
    
    struct {
      __IM  uint32_t            : 5;
      __IM  uint32_t RFCE       : 1;            /*!< [5..5] Received frames CRC error */
      __IM  uint32_t RFAE       : 1;            /*!< [6..6] Received frames alignment error */
      __IM  uint32_t            : 10;
      __IM  uint32_t RGUF       : 1;            /*!< [17..17] Received Good Unicast Frames */
    } MSC_RINTF_b;
  } ;
  
  union {
    __IM  uint32_t MSC_TINTF;                   /*!< (@ 0x00000008) Ethernet MSC transmit interrupt flag register (MSC_TINTF) */
    
    struct {
      __IM  uint32_t            : 14;
      __IM  uint32_t TGFSC      : 1;            /*!< [14..14] Transmitted good frames single collision */
      __IM  uint32_t TGFMSC     : 1;            /*!< [15..15] Transmitted good frames more single collision */
      __IM  uint32_t            : 5;
      __IM  uint32_t TGF        : 1;            /*!< [21..21] Transmitted good frames */
    } MSC_TINTF_b;
  } ;
  
  union {
    __IOM uint32_t MSC_RINTMSK;                 /*!< (@ 0x0000000C) Ethernet MSC receive interrupt mask register (MSC_RINTMSK) */
    
    struct {
      __IM  uint32_t            : 5;
      __IOM uint32_t RFCEIM     : 1;            /*!< [5..5] Received frame CRC error interrupt mask */
      __IOM uint32_t RFAEIM     : 1;            /*!< [6..6] Received frames alignment error interrupt mask */
      __IM  uint32_t            : 10;
      __IOM uint32_t RGUFIM     : 1;            /*!< [17..17] Received good unicast frames interrupt mask */
    } MSC_RINTMSK_b;
  } ;
  
  union {
    __IOM uint32_t MSC_TINTMSK;                 /*!< (@ 0x00000010) Ethernet MSC transmit interrupt mask register (MSC_TINTMSK) */
    
    struct {
      __IM  uint32_t            : 14;
      __IOM uint32_t TGFSCIM    : 1;            /*!< [14..14] Transmitted good frames single collision interrupt mask */
      __IOM uint32_t TGFMSCIM   : 1;            /*!< [15..15] Transmitted good frames more single interrupt collision mask */
      __IM  uint32_t            : 5;
      __IOM uint32_t TGFIM      : 1;            /*!< [21..21] Transmitted good frames interrupt mask */
    } MSC_TINTMSK_b;
  } ;
  __IM  uint32_t  RESERVED[14];
  
  union {
    __IM  uint32_t MSC_SCCNT;                   /*!< (@ 0x0000004C) Ethernet MSC transmitted good frames after a single collision counter */
    
    struct {
      __IM  uint32_t SCC        : 32;           /*!< [31..0] Transmitted good frames after a single collision counter */
    } MSC_SCCNT_b;
  } ;
  
  union {
    __IM  uint32_t MSC_MSCCNT;                  /*!< (@ 0x00000050) Ethernet MSC transmitted good frames after more than a single collision */
    
    struct {
      __IM  uint32_t MSCC       : 32;           /*!< [31..0] Transmitted good frames after more than a single collision counter */
    } MSC_MSCCNT_b;
  } ;
  __IM  uint32_t  RESERVED1[5];
  
  union {
    __IM  uint32_t MSC_TGFCNT;                  /*!< (@ 0x00000068) Ethernet MSC transmitted good frames counter register */
    
    struct {
      __IM  uint32_t TGF        : 32;           /*!< [31..0] Transmitted good frames counter */
    } MSC_TGFCNT_b;
  } ;
  __IM  uint32_t  RESERVED2[10];
  
  union {
    __IM  uint32_t MSC_RFCECNT;                 /*!< (@ 0x00000094) Ethernet MSC received frames with CRC error counter register */
    
    struct {
      __IM  uint32_t RFCER      : 32;           /*!< [31..0] Received frames with CRC error counter */
    } MSC_RFCECNT_b;
  } ;
  
  union {
    __IM  uint32_t MSC_RFAECNT;                 /*!< (@ 0x00000098) Ethernet MSC received frames with alignment error counter register */
    
    struct {
      __IM  uint32_t RFAER      : 32;           /*!< [31..0] Received frames with alignment error counter */
    } MSC_RFAECNT_b;
  } ;
  __IM  uint32_t  RESERVED3[10];
  
  union {
    __IM  uint32_t MSC_RGUFCNT;                 /*!< (@ 0x000000C4) MSC received good unicast frames counter register */
    
    struct {
      __IM  uint32_t RGUF       : 32;           /*!< [31..0] Received good unicast frames counter */
    } MSC_RGUFCNT_b;
  } ;
} ENET_MSC_Type;                                /*!< Size = 200 (0xc8) */



/* =========================================================================================================================== */
/* ================                                         ENET_PTP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: Precision time protocol (ENET_PTP)
  */

typedef struct {                                /*!< (@ 0x40028700) ENET_PTP Structure */
  
  union {
    __IOM uint32_t PTP_TSCTL;                   /*!< (@ 0x00000000) Ethernet PTP time stamp control register (PTP_TSCTL) */
    
    struct {
      __IOM uint32_t TMSEN      : 1;            /*!< [0..0] Time stamp enable */
      __IOM uint32_t TMSFCU     : 1;            /*!< [1..1] Time stamp fine or coarse update */
      __IOM uint32_t TMSSTI     : 1;            /*!< [2..2] Time stamp system time initialize */
      __IOM uint32_t TMSSTU     : 1;            /*!< [3..3] Time stamp system time update */
      __IOM uint32_t TMSITEN    : 1;            /*!< [4..4] Time stamp interrupt trigger enable */
      __IOM uint32_t TMSARU     : 1;            /*!< [5..5] Time stamp addend register update */
      __IM  uint32_t            : 2;
      __IOM uint32_t ARFSEN     : 1;            /*!< [8..8] All received frames snapshot enable */
      __IOM uint32_t SCROM      : 1;            /*!< [9..9] Subsecond counter rollover mode */
      __IOM uint32_t PFSV       : 1;            /*!< [10..10] PTP frame snooping version */
      __IOM uint32_t ESEN       : 1;            /*!< [11..11] Received Ethernet snapshot enable */
      __IOM uint32_t IP6SEN     : 1;            /*!< [12..12] Received IPv6 snapshot enable */
      __IOM uint32_t IP4SEN     : 1;            /*!< [13..13] Received IPv4 snapshot enable */
      __IOM uint32_t ETMSEN     : 1;            /*!< [14..14] Received event type message snapshot enable */
      __IOM uint32_t MNMSEN     : 1;            /*!< [15..15] Received master node message snapshot enable */
      __IOM uint32_t CKNT       : 2;            /*!< [17..16] Clock node type for time stamp */
      __IOM uint32_t MAFEN      : 1;            /*!< [18..18] MAC address filter enable for PTP frame */
    } PTP_TSCTL_b;
  } ;
  
  union {
    __IOM uint32_t PTP_SSINC;                   /*!< (@ 0x00000004) Ethernet PTP subsecond increment register */
    
    struct {
      __IOM uint32_t STMSSI     : 8;            /*!< [7..0] System time subsecond increment */
    } PTP_SSINC_b;
  } ;
  
  union {
    __IM  uint32_t PTP_TSH;                     /*!< (@ 0x00000008) Ethernet PTP time stamp high register */
    
    struct {
      __IM  uint32_t STMS       : 32;           /*!< [31..0] System time second */
    } PTP_TSH_b;
  } ;
  
  union {
    __IM  uint32_t PTP_TSL;                     /*!< (@ 0x0000000C) Ethernet PTP time stamp low register (PTP_TSL) */
    
    struct {
      __IM  uint32_t STMSS      : 31;           /*!< [30..0] System time subseconds */
      __IM  uint32_t STS        : 1;            /*!< [31..31] System time sign */
    } PTP_TSL_b;
  } ;
  
  union {
    __IOM uint32_t PTP_TSUH;                    /*!< (@ 0x00000010) Ethernet PTP time stamp high update register */
    
    struct {
      __IOM uint32_t TMSUS      : 32;           /*!< [31..0] Time stamp update second */
    } PTP_TSUH_b;
  } ;
  
  union {
    __IOM uint32_t PTP_TSUL;                    /*!< (@ 0x00000014) Ethernet PTP time stamp low update register (PTP_TSUL) */
    
    struct {
      __IOM uint32_t TMSUSS     : 31;           /*!< [30..0] Time stamp update subseconds */
      __IOM uint32_t TMSUPNS    : 1;            /*!< [31..31] Time stamp update positive or negative sign */
    } PTP_TSUL_b;
  } ;
  
  union {
    __IOM uint32_t PTP_TSADDEND;                /*!< (@ 0x00000018) Ethernet PTP time stamp addend register */
    
    struct {
      __IOM uint32_t TMSA       : 32;           /*!< [31..0] Time stamp addend */
    } PTP_TSADDEND_b;
  } ;
  
  union {
    __IOM uint32_t PTP_ETH;                     /*!< (@ 0x0000001C) Ethernet PTP expected time high register */
    
    struct {
      __IOM uint32_t ETSH       : 32;           /*!< [31..0] Expected time stamp high */
    } PTP_ETH_b;
  } ;
  
  union {
    __IOM uint32_t PTP_ETL;                     /*!< (@ 0x00000020) Ethernet PTP expected time low register */
    
    struct {
      __IOM uint32_t ETSL       : 32;           /*!< [31..0] Expected time stamp low */
    } PTP_ETL_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IM  uint32_t PTP_TSF;                     /*!< (@ 0x00000028) Ethernet PTP time stamp flag register */
    
    struct {
      __IM  uint32_t TSSCO      : 1;            /*!< [0..0] Timestamp second counter overflow */
      __IM  uint32_t TTM        : 1;            /*!< [1..1] Target time match */
    } PTP_TSF_b;
  } ;
  
  union {
    __IOM uint32_t PTP_PPSCTL;                  /*!< (@ 0x0000002C) Ethernet PTP PPS control register */
    
    struct {
      __IOM uint32_t PPSOFC     : 4;            /*!< [3..0] PPS output frequency configure */
    } PTP_PPSCTL_b;
  } ;
} ENET_PTP_Type;                                /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           EXMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief External memory controller (EXMC)
  */

typedef struct {                                /*!< (@ 0xA0000000) EXMC Structure */
  
  union {
    __IOM uint32_t SNCTL0;                      /*!< (@ 0x00000000) SRAM/NOR flash control register 0 */
    
    struct {
      __IOM uint32_t NRBKEN     : 1;            /*!< [0..0] NOR bank enable */
      __IOM uint32_t NRMUX      : 1;            /*!< [1..1] NOR bank memory address/data multiplexing */
      __IOM uint32_t NRTP       : 2;            /*!< [3..2] NOR bank memory type */
      __IOM uint32_t NRW        : 2;            /*!< [5..4] NOR bank memory data bus width */
      __IOM uint32_t NREN       : 1;            /*!< [6..6] NOR Flash access enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t SBRSTEN    : 1;            /*!< [8..8] Synchronous burst enable */
      __IOM uint32_t NRWTPOL    : 1;            /*!< [9..9] NWAIT signal polarity */
      __IOM uint32_t WRAPEN     : 1;            /*!< [10..10] Wrapped burst mode enable */
      __IOM uint32_t NRWTCFG    : 1;            /*!< [11..11] NWAIT signal configuration, only work in synchronous mode */
      __IOM uint32_t WREN       : 1;            /*!< [12..12] Write enable */
      __IOM uint32_t NRWTEN     : 1;            /*!< [13..13] NWAIT signal enable */
      __IOM uint32_t EXMODEN    : 1;            /*!< [14..14] Extended mode enable */
      __IOM uint32_t ASYNCWAIT  : 1;            /*!< [15..15] Asynchronous wait */
      __IOM uint32_t CPS        : 3;            /*!< [18..16] CRAM page size */
      __IOM uint32_t SYNCWR     : 1;            /*!< [19..19] Synchronous write */
      __IOM uint32_t CCK        : 1;            /*!< [20..20] Consecutive Clock */
    } SNCTL0_b;
  } ;
  
  union {
    __IOM uint32_t SNTCFG0;                     /*!< (@ 0x00000004) SRAM/NOR flash timing configuration register 0 */
    
    struct {
      __IOM uint32_t ASET       : 4;            /*!< [3..0] Address setup time */
      __IOM uint32_t AHLD       : 4;            /*!< [7..4] Address hold time */
      __IOM uint32_t DSET       : 8;            /*!< [15..8] Data setup time */
      __IOM uint32_t BUSLAT     : 4;            /*!< [19..16] Bus latency */
      __IOM uint32_t CKDIV      : 4;            /*!< [23..20] Synchronous clock divide ratio */
      __IOM uint32_t DLAT       : 4;            /*!< [27..24] Data latency for NOR Flash */
      __IOM uint32_t ASYNCMOD   : 2;            /*!< [29..28] Asynchronous access mode */
    } SNTCFG0_b;
  } ;
  
  union {
    __IOM uint32_t SNCTL1;                      /*!< (@ 0x00000008) SRAM/NOR flash control register 1 */
    
    struct {
      __IOM uint32_t NRBKEN     : 1;            /*!< [0..0] NOR bank enable */
      __IOM uint32_t NRMUX      : 1;            /*!< [1..1] NOR bank memory address/data multiplexing */
      __IOM uint32_t NRTP       : 2;            /*!< [3..2] NOR bank memory type */
      __IOM uint32_t NRW        : 2;            /*!< [5..4] NOR bank memory data bus width */
      __IOM uint32_t NREN       : 1;            /*!< [6..6] NOR Flash access enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t SBRSTEN    : 1;            /*!< [8..8] Synchronous burst enable */
      __IOM uint32_t NRWTPOL    : 1;            /*!< [9..9] NWAIT signal polarity */
      __IOM uint32_t WRAPEN     : 1;            /*!< [10..10] Wrapped burst mode enable */
      __IOM uint32_t NRWTCFG    : 1;            /*!< [11..11] NWAIT signal configuration, only work in synchronous mode */
      __IOM uint32_t WREN       : 1;            /*!< [12..12] Write enable */
      __IOM uint32_t NRWTEN     : 1;            /*!< [13..13] NWAIT signal enable */
      __IOM uint32_t EXMODEN    : 1;            /*!< [14..14] Extended mode enable */
      __IOM uint32_t ASYNCWAIT  : 1;            /*!< [15..15] Asynchronous wait */
      __IOM uint32_t CPS        : 3;            /*!< [18..16] CRAM page size */
      __IOM uint32_t SYNCWR     : 1;            /*!< [19..19] Synchronous write */
      __IOM uint32_t CCK        : 1;            /*!< [20..20] Consecutive Clock */
    } SNCTL1_b;
  } ;
  
  union {
    __IOM uint32_t SNTCFG1;                     /*!< (@ 0x0000000C) SRAM/NOR flash timing configuration register 1 */
    
    struct {
      __IOM uint32_t ASET       : 4;            /*!< [3..0] Address setup time */
      __IOM uint32_t AHLD       : 4;            /*!< [7..4] Address hold time */
      __IOM uint32_t DSET       : 8;            /*!< [15..8] Data setup time */
      __IOM uint32_t BUSLAT     : 4;            /*!< [19..16] Bus latency */
      __IOM uint32_t CKDIV      : 4;            /*!< [23..20] Synchronous clock divide ratio */
      __IOM uint32_t DLAT       : 4;            /*!< [27..24] Data latency for NOR Flash */
      __IOM uint32_t ASYNCMOD   : 2;            /*!< [29..28] Asynchronous access mode */
    } SNTCFG1_b;
  } ;
  
  union {
    __IOM uint32_t SNCTL2;                      /*!< (@ 0x00000010) SRAM/NOR flash control register 2 */
    
    struct {
      __IOM uint32_t NRBKEN     : 1;            /*!< [0..0] NOR bank enable */
      __IOM uint32_t NRMUX      : 1;            /*!< [1..1] NOR bank memory address/data multiplexing */
      __IOM uint32_t NRTP       : 2;            /*!< [3..2] NOR bank memory type */
      __IOM uint32_t NRW        : 2;            /*!< [5..4] NOR bank memory data bus width */
      __IOM uint32_t NREN       : 1;            /*!< [6..6] NOR Flash access enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t SBRSTEN    : 1;            /*!< [8..8] Synchronous burst enable */
      __IOM uint32_t NRWTPOL    : 1;            /*!< [9..9] NWAIT signal polarity */
      __IOM uint32_t WRAPEN     : 1;            /*!< [10..10] Wrapped burst mode enable */
      __IOM uint32_t NRWTCFG    : 1;            /*!< [11..11] NWAIT signal configuration, only work in synchronous mode */
      __IOM uint32_t WREN       : 1;            /*!< [12..12] Write enable */
      __IOM uint32_t NRWTEN     : 1;            /*!< [13..13] NWAIT signal enable */
      __IOM uint32_t EXMODEN    : 1;            /*!< [14..14] Extended mode enable */
      __IOM uint32_t ASYNCWAIT  : 1;            /*!< [15..15] Asynchronous wait */
      __IOM uint32_t CPS        : 3;            /*!< [18..16] CRAM page size */
      __IOM uint32_t SYNCWR     : 1;            /*!< [19..19] Synchronous write */
      __IOM uint32_t CCK        : 1;            /*!< [20..20] Consecutive Clock */
    } SNCTL2_b;
  } ;
  
  union {
    __IOM uint32_t SNTCFG2;                     /*!< (@ 0x00000014) SRAM/NOR flash timing configuration register 2 */
    
    struct {
      __IOM uint32_t ASET       : 4;            /*!< [3..0] Address setup time */
      __IOM uint32_t AHLD       : 4;            /*!< [7..4] Address hold time */
      __IOM uint32_t DSET       : 8;            /*!< [15..8] Data setup time */
      __IOM uint32_t BUSLAT     : 4;            /*!< [19..16] Bus latency */
      __IOM uint32_t CKDIV      : 4;            /*!< [23..20] Synchronous clock divide ratio */
      __IOM uint32_t DLAT       : 4;            /*!< [27..24] Data latency for NOR Flash */
      __IOM uint32_t ASYNCMOD   : 2;            /*!< [29..28] Asynchronous access mode */
    } SNTCFG2_b;
  } ;
  
  union {
    __IOM uint32_t SNCTL3;                      /*!< (@ 0x00000018) SRAM/NOR flash control register 3 */
    
    struct {
      __IOM uint32_t NRBKEN     : 1;            /*!< [0..0] NOR bank enable */
      __IOM uint32_t NRMUX      : 1;            /*!< [1..1] NOR bank memory address/data multiplexing */
      __IOM uint32_t NRTP       : 2;            /*!< [3..2] NOR bank memory type */
      __IOM uint32_t NRW        : 2;            /*!< [5..4] NOR bank memory data bus width */
      __IOM uint32_t NREN       : 1;            /*!< [6..6] NOR Flash access enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t SBRSTEN    : 1;            /*!< [8..8] Synchronous burst enable */
      __IOM uint32_t NRWTPOL    : 1;            /*!< [9..9] NWAIT signal polarity */
      __IOM uint32_t WRAPEN     : 1;            /*!< [10..10] Wrapped burst mode enable */
      __IOM uint32_t NRWTCFG    : 1;            /*!< [11..11] NWAIT signal configuration, only work in synchronous mode */
      __IOM uint32_t WREN       : 1;            /*!< [12..12] Write enable */
      __IOM uint32_t NRWTEN     : 1;            /*!< [13..13] NWAIT signal enable */
      __IOM uint32_t EXMODEN    : 1;            /*!< [14..14] Extended mode enable */
      __IOM uint32_t ASYNCWAIT  : 1;            /*!< [15..15] Asynchronous wait */
      __IOM uint32_t CPS        : 3;            /*!< [18..16] CRAM page size */
      __IOM uint32_t SYNCWR     : 1;            /*!< [19..19] Synchronous write */
      __IOM uint32_t CCK        : 1;            /*!< [20..20] Consecutive Clock */
    } SNCTL3_b;
  } ;
  
  union {
    __IOM uint32_t SNTCFG3;                     /*!< (@ 0x0000001C) SRAM/NOR flash timing configuration register 3 */
    
    struct {
      __IOM uint32_t ASET       : 4;            /*!< [3..0] Address setup time */
      __IOM uint32_t AHLD       : 4;            /*!< [7..4] Address hold time */
      __IOM uint32_t DSET       : 8;            /*!< [15..8] Data setup time */
      __IOM uint32_t BUSLAT     : 4;            /*!< [19..16] Bus latency */
      __IOM uint32_t CKDIV      : 4;            /*!< [23..20] Synchronous clock divide ratio */
      __IOM uint32_t DLAT       : 4;            /*!< [27..24] Data latency for NOR Flash */
      __IOM uint32_t ASYNCMOD   : 2;            /*!< [29..28] Asynchronous access mode */
    } SNTCFG3_b;
  } ;
  __IM  uint32_t  RESERVED[16];
  
  union {
    __IOM uint32_t NPCTL1;                      /*!< (@ 0x00000060) NAND flash/PC card control register 1 */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t NDWTEN     : 1;            /*!< [1..1] Wait feature enable */
      __IOM uint32_t NDBKEN     : 1;            /*!< [2..2] NAND bank enable */
      __IOM uint32_t NDTP       : 1;            /*!< [3..3] NAND bank memory type */
      __IOM uint32_t NDW        : 2;            /*!< [5..4] NAND bank memory data bus width */
      __IOM uint32_t ECCEN      : 1;            /*!< [6..6] ECC enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t CTR        : 4;            /*!< [12..9] CLE to RE delay */
      __IOM uint32_t ATR        : 4;            /*!< [16..13] ALE to RE delay */
      __IOM uint32_t ECCSZ      : 3;            /*!< [19..17] ECC size */
    } NPCTL1_b;
  } ;
  
  union {
    __IOM uint32_t NPINTEN1;                    /*!< (@ 0x00000064) NAND flash/PC card interrupt enable register 1 */
    
    struct {
      __IOM uint32_t INTRS      : 1;            /*!< [0..0] Interrupt rising edge status */
      __IOM uint32_t INTHS      : 1;            /*!< [1..1] Interrupt high-level status */
      __IOM uint32_t INTFS      : 1;            /*!< [2..2] Interrupt falling edge status */
      __IOM uint32_t INTREN     : 1;            /*!< [3..3] Interrupt rising edge detection enable bit */
      __IOM uint32_t INTHEN     : 1;            /*!< [4..4] Interrupt high-level detection enable */
      __IOM uint32_t INTFEN     : 1;            /*!< [5..5] Interrupt falling edge detection enable */
      __IOM uint32_t FFEPT      : 1;            /*!< [6..6] FIFO empty flag */
    } NPINTEN1_b;
  } ;
  
  union {
    __IOM uint32_t NPCTCFG1;                    /*!< (@ 0x00000068) NAND flash/PC card common space timing configuration register 1 */
    
    struct {
      __IOM uint32_t COMSET     : 8;            /*!< [7..0] Common memory setup time */
      __IOM uint32_t COMWAIT    : 8;            /*!< [15..8] Common memory wait time */
      __IOM uint32_t COMHLD     : 8;            /*!< [23..16] Common memory hold time */
      __IOM uint32_t COMHIZ     : 8;            /*!< [31..24] Common memory data bus HiZ time */
    } NPCTCFG1_b;
  } ;
  
  union {
    __IOM uint32_t NPATCFG1;                    /*!< (@ 0x0000006C) NAND flash/PC card attribute space timing configuration register 1 */
    
    struct {
      __IOM uint32_t ATTSET     : 8;            /*!< [7..0] Attribute memory setup time */
      __IOM uint32_t ATTWAIT    : 8;            /*!< [15..8] Attribute memory wait time */
      __IOM uint32_t ATTHLD     : 8;            /*!< [23..16] Attribute memory hold time */
      __IOM uint32_t ATTHIZ     : 8;            /*!< [31..24] Attribute memory data bus HiZ time */
    } NPATCFG1_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t NECC1;                       /*!< (@ 0x00000074) NAND flash ECC register 1 */
    
    struct {
      __IM  uint32_t ECC        : 32;           /*!< [31..0] ECC result */
    } NECC1_b;
  } ;
  __IM  uint32_t  RESERVED2[2];
  
  union {
    __IOM uint32_t NPCTL2;                      /*!< (@ 0x00000080) NAND flash/PC card control register 2 */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t NDWTEN     : 1;            /*!< [1..1] Wait feature enable */
      __IOM uint32_t NDBKEN     : 1;            /*!< [2..2] NAND bank enable */
      __IOM uint32_t NDTP       : 1;            /*!< [3..3] NAND bank memory type */
      __IOM uint32_t NDW        : 2;            /*!< [5..4] NAND bank memory data bus width */
      __IOM uint32_t ECCEN      : 1;            /*!< [6..6] ECC enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t CTR        : 4;            /*!< [12..9] CLE to RE delay */
      __IOM uint32_t ATR        : 4;            /*!< [16..13] ALE to RE delay */
      __IOM uint32_t ECCSZ      : 3;            /*!< [19..17] ECC size */
    } NPCTL2_b;
  } ;
  
  union {
    __IOM uint32_t NPINTEN2;                    /*!< (@ 0x00000084) NAND flash/PC card interrupt enable register 2 */
    
    struct {
      __IOM uint32_t INTRS      : 1;            /*!< [0..0] Interrupt rising edge status */
      __IOM uint32_t INTHS      : 1;            /*!< [1..1] Interrupt high-level status */
      __IOM uint32_t INTFS      : 1;            /*!< [2..2] Interrupt falling edge status */
      __IOM uint32_t INTREN     : 1;            /*!< [3..3] Interrupt rising edge detection enable bit */
      __IOM uint32_t INTHEN     : 1;            /*!< [4..4] Interrupt high-level detection enable */
      __IOM uint32_t INTFEN     : 1;            /*!< [5..5] Interrupt falling edge detection enable */
      __IOM uint32_t FFEPT      : 1;            /*!< [6..6] FIFO empty flag */
    } NPINTEN2_b;
  } ;
  
  union {
    __IOM uint32_t NPCTCFG2;                    /*!< (@ 0x00000088) NAND flash/PC card common space timing configuration register 2 */
    
    struct {
      __IOM uint32_t COMSET     : 8;            /*!< [7..0] Common memory setup time */
      __IOM uint32_t COMWAIT    : 8;            /*!< [15..8] Common memory wait time */
      __IOM uint32_t COMHLD     : 8;            /*!< [23..16] Common memory hold time */
      __IOM uint32_t COMHIZ     : 8;            /*!< [31..24] Common memory data bus HiZ time */
    } NPCTCFG2_b;
  } ;
  
  union {
    __IOM uint32_t NPATCFG2;                    /*!< (@ 0x0000008C) NAND flash/PC card attribute space timing configuration register 2 */
    
    struct {
      __IOM uint32_t ATTSET     : 8;            /*!< [7..0] Attribute memory setup time */
      __IOM uint32_t ATTWAIT    : 8;            /*!< [15..8] Attribute memory wait time */
      __IOM uint32_t ATTHLD     : 8;            /*!< [23..16] Attribute memory hold time */
      __IOM uint32_t ATTHIZ     : 8;            /*!< [31..24] Attribute memory data bus HiZ time */
    } NPATCFG2_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t NECC2;                       /*!< (@ 0x00000094) NAND flash ECC register 2 */
    
    struct {
      __IM  uint32_t ECC        : 32;           /*!< [31..0] ECC result */
    } NECC2_b;
  } ;
  __IM  uint32_t  RESERVED4[2];
  
  union {
    __IOM uint32_t NPCTL3;                      /*!< (@ 0x000000A0) NAND flash/PC card control register 3 */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t NDWTEN     : 1;            /*!< [1..1] Wait feature enable */
      __IOM uint32_t NDBKEN     : 1;            /*!< [2..2] NAND bank enable */
      __IOM uint32_t NDTP       : 1;            /*!< [3..3] NAND bank memory type */
      __IOM uint32_t NDW        : 2;            /*!< [5..4] NAND bank memory data bus width */
      __IOM uint32_t ECCEN      : 1;            /*!< [6..6] ECC enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t CTR        : 4;            /*!< [12..9] CLE to RE delay */
      __IOM uint32_t ATR        : 4;            /*!< [16..13] ALE to RE delay */
      __IOM uint32_t ECCSZ      : 3;            /*!< [19..17] ECC size */
    } NPCTL3_b;
  } ;
  
  union {
    __IOM uint32_t NPINTEN3;                    /*!< (@ 0x000000A4) NAND flash/PC card interrupt enable register 3 */
    
    struct {
      __IOM uint32_t INTRS      : 1;            /*!< [0..0] Interrupt rising edge status */
      __IOM uint32_t INTHS      : 1;            /*!< [1..1] Interrupt high-level status */
      __IOM uint32_t INTFS      : 1;            /*!< [2..2] Interrupt falling edge status */
      __IOM uint32_t INTREN     : 1;            /*!< [3..3] Interrupt rising edge detection enable bit */
      __IOM uint32_t INTHEN     : 1;            /*!< [4..4] Interrupt high-level detection enable */
      __IOM uint32_t INTFEN     : 1;            /*!< [5..5] Interrupt falling edge detection enable */
      __IOM uint32_t FFEPT      : 1;            /*!< [6..6] FIFO empty flag */
    } NPINTEN3_b;
  } ;
  
  union {
    __IOM uint32_t NPCTCFG3;                    /*!< (@ 0x000000A8) NAND flash/PC card common space timing configuration register 3 */
    
    struct {
      __IOM uint32_t COMSET     : 8;            /*!< [7..0] Common memory setup time */
      __IOM uint32_t COMWAIT    : 8;            /*!< [15..8] Common memory wait time */
      __IOM uint32_t COMHLD     : 8;            /*!< [23..16] Common memory hold time */
      __IOM uint32_t COMHIZ     : 8;            /*!< [31..24] Common memory data bus HiZ time */
    } NPCTCFG3_b;
  } ;
  
  union {
    __IOM uint32_t NPATCFG3;                    /*!< (@ 0x000000AC) NAND flash/PC card attribute space timing configuration register 3 */
    
    struct {
      __IOM uint32_t ATTSET     : 8;            /*!< [7..0] Attribute memory setup time */
      __IOM uint32_t ATTWAIT    : 8;            /*!< [15..8] Attribute memory wait time */
      __IOM uint32_t ATTHLD     : 8;            /*!< [23..16] Attribute memory hold time */
      __IOM uint32_t ATTHIZ     : 8;            /*!< [31..24] Attribute memory data bus HiZ time */
    } NPATCFG3_b;
  } ;
  
  union {
    __IOM uint32_t PIOTCFG3;                    /*!< (@ 0x000000B0) PC card I/O space timing configuration register */
    
    struct {
      __IOM uint32_t IOSET      : 8;            /*!< [7..0] IO space setup time */
      __IOM uint32_t IOWAIT     : 8;            /*!< [15..8] IO space wait time */
      __IOM uint32_t IOHLD      : 8;            /*!< [23..16] IO space hold time */
      __IOM uint32_t IOHIZ      : 8;            /*!< [31..24] IO space data bus HiZ time */
    } PIOTCFG3_b;
  } ;
  __IM  uint32_t  RESERVED5[20];
  
  union {
    __IOM uint32_t SNWTCFG0;                    /*!< (@ 0x00000104) SRAM/NOR flash write timing configuration register 0 */
    
    struct {
      __IOM uint32_t WASET      : 4;            /*!< [3..0] Address setup time */
      __IOM uint32_t WAHLD      : 4;            /*!< [7..4] Address hold time */
      __IOM uint32_t WDSET      : 8;            /*!< [15..8] Data setup time */
      __IOM uint32_t WBUSLAT    : 4;            /*!< [19..16] Bus latency */
      __IM  uint32_t            : 8;
      __IOM uint32_t WASYNCMOD  : 2;            /*!< [29..28] Asynchronous access mode */
    } SNWTCFG0_b;
  } ;
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t SNWTCFG1;                    /*!< (@ 0x0000010C) SRAM/NOR flash write timing configuration register 1 */
    
    struct {
      __IOM uint32_t WASET      : 4;            /*!< [3..0] Address setup time */
      __IOM uint32_t WAHLD      : 4;            /*!< [7..4] Address hold time */
      __IOM uint32_t WDSET      : 8;            /*!< [15..8] Data setup time */
      __IOM uint32_t WBUSLAT    : 4;            /*!< [19..16] Bus latency */
      __IM  uint32_t            : 8;
      __IOM uint32_t WASYNCMOD  : 2;            /*!< [29..28] Asynchronous access mode */
    } SNWTCFG1_b;
  } ;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint32_t SNWTCFG2;                    /*!< (@ 0x00000114) SRAM/NOR flash write timing configuration register 2 */
    
    struct {
      __IOM uint32_t WASET      : 4;            /*!< [3..0] Address setup time */
      __IOM uint32_t WAHLD      : 4;            /*!< [7..4] Address hold time */
      __IOM uint32_t WDSET      : 8;            /*!< [15..8] Data setup time */
      __IOM uint32_t WBUSLAT    : 4;            /*!< [19..16] Bus latency */
      __IM  uint32_t            : 8;
      __IOM uint32_t WASYNCMOD  : 2;            /*!< [29..28] Asynchronous access mode */
    } SNWTCFG2_b;
  } ;
  __IM  uint32_t  RESERVED8;
  
  union {
    __IOM uint32_t SNWTCFG3;                    /*!< (@ 0x0000011C) SRAM/NOR flash write timing configuration register 3 */
    
    struct {
      __IOM uint32_t WASET      : 4;            /*!< [3..0] Address setup time */
      __IOM uint32_t WAHLD      : 4;            /*!< [7..4] Address hold time */
      __IOM uint32_t WDSET      : 8;            /*!< [15..8] Data setup time */
      __IOM uint32_t WBUSLAT    : 4;            /*!< [19..16] Bus latency */
      __IM  uint32_t            : 8;
      __IOM uint32_t WASYNCMOD  : 2;            /*!< [29..28] Asynchronous access mode */
    } SNWTCFG3_b;
  } ;
  __IM  uint32_t  RESERVED9[8];
  
  union {
    __IOM uint32_t SDCTL0;                      /*!< (@ 0x00000140) SDRAM control register 0 */
    
    struct {
      __IOM uint32_t CAW        : 2;            /*!< [1..0] Column address bit width */
      __IOM uint32_t RAW        : 2;            /*!< [3..2] Row address bit width */
      __IOM uint32_t SDW        : 2;            /*!< [5..4] SDRAM data bus width */
      __IOM uint32_t NBK        : 1;            /*!< [6..6] Number of banks */
      __IOM uint32_t CL         : 2;            /*!< [8..7] CAS Latency */
      __IOM uint32_t WPEN       : 1;            /*!< [9..9] Write protection enable */
      __IOM uint32_t SDCLK      : 2;            /*!< [11..10] SDRAM clock configuration */
      __IOM uint32_t BRSTRD     : 1;            /*!< [12..12] Burst read */
      __IOM uint32_t PIPED      : 2;            /*!< [14..13] Pipeline delay */
    } SDCTL0_b;
  } ;
  
  union {
    __IOM uint32_t SDCTL1;                      /*!< (@ 0x00000144) SDRAM control register 1 */
    
    struct {
      __IOM uint32_t CAW        : 2;            /*!< [1..0] Column address bit width */
      __IOM uint32_t RAW        : 2;            /*!< [3..2] Row address bit width */
      __IOM uint32_t SDW        : 2;            /*!< [5..4] SDRAM data bus width */
      __IOM uint32_t NBK        : 1;            /*!< [6..6] Number of banks */
      __IOM uint32_t CL         : 2;            /*!< [8..7] CAS Latency */
      __IOM uint32_t WPEN       : 1;            /*!< [9..9] Write protection enable */
      __IOM uint32_t SDCLK      : 2;            /*!< [11..10] SDRAM clock configuration */
      __IOM uint32_t BRSTRD     : 1;            /*!< [12..12] Burst read */
      __IOM uint32_t PIPED      : 2;            /*!< [14..13] Pipeline delay */
    } SDCTL1_b;
  } ;
  
  union {
    __IOM uint32_t SDTCFG0;                     /*!< (@ 0x00000148) SDRAM timing configuration register 0 */
    
    struct {
      __IOM uint32_t LMRD       : 4;            /*!< [3..0] Load Mode Register Delay */
      __IOM uint32_t XSRD       : 4;            /*!< [7..4] Exit Self-refresh delay */
      __IOM uint32_t RASD       : 4;            /*!< [11..8] Row address select delay */
      __IOM uint32_t ARFD       : 4;            /*!< [15..12] Auto refresh delay */
      __IOM uint32_t WRD        : 4;            /*!< [19..16] Write recovery delay */
      __IOM uint32_t RPD        : 4;            /*!< [23..20] Row precharge delay */
      __IOM uint32_t RCD        : 4;            /*!< [27..24] Row to column delay */
    } SDTCFG0_b;
  } ;
  
  union {
    __IOM uint32_t SDTCFG1;                     /*!< (@ 0x0000014C) SDRAM timing configuration register 1 */
    
    struct {
      __IOM uint32_t LMRD       : 4;            /*!< [3..0] Load Mode Register Delay */
      __IOM uint32_t XSRD       : 4;            /*!< [7..4] Exit Self-refresh delay */
      __IOM uint32_t RASD       : 4;            /*!< [11..8] Row address select delay */
      __IOM uint32_t ARFD       : 4;            /*!< [15..12] Auto refresh delay */
      __IOM uint32_t WRD        : 4;            /*!< [19..16] Write recovery delay */
      __IOM uint32_t RPD        : 4;            /*!< [23..20] Row precharge delay */
      __IOM uint32_t RCD        : 4;            /*!< [27..24] Row to column delay */
    } SDTCFG1_b;
  } ;
  
  union {
    __IOM uint32_t SDCMD;                       /*!< (@ 0x00000150) SDRAM command register */
    
    struct {
      __IOM uint32_t CMD        : 3;            /*!< [2..0] Command */
      __IOM uint32_t DS1        : 1;            /*!< [3..3] Device select 1 */
      __IOM uint32_t DS0        : 1;            /*!< [4..4] Device select 0 */
      __IOM uint32_t NARF       : 4;            /*!< [8..5] Number of successive Auto-refresh */
      __IOM uint32_t MRC        : 13;           /*!< [21..9] Mode register content */
    } SDCMD_b;
  } ;
  
  union {
    __IOM uint32_t SDARI;                       /*!< (@ 0x00000154) SDRAM auto-refresh interval register */
    
    struct {
      __IOM uint32_t REC        : 1;            /*!< [0..0] Refresh error flag clear */
      __IOM uint32_t ARINTV     : 13;           /*!< [13..1] Auto-Refresh Interval */
      __IOM uint32_t REIE       : 1;            /*!< [14..14] Refresh error interrupt Enable */
    } SDARI_b;
  } ;
  
  union {
    __IOM uint32_t SDSTAT;                      /*!< (@ 0x00000158) SDRAM status register */
    
    struct {
      __IOM uint32_t REIF       : 1;            /*!< [0..0] Refresh error interrupt flag */
      __IOM uint32_t STA0       : 2;            /*!< [2..1] Device 0 status */
      __IOM uint32_t STA1       : 2;            /*!< [4..3] Device1 status */
      __IOM uint32_t NRDY       : 1;            /*!< [5..5] Not Ready status */
    } SDSTAT_b;
  } ;
  __IM  uint32_t  RESERVED10[9];
  
  union {
    __IOM uint32_t SDRSCTL;                     /*!< (@ 0x00000180) SDRAM read sample control register */
    
    struct {
      __IOM uint32_t RSEN       : 1;            /*!< [0..0] Read sample enable */
      __IOM uint32_t SSCR       : 1;            /*!< [1..1] Select sample cycle of read data */
      __IM  uint32_t            : 2;
      __IOM uint32_t SDSC       : 4;            /*!< [7..4] Select the delayed sample clock of read data */
    } SDRSCTL_b;
  } ;
  __IM  uint32_t  RESERVED11[99];
  
  union {
    __IOM uint32_t SINIT;                       /*!< (@ 0x00000310) SPI initialization register */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t CMDBIT     : 2;            /*!< [17..16] Bit number of SPI PSRAM command phase */
      __IM  uint32_t            : 6;
      __IOM uint32_t ADRBIT     : 5;            /*!< [28..24] Bit number of SPI PSRAM address phase */
      __IOM uint32_t IDL        : 2;            /*!< [30..29] SPI PSRAM ID Length */
      __IOM uint32_t POL        : 1;            /*!< [31..31] Read data sample polarity */
    } SINIT_b;
  } ;
  __IM  uint32_t  RESERVED12[3];
  
  union {
    __IOM uint32_t SRCMD;                       /*!< (@ 0x00000320) SPI read command register */
    
    struct {
      __IOM uint32_t RCMD       : 16;           /*!< [15..0] SPI Read Command for AHB read transfer */
      __IOM uint32_t RWAITCYCLE : 4;            /*!< [19..16] SPI Read Wait Cycle number after address phase */
      __IOM uint32_t RMODE      : 2;            /*!< [21..20] SPI PSRAM Read command mode */
      __IM  uint32_t            : 9;
      __IOM uint32_t RDID       : 1;            /*!< [31..31] Send SPI Read ID Command */
    } SRCMD_b;
  } ;
  __IM  uint32_t  RESERVED13[3];
  
  union {
    __IOM uint32_t SWCMD;                       /*!< (@ 0x00000330) SPI write command register */
    
    struct {
      __IOM uint32_t WCMD       : 15;           /*!< [14..0] SPI Write Command for AHB write transfer */
      __IM  uint32_t            : 1;
      __IOM uint32_t WWAITCYCLE : 4;            /*!< [19..16] SPI Write Wait Cycle number after address phase */
      __IOM uint32_t WMODE      : 2;            /*!< [21..20] SPI PSRAM Write command mode */
      __IM  uint32_t            : 9;
      __IOM uint32_t SC         : 1;            /*!< [31..31] Send SPI Special Command which does not have address and data phase, command code and mode come from WCMD and WMODE */
    } SWCMD_b;
  } ;
  __IM  uint32_t  RESERVED14[3];
  
  union {
    __IOM uint32_t SIDL;                        /*!< (@ 0x00000340) SPI ID low register */
    
    struct {
      __IOM uint32_t SIDL       : 32;           /*!< [31..0] ID Low Data saved for SPI Read ID Command */
    } SIDL_b;
  } ;
  __IM  uint32_t  RESERVED15[3];
  
  union {
    __IOM uint32_t SIDH;                        /*!< (@ 0x00000350) SPI ID high register */
    
    struct {
      __IOM uint32_t SIDH       : 32;           /*!< [31..0] ID High Data saved for SPI Read ID Command */
    } SIDH_b;
  } ;
} EXMC_Type;                                    /*!< Size = 852 (0x354) */



/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief External interrupt/event
      controller (EXTI)
  */

typedef struct {                                /*!< (@ 0x40013C00) EXTI Structure */
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000000) Interrupt enable register (EXTI_INTEN) */
    
    struct {
      __IOM uint32_t INTEN0     : 1;            /*!< [0..0] Enable Interrupt on line 0 */
      __IOM uint32_t INTEN1     : 1;            /*!< [1..1] Enable Interrupt on line 1 */
      __IOM uint32_t INTEN2     : 1;            /*!< [2..2] Enable Interrupt on line 2 */
      __IOM uint32_t INTEN3     : 1;            /*!< [3..3] Enable Interrupt on line 3 */
      __IOM uint32_t INTEN4     : 1;            /*!< [4..4] Enable Interrupt on line 4 */
      __IOM uint32_t INTEN5     : 1;            /*!< [5..5] Enable Interrupt on line 5 */
      __IOM uint32_t INTEN6     : 1;            /*!< [6..6] Enable Interrupt on line 6 */
      __IOM uint32_t INTEN7     : 1;            /*!< [7..7] Enable Interrupt on line 7 */
      __IOM uint32_t INTEN8     : 1;            /*!< [8..8] Enable Interrupt on line 8 */
      __IOM uint32_t INTEN9     : 1;            /*!< [9..9] Enable Interrupt on line 9 */
      __IOM uint32_t INTEN10    : 1;            /*!< [10..10] Enable Interrupt on line 10 */
      __IOM uint32_t INTEN11    : 1;            /*!< [11..11] Enable Interrupt on line 11 */
      __IOM uint32_t INTEN12    : 1;            /*!< [12..12] Enable Interrupt on line 12 */
      __IOM uint32_t INTEN13    : 1;            /*!< [13..13] Enable Interrupt on line 13 */
      __IOM uint32_t INTEN14    : 1;            /*!< [14..14] Enable Interrupt on line 14 */
      __IOM uint32_t INTEN15    : 1;            /*!< [15..15] Enable Interrupt on line 15 */
      __IOM uint32_t INTEN16    : 1;            /*!< [16..16] Enable Interrupt on line 16 */
      __IOM uint32_t INTEN17    : 1;            /*!< [17..17] Enable Interrupt on line 17 */
      __IOM uint32_t INTEN18    : 1;            /*!< [18..18] Enable Interrupt on line 18 */
      __IOM uint32_t INTEN19    : 1;            /*!< [19..19] Enable Interrupt on line 19 */
      __IOM uint32_t INTEN20    : 1;            /*!< [20..20] Enable Interrupt on line 20 */
      __IOM uint32_t INTEN21    : 1;            /*!< [21..21] Enable Interrupt on line 21 */
      __IOM uint32_t INTEN22    : 1;            /*!< [22..22] Enable Interrupt on line 22 */
    } INTEN_b;
  } ;
  
  union {
    __IOM uint32_t EVEN;                        /*!< (@ 0x00000004) Event enable register (EXTI_EVEN) */
    
    struct {
      __IOM uint32_t EVEN0      : 1;            /*!< [0..0] Enable Event on line 0 */
      __IOM uint32_t EVEN1      : 1;            /*!< [1..1] Enable Event on line 1 */
      __IOM uint32_t EVEN2      : 1;            /*!< [2..2] Enable Event on line 2 */
      __IOM uint32_t EVEN3      : 1;            /*!< [3..3] Enable Event on line 3 */
      __IOM uint32_t EVEN4      : 1;            /*!< [4..4] Enable Event on line 4 */
      __IOM uint32_t EVEN5      : 1;            /*!< [5..5] Enable Event on line 5 */
      __IOM uint32_t EVEN6      : 1;            /*!< [6..6] Enable Event on line 6 */
      __IOM uint32_t EVEN7      : 1;            /*!< [7..7] Enable Event on line 7 */
      __IOM uint32_t EVEN8      : 1;            /*!< [8..8] Enable Event on line 8 */
      __IOM uint32_t EVEN9      : 1;            /*!< [9..9] Enable Event on line 9 */
      __IOM uint32_t EVEN10     : 1;            /*!< [10..10] Enable Event on line 10 */
      __IOM uint32_t EVEN11     : 1;            /*!< [11..11] Enable Event on line 11 */
      __IOM uint32_t EVEN12     : 1;            /*!< [12..12] Enable Event on line 12 */
      __IOM uint32_t EVEN13     : 1;            /*!< [13..13] Enable Event on line 13 */
      __IOM uint32_t EVEN14     : 1;            /*!< [14..14] Enable Event on line 14 */
      __IOM uint32_t EVEN15     : 1;            /*!< [15..15] Enable Event on line 15 */
      __IOM uint32_t EVEN16     : 1;            /*!< [16..16] Enable Event on line 16 */
      __IOM uint32_t EVEN17     : 1;            /*!< [17..17] Enable Event on line 17 */
      __IOM uint32_t EVEN18     : 1;            /*!< [18..18] Enable Event on line 18 */
      __IOM uint32_t EVEN19     : 1;            /*!< [19..19] Enable Event on line 19 */
      __IOM uint32_t EVEN20     : 1;            /*!< [20..20] Enable Event on line 20 */
      __IOM uint32_t EVEN21     : 1;            /*!< [21..21] Enable Event on line 21 */
      __IOM uint32_t EVEN22     : 1;            /*!< [22..22] Enable Event on line 22 */
    } EVEN_b;
  } ;
  
  union {
    __IOM uint32_t RTEN;                        /*!< (@ 0x00000008) Rising Edge Trigger Enable register (EXTI_RTEN) */
    
    struct {
      __IOM uint32_t RTEN0      : 1;            /*!< [0..0] Rising edge trigger enable of line 0 */
      __IOM uint32_t RTEN1      : 1;            /*!< [1..1] Rising edge trigger enable of line 1 */
      __IOM uint32_t RTEN2      : 1;            /*!< [2..2] Rising edge trigger enable of line 2 */
      __IOM uint32_t RTEN3      : 1;            /*!< [3..3] Rising edge trigger enable of line 3 */
      __IOM uint32_t RTEN4      : 1;            /*!< [4..4] Rising edge trigger enable of line 4 */
      __IOM uint32_t RTEN5      : 1;            /*!< [5..5] Rising edge trigger enable of line 5 */
      __IOM uint32_t RTEN6      : 1;            /*!< [6..6] Rising edge trigger enable of line 6 */
      __IOM uint32_t RTEN7      : 1;            /*!< [7..7] Rising edge trigger enable of line 7 */
      __IOM uint32_t RTEN8      : 1;            /*!< [8..8] Rising edge trigger enable of line 8 */
      __IOM uint32_t RTEN9      : 1;            /*!< [9..9] Rising edge trigger enable of line 9 */
      __IOM uint32_t RTEN10     : 1;            /*!< [10..10] Rising edge trigger enable of line 10 */
      __IOM uint32_t RTEN11     : 1;            /*!< [11..11] Rising edge trigger enable of line 11 */
      __IOM uint32_t RTEN12     : 1;            /*!< [12..12] Rising edge trigger enable of line 12 */
      __IOM uint32_t RTEN13     : 1;            /*!< [13..13] Rising edge trigger enable of line 13 */
      __IOM uint32_t RTEN14     : 1;            /*!< [14..14] Rising edge trigger enable of line 14 */
      __IOM uint32_t RTEN15     : 1;            /*!< [15..15] Rising edge trigger enable of line 15 */
      __IOM uint32_t RTEN16     : 1;            /*!< [16..16] Rising edge trigger enable of line 16 */
      __IOM uint32_t RTEN17     : 1;            /*!< [17..17] Rising edge trigger enable of line 17 */
      __IOM uint32_t RTEN18     : 1;            /*!< [18..18] Rising edge trigger enable of line 18 */
      __IOM uint32_t RTEN19     : 1;            /*!< [19..19] Rising edge trigger enable of line 19 */
      __IOM uint32_t RTEN20     : 1;            /*!< [20..20] Rising edge trigger enable of line 20 */
      __IOM uint32_t RTEN21     : 1;            /*!< [21..21] Rising edge trigger enable of line 21 */
      __IOM uint32_t RTEN22     : 1;            /*!< [22..22] Rising edge trigger enable of line 22 */
    } RTEN_b;
  } ;
  
  union {
    __IOM uint32_t FTEN;                        /*!< (@ 0x0000000C) Falling Egde Trigger Enable register (EXTI_FTEN) */
    
    struct {
      __IOM uint32_t FTEN0      : 1;            /*!< [0..0] Falling edge trigger enable of line 0 */
      __IOM uint32_t FTEN1      : 1;            /*!< [1..1] Falling edge trigger enable of line 1 */
      __IOM uint32_t FTEN2      : 1;            /*!< [2..2] Falling edge trigger enable of line 2 */
      __IOM uint32_t FTEN3      : 1;            /*!< [3..3] Falling edge trigger enable of line 3 */
      __IOM uint32_t FTEN4      : 1;            /*!< [4..4] Falling edge trigger enable of line 4 */
      __IOM uint32_t FTEN5      : 1;            /*!< [5..5] Falling edge trigger enable of line 5 */
      __IOM uint32_t FTEN6      : 1;            /*!< [6..6] Falling edge trigger enable of line 6 */
      __IOM uint32_t FTEN7      : 1;            /*!< [7..7] Falling edge trigger enable of line 7 */
      __IOM uint32_t FTEN8      : 1;            /*!< [8..8] Falling edge trigger enable of line 8 */
      __IOM uint32_t FTEN9      : 1;            /*!< [9..9] Falling edge trigger enable of line 9 */
      __IOM uint32_t FTEN10     : 1;            /*!< [10..10] Falling edge trigger enable of line 10 */
      __IOM uint32_t FTEN11     : 1;            /*!< [11..11] Falling edge trigger enable of line 11 */
      __IOM uint32_t FTEN12     : 1;            /*!< [12..12] Falling edge trigger enable of line 12 */
      __IOM uint32_t FTEN13     : 1;            /*!< [13..13] Falling edge trigger enable of line 13 */
      __IOM uint32_t FTEN14     : 1;            /*!< [14..14] Falling edge trigger enable of line 14 */
      __IOM uint32_t FTEN15     : 1;            /*!< [15..15] Falling edge trigger enable of line 15 */
      __IOM uint32_t FTEN16     : 1;            /*!< [16..16] Falling edge trigger enable of line 16 */
      __IOM uint32_t FTEN17     : 1;            /*!< [17..17] Falling edge trigger enable of line 17 */
      __IOM uint32_t FTEN18     : 1;            /*!< [18..18] Falling edge trigger enable of line 18 */
      __IOM uint32_t FTEN19     : 1;            /*!< [19..19] Falling edge trigger enable of line 19 */
      __IOM uint32_t FTEN20     : 1;            /*!< [20..20] Falling edge trigger enable of line 20 */
      __IOM uint32_t FTEN21     : 1;            /*!< [21..21] Falling edge trigger enable of line 21 */
      __IOM uint32_t FTEN22     : 1;            /*!< [22..22] Falling edge trigger enable of line 22 */
    } FTEN_b;
  } ;
  
  union {
    __IOM uint32_t SWIEV;                       /*!< (@ 0x00000010) Software interrupt event register (EXTI_SWIEV) */
    
    struct {
      __IOM uint32_t SWIEV0     : 1;            /*!< [0..0] Interrupt/Event software trigger on line 0 */
      __IOM uint32_t SWIEV1     : 1;            /*!< [1..1] Interrupt/Event software trigger on line 1 */
      __IOM uint32_t SWIEV2     : 1;            /*!< [2..2] Interrupt/Event software trigger on line 2 */
      __IOM uint32_t SWIEV3     : 1;            /*!< [3..3] Interrupt/Event software trigger on line 3 */
      __IOM uint32_t SWIEV4     : 1;            /*!< [4..4] Interrupt/Event software trigger on line 4 */
      __IOM uint32_t SWIEV5     : 1;            /*!< [5..5] Interrupt/Event software trigger on line 5 */
      __IOM uint32_t SWIEV6     : 1;            /*!< [6..6] Interrupt/Event software trigger on line 6 */
      __IOM uint32_t SWIEV7     : 1;            /*!< [7..7] Interrupt/Event software trigger on line 7 */
      __IOM uint32_t SWIEV8     : 1;            /*!< [8..8] Interrupt/Event software trigger on line 8 */
      __IOM uint32_t SWIEV9     : 1;            /*!< [9..9] Interrupt/Event software trigger on line 9 */
      __IOM uint32_t SWIEV10    : 1;            /*!< [10..10] Interrupt/Event software trigger on line 10 */
      __IOM uint32_t SWIEV11    : 1;            /*!< [11..11] Interrupt/Event software trigger on line 11 */
      __IOM uint32_t SWIEV12    : 1;            /*!< [12..12] Interrupt/Event software trigger on line 12 */
      __IOM uint32_t SWIEV13    : 1;            /*!< [13..13] Interrupt/Event software trigger on line 13 */
      __IOM uint32_t SWIEV14    : 1;            /*!< [14..14] Interrupt/Event software trigger on line 14 */
      __IOM uint32_t SWIEV15    : 1;            /*!< [15..15] Interrupt/Event software trigger on line 15 */
      __IOM uint32_t SWIEV16    : 1;            /*!< [16..16] Interrupt/Event software trigger on line 16 */
      __IOM uint32_t SWIEV17    : 1;            /*!< [17..17] Interrupt/Event software trigger on line 17 */
      __IOM uint32_t SWIEV18    : 1;            /*!< [18..18] Interrupt/Event software trigger on line 18 */
      __IOM uint32_t SWIEV19    : 1;            /*!< [19..19] Interrupt/Event software trigger on line 19 */
      __IOM uint32_t SWIEV20    : 1;            /*!< [20..20] Interrupt/Event software trigger on line 20 */
      __IOM uint32_t SWIEV21    : 1;            /*!< [21..21] Interrupt/Event software trigger on line 21 */
      __IOM uint32_t SWIEV22    : 1;            /*!< [22..22] Interrupt/Event software trigger on line 22 */
    } SWIEV_b;
  } ;
  
  union {
    __IOM uint32_t PD;                          /*!< (@ 0x00000014) Pending register (EXTI_PD) */
    
    struct {
      __IOM uint32_t PD0        : 1;            /*!< [0..0] Interrupt pending status of line 0 */
      __IOM uint32_t PD1        : 1;            /*!< [1..1] Interrupt pending status of line 1 */
      __IOM uint32_t PD2        : 1;            /*!< [2..2] Interrupt pending status of line 2 */
      __IOM uint32_t PD3        : 1;            /*!< [3..3] Interrupt pending status of line 3 */
      __IOM uint32_t PD4        : 1;            /*!< [4..4] Interrupt pending status of line 4 */
      __IOM uint32_t PD5        : 1;            /*!< [5..5] Interrupt pending status of line 5 */
      __IOM uint32_t PD6        : 1;            /*!< [6..6] Interrupt pending status of line 6 */
      __IOM uint32_t PD7        : 1;            /*!< [7..7] Interrupt pending status of line 7 */
      __IOM uint32_t PD8        : 1;            /*!< [8..8] Interrupt pending status of line 8 */
      __IOM uint32_t PD9        : 1;            /*!< [9..9] Interrupt pending status of line 9 */
      __IOM uint32_t PD10       : 1;            /*!< [10..10] Interrupt pending status of line 10 */
      __IOM uint32_t PD11       : 1;            /*!< [11..11] Interrupt pending status of line 11 */
      __IOM uint32_t PD12       : 1;            /*!< [12..12] Interrupt pending status of line 12 */
      __IOM uint32_t PD13       : 1;            /*!< [13..13] Interrupt pending status of line 13 */
      __IOM uint32_t PD14       : 1;            /*!< [14..14] Interrupt pending status of line 14 */
      __IOM uint32_t PD15       : 1;            /*!< [15..15] Interrupt pending status of line 15 */
      __IOM uint32_t PD16       : 1;            /*!< [16..16] Interrupt pending status of line 16 */
      __IOM uint32_t PD17       : 1;            /*!< [17..17] Interrupt pending status of line 17 */
      __IOM uint32_t PD18       : 1;            /*!< [18..18] Interrupt pending status of line 18 */
      __IOM uint32_t PD19       : 1;            /*!< [19..19] Interrupt pending status of line 19 */
      __IOM uint32_t PD20       : 1;            /*!< [20..20] Interrupt pending status of line 20 */
      __IOM uint32_t PD21       : 1;            /*!< [21..21] Interrupt pending status of line 21 */
      __IOM uint32_t PD22       : 1;            /*!< [22..22] Interrupt pending status of line 22 */
    } PD_b;
  } ;
} EXTI_Type;                                    /*!< Size = 24 (0x18) */



/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief FMC (FMC)
  */

typedef struct {                                /*!< (@ 0x40023C00) FMC Structure */
  
  union {
    __IOM uint32_t WS;                          /*!< (@ 0x00000000) wait state counter register */
    
    struct {
      __IOM uint32_t WSCNT      : 4;            /*!< [3..0] wait state counter register */
    } WS_b;
  } ;
  
  union {
    __OM  uint32_t KEY;                         /*!< (@ 0x00000004) Unlock key register */
    
    struct {
      __OM  uint32_t KEY        : 32;           /*!< [31..0] FMC_CTL unlock register */
    } KEY_b;
  } ;
  
  union {
    __OM  uint32_t OBKEY;                       /*!< (@ 0x00000008) Option byte unlock key register */
    
    struct {
      __OM  uint32_t OBKEY      : 32;           /*!< [31..0] FMC_ OBCTL0 option byte operation unlock register */
    } OBKEY_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x0000000C) Status register */
    
    struct {
      __IOM uint32_t END        : 1;            /*!< [0..0] End of operation flag bit */
      __IOM uint32_t OPERR      : 1;            /*!< [1..1] Flash operation error flag bit */
      __IM  uint32_t            : 2;
      __IOM uint32_t WPERR      : 1;            /*!< [4..4] Erase/Program protection error flag bit */
      __IM  uint32_t            : 1;
      __IOM uint32_t PGMERR     : 1;            /*!< [6..6] Program size not match error flag bit */
      __IOM uint32_t PGSERR     : 1;            /*!< [7..7] Program sequence error flag bit */
      __IOM uint32_t RDDERR     : 1;            /*!< [8..8] Read D-bus protection error flag bit */
      __IM  uint32_t            : 7;
      __IM  uint32_t BUSY       : 1;            /*!< [16..16] The flash is busy bit */
    } STAT_b;
  } ;
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000010) Control register */
    
    struct {
      __IOM uint32_t PG         : 1;            /*!< [0..0] main flash program command bit */
      __IOM uint32_t SER        : 1;            /*!< [1..1] main flash sector erase command bit */
      __IOM uint32_t MER0       : 1;            /*!< [2..2] main flash mass erase for bank0 command bit */
      __IOM uint32_t SN         : 5;            /*!< [7..3] Select which sector number to be erased. */
      __IOM uint32_t PSZ        : 2;            /*!< [9..8] Program size bit */
      __IM  uint32_t            : 5;
      __IOM uint32_t MER1       : 1;            /*!< [15..15] main flash mass erase for bank1command bit */
      __IOM uint32_t START      : 1;            /*!< [16..16] send erase command to FMC bit */
      __IM  uint32_t            : 7;
      __IOM uint32_t ENDIE      : 1;            /*!< [24..24] End of operation interrupt enable bit */
      __IOM uint32_t ERRIE      : 1;            /*!< [25..25] Error interrupt enable bit */
      __IM  uint32_t            : 5;
      __IOM uint32_t LK         : 1;            /*!< [31..31] FMC_CTL lock bit */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OBCTL0;                      /*!< (@ 0x00000014) Option byte control register 0 */
    
    struct {
      __IOM uint32_t OB_LK      : 1;            /*!< [0..0] FMC_OBCTL0 lock bit */
      __IOM uint32_t OB_START   : 1;            /*!< [1..1] send option byte change command to FMC bit */
      __IOM uint32_t BOR_TH     : 2;            /*!< [3..2] option byte BOR threshold value */
      __IOM uint32_t BB         : 1;            /*!< [4..4] option byte boot bank value */
      __IOM uint32_t nWDG_HW    : 1;            /*!< [5..5] option byte watchdog value */
      __IOM uint32_t nRST_DPSLP : 1;            /*!< [6..6] option byte deepsleep reset value */
      __IOM uint32_t nRST_STDBY : 1;            /*!< [7..7] option byte standby reset value */
      __IOM uint32_t SPC        : 8;            /*!< [15..8] option byte Security Protection code */
      __IOM uint32_t WP0        : 12;           /*!< [27..16] Erase/program protection of each sector when DRP is 0 */
      __IM  uint32_t            : 2;
      __IOM uint32_t DBS        : 1;            /*!< [30..30] Double banks or single bank selection when flash size is 1M */
      __IOM uint32_t DRP        : 1;            /*!< [31..31] D-bus read protection bit */
    } OBCTL0_b;
  } ;
  
  union {
    __IOM uint32_t OBCTL1;                      /*!< (@ 0x00000018) Option byte control register 1 */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t WP1        : 12;           /*!< [27..16] Erase/program protection of each sector when DRP is 0 */
    } OBCTL1_b;
  } ;
  __IM  uint32_t  RESERVED[56];
  
  union {
    __IM  uint32_t WSEN;                        /*!< (@ 0x000000FC) Wait state enable register */
    
    struct {
      __IM  uint32_t WSEN       : 1;            /*!< [0..0] FMC wait state enable register */
    } WSEN_b;
  } ;
  
  union {
    __IM  uint32_t PID;                         /*!< (@ 0x00000100) Product ID register */
    
    struct {
      __IM  uint32_t PID        : 32;           /*!< [31..0] Product reserved ID code register */
    } PID_b;
  } ;
} FMC_Type;                                     /*!< Size = 260 (0x104) */



/* =========================================================================================================================== */
/* ================                                           FWDGT                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief free watchdog timer (FWDGT)
  */

typedef struct {                                /*!< (@ 0x40003000) FWDGT Structure */
  
  union {
    __OM  uint16_t CTL;                         /*!< (@ 0x00000000) Control register */
    
    struct {
      __OM  uint16_t CMD        : 16;           /*!< [15..0] Key value */
    } CTL_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint32_t PSC;                         /*!< (@ 0x00000004) Prescaler register */
    
    struct {
      __IOM uint32_t PSC        : 3;            /*!< [2..0] Prescaler divider */
    } PSC_b;
  } ;
  
  union {
    __IOM uint32_t RLD;                         /*!< (@ 0x00000008) Reload register */
    
    struct {
      __IOM uint32_t RLD        : 12;           /*!< [11..0] Free watchdog timer counter reload value */
    } RLD_b;
  } ;
  
  union {
    __IM  uint32_t STAT;                        /*!< (@ 0x0000000C) Status register */
    
    struct {
      __IM  uint32_t PUD        : 1;            /*!< [0..0] Free watchdog timer prescaler value update */
      __IM  uint32_t RUD        : 1;            /*!< [1..1] Free watchdog timer counter reload value update */
    } STAT_b;
  } ;
} FWDGT_Type;                                   /*!< Size = 16 (0x10) */



/* =========================================================================================================================== */
/* ================                                           GPIOA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOA)
  */

typedef struct {                                /*!< (@ 0x40020000) GPIOA Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) GPIO port control register */
    
    struct {
      __IOM uint32_t CTL0       : 2;            /*!< [1..0] Port x configuration bits (x = 0) */
      __IOM uint32_t CTL1       : 2;            /*!< [3..2] Port x configuration bits (x = 1) */
      __IOM uint32_t CTL2       : 2;            /*!< [5..4] Port x configuration bits (x = 2) */
      __IOM uint32_t CTL3       : 2;            /*!< [7..6] Port x configuration bits (x = 3) */
      __IOM uint32_t CTL4       : 2;            /*!< [9..8] Port x configuration bits (x = 4 ) */
      __IOM uint32_t CTL5       : 2;            /*!< [11..10] Port x configuration bits (x = 5) */
      __IOM uint32_t CTL6       : 2;            /*!< [13..12] Port x configuration bits (x = 6 ) */
      __IOM uint32_t CTL7       : 2;            /*!< [15..14] Port x configuration bits (x = 7) */
      __IOM uint32_t CTL8       : 2;            /*!< [17..16] Port x configuration bits (x = 8) */
      __IOM uint32_t CTL9       : 2;            /*!< [19..18] Port x configuration bits (x = 9) */
      __IOM uint32_t CTL10      : 2;            /*!< [21..20] Port x configuration bits (x = 10) */
      __IOM uint32_t CTL11      : 2;            /*!< [23..22] Port x configuration bits (x = 11) */
      __IOM uint32_t CTL12      : 2;            /*!< [25..24] Port x configuration bits (x = 12) */
      __IOM uint32_t CTL13      : 2;            /*!< [27..26] Port x configuration bits (x = 13) */
      __IOM uint32_t CTL14      : 2;            /*!< [29..28] Port x configuration bits (x = 14) */
      __IOM uint32_t CTL15      : 2;            /*!< [31..30] Port x configuration bits (x = 15) */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OMODE;                       /*!< (@ 0x00000004) GPIO port output mode register */
    
    struct {
      __IOM uint32_t OM0        : 1;            /*!< [0..0] Port 0 output mode bit */
      __IOM uint32_t OM1        : 1;            /*!< [1..1] Port 1 output mode bit */
      __IOM uint32_t OM2        : 1;            /*!< [2..2] Port 2 output mode bit */
      __IOM uint32_t OM3        : 1;            /*!< [3..3] Port 3 output mode bit */
      __IOM uint32_t OM4        : 1;            /*!< [4..4] Port 4 output mode bit */
      __IOM uint32_t OM5        : 1;            /*!< [5..5] Port 5 output mode bit */
      __IOM uint32_t OM6        : 1;            /*!< [6..6] Port 6 output mode bit */
      __IOM uint32_t OM7        : 1;            /*!< [7..7] Port 7 output mode bit */
      __IOM uint32_t OM8        : 1;            /*!< [8..8] Port 8 output mode bit */
      __IOM uint32_t OM9        : 1;            /*!< [9..9] Port 9 output mode bit */
      __IOM uint32_t OM10       : 1;            /*!< [10..10] Port 10 output mode bit */
      __IOM uint32_t OM11       : 1;            /*!< [11..11] Port 11 output mode bit */
      __IOM uint32_t OM12       : 1;            /*!< [12..12] Port 12 output mode bit */
      __IOM uint32_t OM13       : 1;            /*!< [13..13] Port 13 output mode bit */
      __IOM uint32_t OM14       : 1;            /*!< [14..14] Port 14 output mode bit */
      __IOM uint32_t OM15       : 1;            /*!< [15..15] Port 15 output mode bit */
    } OMODE_b;
  } ;
  
  union {
    __IOM uint32_t OSPD;                        /*!< (@ 0x00000008) GPIO port output speed register */
    
    struct {
      __IOM uint32_t OSPD0      : 2;            /*!< [1..0] Port 0 output max speed bits */
      __IOM uint32_t OSPD1      : 2;            /*!< [3..2] Port 1 output max speed bits */
      __IOM uint32_t OSPD2      : 2;            /*!< [5..4] Port 2 output max speed bits */
      __IOM uint32_t OSPD3      : 2;            /*!< [7..6] Port 3 output max speed bits */
      __IOM uint32_t OSPD4      : 2;            /*!< [9..8] Port 4 output max speed bits */
      __IOM uint32_t OSPD5      : 2;            /*!< [11..10] Port 5 output max speed bits */
      __IOM uint32_t OSPD6      : 2;            /*!< [13..12] Port 6 output max speed bits */
      __IOM uint32_t OSPD7      : 2;            /*!< [15..14] Port 7 output max speed bits */
      __IOM uint32_t OSPD8      : 2;            /*!< [17..16] Port 8 output max speed bits */
      __IOM uint32_t OSPD9      : 2;            /*!< [19..18] Port 9 output max speed bits */
      __IOM uint32_t OSPD10     : 2;            /*!< [21..20] Port 10 output max speed bits */
      __IOM uint32_t OSPD11     : 2;            /*!< [23..22] Port 11 output max speed bits */
      __IOM uint32_t OSPD12     : 2;            /*!< [25..24] Port 12 output max speed bits */
      __IOM uint32_t OSPD13     : 2;            /*!< [27..26] Port 13 output max speed bits */
      __IOM uint32_t OSPD14     : 2;            /*!< [29..28] Port 14 output max speed bits */
      __IOM uint32_t OSPD15     : 2;            /*!< [31..30] Port 15 output max speed bits */
    } OSPD_b;
  } ;
  
  union {
    __IOM uint32_t PUD;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register */
    
    struct {
      __IOM uint32_t PUD0       : 2;            /*!< [1..0] Port 0 pull-up or pull-down bits */
      __IOM uint32_t PUD1       : 2;            /*!< [3..2] Port 1 pull-up or pull-down bits */
      __IOM uint32_t PUD2       : 2;            /*!< [5..4] Port 2 pull-up or pull-down bits */
      __IOM uint32_t PUD3       : 2;            /*!< [7..6] Port 3 pull-up or pull-down bits */
      __IOM uint32_t PUD4       : 2;            /*!< [9..8] Port 4 pull-up or pull-down bits */
      __IOM uint32_t PUD5       : 2;            /*!< [11..10] Port 5 pull-up or pull-down bits */
      __IOM uint32_t PUD6       : 2;            /*!< [13..12] Port 6 pull-up or pull-down bits */
      __IOM uint32_t PUD7       : 2;            /*!< [15..14] Port 7 pull-up or pull-down bits */
      __IOM uint32_t PUD8       : 2;            /*!< [17..16] Port 8 pull-up or pull-down bits */
      __IOM uint32_t PUD9       : 2;            /*!< [19..18] Port 9 pull-up or pull-down bits */
      __IOM uint32_t PUD10      : 2;            /*!< [21..20] Port 10 pull-up or pull-down bits */
      __IOM uint32_t PUD11      : 2;            /*!< [23..22] Port 11 pull-up or pull-down bits */
      __IOM uint32_t PUD12      : 2;            /*!< [25..24] Port 12 pull-up or pull-down bits */
      __IOM uint32_t PUD13      : 2;            /*!< [27..26] Port 13 pull-up or pull-down bits */
      __IOM uint32_t PUD14      : 2;            /*!< [29..28] Port 14 pull-up or pull-down bits */
      __IOM uint32_t PUD15      : 2;            /*!< [31..30] Port 15 pull-up or pull-down bits */
    } PUD_b;
  } ;
  
  union {
    __IM  uint32_t ISTAT;                       /*!< (@ 0x00000010) GPIO port input status register */
    
    struct {
      __IM  uint32_t ISTAT0     : 1;            /*!< [0..0] Port input status (y = 0) */
      __IM  uint32_t ISTAT1     : 1;            /*!< [1..1] Port input status (y = 1) */
      __IM  uint32_t ISTAT2     : 1;            /*!< [2..2] Port input status (y = 2) */
      __IM  uint32_t ISTAT3     : 1;            /*!< [3..3] Port input status (y = 3) */
      __IM  uint32_t ISTAT4     : 1;            /*!< [4..4] Port input status (y = 4) */
      __IM  uint32_t ISTAT5     : 1;            /*!< [5..5] Port input status (y = 5) */
      __IM  uint32_t ISTAT6     : 1;            /*!< [6..6] Port input status (y = 6) */
      __IM  uint32_t ISTAT7     : 1;            /*!< [7..7] Port input status (y = 7) */
      __IM  uint32_t ISTAT8     : 1;            /*!< [8..8] Port input status (y = 8) */
      __IM  uint32_t ISTAT9     : 1;            /*!< [9..9] Port input status (y = 9) */
      __IM  uint32_t ISTAT10    : 1;            /*!< [10..10] Port input status (y = 10) */
      __IM  uint32_t ISTAT11    : 1;            /*!< [11..11] Port input status (y = 11) */
      __IM  uint32_t ISTAT12    : 1;            /*!< [12..12] Port input status (y = 12) */
      __IM  uint32_t ISTAT13    : 1;            /*!< [13..13] Port input status (y = 13) */
      __IM  uint32_t ISTAT14    : 1;            /*!< [14..14] Port input status (y = 14) */
      __IM  uint32_t ISTAT15    : 1;            /*!< [15..15] Port input status (y = 15) */
    } ISTAT_b;
  } ;
  
  union {
    __IOM uint32_t OCTL;                        /*!< (@ 0x00000014) GPIO port output control register */
    
    struct {
      __IOM uint32_t OCTL0      : 1;            /*!< [0..0] Port output control (y = 0) */
      __IOM uint32_t OCTL1      : 1;            /*!< [1..1] Port output control (y = 1) */
      __IOM uint32_t OCTL2      : 1;            /*!< [2..2] Port output control (y = 2) */
      __IOM uint32_t OCTL3      : 1;            /*!< [3..3] Port output control (y = 3) */
      __IOM uint32_t OCTL4      : 1;            /*!< [4..4] Port output control (y = 4) */
      __IOM uint32_t OCTL5      : 1;            /*!< [5..5] Port output control (y = 5) */
      __IOM uint32_t OCTL6      : 1;            /*!< [6..6] Port output control (y = 6) */
      __IOM uint32_t OCTL7      : 1;            /*!< [7..7] Port output control (y = 7) */
      __IOM uint32_t OCTL8      : 1;            /*!< [8..8] Port output control (y = 8) */
      __IOM uint32_t OCTL9      : 1;            /*!< [9..9] Port output control (y = 9) */
      __IOM uint32_t OCTL10     : 1;            /*!< [10..10] Port output control (y = 10) */
      __IOM uint32_t OCTL11     : 1;            /*!< [11..11] Port output control (y = 11) */
      __IOM uint32_t OCTL12     : 1;            /*!< [12..12] Port output control (y = 12) */
      __IOM uint32_t OCTL13     : 1;            /*!< [13..13] Port output control (y = 13) */
      __IOM uint32_t OCTL14     : 1;            /*!< [14..14] Port output control (y = 14) */
      __IOM uint32_t OCTL15     : 1;            /*!< [15..15] Port output control (y = 15) */
    } OCTL_b;
  } ;
  
  union {
    __OM  uint32_t BOP;                         /*!< (@ 0x00000018) GPIO port bit operate register */
    
    struct {
      __OM  uint32_t BOP0       : 1;            /*!< [0..0] Port Set bit 0 */
      __OM  uint32_t BOP1       : 1;            /*!< [1..1] Port Set bit 1 */
      __OM  uint32_t BOP2       : 1;            /*!< [2..2] Port Set bit 2 */
      __OM  uint32_t BOP3       : 1;            /*!< [3..3] Port Set bit 3 */
      __OM  uint32_t BOP4       : 1;            /*!< [4..4] Port Set bit 4 */
      __OM  uint32_t BOP5       : 1;            /*!< [5..5] Port Set bit 5 */
      __OM  uint32_t BOP6       : 1;            /*!< [6..6] Port Set bit 6 */
      __OM  uint32_t BOP7       : 1;            /*!< [7..7] Port Set bit 7 */
      __OM  uint32_t BOP8       : 1;            /*!< [8..8] Port Set bit 8 */
      __OM  uint32_t BOP9       : 1;            /*!< [9..9] Port Set bit 9 */
      __OM  uint32_t BOP10      : 1;            /*!< [10..10] Port Set bit 10 */
      __OM  uint32_t BOP11      : 1;            /*!< [11..11] Port Set bit 11 */
      __OM  uint32_t BOP12      : 1;            /*!< [12..12] Port Set bit 12 */
      __OM  uint32_t BOP13      : 1;            /*!< [13..13] Port Set bit 13 */
      __OM  uint32_t BOP14      : 1;            /*!< [14..14] Port Set bit 14 */
      __OM  uint32_t BOP15      : 1;            /*!< [15..15] Port Set bit 15 */
      __OM  uint32_t CR0        : 1;            /*!< [16..16] Port Clear bit 0 */
      __OM  uint32_t CR1        : 1;            /*!< [17..17] Port Clear bit 1 */
      __OM  uint32_t CR2        : 1;            /*!< [18..18] Port Clear bit 2 */
      __OM  uint32_t CR3        : 1;            /*!< [19..19] Port Clear bit 3 */
      __OM  uint32_t CR4        : 1;            /*!< [20..20] Port Clear bit 4 */
      __OM  uint32_t CR5        : 1;            /*!< [21..21] Port Clear bit 5 */
      __OM  uint32_t CR6        : 1;            /*!< [22..22] Port Clear bit 6 */
      __OM  uint32_t CR7        : 1;            /*!< [23..23] Port Clear bit 7 */
      __OM  uint32_t CR8        : 1;            /*!< [24..24] Port Clear bit 8 */
      __OM  uint32_t CR9        : 1;            /*!< [25..25] Port Clear bit 9 */
      __OM  uint32_t CR10       : 1;            /*!< [26..26] Port Clear bit 10 */
      __OM  uint32_t CR11       : 1;            /*!< [27..27] Port Clear bit 11 */
      __OM  uint32_t CR12       : 1;            /*!< [28..28] Port Clear bit 12 */
      __OM  uint32_t CR13       : 1;            /*!< [29..29] Port Clear bit 13 */
      __OM  uint32_t CR14       : 1;            /*!< [30..30] Port Clear bit 14 */
      __OM  uint32_t CR15       : 1;            /*!< [31..31] Port Clear bit 15 */
    } BOP_b;
  } ;
  
  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x0000001C) GPIO port configuration lock register */
    
    struct {
      __IOM uint32_t LK0        : 1;            /*!< [0..0] Port Lock bit 0 */
      __IOM uint32_t LK1        : 1;            /*!< [1..1] Port Lock bit 1 */
      __IOM uint32_t LK2        : 1;            /*!< [2..2] Port Lock bit 2 */
      __IOM uint32_t LK3        : 1;            /*!< [3..3] Port Lock bit 3 */
      __IOM uint32_t LK4        : 1;            /*!< [4..4] Port Lock bit 4 */
      __IOM uint32_t LK5        : 1;            /*!< [5..5] Port Lock bit 5 */
      __IOM uint32_t LK6        : 1;            /*!< [6..6] Port Lock bit 6 */
      __IOM uint32_t LK7        : 1;            /*!< [7..7] Port Lock bit 7 */
      __IOM uint32_t LK8        : 1;            /*!< [8..8] Port Lock bit 8 */
      __IOM uint32_t LK9        : 1;            /*!< [9..9] Port Lock bit 9 */
      __IOM uint32_t LK10       : 1;            /*!< [10..10] Port Lock bit 10 */
      __IOM uint32_t LK11       : 1;            /*!< [11..11] Port Lock bit 11 */
      __IOM uint32_t LK12       : 1;            /*!< [12..12] Port Lock bit 12 */
      __IOM uint32_t LK13       : 1;            /*!< [13..13] Port Lock bit 13 */
      __IOM uint32_t LK14       : 1;            /*!< [14..14] Port Lock bit 14 */
      __IOM uint32_t LK15       : 1;            /*!< [15..15] Port Lock bit 15 */
      __IOM uint32_t LKK        : 1;            /*!< [16..16] Lock sequence key */
    } LOCK_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL0;                      /*!< (@ 0x00000020) GPIO alternate function selected register 0 */
    
    struct {
      __IOM uint32_t SEL0       : 4;            /*!< [3..0] Port 0 alternate function selected */
      __IOM uint32_t SEL1       : 4;            /*!< [7..4] Port 1 alternate function selected */
      __IOM uint32_t SEL2       : 4;            /*!< [11..8] Port 2 alternate function selected */
      __IOM uint32_t SEL3       : 4;            /*!< [15..12] Port 3 alternate function selected */
      __IOM uint32_t SEL4       : 4;            /*!< [19..16] Port 4 alternate function selected */
      __IOM uint32_t SEL5       : 4;            /*!< [23..20] Port 5 alternate function selected */
      __IOM uint32_t SEL6       : 4;            /*!< [27..24] Port 6 alternate function selected */
      __IOM uint32_t SEL7       : 4;            /*!< [31..28] Port 7 alternate function selected */
    } AFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL1;                      /*!< (@ 0x00000024) GPIO alternate function selected register 1 */
    
    struct {
      __IOM uint32_t SEL8       : 4;            /*!< [3..0] Port 8 alternate function selected */
      __IOM uint32_t SEL9       : 4;            /*!< [7..4] Port 9 alternate function selected */
      __IOM uint32_t SEL10      : 4;            /*!< [11..8] Port 10 alternate function selected */
      __IOM uint32_t SEL11      : 4;            /*!< [15..12] Port 11 alternate function selected */
      __IOM uint32_t SEL12      : 4;            /*!< [19..16] Port 12 alternate function selected */
      __IOM uint32_t SEL13      : 4;            /*!< [23..20] Port 13 alternate function selected */
      __IOM uint32_t SEL14      : 4;            /*!< [27..24] Port 14 alternate function selected */
      __IOM uint32_t SEL15      : 4;            /*!< [31..28] Port 15 alternate function selected */
    } AFSEL1_b;
  } ;
  
  union {
    __OM  uint32_t BC;                          /*!< (@ 0x00000028) Bit clear register */
    
    struct {
      __OM  uint32_t CR0        : 1;            /*!< [0..0] Port cleat bit */
      __OM  uint32_t CR1        : 1;            /*!< [1..1] Port cleat bit */
      __OM  uint32_t CR2        : 1;            /*!< [2..2] Port cleat bit */
      __OM  uint32_t CR3        : 1;            /*!< [3..3] Port cleat bit */
      __OM  uint32_t CR4        : 1;            /*!< [4..4] Port cleat bit */
      __OM  uint32_t CR5        : 1;            /*!< [5..5] Port cleat bit */
      __OM  uint32_t CR6        : 1;            /*!< [6..6] Port cleat bit */
      __OM  uint32_t CR7        : 1;            /*!< [7..7] Port cleat bit */
      __OM  uint32_t CR8        : 1;            /*!< [8..8] Port cleat bit */
      __OM  uint32_t CR9        : 1;            /*!< [9..9] Port cleat bit */
      __OM  uint32_t CR10       : 1;            /*!< [10..10] Port cleat bit */
      __OM  uint32_t CR11       : 1;            /*!< [11..11] Port cleat bit */
      __OM  uint32_t CR12       : 1;            /*!< [12..12] Port cleat bit */
      __OM  uint32_t CR13       : 1;            /*!< [13..13] Port cleat bit */
      __OM  uint32_t CR14       : 1;            /*!< [14..14] Port cleat bit */
      __OM  uint32_t CR15       : 1;            /*!< [15..15] Port cleat bit */
    } BC_b;
  } ;
  
  union {
    __OM  uint32_t TG;                          /*!< (@ 0x0000002C) Port bit toggle register */
    
    struct {
      __OM  uint32_t TG0        : 1;            /*!< [0..0] Port toggle bit */
      __OM  uint32_t TG1        : 1;            /*!< [1..1] Port toggle bit */
      __OM  uint32_t TG2        : 1;            /*!< [2..2] Port toggle bit */
      __OM  uint32_t TG3        : 1;            /*!< [3..3] Port toggle bit */
      __OM  uint32_t TG4        : 1;            /*!< [4..4] Port toggle bit */
      __OM  uint32_t TG5        : 1;            /*!< [5..5] Port toggle bit */
      __OM  uint32_t TG6        : 1;            /*!< [6..6] Port toggle bit */
      __OM  uint32_t TG7        : 1;            /*!< [7..7] Port toggle bit */
      __OM  uint32_t TG8        : 1;            /*!< [8..8] Port toggle bit */
      __OM  uint32_t TG9        : 1;            /*!< [9..9] Port toggle bit */
      __OM  uint32_t TG10       : 1;            /*!< [10..10] Port toggle bit */
      __OM  uint32_t TG11       : 1;            /*!< [11..11] Port toggle bit */
      __OM  uint32_t TG12       : 1;            /*!< [12..12] Port toggle bit */
      __OM  uint32_t TG13       : 1;            /*!< [13..13] Port toggle bit */
      __OM  uint32_t TG14       : 1;            /*!< [14..14] Port toggle bit */
      __OM  uint32_t TG15       : 1;            /*!< [15..15] Port toggle bit */
    } TG_b;
  } ;
} GPIOA_Type;                                   /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           GPIOB                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOB)
  */

typedef struct {                                /*!< (@ 0x40020400) GPIOB Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) GPIO port control register */
    
    struct {
      __IOM uint32_t CTL0       : 2;            /*!< [1..0] Port x configuration bits (x = 0) */
      __IOM uint32_t CTL1       : 2;            /*!< [3..2] Port x configuration bits (x = 1) */
      __IOM uint32_t CTL2       : 2;            /*!< [5..4] Port x configuration bits (x = 2) */
      __IOM uint32_t CTL3       : 2;            /*!< [7..6] Port x configuration bits (x = 3) */
      __IOM uint32_t CTL4       : 2;            /*!< [9..8] Port x configuration bits (x = 4 ) */
      __IOM uint32_t CTL5       : 2;            /*!< [11..10] Port x configuration bits (x = 5) */
      __IOM uint32_t CTL6       : 2;            /*!< [13..12] Port x configuration bits (x = 6 ) */
      __IOM uint32_t CTL7       : 2;            /*!< [15..14] Port x configuration bits (x = 7) */
      __IOM uint32_t CTL8       : 2;            /*!< [17..16] Port x configuration bits (x = 8) */
      __IOM uint32_t CTL9       : 2;            /*!< [19..18] Port x configuration bits (x = 9) */
      __IOM uint32_t CTL10      : 2;            /*!< [21..20] Port x configuration bits (x = 10) */
      __IOM uint32_t CTL11      : 2;            /*!< [23..22] Port x configuration bits (x = 11) */
      __IOM uint32_t CTL12      : 2;            /*!< [25..24] Port x configuration bits (x = 12) */
      __IOM uint32_t CTL13      : 2;            /*!< [27..26] Port x configuration bits (x = 13) */
      __IOM uint32_t CTL14      : 2;            /*!< [29..28] Port x configuration bits (x = 14) */
      __IOM uint32_t CTL15      : 2;            /*!< [31..30] Port x configuration bits (x = 15) */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OMODE;                       /*!< (@ 0x00000004) GPIO port output mode register */
    
    struct {
      __IOM uint32_t OM0        : 1;            /*!< [0..0] Port 0 output mode bit */
      __IOM uint32_t OM1        : 1;            /*!< [1..1] Port 1 output mode bit */
      __IOM uint32_t OM2        : 1;            /*!< [2..2] Port 2 output mode bit */
      __IOM uint32_t OM3        : 1;            /*!< [3..3] Port 3 output mode bit */
      __IOM uint32_t OM4        : 1;            /*!< [4..4] Port 4 output mode bit */
      __IOM uint32_t OM5        : 1;            /*!< [5..5] Port 5 output mode bit */
      __IOM uint32_t OM6        : 1;            /*!< [6..6] Port 6 output mode bit */
      __IOM uint32_t OM7        : 1;            /*!< [7..7] Port 7 output mode bit */
      __IOM uint32_t OM8        : 1;            /*!< [8..8] Port 8 output mode bit */
      __IOM uint32_t OM9        : 1;            /*!< [9..9] Port 9 output mode bit */
      __IOM uint32_t OM10       : 1;            /*!< [10..10] Port 10 output mode bit */
      __IOM uint32_t OM11       : 1;            /*!< [11..11] Port 11 output mode bit */
      __IOM uint32_t OM12       : 1;            /*!< [12..12] Port 12 output mode bit */
      __IOM uint32_t OM13       : 1;            /*!< [13..13] Port 13 output mode bit */
      __IOM uint32_t OM14       : 1;            /*!< [14..14] Port 14 output mode bit */
      __IOM uint32_t OM15       : 1;            /*!< [15..15] Port 15 output mode bit */
    } OMODE_b;
  } ;
  
  union {
    __IOM uint32_t OSPD;                        /*!< (@ 0x00000008) GPIO port output speed register */
    
    struct {
      __IOM uint32_t OSPD0      : 2;            /*!< [1..0] Port 0 output max speed bits */
      __IOM uint32_t OSPD1      : 2;            /*!< [3..2] Port 1 output max speed bits */
      __IOM uint32_t OSPD2      : 2;            /*!< [5..4] Port 2 output max speed bits */
      __IOM uint32_t OSPD3      : 2;            /*!< [7..6] Port 3 output max speed bits */
      __IOM uint32_t OSPD4      : 2;            /*!< [9..8] Port 4 output max speed bits */
      __IOM uint32_t OSPD5      : 2;            /*!< [11..10] Port 5 output max speed bits */
      __IOM uint32_t OSPD6      : 2;            /*!< [13..12] Port 6 output max speed bits */
      __IOM uint32_t OSPD7      : 2;            /*!< [15..14] Port 7 output max speed bits */
      __IOM uint32_t OSPD8      : 2;            /*!< [17..16] Port 8 output max speed bits */
      __IOM uint32_t OSPD9      : 2;            /*!< [19..18] Port 9 output max speed bits */
      __IOM uint32_t OSPD10     : 2;            /*!< [21..20] Port 10 output max speed bits */
      __IOM uint32_t OSPD11     : 2;            /*!< [23..22] Port 11 output max speed bits */
      __IOM uint32_t OSPD12     : 2;            /*!< [25..24] Port 12 output max speed bits */
      __IOM uint32_t OSPD13     : 2;            /*!< [27..26] Port 13 output max speed bits */
      __IOM uint32_t OSPD14     : 2;            /*!< [29..28] Port 14 output max speed bits */
      __IOM uint32_t OSPD15     : 2;            /*!< [31..30] Port 15 output max speed bits */
    } OSPD_b;
  } ;
  
  union {
    __IOM uint32_t PUD;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register */
    
    struct {
      __IOM uint32_t PUD0       : 2;            /*!< [1..0] Port 0 pull-up or pull-down bits */
      __IOM uint32_t PUD1       : 2;            /*!< [3..2] Port 1 pull-up or pull-down bits */
      __IOM uint32_t PUD2       : 2;            /*!< [5..4] Port 2 pull-up or pull-down bits */
      __IOM uint32_t PUD3       : 2;            /*!< [7..6] Port 3 pull-up or pull-down bits */
      __IOM uint32_t PUD4       : 2;            /*!< [9..8] Port 4 pull-up or pull-down bits */
      __IOM uint32_t PUD5       : 2;            /*!< [11..10] Port 5 pull-up or pull-down bits */
      __IOM uint32_t PUD6       : 2;            /*!< [13..12] Port 6 pull-up or pull-down bits */
      __IOM uint32_t PUD7       : 2;            /*!< [15..14] Port 7 pull-up or pull-down bits */
      __IOM uint32_t PUD8       : 2;            /*!< [17..16] Port 8 pull-up or pull-down bits */
      __IOM uint32_t PUD9       : 2;            /*!< [19..18] Port 9 pull-up or pull-down bits */
      __IOM uint32_t PUD10      : 2;            /*!< [21..20] Port 10 pull-up or pull-down bits */
      __IOM uint32_t PUD11      : 2;            /*!< [23..22] Port 11 pull-up or pull-down bits */
      __IOM uint32_t PUD12      : 2;            /*!< [25..24] Port 12 pull-up or pull-down bits */
      __IOM uint32_t PUD13      : 2;            /*!< [27..26] Port 13 pull-up or pull-down bits */
      __IOM uint32_t PUD14      : 2;            /*!< [29..28] Port 14 pull-up or pull-down bits */
      __IOM uint32_t PUD15      : 2;            /*!< [31..30] Port 15 pull-up or pull-down bits */
    } PUD_b;
  } ;
  
  union {
    __IM  uint32_t ISTAT;                       /*!< (@ 0x00000010) GPIO port input status register */
    
    struct {
      __IM  uint32_t ISTAT0     : 1;            /*!< [0..0] Port input status (y = 0) */
      __IM  uint32_t ISTAT1     : 1;            /*!< [1..1] Port input status (y = 1) */
      __IM  uint32_t ISTAT2     : 1;            /*!< [2..2] Port input status (y = 2) */
      __IM  uint32_t ISTAT3     : 1;            /*!< [3..3] Port input status (y = 3) */
      __IM  uint32_t ISTAT4     : 1;            /*!< [4..4] Port input status (y = 4) */
      __IM  uint32_t ISTAT5     : 1;            /*!< [5..5] Port input status (y = 5) */
      __IM  uint32_t ISTAT6     : 1;            /*!< [6..6] Port input status (y = 6) */
      __IM  uint32_t ISTAT7     : 1;            /*!< [7..7] Port input status (y = 7) */
      __IM  uint32_t ISTAT8     : 1;            /*!< [8..8] Port input status (y = 8) */
      __IM  uint32_t ISTAT9     : 1;            /*!< [9..9] Port input status (y = 9) */
      __IM  uint32_t ISTAT10    : 1;            /*!< [10..10] Port input status (y = 10) */
      __IM  uint32_t ISTAT11    : 1;            /*!< [11..11] Port input status (y = 11) */
      __IM  uint32_t ISTAT12    : 1;            /*!< [12..12] Port input status (y = 12) */
      __IM  uint32_t ISTAT13    : 1;            /*!< [13..13] Port input status (y = 13) */
      __IM  uint32_t ISTAT14    : 1;            /*!< [14..14] Port input status (y = 14) */
      __IM  uint32_t ISTAT15    : 1;            /*!< [15..15] Port input status (y = 15) */
    } ISTAT_b;
  } ;
  
  union {
    __IOM uint32_t OCTL;                        /*!< (@ 0x00000014) GPIO port output control register */
    
    struct {
      __IOM uint32_t OCTL0      : 1;            /*!< [0..0] Port output control (y = 0) */
      __IOM uint32_t OCTL1      : 1;            /*!< [1..1] Port output control (y = 1) */
      __IOM uint32_t OCTL2      : 1;            /*!< [2..2] Port output control (y = 2) */
      __IOM uint32_t OCTL3      : 1;            /*!< [3..3] Port output control (y = 3) */
      __IOM uint32_t OCTL4      : 1;            /*!< [4..4] Port output control (y = 4) */
      __IOM uint32_t OCTL5      : 1;            /*!< [5..5] Port output control (y = 5) */
      __IOM uint32_t OCTL6      : 1;            /*!< [6..6] Port output control (y = 6) */
      __IOM uint32_t OCTL7      : 1;            /*!< [7..7] Port output control (y = 7) */
      __IOM uint32_t OCTL8      : 1;            /*!< [8..8] Port output control (y = 8) */
      __IOM uint32_t OCTL9      : 1;            /*!< [9..9] Port output control (y = 9) */
      __IOM uint32_t OCTL10     : 1;            /*!< [10..10] Port output control (y = 10) */
      __IOM uint32_t OCTL11     : 1;            /*!< [11..11] Port output control (y = 11) */
      __IOM uint32_t OCTL12     : 1;            /*!< [12..12] Port output control (y = 12) */
      __IOM uint32_t OCTL13     : 1;            /*!< [13..13] Port output control (y = 13) */
      __IOM uint32_t OCTL14     : 1;            /*!< [14..14] Port output control (y = 14) */
      __IOM uint32_t OCTL15     : 1;            /*!< [15..15] Port output control (y = 15) */
    } OCTL_b;
  } ;
  
  union {
    __OM  uint32_t BOP;                         /*!< (@ 0x00000018) GPIO port bit operate register */
    
    struct {
      __OM  uint32_t BOP0       : 1;            /*!< [0..0] Port Set bit 0 */
      __OM  uint32_t BOP1       : 1;            /*!< [1..1] Port Set bit 1 */
      __OM  uint32_t BOP2       : 1;            /*!< [2..2] Port Set bit 2 */
      __OM  uint32_t BOP3       : 1;            /*!< [3..3] Port Set bit 3 */
      __OM  uint32_t BOP4       : 1;            /*!< [4..4] Port Set bit 4 */
      __OM  uint32_t BOP5       : 1;            /*!< [5..5] Port Set bit 5 */
      __OM  uint32_t BOP6       : 1;            /*!< [6..6] Port Set bit 6 */
      __OM  uint32_t BOP7       : 1;            /*!< [7..7] Port Set bit 7 */
      __OM  uint32_t BOP8       : 1;            /*!< [8..8] Port Set bit 8 */
      __OM  uint32_t BOP9       : 1;            /*!< [9..9] Port Set bit 9 */
      __OM  uint32_t BOP10      : 1;            /*!< [10..10] Port Set bit 10 */
      __OM  uint32_t BOP11      : 1;            /*!< [11..11] Port Set bit 11 */
      __OM  uint32_t BOP12      : 1;            /*!< [12..12] Port Set bit 12 */
      __OM  uint32_t BOP13      : 1;            /*!< [13..13] Port Set bit 13 */
      __OM  uint32_t BOP14      : 1;            /*!< [14..14] Port Set bit 14 */
      __OM  uint32_t BOP15      : 1;            /*!< [15..15] Port Set bit 15 */
      __OM  uint32_t CR0        : 1;            /*!< [16..16] Port Clear bit 0 */
      __OM  uint32_t CR1        : 1;            /*!< [17..17] Port Clear bit 1 */
      __OM  uint32_t CR2        : 1;            /*!< [18..18] Port Clear bit 2 */
      __OM  uint32_t CR3        : 1;            /*!< [19..19] Port Clear bit 3 */
      __OM  uint32_t CR4        : 1;            /*!< [20..20] Port Clear bit 4 */
      __OM  uint32_t CR5        : 1;            /*!< [21..21] Port Clear bit 5 */
      __OM  uint32_t CR6        : 1;            /*!< [22..22] Port Clear bit 6 */
      __OM  uint32_t CR7        : 1;            /*!< [23..23] Port Clear bit 7 */
      __OM  uint32_t CR8        : 1;            /*!< [24..24] Port Clear bit 8 */
      __OM  uint32_t CR9        : 1;            /*!< [25..25] Port Clear bit 9 */
      __OM  uint32_t CR10       : 1;            /*!< [26..26] Port Clear bit 10 */
      __OM  uint32_t CR11       : 1;            /*!< [27..27] Port Clear bit 11 */
      __OM  uint32_t CR12       : 1;            /*!< [28..28] Port Clear bit 12 */
      __OM  uint32_t CR13       : 1;            /*!< [29..29] Port Clear bit 13 */
      __OM  uint32_t CR14       : 1;            /*!< [30..30] Port Clear bit 14 */
      __OM  uint32_t CR15       : 1;            /*!< [31..31] Port Clear bit 15 */
    } BOP_b;
  } ;
  
  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x0000001C) GPIO port configuration lock register */
    
    struct {
      __IOM uint32_t LK0        : 1;            /*!< [0..0] Port Lock bit 0 */
      __IOM uint32_t LK1        : 1;            /*!< [1..1] Port Lock bit 1 */
      __IOM uint32_t LK2        : 1;            /*!< [2..2] Port Lock bit 2 */
      __IOM uint32_t LK3        : 1;            /*!< [3..3] Port Lock bit 3 */
      __IOM uint32_t LK4        : 1;            /*!< [4..4] Port Lock bit 4 */
      __IOM uint32_t LK5        : 1;            /*!< [5..5] Port Lock bit 5 */
      __IOM uint32_t LK6        : 1;            /*!< [6..6] Port Lock bit 6 */
      __IOM uint32_t LK7        : 1;            /*!< [7..7] Port Lock bit 7 */
      __IOM uint32_t LK8        : 1;            /*!< [8..8] Port Lock bit 8 */
      __IOM uint32_t LK9        : 1;            /*!< [9..9] Port Lock bit 9 */
      __IOM uint32_t LK10       : 1;            /*!< [10..10] Port Lock bit 10 */
      __IOM uint32_t LK11       : 1;            /*!< [11..11] Port Lock bit 11 */
      __IOM uint32_t LK12       : 1;            /*!< [12..12] Port Lock bit 12 */
      __IOM uint32_t LK13       : 1;            /*!< [13..13] Port Lock bit 13 */
      __IOM uint32_t LK14       : 1;            /*!< [14..14] Port Lock bit 14 */
      __IOM uint32_t LK15       : 1;            /*!< [15..15] Port Lock bit 15 */
      __IOM uint32_t LKK        : 1;            /*!< [16..16] Lock sequence key */
    } LOCK_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL0;                      /*!< (@ 0x00000020) GPIO alternate function selected register 0 */
    
    struct {
      __IOM uint32_t SEL0       : 4;            /*!< [3..0] Port 0 alternate function selected */
      __IOM uint32_t SEL1       : 4;            /*!< [7..4] Port 1 alternate function selected */
      __IOM uint32_t SEL2       : 4;            /*!< [11..8] Port 2 alternate function selected */
      __IOM uint32_t SEL3       : 4;            /*!< [15..12] Port 3 alternate function selected */
      __IOM uint32_t SEL4       : 4;            /*!< [19..16] Port 4 alternate function selected */
      __IOM uint32_t SEL5       : 4;            /*!< [23..20] Port 5 alternate function selected */
      __IOM uint32_t SEL6       : 4;            /*!< [27..24] Port 6 alternate function selected */
      __IOM uint32_t SEL7       : 4;            /*!< [31..28] Port 7 alternate function selected */
    } AFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL1;                      /*!< (@ 0x00000024) GPIO alternate function selected register 1 */
    
    struct {
      __IOM uint32_t SEL8       : 4;            /*!< [3..0] Port 8 alternate function selected */
      __IOM uint32_t SEL9       : 4;            /*!< [7..4] Port 9 alternate function selected */
      __IOM uint32_t SEL10      : 4;            /*!< [11..8] Port 10 alternate function selected */
      __IOM uint32_t SEL11      : 4;            /*!< [15..12] Port 11 alternate function selected */
      __IOM uint32_t SEL12      : 4;            /*!< [19..16] Port 12 alternate function selected */
      __IOM uint32_t SEL13      : 4;            /*!< [23..20] Port 13 alternate function selected */
      __IOM uint32_t SEL14      : 4;            /*!< [27..24] Port 14 alternate function selected */
      __IOM uint32_t SEL15      : 4;            /*!< [31..28] Port 15 alternate function selected */
    } AFSEL1_b;
  } ;
  
  union {
    __OM  uint32_t BC;                          /*!< (@ 0x00000028) Bit clear register */
    
    struct {
      __OM  uint32_t CR0        : 1;            /*!< [0..0] Port cleat bit */
      __OM  uint32_t CR1        : 1;            /*!< [1..1] Port cleat bit */
      __OM  uint32_t CR2        : 1;            /*!< [2..2] Port cleat bit */
      __OM  uint32_t CR3        : 1;            /*!< [3..3] Port cleat bit */
      __OM  uint32_t CR4        : 1;            /*!< [4..4] Port cleat bit */
      __OM  uint32_t CR5        : 1;            /*!< [5..5] Port cleat bit */
      __OM  uint32_t CR6        : 1;            /*!< [6..6] Port cleat bit */
      __OM  uint32_t CR7        : 1;            /*!< [7..7] Port cleat bit */
      __OM  uint32_t CR8        : 1;            /*!< [8..8] Port cleat bit */
      __OM  uint32_t CR9        : 1;            /*!< [9..9] Port cleat bit */
      __OM  uint32_t CR10       : 1;            /*!< [10..10] Port cleat bit */
      __OM  uint32_t CR11       : 1;            /*!< [11..11] Port cleat bit */
      __OM  uint32_t CR12       : 1;            /*!< [12..12] Port cleat bit */
      __OM  uint32_t CR13       : 1;            /*!< [13..13] Port cleat bit */
      __OM  uint32_t CR14       : 1;            /*!< [14..14] Port cleat bit */
      __OM  uint32_t CR15       : 1;            /*!< [15..15] Port cleat bit */
    } BC_b;
  } ;
  
  union {
    __OM  uint32_t TG;                          /*!< (@ 0x0000002C) Port bit toggle register */
    
    struct {
      __OM  uint32_t TG0        : 1;            /*!< [0..0] Port toggle bit */
      __OM  uint32_t TG1        : 1;            /*!< [1..1] Port toggle bit */
      __OM  uint32_t TG2        : 1;            /*!< [2..2] Port toggle bit */
      __OM  uint32_t TG3        : 1;            /*!< [3..3] Port toggle bit */
      __OM  uint32_t TG4        : 1;            /*!< [4..4] Port toggle bit */
      __OM  uint32_t TG5        : 1;            /*!< [5..5] Port toggle bit */
      __OM  uint32_t TG6        : 1;            /*!< [6..6] Port toggle bit */
      __OM  uint32_t TG7        : 1;            /*!< [7..7] Port toggle bit */
      __OM  uint32_t TG8        : 1;            /*!< [8..8] Port toggle bit */
      __OM  uint32_t TG9        : 1;            /*!< [9..9] Port toggle bit */
      __OM  uint32_t TG10       : 1;            /*!< [10..10] Port toggle bit */
      __OM  uint32_t TG11       : 1;            /*!< [11..11] Port toggle bit */
      __OM  uint32_t TG12       : 1;            /*!< [12..12] Port toggle bit */
      __OM  uint32_t TG13       : 1;            /*!< [13..13] Port toggle bit */
      __OM  uint32_t TG14       : 1;            /*!< [14..14] Port toggle bit */
      __OM  uint32_t TG15       : 1;            /*!< [15..15] Port toggle bit */
    } TG_b;
  } ;
} GPIOB_Type;                                   /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           GPIOC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOC)
  */

typedef struct {                                /*!< (@ 0x40020800) GPIOC Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) GPIO port control register */
    
    struct {
      __IOM uint32_t CTL0       : 2;            /*!< [1..0] Port x configuration bits (x = 0) */
      __IOM uint32_t CTL1       : 2;            /*!< [3..2] Port x configuration bits (x = 1) */
      __IOM uint32_t CTL2       : 2;            /*!< [5..4] Port x configuration bits (x = 2) */
      __IOM uint32_t CTL3       : 2;            /*!< [7..6] Port x configuration bits (x = 3) */
      __IOM uint32_t CTL4       : 2;            /*!< [9..8] Port x configuration bits (x = 4 ) */
      __IOM uint32_t CTL5       : 2;            /*!< [11..10] Port x configuration bits (x = 5) */
      __IOM uint32_t CTL6       : 2;            /*!< [13..12] Port x configuration bits (x = 6 ) */
      __IOM uint32_t CTL7       : 2;            /*!< [15..14] Port x configuration bits (x = 7) */
      __IOM uint32_t CTL8       : 2;            /*!< [17..16] Port x configuration bits (x = 8) */
      __IOM uint32_t CTL9       : 2;            /*!< [19..18] Port x configuration bits (x = 9) */
      __IOM uint32_t CTL10      : 2;            /*!< [21..20] Port x configuration bits (x = 10) */
      __IOM uint32_t CTL11      : 2;            /*!< [23..22] Port x configuration bits (x = 11) */
      __IOM uint32_t CTL12      : 2;            /*!< [25..24] Port x configuration bits (x = 12) */
      __IOM uint32_t CTL13      : 2;            /*!< [27..26] Port x configuration bits (x = 13) */
      __IOM uint32_t CTL14      : 2;            /*!< [29..28] Port x configuration bits (x = 14) */
      __IOM uint32_t CTL15      : 2;            /*!< [31..30] Port x configuration bits (x = 15) */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OMODE;                       /*!< (@ 0x00000004) GPIO port output mode register */
    
    struct {
      __IOM uint32_t OM0        : 1;            /*!< [0..0] Port 0 output mode bit */
      __IOM uint32_t OM1        : 1;            /*!< [1..1] Port 1 output mode bit */
      __IOM uint32_t OM2        : 1;            /*!< [2..2] Port 2 output mode bit */
      __IOM uint32_t OM3        : 1;            /*!< [3..3] Port 3 output mode bit */
      __IOM uint32_t OM4        : 1;            /*!< [4..4] Port 4 output mode bit */
      __IOM uint32_t OM5        : 1;            /*!< [5..5] Port 5 output mode bit */
      __IOM uint32_t OM6        : 1;            /*!< [6..6] Port 6 output mode bit */
      __IOM uint32_t OM7        : 1;            /*!< [7..7] Port 7 output mode bit */
      __IOM uint32_t OM8        : 1;            /*!< [8..8] Port 8 output mode bit */
      __IOM uint32_t OM9        : 1;            /*!< [9..9] Port 9 output mode bit */
      __IOM uint32_t OM10       : 1;            /*!< [10..10] Port 10 output mode bit */
      __IOM uint32_t OM11       : 1;            /*!< [11..11] Port 11 output mode bit */
      __IOM uint32_t OM12       : 1;            /*!< [12..12] Port 12 output mode bit */
      __IOM uint32_t OM13       : 1;            /*!< [13..13] Port 13 output mode bit */
      __IOM uint32_t OM14       : 1;            /*!< [14..14] Port 14 output mode bit */
      __IOM uint32_t OM15       : 1;            /*!< [15..15] Port 15 output mode bit */
    } OMODE_b;
  } ;
  
  union {
    __IOM uint32_t OSPD;                        /*!< (@ 0x00000008) GPIO port output speed register */
    
    struct {
      __IOM uint32_t OSPD0      : 2;            /*!< [1..0] Port 0 output max speed bits */
      __IOM uint32_t OSPD1      : 2;            /*!< [3..2] Port 1 output max speed bits */
      __IOM uint32_t OSPD2      : 2;            /*!< [5..4] Port 2 output max speed bits */
      __IOM uint32_t OSPD3      : 2;            /*!< [7..6] Port 3 output max speed bits */
      __IOM uint32_t OSPD4      : 2;            /*!< [9..8] Port 4 output max speed bits */
      __IOM uint32_t OSPD5      : 2;            /*!< [11..10] Port 5 output max speed bits */
      __IOM uint32_t OSPD6      : 2;            /*!< [13..12] Port 6 output max speed bits */
      __IOM uint32_t OSPD7      : 2;            /*!< [15..14] Port 7 output max speed bits */
      __IOM uint32_t OSPD8      : 2;            /*!< [17..16] Port 8 output max speed bits */
      __IOM uint32_t OSPD9      : 2;            /*!< [19..18] Port 9 output max speed bits */
      __IOM uint32_t OSPD10     : 2;            /*!< [21..20] Port 10 output max speed bits */
      __IOM uint32_t OSPD11     : 2;            /*!< [23..22] Port 11 output max speed bits */
      __IOM uint32_t OSPD12     : 2;            /*!< [25..24] Port 12 output max speed bits */
      __IOM uint32_t OSPD13     : 2;            /*!< [27..26] Port 13 output max speed bits */
      __IOM uint32_t OSPD14     : 2;            /*!< [29..28] Port 14 output max speed bits */
      __IOM uint32_t OSPD15     : 2;            /*!< [31..30] Port 15 output max speed bits */
    } OSPD_b;
  } ;
  
  union {
    __IOM uint32_t PUD;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register */
    
    struct {
      __IOM uint32_t PUD0       : 2;            /*!< [1..0] Port 0 pull-up or pull-down bits */
      __IOM uint32_t PUD1       : 2;            /*!< [3..2] Port 1 pull-up or pull-down bits */
      __IOM uint32_t PUD2       : 2;            /*!< [5..4] Port 2 pull-up or pull-down bits */
      __IOM uint32_t PUD3       : 2;            /*!< [7..6] Port 3 pull-up or pull-down bits */
      __IOM uint32_t PUD4       : 2;            /*!< [9..8] Port 4 pull-up or pull-down bits */
      __IOM uint32_t PUD5       : 2;            /*!< [11..10] Port 5 pull-up or pull-down bits */
      __IOM uint32_t PUD6       : 2;            /*!< [13..12] Port 6 pull-up or pull-down bits */
      __IOM uint32_t PUD7       : 2;            /*!< [15..14] Port 7 pull-up or pull-down bits */
      __IOM uint32_t PUD8       : 2;            /*!< [17..16] Port 8 pull-up or pull-down bits */
      __IOM uint32_t PUD9       : 2;            /*!< [19..18] Port 9 pull-up or pull-down bits */
      __IOM uint32_t PUD10      : 2;            /*!< [21..20] Port 10 pull-up or pull-down bits */
      __IOM uint32_t PUD11      : 2;            /*!< [23..22] Port 11 pull-up or pull-down bits */
      __IOM uint32_t PUD12      : 2;            /*!< [25..24] Port 12 pull-up or pull-down bits */
      __IOM uint32_t PUD13      : 2;            /*!< [27..26] Port 13 pull-up or pull-down bits */
      __IOM uint32_t PUD14      : 2;            /*!< [29..28] Port 14 pull-up or pull-down bits */
      __IOM uint32_t PUD15      : 2;            /*!< [31..30] Port 15 pull-up or pull-down bits */
    } PUD_b;
  } ;
  
  union {
    __IM  uint32_t ISTAT;                       /*!< (@ 0x00000010) GPIO port input status register */
    
    struct {
      __IM  uint32_t ISTAT0     : 1;            /*!< [0..0] Port input status (y = 0) */
      __IM  uint32_t ISTAT1     : 1;            /*!< [1..1] Port input status (y = 1) */
      __IM  uint32_t ISTAT2     : 1;            /*!< [2..2] Port input status (y = 2) */
      __IM  uint32_t ISTAT3     : 1;            /*!< [3..3] Port input status (y = 3) */
      __IM  uint32_t ISTAT4     : 1;            /*!< [4..4] Port input status (y = 4) */
      __IM  uint32_t ISTAT5     : 1;            /*!< [5..5] Port input status (y = 5) */
      __IM  uint32_t ISTAT6     : 1;            /*!< [6..6] Port input status (y = 6) */
      __IM  uint32_t ISTAT7     : 1;            /*!< [7..7] Port input status (y = 7) */
      __IM  uint32_t ISTAT8     : 1;            /*!< [8..8] Port input status (y = 8) */
      __IM  uint32_t ISTAT9     : 1;            /*!< [9..9] Port input status (y = 9) */
      __IM  uint32_t ISTAT10    : 1;            /*!< [10..10] Port input status (y = 10) */
      __IM  uint32_t ISTAT11    : 1;            /*!< [11..11] Port input status (y = 11) */
      __IM  uint32_t ISTAT12    : 1;            /*!< [12..12] Port input status (y = 12) */
      __IM  uint32_t ISTAT13    : 1;            /*!< [13..13] Port input status (y = 13) */
      __IM  uint32_t ISTAT14    : 1;            /*!< [14..14] Port input status (y = 14) */
      __IM  uint32_t ISTAT15    : 1;            /*!< [15..15] Port input status (y = 15) */
    } ISTAT_b;
  } ;
  
  union {
    __IOM uint32_t OCTL;                        /*!< (@ 0x00000014) GPIO port output control register */
    
    struct {
      __IOM uint32_t OCTL0      : 1;            /*!< [0..0] Port output control (y = 0) */
      __IOM uint32_t OCTL1      : 1;            /*!< [1..1] Port output control (y = 1) */
      __IOM uint32_t OCTL2      : 1;            /*!< [2..2] Port output control (y = 2) */
      __IOM uint32_t OCTL3      : 1;            /*!< [3..3] Port output control (y = 3) */
      __IOM uint32_t OCTL4      : 1;            /*!< [4..4] Port output control (y = 4) */
      __IOM uint32_t OCTL5      : 1;            /*!< [5..5] Port output control (y = 5) */
      __IOM uint32_t OCTL6      : 1;            /*!< [6..6] Port output control (y = 6) */
      __IOM uint32_t OCTL7      : 1;            /*!< [7..7] Port output control (y = 7) */
      __IOM uint32_t OCTL8      : 1;            /*!< [8..8] Port output control (y = 8) */
      __IOM uint32_t OCTL9      : 1;            /*!< [9..9] Port output control (y = 9) */
      __IOM uint32_t OCTL10     : 1;            /*!< [10..10] Port output control (y = 10) */
      __IOM uint32_t OCTL11     : 1;            /*!< [11..11] Port output control (y = 11) */
      __IOM uint32_t OCTL12     : 1;            /*!< [12..12] Port output control (y = 12) */
      __IOM uint32_t OCTL13     : 1;            /*!< [13..13] Port output control (y = 13) */
      __IOM uint32_t OCTL14     : 1;            /*!< [14..14] Port output control (y = 14) */
      __IOM uint32_t OCTL15     : 1;            /*!< [15..15] Port output control (y = 15) */
    } OCTL_b;
  } ;
  
  union {
    __OM  uint32_t BOP;                         /*!< (@ 0x00000018) GPIO port bit operate register */
    
    struct {
      __OM  uint32_t BOP0       : 1;            /*!< [0..0] Port Set bit 0 */
      __OM  uint32_t BOP1       : 1;            /*!< [1..1] Port Set bit 1 */
      __OM  uint32_t BOP2       : 1;            /*!< [2..2] Port Set bit 2 */
      __OM  uint32_t BOP3       : 1;            /*!< [3..3] Port Set bit 3 */
      __OM  uint32_t BOP4       : 1;            /*!< [4..4] Port Set bit 4 */
      __OM  uint32_t BOP5       : 1;            /*!< [5..5] Port Set bit 5 */
      __OM  uint32_t BOP6       : 1;            /*!< [6..6] Port Set bit 6 */
      __OM  uint32_t BOP7       : 1;            /*!< [7..7] Port Set bit 7 */
      __OM  uint32_t BOP8       : 1;            /*!< [8..8] Port Set bit 8 */
      __OM  uint32_t BOP9       : 1;            /*!< [9..9] Port Set bit 9 */
      __OM  uint32_t BOP10      : 1;            /*!< [10..10] Port Set bit 10 */
      __OM  uint32_t BOP11      : 1;            /*!< [11..11] Port Set bit 11 */
      __OM  uint32_t BOP12      : 1;            /*!< [12..12] Port Set bit 12 */
      __OM  uint32_t BOP13      : 1;            /*!< [13..13] Port Set bit 13 */
      __OM  uint32_t BOP14      : 1;            /*!< [14..14] Port Set bit 14 */
      __OM  uint32_t BOP15      : 1;            /*!< [15..15] Port Set bit 15 */
      __OM  uint32_t CR0        : 1;            /*!< [16..16] Port Clear bit 0 */
      __OM  uint32_t CR1        : 1;            /*!< [17..17] Port Clear bit 1 */
      __OM  uint32_t CR2        : 1;            /*!< [18..18] Port Clear bit 2 */
      __OM  uint32_t CR3        : 1;            /*!< [19..19] Port Clear bit 3 */
      __OM  uint32_t CR4        : 1;            /*!< [20..20] Port Clear bit 4 */
      __OM  uint32_t CR5        : 1;            /*!< [21..21] Port Clear bit 5 */
      __OM  uint32_t CR6        : 1;            /*!< [22..22] Port Clear bit 6 */
      __OM  uint32_t CR7        : 1;            /*!< [23..23] Port Clear bit 7 */
      __OM  uint32_t CR8        : 1;            /*!< [24..24] Port Clear bit 8 */
      __OM  uint32_t CR9        : 1;            /*!< [25..25] Port Clear bit 9 */
      __OM  uint32_t CR10       : 1;            /*!< [26..26] Port Clear bit 10 */
      __OM  uint32_t CR11       : 1;            /*!< [27..27] Port Clear bit 11 */
      __OM  uint32_t CR12       : 1;            /*!< [28..28] Port Clear bit 12 */
      __OM  uint32_t CR13       : 1;            /*!< [29..29] Port Clear bit 13 */
      __OM  uint32_t CR14       : 1;            /*!< [30..30] Port Clear bit 14 */
      __OM  uint32_t CR15       : 1;            /*!< [31..31] Port Clear bit 15 */
    } BOP_b;
  } ;
  
  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x0000001C) GPIO port configuration lock register */
    
    struct {
      __IOM uint32_t LK0        : 1;            /*!< [0..0] Port Lock bit 0 */
      __IOM uint32_t LK1        : 1;            /*!< [1..1] Port Lock bit 1 */
      __IOM uint32_t LK2        : 1;            /*!< [2..2] Port Lock bit 2 */
      __IOM uint32_t LK3        : 1;            /*!< [3..3] Port Lock bit 3 */
      __IOM uint32_t LK4        : 1;            /*!< [4..4] Port Lock bit 4 */
      __IOM uint32_t LK5        : 1;            /*!< [5..5] Port Lock bit 5 */
      __IOM uint32_t LK6        : 1;            /*!< [6..6] Port Lock bit 6 */
      __IOM uint32_t LK7        : 1;            /*!< [7..7] Port Lock bit 7 */
      __IOM uint32_t LK8        : 1;            /*!< [8..8] Port Lock bit 8 */
      __IOM uint32_t LK9        : 1;            /*!< [9..9] Port Lock bit 9 */
      __IOM uint32_t LK10       : 1;            /*!< [10..10] Port Lock bit 10 */
      __IOM uint32_t LK11       : 1;            /*!< [11..11] Port Lock bit 11 */
      __IOM uint32_t LK12       : 1;            /*!< [12..12] Port Lock bit 12 */
      __IOM uint32_t LK13       : 1;            /*!< [13..13] Port Lock bit 13 */
      __IOM uint32_t LK14       : 1;            /*!< [14..14] Port Lock bit 14 */
      __IOM uint32_t LK15       : 1;            /*!< [15..15] Port Lock bit 15 */
      __IOM uint32_t LKK        : 1;            /*!< [16..16] Lock sequence key */
    } LOCK_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL0;                      /*!< (@ 0x00000020) GPIO alternate function selected register 0 */
    
    struct {
      __IOM uint32_t SEL0       : 4;            /*!< [3..0] Port 0 alternate function selected */
      __IOM uint32_t SEL1       : 4;            /*!< [7..4] Port 1 alternate function selected */
      __IOM uint32_t SEL2       : 4;            /*!< [11..8] Port 2 alternate function selected */
      __IOM uint32_t SEL3       : 4;            /*!< [15..12] Port 3 alternate function selected */
      __IOM uint32_t SEL4       : 4;            /*!< [19..16] Port 4 alternate function selected */
      __IOM uint32_t SEL5       : 4;            /*!< [23..20] Port 5 alternate function selected */
      __IOM uint32_t SEL6       : 4;            /*!< [27..24] Port 6 alternate function selected */
      __IOM uint32_t SEL7       : 4;            /*!< [31..28] Port 7 alternate function selected */
    } AFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL1;                      /*!< (@ 0x00000024) GPIO alternate function selected register 1 */
    
    struct {
      __IOM uint32_t SEL8       : 4;            /*!< [3..0] Port 8 alternate function selected */
      __IOM uint32_t SEL9       : 4;            /*!< [7..4] Port 9 alternate function selected */
      __IOM uint32_t SEL10      : 4;            /*!< [11..8] Port 10 alternate function selected */
      __IOM uint32_t SEL11      : 4;            /*!< [15..12] Port 11 alternate function selected */
      __IOM uint32_t SEL12      : 4;            /*!< [19..16] Port 12 alternate function selected */
      __IOM uint32_t SEL13      : 4;            /*!< [23..20] Port 13 alternate function selected */
      __IOM uint32_t SEL14      : 4;            /*!< [27..24] Port 14 alternate function selected */
      __IOM uint32_t SEL15      : 4;            /*!< [31..28] Port 15 alternate function selected */
    } AFSEL1_b;
  } ;
  
  union {
    __OM  uint32_t BC;                          /*!< (@ 0x00000028) Bit clear register */
    
    struct {
      __OM  uint32_t CR0        : 1;            /*!< [0..0] Port cleat bit */
      __OM  uint32_t CR1        : 1;            /*!< [1..1] Port cleat bit */
      __OM  uint32_t CR2        : 1;            /*!< [2..2] Port cleat bit */
      __OM  uint32_t CR3        : 1;            /*!< [3..3] Port cleat bit */
      __OM  uint32_t CR4        : 1;            /*!< [4..4] Port cleat bit */
      __OM  uint32_t CR5        : 1;            /*!< [5..5] Port cleat bit */
      __OM  uint32_t CR6        : 1;            /*!< [6..6] Port cleat bit */
      __OM  uint32_t CR7        : 1;            /*!< [7..7] Port cleat bit */
      __OM  uint32_t CR8        : 1;            /*!< [8..8] Port cleat bit */
      __OM  uint32_t CR9        : 1;            /*!< [9..9] Port cleat bit */
      __OM  uint32_t CR10       : 1;            /*!< [10..10] Port cleat bit */
      __OM  uint32_t CR11       : 1;            /*!< [11..11] Port cleat bit */
      __OM  uint32_t CR12       : 1;            /*!< [12..12] Port cleat bit */
      __OM  uint32_t CR13       : 1;            /*!< [13..13] Port cleat bit */
      __OM  uint32_t CR14       : 1;            /*!< [14..14] Port cleat bit */
      __OM  uint32_t CR15       : 1;            /*!< [15..15] Port cleat bit */
    } BC_b;
  } ;
  
  union {
    __OM  uint32_t TG;                          /*!< (@ 0x0000002C) Port bit toggle register */
    
    struct {
      __OM  uint32_t TG0        : 1;            /*!< [0..0] Port toggle bit */
      __OM  uint32_t TG1        : 1;            /*!< [1..1] Port toggle bit */
      __OM  uint32_t TG2        : 1;            /*!< [2..2] Port toggle bit */
      __OM  uint32_t TG3        : 1;            /*!< [3..3] Port toggle bit */
      __OM  uint32_t TG4        : 1;            /*!< [4..4] Port toggle bit */
      __OM  uint32_t TG5        : 1;            /*!< [5..5] Port toggle bit */
      __OM  uint32_t TG6        : 1;            /*!< [6..6] Port toggle bit */
      __OM  uint32_t TG7        : 1;            /*!< [7..7] Port toggle bit */
      __OM  uint32_t TG8        : 1;            /*!< [8..8] Port toggle bit */
      __OM  uint32_t TG9        : 1;            /*!< [9..9] Port toggle bit */
      __OM  uint32_t TG10       : 1;            /*!< [10..10] Port toggle bit */
      __OM  uint32_t TG11       : 1;            /*!< [11..11] Port toggle bit */
      __OM  uint32_t TG12       : 1;            /*!< [12..12] Port toggle bit */
      __OM  uint32_t TG13       : 1;            /*!< [13..13] Port toggle bit */
      __OM  uint32_t TG14       : 1;            /*!< [14..14] Port toggle bit */
      __OM  uint32_t TG15       : 1;            /*!< [15..15] Port toggle bit */
    } TG_b;
  } ;
} GPIOC_Type;                                   /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           GPIOD                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOD)
  */

typedef struct {                                /*!< (@ 0x40020C00) GPIOD Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) GPIO port control register */
    
    struct {
      __IOM uint32_t CTL0       : 2;            /*!< [1..0] Port x configuration bits (x = 0) */
      __IOM uint32_t CTL1       : 2;            /*!< [3..2] Port x configuration bits (x = 1) */
      __IOM uint32_t CTL2       : 2;            /*!< [5..4] Port x configuration bits (x = 2) */
      __IOM uint32_t CTL3       : 2;            /*!< [7..6] Port x configuration bits (x = 3) */
      __IOM uint32_t CTL4       : 2;            /*!< [9..8] Port x configuration bits (x = 4 ) */
      __IOM uint32_t CTL5       : 2;            /*!< [11..10] Port x configuration bits (x = 5) */
      __IOM uint32_t CTL6       : 2;            /*!< [13..12] Port x configuration bits (x = 6 ) */
      __IOM uint32_t CTL7       : 2;            /*!< [15..14] Port x configuration bits (x = 7) */
      __IOM uint32_t CTL8       : 2;            /*!< [17..16] Port x configuration bits (x = 8) */
      __IOM uint32_t CTL9       : 2;            /*!< [19..18] Port x configuration bits (x = 9) */
      __IOM uint32_t CTL10      : 2;            /*!< [21..20] Port x configuration bits (x = 10) */
      __IOM uint32_t CTL11      : 2;            /*!< [23..22] Port x configuration bits (x = 11) */
      __IOM uint32_t CTL12      : 2;            /*!< [25..24] Port x configuration bits (x = 12) */
      __IOM uint32_t CTL13      : 2;            /*!< [27..26] Port x configuration bits (x = 13) */
      __IOM uint32_t CTL14      : 2;            /*!< [29..28] Port x configuration bits (x = 14) */
      __IOM uint32_t CTL15      : 2;            /*!< [31..30] Port x configuration bits (x = 15) */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OMODE;                       /*!< (@ 0x00000004) GPIO port output mode register */
    
    struct {
      __IOM uint32_t OM0        : 1;            /*!< [0..0] Port 0 output mode bit */
      __IOM uint32_t OM1        : 1;            /*!< [1..1] Port 1 output mode bit */
      __IOM uint32_t OM2        : 1;            /*!< [2..2] Port 2 output mode bit */
      __IOM uint32_t OM3        : 1;            /*!< [3..3] Port 3 output mode bit */
      __IOM uint32_t OM4        : 1;            /*!< [4..4] Port 4 output mode bit */
      __IOM uint32_t OM5        : 1;            /*!< [5..5] Port 5 output mode bit */
      __IOM uint32_t OM6        : 1;            /*!< [6..6] Port 6 output mode bit */
      __IOM uint32_t OM7        : 1;            /*!< [7..7] Port 7 output mode bit */
      __IOM uint32_t OM8        : 1;            /*!< [8..8] Port 8 output mode bit */
      __IOM uint32_t OM9        : 1;            /*!< [9..9] Port 9 output mode bit */
      __IOM uint32_t OM10       : 1;            /*!< [10..10] Port 10 output mode bit */
      __IOM uint32_t OM11       : 1;            /*!< [11..11] Port 11 output mode bit */
      __IOM uint32_t OM12       : 1;            /*!< [12..12] Port 12 output mode bit */
      __IOM uint32_t OM13       : 1;            /*!< [13..13] Port 13 output mode bit */
      __IOM uint32_t OM14       : 1;            /*!< [14..14] Port 14 output mode bit */
      __IOM uint32_t OM15       : 1;            /*!< [15..15] Port 15 output mode bit */
    } OMODE_b;
  } ;
  
  union {
    __IOM uint32_t OSPD;                        /*!< (@ 0x00000008) GPIO port output speed register */
    
    struct {
      __IOM uint32_t OSPD0      : 2;            /*!< [1..0] Port 0 output max speed bits */
      __IOM uint32_t OSPD1      : 2;            /*!< [3..2] Port 1 output max speed bits */
      __IOM uint32_t OSPD2      : 2;            /*!< [5..4] Port 2 output max speed bits */
      __IOM uint32_t OSPD3      : 2;            /*!< [7..6] Port 3 output max speed bits */
      __IOM uint32_t OSPD4      : 2;            /*!< [9..8] Port 4 output max speed bits */
      __IOM uint32_t OSPD5      : 2;            /*!< [11..10] Port 5 output max speed bits */
      __IOM uint32_t OSPD6      : 2;            /*!< [13..12] Port 6 output max speed bits */
      __IOM uint32_t OSPD7      : 2;            /*!< [15..14] Port 7 output max speed bits */
      __IOM uint32_t OSPD8      : 2;            /*!< [17..16] Port 8 output max speed bits */
      __IOM uint32_t OSPD9      : 2;            /*!< [19..18] Port 9 output max speed bits */
      __IOM uint32_t OSPD10     : 2;            /*!< [21..20] Port 10 output max speed bits */
      __IOM uint32_t OSPD11     : 2;            /*!< [23..22] Port 11 output max speed bits */
      __IOM uint32_t OSPD12     : 2;            /*!< [25..24] Port 12 output max speed bits */
      __IOM uint32_t OSPD13     : 2;            /*!< [27..26] Port 13 output max speed bits */
      __IOM uint32_t OSPD14     : 2;            /*!< [29..28] Port 14 output max speed bits */
      __IOM uint32_t OSPD15     : 2;            /*!< [31..30] Port 15 output max speed bits */
    } OSPD_b;
  } ;
  
  union {
    __IOM uint32_t PUD;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register */
    
    struct {
      __IOM uint32_t PUD0       : 2;            /*!< [1..0] Port 0 pull-up or pull-down bits */
      __IOM uint32_t PUD1       : 2;            /*!< [3..2] Port 1 pull-up or pull-down bits */
      __IOM uint32_t PUD2       : 2;            /*!< [5..4] Port 2 pull-up or pull-down bits */
      __IOM uint32_t PUD3       : 2;            /*!< [7..6] Port 3 pull-up or pull-down bits */
      __IOM uint32_t PUD4       : 2;            /*!< [9..8] Port 4 pull-up or pull-down bits */
      __IOM uint32_t PUD5       : 2;            /*!< [11..10] Port 5 pull-up or pull-down bits */
      __IOM uint32_t PUD6       : 2;            /*!< [13..12] Port 6 pull-up or pull-down bits */
      __IOM uint32_t PUD7       : 2;            /*!< [15..14] Port 7 pull-up or pull-down bits */
      __IOM uint32_t PUD8       : 2;            /*!< [17..16] Port 8 pull-up or pull-down bits */
      __IOM uint32_t PUD9       : 2;            /*!< [19..18] Port 9 pull-up or pull-down bits */
      __IOM uint32_t PUD10      : 2;            /*!< [21..20] Port 10 pull-up or pull-down bits */
      __IOM uint32_t PUD11      : 2;            /*!< [23..22] Port 11 pull-up or pull-down bits */
      __IOM uint32_t PUD12      : 2;            /*!< [25..24] Port 12 pull-up or pull-down bits */
      __IOM uint32_t PUD13      : 2;            /*!< [27..26] Port 13 pull-up or pull-down bits */
      __IOM uint32_t PUD14      : 2;            /*!< [29..28] Port 14 pull-up or pull-down bits */
      __IOM uint32_t PUD15      : 2;            /*!< [31..30] Port 15 pull-up or pull-down bits */
    } PUD_b;
  } ;
  
  union {
    __IM  uint32_t ISTAT;                       /*!< (@ 0x00000010) GPIO port input status register */
    
    struct {
      __IM  uint32_t ISTAT0     : 1;            /*!< [0..0] Port input status (y = 0) */
      __IM  uint32_t ISTAT1     : 1;            /*!< [1..1] Port input status (y = 1) */
      __IM  uint32_t ISTAT2     : 1;            /*!< [2..2] Port input status (y = 2) */
      __IM  uint32_t ISTAT3     : 1;            /*!< [3..3] Port input status (y = 3) */
      __IM  uint32_t ISTAT4     : 1;            /*!< [4..4] Port input status (y = 4) */
      __IM  uint32_t ISTAT5     : 1;            /*!< [5..5] Port input status (y = 5) */
      __IM  uint32_t ISTAT6     : 1;            /*!< [6..6] Port input status (y = 6) */
      __IM  uint32_t ISTAT7     : 1;            /*!< [7..7] Port input status (y = 7) */
      __IM  uint32_t ISTAT8     : 1;            /*!< [8..8] Port input status (y = 8) */
      __IM  uint32_t ISTAT9     : 1;            /*!< [9..9] Port input status (y = 9) */
      __IM  uint32_t ISTAT10    : 1;            /*!< [10..10] Port input status (y = 10) */
      __IM  uint32_t ISTAT11    : 1;            /*!< [11..11] Port input status (y = 11) */
      __IM  uint32_t ISTAT12    : 1;            /*!< [12..12] Port input status (y = 12) */
      __IM  uint32_t ISTAT13    : 1;            /*!< [13..13] Port input status (y = 13) */
      __IM  uint32_t ISTAT14    : 1;            /*!< [14..14] Port input status (y = 14) */
      __IM  uint32_t ISTAT15    : 1;            /*!< [15..15] Port input status (y = 15) */
    } ISTAT_b;
  } ;
  
  union {
    __IOM uint32_t OCTL;                        /*!< (@ 0x00000014) GPIO port output control register */
    
    struct {
      __IOM uint32_t OCTL0      : 1;            /*!< [0..0] Port output control (y = 0) */
      __IOM uint32_t OCTL1      : 1;            /*!< [1..1] Port output control (y = 1) */
      __IOM uint32_t OCTL2      : 1;            /*!< [2..2] Port output control (y = 2) */
      __IOM uint32_t OCTL3      : 1;            /*!< [3..3] Port output control (y = 3) */
      __IOM uint32_t OCTL4      : 1;            /*!< [4..4] Port output control (y = 4) */
      __IOM uint32_t OCTL5      : 1;            /*!< [5..5] Port output control (y = 5) */
      __IOM uint32_t OCTL6      : 1;            /*!< [6..6] Port output control (y = 6) */
      __IOM uint32_t OCTL7      : 1;            /*!< [7..7] Port output control (y = 7) */
      __IOM uint32_t OCTL8      : 1;            /*!< [8..8] Port output control (y = 8) */
      __IOM uint32_t OCTL9      : 1;            /*!< [9..9] Port output control (y = 9) */
      __IOM uint32_t OCTL10     : 1;            /*!< [10..10] Port output control (y = 10) */
      __IOM uint32_t OCTL11     : 1;            /*!< [11..11] Port output control (y = 11) */
      __IOM uint32_t OCTL12     : 1;            /*!< [12..12] Port output control (y = 12) */
      __IOM uint32_t OCTL13     : 1;            /*!< [13..13] Port output control (y = 13) */
      __IOM uint32_t OCTL14     : 1;            /*!< [14..14] Port output control (y = 14) */
      __IOM uint32_t OCTL15     : 1;            /*!< [15..15] Port output control (y = 15) */
    } OCTL_b;
  } ;
  
  union {
    __OM  uint32_t BOP;                         /*!< (@ 0x00000018) GPIO port bit operate register */
    
    struct {
      __OM  uint32_t BOP0       : 1;            /*!< [0..0] Port Set bit 0 */
      __OM  uint32_t BOP1       : 1;            /*!< [1..1] Port Set bit 1 */
      __OM  uint32_t BOP2       : 1;            /*!< [2..2] Port Set bit 2 */
      __OM  uint32_t BOP3       : 1;            /*!< [3..3] Port Set bit 3 */
      __OM  uint32_t BOP4       : 1;            /*!< [4..4] Port Set bit 4 */
      __OM  uint32_t BOP5       : 1;            /*!< [5..5] Port Set bit 5 */
      __OM  uint32_t BOP6       : 1;            /*!< [6..6] Port Set bit 6 */
      __OM  uint32_t BOP7       : 1;            /*!< [7..7] Port Set bit 7 */
      __OM  uint32_t BOP8       : 1;            /*!< [8..8] Port Set bit 8 */
      __OM  uint32_t BOP9       : 1;            /*!< [9..9] Port Set bit 9 */
      __OM  uint32_t BOP10      : 1;            /*!< [10..10] Port Set bit 10 */
      __OM  uint32_t BOP11      : 1;            /*!< [11..11] Port Set bit 11 */
      __OM  uint32_t BOP12      : 1;            /*!< [12..12] Port Set bit 12 */
      __OM  uint32_t BOP13      : 1;            /*!< [13..13] Port Set bit 13 */
      __OM  uint32_t BOP14      : 1;            /*!< [14..14] Port Set bit 14 */
      __OM  uint32_t BOP15      : 1;            /*!< [15..15] Port Set bit 15 */
      __OM  uint32_t CR0        : 1;            /*!< [16..16] Port Clear bit 0 */
      __OM  uint32_t CR1        : 1;            /*!< [17..17] Port Clear bit 1 */
      __OM  uint32_t CR2        : 1;            /*!< [18..18] Port Clear bit 2 */
      __OM  uint32_t CR3        : 1;            /*!< [19..19] Port Clear bit 3 */
      __OM  uint32_t CR4        : 1;            /*!< [20..20] Port Clear bit 4 */
      __OM  uint32_t CR5        : 1;            /*!< [21..21] Port Clear bit 5 */
      __OM  uint32_t CR6        : 1;            /*!< [22..22] Port Clear bit 6 */
      __OM  uint32_t CR7        : 1;            /*!< [23..23] Port Clear bit 7 */
      __OM  uint32_t CR8        : 1;            /*!< [24..24] Port Clear bit 8 */
      __OM  uint32_t CR9        : 1;            /*!< [25..25] Port Clear bit 9 */
      __OM  uint32_t CR10       : 1;            /*!< [26..26] Port Clear bit 10 */
      __OM  uint32_t CR11       : 1;            /*!< [27..27] Port Clear bit 11 */
      __OM  uint32_t CR12       : 1;            /*!< [28..28] Port Clear bit 12 */
      __OM  uint32_t CR13       : 1;            /*!< [29..29] Port Clear bit 13 */
      __OM  uint32_t CR14       : 1;            /*!< [30..30] Port Clear bit 14 */
      __OM  uint32_t CR15       : 1;            /*!< [31..31] Port Clear bit 15 */
    } BOP_b;
  } ;
  
  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x0000001C) GPIO port configuration lock register */
    
    struct {
      __IOM uint32_t LK0        : 1;            /*!< [0..0] Port Lock bit 0 */
      __IOM uint32_t LK1        : 1;            /*!< [1..1] Port Lock bit 1 */
      __IOM uint32_t LK2        : 1;            /*!< [2..2] Port Lock bit 2 */
      __IOM uint32_t LK3        : 1;            /*!< [3..3] Port Lock bit 3 */
      __IOM uint32_t LK4        : 1;            /*!< [4..4] Port Lock bit 4 */
      __IOM uint32_t LK5        : 1;            /*!< [5..5] Port Lock bit 5 */
      __IOM uint32_t LK6        : 1;            /*!< [6..6] Port Lock bit 6 */
      __IOM uint32_t LK7        : 1;            /*!< [7..7] Port Lock bit 7 */
      __IOM uint32_t LK8        : 1;            /*!< [8..8] Port Lock bit 8 */
      __IOM uint32_t LK9        : 1;            /*!< [9..9] Port Lock bit 9 */
      __IOM uint32_t LK10       : 1;            /*!< [10..10] Port Lock bit 10 */
      __IOM uint32_t LK11       : 1;            /*!< [11..11] Port Lock bit 11 */
      __IOM uint32_t LK12       : 1;            /*!< [12..12] Port Lock bit 12 */
      __IOM uint32_t LK13       : 1;            /*!< [13..13] Port Lock bit 13 */
      __IOM uint32_t LK14       : 1;            /*!< [14..14] Port Lock bit 14 */
      __IOM uint32_t LK15       : 1;            /*!< [15..15] Port Lock bit 15 */
      __IOM uint32_t LKK        : 1;            /*!< [16..16] Lock sequence key */
    } LOCK_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL0;                      /*!< (@ 0x00000020) GPIO alternate function selected register 0 */
    
    struct {
      __IOM uint32_t SEL0       : 4;            /*!< [3..0] Port 0 alternate function selected */
      __IOM uint32_t SEL1       : 4;            /*!< [7..4] Port 1 alternate function selected */
      __IOM uint32_t SEL2       : 4;            /*!< [11..8] Port 2 alternate function selected */
      __IOM uint32_t SEL3       : 4;            /*!< [15..12] Port 3 alternate function selected */
      __IOM uint32_t SEL4       : 4;            /*!< [19..16] Port 4 alternate function selected */
      __IOM uint32_t SEL5       : 4;            /*!< [23..20] Port 5 alternate function selected */
      __IOM uint32_t SEL6       : 4;            /*!< [27..24] Port 6 alternate function selected */
      __IOM uint32_t SEL7       : 4;            /*!< [31..28] Port 7 alternate function selected */
    } AFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL1;                      /*!< (@ 0x00000024) GPIO alternate function selected register 1 */
    
    struct {
      __IOM uint32_t SEL8       : 4;            /*!< [3..0] Port 8 alternate function selected */
      __IOM uint32_t SEL9       : 4;            /*!< [7..4] Port 9 alternate function selected */
      __IOM uint32_t SEL10      : 4;            /*!< [11..8] Port 10 alternate function selected */
      __IOM uint32_t SEL11      : 4;            /*!< [15..12] Port 11 alternate function selected */
      __IOM uint32_t SEL12      : 4;            /*!< [19..16] Port 12 alternate function selected */
      __IOM uint32_t SEL13      : 4;            /*!< [23..20] Port 13 alternate function selected */
      __IOM uint32_t SEL14      : 4;            /*!< [27..24] Port 14 alternate function selected */
      __IOM uint32_t SEL15      : 4;            /*!< [31..28] Port 15 alternate function selected */
    } AFSEL1_b;
  } ;
  
  union {
    __OM  uint32_t BC;                          /*!< (@ 0x00000028) Bit clear register */
    
    struct {
      __OM  uint32_t CR0        : 1;            /*!< [0..0] Port cleat bit */
      __OM  uint32_t CR1        : 1;            /*!< [1..1] Port cleat bit */
      __OM  uint32_t CR2        : 1;            /*!< [2..2] Port cleat bit */
      __OM  uint32_t CR3        : 1;            /*!< [3..3] Port cleat bit */
      __OM  uint32_t CR4        : 1;            /*!< [4..4] Port cleat bit */
      __OM  uint32_t CR5        : 1;            /*!< [5..5] Port cleat bit */
      __OM  uint32_t CR6        : 1;            /*!< [6..6] Port cleat bit */
      __OM  uint32_t CR7        : 1;            /*!< [7..7] Port cleat bit */
      __OM  uint32_t CR8        : 1;            /*!< [8..8] Port cleat bit */
      __OM  uint32_t CR9        : 1;            /*!< [9..9] Port cleat bit */
      __OM  uint32_t CR10       : 1;            /*!< [10..10] Port cleat bit */
      __OM  uint32_t CR11       : 1;            /*!< [11..11] Port cleat bit */
      __OM  uint32_t CR12       : 1;            /*!< [12..12] Port cleat bit */
      __OM  uint32_t CR13       : 1;            /*!< [13..13] Port cleat bit */
      __OM  uint32_t CR14       : 1;            /*!< [14..14] Port cleat bit */
      __OM  uint32_t CR15       : 1;            /*!< [15..15] Port cleat bit */
    } BC_b;
  } ;
  
  union {
    __OM  uint32_t TG;                          /*!< (@ 0x0000002C) Port bit toggle register */
    
    struct {
      __OM  uint32_t TG0        : 1;            /*!< [0..0] Port toggle bit */
      __OM  uint32_t TG1        : 1;            /*!< [1..1] Port toggle bit */
      __OM  uint32_t TG2        : 1;            /*!< [2..2] Port toggle bit */
      __OM  uint32_t TG3        : 1;            /*!< [3..3] Port toggle bit */
      __OM  uint32_t TG4        : 1;            /*!< [4..4] Port toggle bit */
      __OM  uint32_t TG5        : 1;            /*!< [5..5] Port toggle bit */
      __OM  uint32_t TG6        : 1;            /*!< [6..6] Port toggle bit */
      __OM  uint32_t TG7        : 1;            /*!< [7..7] Port toggle bit */
      __OM  uint32_t TG8        : 1;            /*!< [8..8] Port toggle bit */
      __OM  uint32_t TG9        : 1;            /*!< [9..9] Port toggle bit */
      __OM  uint32_t TG10       : 1;            /*!< [10..10] Port toggle bit */
      __OM  uint32_t TG11       : 1;            /*!< [11..11] Port toggle bit */
      __OM  uint32_t TG12       : 1;            /*!< [12..12] Port toggle bit */
      __OM  uint32_t TG13       : 1;            /*!< [13..13] Port toggle bit */
      __OM  uint32_t TG14       : 1;            /*!< [14..14] Port toggle bit */
      __OM  uint32_t TG15       : 1;            /*!< [15..15] Port toggle bit */
    } TG_b;
  } ;
} GPIOD_Type;                                   /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           GPIOE                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOE)
  */

typedef struct {                                /*!< (@ 0x40021000) GPIOE Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) GPIO port control register */
    
    struct {
      __IOM uint32_t CTL0       : 2;            /*!< [1..0] Port x configuration bits (x = 0) */
      __IOM uint32_t CTL1       : 2;            /*!< [3..2] Port x configuration bits (x = 1) */
      __IOM uint32_t CTL2       : 2;            /*!< [5..4] Port x configuration bits (x = 2) */
      __IOM uint32_t CTL3       : 2;            /*!< [7..6] Port x configuration bits (x = 3) */
      __IOM uint32_t CTL4       : 2;            /*!< [9..8] Port x configuration bits (x = 4 ) */
      __IOM uint32_t CTL5       : 2;            /*!< [11..10] Port x configuration bits (x = 5) */
      __IOM uint32_t CTL6       : 2;            /*!< [13..12] Port x configuration bits (x = 6 ) */
      __IOM uint32_t CTL7       : 2;            /*!< [15..14] Port x configuration bits (x = 7) */
      __IOM uint32_t CTL8       : 2;            /*!< [17..16] Port x configuration bits (x = 8) */
      __IOM uint32_t CTL9       : 2;            /*!< [19..18] Port x configuration bits (x = 9) */
      __IOM uint32_t CTL10      : 2;            /*!< [21..20] Port x configuration bits (x = 10) */
      __IOM uint32_t CTL11      : 2;            /*!< [23..22] Port x configuration bits (x = 11) */
      __IOM uint32_t CTL12      : 2;            /*!< [25..24] Port x configuration bits (x = 12) */
      __IOM uint32_t CTL13      : 2;            /*!< [27..26] Port x configuration bits (x = 13) */
      __IOM uint32_t CTL14      : 2;            /*!< [29..28] Port x configuration bits (x = 14) */
      __IOM uint32_t CTL15      : 2;            /*!< [31..30] Port x configuration bits (x = 15) */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OMODE;                       /*!< (@ 0x00000004) GPIO port output mode register */
    
    struct {
      __IOM uint32_t OM0        : 1;            /*!< [0..0] Port 0 output mode bit */
      __IOM uint32_t OM1        : 1;            /*!< [1..1] Port 1 output mode bit */
      __IOM uint32_t OM2        : 1;            /*!< [2..2] Port 2 output mode bit */
      __IOM uint32_t OM3        : 1;            /*!< [3..3] Port 3 output mode bit */
      __IOM uint32_t OM4        : 1;            /*!< [4..4] Port 4 output mode bit */
      __IOM uint32_t OM5        : 1;            /*!< [5..5] Port 5 output mode bit */
      __IOM uint32_t OM6        : 1;            /*!< [6..6] Port 6 output mode bit */
      __IOM uint32_t OM7        : 1;            /*!< [7..7] Port 7 output mode bit */
      __IOM uint32_t OM8        : 1;            /*!< [8..8] Port 8 output mode bit */
      __IOM uint32_t OM9        : 1;            /*!< [9..9] Port 9 output mode bit */
      __IOM uint32_t OM10       : 1;            /*!< [10..10] Port 10 output mode bit */
      __IOM uint32_t OM11       : 1;            /*!< [11..11] Port 11 output mode bit */
      __IOM uint32_t OM12       : 1;            /*!< [12..12] Port 12 output mode bit */
      __IOM uint32_t OM13       : 1;            /*!< [13..13] Port 13 output mode bit */
      __IOM uint32_t OM14       : 1;            /*!< [14..14] Port 14 output mode bit */
      __IOM uint32_t OM15       : 1;            /*!< [15..15] Port 15 output mode bit */
    } OMODE_b;
  } ;
  
  union {
    __IOM uint32_t OSPD;                        /*!< (@ 0x00000008) GPIO port output speed register */
    
    struct {
      __IOM uint32_t OSPD0      : 2;            /*!< [1..0] Port 0 output max speed bits */
      __IOM uint32_t OSPD1      : 2;            /*!< [3..2] Port 1 output max speed bits */
      __IOM uint32_t OSPD2      : 2;            /*!< [5..4] Port 2 output max speed bits */
      __IOM uint32_t OSPD3      : 2;            /*!< [7..6] Port 3 output max speed bits */
      __IOM uint32_t OSPD4      : 2;            /*!< [9..8] Port 4 output max speed bits */
      __IOM uint32_t OSPD5      : 2;            /*!< [11..10] Port 5 output max speed bits */
      __IOM uint32_t OSPD6      : 2;            /*!< [13..12] Port 6 output max speed bits */
      __IOM uint32_t OSPD7      : 2;            /*!< [15..14] Port 7 output max speed bits */
      __IOM uint32_t OSPD8      : 2;            /*!< [17..16] Port 8 output max speed bits */
      __IOM uint32_t OSPD9      : 2;            /*!< [19..18] Port 9 output max speed bits */
      __IOM uint32_t OSPD10     : 2;            /*!< [21..20] Port 10 output max speed bits */
      __IOM uint32_t OSPD11     : 2;            /*!< [23..22] Port 11 output max speed bits */
      __IOM uint32_t OSPD12     : 2;            /*!< [25..24] Port 12 output max speed bits */
      __IOM uint32_t OSPD13     : 2;            /*!< [27..26] Port 13 output max speed bits */
      __IOM uint32_t OSPD14     : 2;            /*!< [29..28] Port 14 output max speed bits */
      __IOM uint32_t OSPD15     : 2;            /*!< [31..30] Port 15 output max speed bits */
    } OSPD_b;
  } ;
  
  union {
    __IOM uint32_t PUD;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register */
    
    struct {
      __IOM uint32_t PUD0       : 2;            /*!< [1..0] Port 0 pull-up or pull-down bits */
      __IOM uint32_t PUD1       : 2;            /*!< [3..2] Port 1 pull-up or pull-down bits */
      __IOM uint32_t PUD2       : 2;            /*!< [5..4] Port 2 pull-up or pull-down bits */
      __IOM uint32_t PUD3       : 2;            /*!< [7..6] Port 3 pull-up or pull-down bits */
      __IOM uint32_t PUD4       : 2;            /*!< [9..8] Port 4 pull-up or pull-down bits */
      __IOM uint32_t PUD5       : 2;            /*!< [11..10] Port 5 pull-up or pull-down bits */
      __IOM uint32_t PUD6       : 2;            /*!< [13..12] Port 6 pull-up or pull-down bits */
      __IOM uint32_t PUD7       : 2;            /*!< [15..14] Port 7 pull-up or pull-down bits */
      __IOM uint32_t PUD8       : 2;            /*!< [17..16] Port 8 pull-up or pull-down bits */
      __IOM uint32_t PUD9       : 2;            /*!< [19..18] Port 9 pull-up or pull-down bits */
      __IOM uint32_t PUD10      : 2;            /*!< [21..20] Port 10 pull-up or pull-down bits */
      __IOM uint32_t PUD11      : 2;            /*!< [23..22] Port 11 pull-up or pull-down bits */
      __IOM uint32_t PUD12      : 2;            /*!< [25..24] Port 12 pull-up or pull-down bits */
      __IOM uint32_t PUD13      : 2;            /*!< [27..26] Port 13 pull-up or pull-down bits */
      __IOM uint32_t PUD14      : 2;            /*!< [29..28] Port 14 pull-up or pull-down bits */
      __IOM uint32_t PUD15      : 2;            /*!< [31..30] Port 15 pull-up or pull-down bits */
    } PUD_b;
  } ;
  
  union {
    __IM  uint32_t ISTAT;                       /*!< (@ 0x00000010) GPIO port input status register */
    
    struct {
      __IM  uint32_t ISTAT0     : 1;            /*!< [0..0] Port input status (y = 0) */
      __IM  uint32_t ISTAT1     : 1;            /*!< [1..1] Port input status (y = 1) */
      __IM  uint32_t ISTAT2     : 1;            /*!< [2..2] Port input status (y = 2) */
      __IM  uint32_t ISTAT3     : 1;            /*!< [3..3] Port input status (y = 3) */
      __IM  uint32_t ISTAT4     : 1;            /*!< [4..4] Port input status (y = 4) */
      __IM  uint32_t ISTAT5     : 1;            /*!< [5..5] Port input status (y = 5) */
      __IM  uint32_t ISTAT6     : 1;            /*!< [6..6] Port input status (y = 6) */
      __IM  uint32_t ISTAT7     : 1;            /*!< [7..7] Port input status (y = 7) */
      __IM  uint32_t ISTAT8     : 1;            /*!< [8..8] Port input status (y = 8) */
      __IM  uint32_t ISTAT9     : 1;            /*!< [9..9] Port input status (y = 9) */
      __IM  uint32_t ISTAT10    : 1;            /*!< [10..10] Port input status (y = 10) */
      __IM  uint32_t ISTAT11    : 1;            /*!< [11..11] Port input status (y = 11) */
      __IM  uint32_t ISTAT12    : 1;            /*!< [12..12] Port input status (y = 12) */
      __IM  uint32_t ISTAT13    : 1;            /*!< [13..13] Port input status (y = 13) */
      __IM  uint32_t ISTAT14    : 1;            /*!< [14..14] Port input status (y = 14) */
      __IM  uint32_t ISTAT15    : 1;            /*!< [15..15] Port input status (y = 15) */
    } ISTAT_b;
  } ;
  
  union {
    __IOM uint32_t OCTL;                        /*!< (@ 0x00000014) GPIO port output control register */
    
    struct {
      __IOM uint32_t OCTL0      : 1;            /*!< [0..0] Port output control (y = 0) */
      __IOM uint32_t OCTL1      : 1;            /*!< [1..1] Port output control (y = 1) */
      __IOM uint32_t OCTL2      : 1;            /*!< [2..2] Port output control (y = 2) */
      __IOM uint32_t OCTL3      : 1;            /*!< [3..3] Port output control (y = 3) */
      __IOM uint32_t OCTL4      : 1;            /*!< [4..4] Port output control (y = 4) */
      __IOM uint32_t OCTL5      : 1;            /*!< [5..5] Port output control (y = 5) */
      __IOM uint32_t OCTL6      : 1;            /*!< [6..6] Port output control (y = 6) */
      __IOM uint32_t OCTL7      : 1;            /*!< [7..7] Port output control (y = 7) */
      __IOM uint32_t OCTL8      : 1;            /*!< [8..8] Port output control (y = 8) */
      __IOM uint32_t OCTL9      : 1;            /*!< [9..9] Port output control (y = 9) */
      __IOM uint32_t OCTL10     : 1;            /*!< [10..10] Port output control (y = 10) */
      __IOM uint32_t OCTL11     : 1;            /*!< [11..11] Port output control (y = 11) */
      __IOM uint32_t OCTL12     : 1;            /*!< [12..12] Port output control (y = 12) */
      __IOM uint32_t OCTL13     : 1;            /*!< [13..13] Port output control (y = 13) */
      __IOM uint32_t OCTL14     : 1;            /*!< [14..14] Port output control (y = 14) */
      __IOM uint32_t OCTL15     : 1;            /*!< [15..15] Port output control (y = 15) */
    } OCTL_b;
  } ;
  
  union {
    __OM  uint32_t BOP;                         /*!< (@ 0x00000018) GPIO port bit operate register */
    
    struct {
      __OM  uint32_t BOP0       : 1;            /*!< [0..0] Port Set bit 0 */
      __OM  uint32_t BOP1       : 1;            /*!< [1..1] Port Set bit 1 */
      __OM  uint32_t BOP2       : 1;            /*!< [2..2] Port Set bit 2 */
      __OM  uint32_t BOP3       : 1;            /*!< [3..3] Port Set bit 3 */
      __OM  uint32_t BOP4       : 1;            /*!< [4..4] Port Set bit 4 */
      __OM  uint32_t BOP5       : 1;            /*!< [5..5] Port Set bit 5 */
      __OM  uint32_t BOP6       : 1;            /*!< [6..6] Port Set bit 6 */
      __OM  uint32_t BOP7       : 1;            /*!< [7..7] Port Set bit 7 */
      __OM  uint32_t BOP8       : 1;            /*!< [8..8] Port Set bit 8 */
      __OM  uint32_t BOP9       : 1;            /*!< [9..9] Port Set bit 9 */
      __OM  uint32_t BOP10      : 1;            /*!< [10..10] Port Set bit 10 */
      __OM  uint32_t BOP11      : 1;            /*!< [11..11] Port Set bit 11 */
      __OM  uint32_t BOP12      : 1;            /*!< [12..12] Port Set bit 12 */
      __OM  uint32_t BOP13      : 1;            /*!< [13..13] Port Set bit 13 */
      __OM  uint32_t BOP14      : 1;            /*!< [14..14] Port Set bit 14 */
      __OM  uint32_t BOP15      : 1;            /*!< [15..15] Port Set bit 15 */
      __OM  uint32_t CR0        : 1;            /*!< [16..16] Port Clear bit 0 */
      __OM  uint32_t CR1        : 1;            /*!< [17..17] Port Clear bit 1 */
      __OM  uint32_t CR2        : 1;            /*!< [18..18] Port Clear bit 2 */
      __OM  uint32_t CR3        : 1;            /*!< [19..19] Port Clear bit 3 */
      __OM  uint32_t CR4        : 1;            /*!< [20..20] Port Clear bit 4 */
      __OM  uint32_t CR5        : 1;            /*!< [21..21] Port Clear bit 5 */
      __OM  uint32_t CR6        : 1;            /*!< [22..22] Port Clear bit 6 */
      __OM  uint32_t CR7        : 1;            /*!< [23..23] Port Clear bit 7 */
      __OM  uint32_t CR8        : 1;            /*!< [24..24] Port Clear bit 8 */
      __OM  uint32_t CR9        : 1;            /*!< [25..25] Port Clear bit 9 */
      __OM  uint32_t CR10       : 1;            /*!< [26..26] Port Clear bit 10 */
      __OM  uint32_t CR11       : 1;            /*!< [27..27] Port Clear bit 11 */
      __OM  uint32_t CR12       : 1;            /*!< [28..28] Port Clear bit 12 */
      __OM  uint32_t CR13       : 1;            /*!< [29..29] Port Clear bit 13 */
      __OM  uint32_t CR14       : 1;            /*!< [30..30] Port Clear bit 14 */
      __OM  uint32_t CR15       : 1;            /*!< [31..31] Port Clear bit 15 */
    } BOP_b;
  } ;
  
  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x0000001C) GPIO port configuration lock register */
    
    struct {
      __IOM uint32_t LK0        : 1;            /*!< [0..0] Port Lock bit 0 */
      __IOM uint32_t LK1        : 1;            /*!< [1..1] Port Lock bit 1 */
      __IOM uint32_t LK2        : 1;            /*!< [2..2] Port Lock bit 2 */
      __IOM uint32_t LK3        : 1;            /*!< [3..3] Port Lock bit 3 */
      __IOM uint32_t LK4        : 1;            /*!< [4..4] Port Lock bit 4 */
      __IOM uint32_t LK5        : 1;            /*!< [5..5] Port Lock bit 5 */
      __IOM uint32_t LK6        : 1;            /*!< [6..6] Port Lock bit 6 */
      __IOM uint32_t LK7        : 1;            /*!< [7..7] Port Lock bit 7 */
      __IOM uint32_t LK8        : 1;            /*!< [8..8] Port Lock bit 8 */
      __IOM uint32_t LK9        : 1;            /*!< [9..9] Port Lock bit 9 */
      __IOM uint32_t LK10       : 1;            /*!< [10..10] Port Lock bit 10 */
      __IOM uint32_t LK11       : 1;            /*!< [11..11] Port Lock bit 11 */
      __IOM uint32_t LK12       : 1;            /*!< [12..12] Port Lock bit 12 */
      __IOM uint32_t LK13       : 1;            /*!< [13..13] Port Lock bit 13 */
      __IOM uint32_t LK14       : 1;            /*!< [14..14] Port Lock bit 14 */
      __IOM uint32_t LK15       : 1;            /*!< [15..15] Port Lock bit 15 */
      __IOM uint32_t LKK        : 1;            /*!< [16..16] Lock sequence key */
    } LOCK_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL0;                      /*!< (@ 0x00000020) GPIO alternate function selected register 0 */
    
    struct {
      __IOM uint32_t SEL0       : 4;            /*!< [3..0] Port 0 alternate function selected */
      __IOM uint32_t SEL1       : 4;            /*!< [7..4] Port 1 alternate function selected */
      __IOM uint32_t SEL2       : 4;            /*!< [11..8] Port 2 alternate function selected */
      __IOM uint32_t SEL3       : 4;            /*!< [15..12] Port 3 alternate function selected */
      __IOM uint32_t SEL4       : 4;            /*!< [19..16] Port 4 alternate function selected */
      __IOM uint32_t SEL5       : 4;            /*!< [23..20] Port 5 alternate function selected */
      __IOM uint32_t SEL6       : 4;            /*!< [27..24] Port 6 alternate function selected */
      __IOM uint32_t SEL7       : 4;            /*!< [31..28] Port 7 alternate function selected */
    } AFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL1;                      /*!< (@ 0x00000024) GPIO alternate function selected register 1 */
    
    struct {
      __IOM uint32_t SEL8       : 4;            /*!< [3..0] Port 8 alternate function selected */
      __IOM uint32_t SEL9       : 4;            /*!< [7..4] Port 9 alternate function selected */
      __IOM uint32_t SEL10      : 4;            /*!< [11..8] Port 10 alternate function selected */
      __IOM uint32_t SEL11      : 4;            /*!< [15..12] Port 11 alternate function selected */
      __IOM uint32_t SEL12      : 4;            /*!< [19..16] Port 12 alternate function selected */
      __IOM uint32_t SEL13      : 4;            /*!< [23..20] Port 13 alternate function selected */
      __IOM uint32_t SEL14      : 4;            /*!< [27..24] Port 14 alternate function selected */
      __IOM uint32_t SEL15      : 4;            /*!< [31..28] Port 15 alternate function selected */
    } AFSEL1_b;
  } ;
  
  union {
    __OM  uint32_t BC;                          /*!< (@ 0x00000028) Bit clear register */
    
    struct {
      __OM  uint32_t CR0        : 1;            /*!< [0..0] Port cleat bit */
      __OM  uint32_t CR1        : 1;            /*!< [1..1] Port cleat bit */
      __OM  uint32_t CR2        : 1;            /*!< [2..2] Port cleat bit */
      __OM  uint32_t CR3        : 1;            /*!< [3..3] Port cleat bit */
      __OM  uint32_t CR4        : 1;            /*!< [4..4] Port cleat bit */
      __OM  uint32_t CR5        : 1;            /*!< [5..5] Port cleat bit */
      __OM  uint32_t CR6        : 1;            /*!< [6..6] Port cleat bit */
      __OM  uint32_t CR7        : 1;            /*!< [7..7] Port cleat bit */
      __OM  uint32_t CR8        : 1;            /*!< [8..8] Port cleat bit */
      __OM  uint32_t CR9        : 1;            /*!< [9..9] Port cleat bit */
      __OM  uint32_t CR10       : 1;            /*!< [10..10] Port cleat bit */
      __OM  uint32_t CR11       : 1;            /*!< [11..11] Port cleat bit */
      __OM  uint32_t CR12       : 1;            /*!< [12..12] Port cleat bit */
      __OM  uint32_t CR13       : 1;            /*!< [13..13] Port cleat bit */
      __OM  uint32_t CR14       : 1;            /*!< [14..14] Port cleat bit */
      __OM  uint32_t CR15       : 1;            /*!< [15..15] Port cleat bit */
    } BC_b;
  } ;
  
  union {
    __OM  uint32_t TG;                          /*!< (@ 0x0000002C) Port bit toggle register */
    
    struct {
      __OM  uint32_t TG0        : 1;            /*!< [0..0] Port toggle bit */
      __OM  uint32_t TG1        : 1;            /*!< [1..1] Port toggle bit */
      __OM  uint32_t TG2        : 1;            /*!< [2..2] Port toggle bit */
      __OM  uint32_t TG3        : 1;            /*!< [3..3] Port toggle bit */
      __OM  uint32_t TG4        : 1;            /*!< [4..4] Port toggle bit */
      __OM  uint32_t TG5        : 1;            /*!< [5..5] Port toggle bit */
      __OM  uint32_t TG6        : 1;            /*!< [6..6] Port toggle bit */
      __OM  uint32_t TG7        : 1;            /*!< [7..7] Port toggle bit */
      __OM  uint32_t TG8        : 1;            /*!< [8..8] Port toggle bit */
      __OM  uint32_t TG9        : 1;            /*!< [9..9] Port toggle bit */
      __OM  uint32_t TG10       : 1;            /*!< [10..10] Port toggle bit */
      __OM  uint32_t TG11       : 1;            /*!< [11..11] Port toggle bit */
      __OM  uint32_t TG12       : 1;            /*!< [12..12] Port toggle bit */
      __OM  uint32_t TG13       : 1;            /*!< [13..13] Port toggle bit */
      __OM  uint32_t TG14       : 1;            /*!< [14..14] Port toggle bit */
      __OM  uint32_t TG15       : 1;            /*!< [15..15] Port toggle bit */
    } TG_b;
  } ;
} GPIOE_Type;                                   /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           GPIOF                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOF)
  */

typedef struct {                                /*!< (@ 0x40021400) GPIOF Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) GPIO port control register */
    
    struct {
      __IOM uint32_t CTL0       : 2;            /*!< [1..0] Port x configuration bits (x = 0) */
      __IOM uint32_t CTL1       : 2;            /*!< [3..2] Port x configuration bits (x = 1) */
      __IOM uint32_t CTL2       : 2;            /*!< [5..4] Port x configuration bits (x = 2) */
      __IOM uint32_t CTL3       : 2;            /*!< [7..6] Port x configuration bits (x = 3) */
      __IOM uint32_t CTL4       : 2;            /*!< [9..8] Port x configuration bits (x = 4 ) */
      __IOM uint32_t CTL5       : 2;            /*!< [11..10] Port x configuration bits (x = 5) */
      __IOM uint32_t CTL6       : 2;            /*!< [13..12] Port x configuration bits (x = 6 ) */
      __IOM uint32_t CTL7       : 2;            /*!< [15..14] Port x configuration bits (x = 7) */
      __IOM uint32_t CTL8       : 2;            /*!< [17..16] Port x configuration bits (x = 8) */
      __IOM uint32_t CTL9       : 2;            /*!< [19..18] Port x configuration bits (x = 9) */
      __IOM uint32_t CTL10      : 2;            /*!< [21..20] Port x configuration bits (x = 10) */
      __IOM uint32_t CTL11      : 2;            /*!< [23..22] Port x configuration bits (x = 11) */
      __IOM uint32_t CTL12      : 2;            /*!< [25..24] Port x configuration bits (x = 12) */
      __IOM uint32_t CTL13      : 2;            /*!< [27..26] Port x configuration bits (x = 13) */
      __IOM uint32_t CTL14      : 2;            /*!< [29..28] Port x configuration bits (x = 14) */
      __IOM uint32_t CTL15      : 2;            /*!< [31..30] Port x configuration bits (x = 15) */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OMODE;                       /*!< (@ 0x00000004) GPIO port output mode register */
    
    struct {
      __IOM uint32_t OM0        : 1;            /*!< [0..0] Port 0 output mode bit */
      __IOM uint32_t OM1        : 1;            /*!< [1..1] Port 1 output mode bit */
      __IOM uint32_t OM2        : 1;            /*!< [2..2] Port 2 output mode bit */
      __IOM uint32_t OM3        : 1;            /*!< [3..3] Port 3 output mode bit */
      __IOM uint32_t OM4        : 1;            /*!< [4..4] Port 4 output mode bit */
      __IOM uint32_t OM5        : 1;            /*!< [5..5] Port 5 output mode bit */
      __IOM uint32_t OM6        : 1;            /*!< [6..6] Port 6 output mode bit */
      __IOM uint32_t OM7        : 1;            /*!< [7..7] Port 7 output mode bit */
      __IOM uint32_t OM8        : 1;            /*!< [8..8] Port 8 output mode bit */
      __IOM uint32_t OM9        : 1;            /*!< [9..9] Port 9 output mode bit */
      __IOM uint32_t OM10       : 1;            /*!< [10..10] Port 10 output mode bit */
      __IOM uint32_t OM11       : 1;            /*!< [11..11] Port 11 output mode bit */
      __IOM uint32_t OM12       : 1;            /*!< [12..12] Port 12 output mode bit */
      __IOM uint32_t OM13       : 1;            /*!< [13..13] Port 13 output mode bit */
      __IOM uint32_t OM14       : 1;            /*!< [14..14] Port 14 output mode bit */
      __IOM uint32_t OM15       : 1;            /*!< [15..15] Port 15 output mode bit */
    } OMODE_b;
  } ;
  
  union {
    __IOM uint32_t OSPD;                        /*!< (@ 0x00000008) GPIO port output speed register */
    
    struct {
      __IOM uint32_t OSPD0      : 2;            /*!< [1..0] Port 0 output max speed bits */
      __IOM uint32_t OSPD1      : 2;            /*!< [3..2] Port 1 output max speed bits */
      __IOM uint32_t OSPD2      : 2;            /*!< [5..4] Port 2 output max speed bits */
      __IOM uint32_t OSPD3      : 2;            /*!< [7..6] Port 3 output max speed bits */
      __IOM uint32_t OSPD4      : 2;            /*!< [9..8] Port 4 output max speed bits */
      __IOM uint32_t OSPD5      : 2;            /*!< [11..10] Port 5 output max speed bits */
      __IOM uint32_t OSPD6      : 2;            /*!< [13..12] Port 6 output max speed bits */
      __IOM uint32_t OSPD7      : 2;            /*!< [15..14] Port 7 output max speed bits */
      __IOM uint32_t OSPD8      : 2;            /*!< [17..16] Port 8 output max speed bits */
      __IOM uint32_t OSPD9      : 2;            /*!< [19..18] Port 9 output max speed bits */
      __IOM uint32_t OSPD10     : 2;            /*!< [21..20] Port 10 output max speed bits */
      __IOM uint32_t OSPD11     : 2;            /*!< [23..22] Port 11 output max speed bits */
      __IOM uint32_t OSPD12     : 2;            /*!< [25..24] Port 12 output max speed bits */
      __IOM uint32_t OSPD13     : 2;            /*!< [27..26] Port 13 output max speed bits */
      __IOM uint32_t OSPD14     : 2;            /*!< [29..28] Port 14 output max speed bits */
      __IOM uint32_t OSPD15     : 2;            /*!< [31..30] Port 15 output max speed bits */
    } OSPD_b;
  } ;
  
  union {
    __IOM uint32_t PUD;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register */
    
    struct {
      __IOM uint32_t PUD0       : 2;            /*!< [1..0] Port 0 pull-up or pull-down bits */
      __IOM uint32_t PUD1       : 2;            /*!< [3..2] Port 1 pull-up or pull-down bits */
      __IOM uint32_t PUD2       : 2;            /*!< [5..4] Port 2 pull-up or pull-down bits */
      __IOM uint32_t PUD3       : 2;            /*!< [7..6] Port 3 pull-up or pull-down bits */
      __IOM uint32_t PUD4       : 2;            /*!< [9..8] Port 4 pull-up or pull-down bits */
      __IOM uint32_t PUD5       : 2;            /*!< [11..10] Port 5 pull-up or pull-down bits */
      __IOM uint32_t PUD6       : 2;            /*!< [13..12] Port 6 pull-up or pull-down bits */
      __IOM uint32_t PUD7       : 2;            /*!< [15..14] Port 7 pull-up or pull-down bits */
      __IOM uint32_t PUD8       : 2;            /*!< [17..16] Port 8 pull-up or pull-down bits */
      __IOM uint32_t PUD9       : 2;            /*!< [19..18] Port 9 pull-up or pull-down bits */
      __IOM uint32_t PUD10      : 2;            /*!< [21..20] Port 10 pull-up or pull-down bits */
      __IOM uint32_t PUD11      : 2;            /*!< [23..22] Port 11 pull-up or pull-down bits */
      __IOM uint32_t PUD12      : 2;            /*!< [25..24] Port 12 pull-up or pull-down bits */
      __IOM uint32_t PUD13      : 2;            /*!< [27..26] Port 13 pull-up or pull-down bits */
      __IOM uint32_t PUD14      : 2;            /*!< [29..28] Port 14 pull-up or pull-down bits */
      __IOM uint32_t PUD15      : 2;            /*!< [31..30] Port 15 pull-up or pull-down bits */
    } PUD_b;
  } ;
  
  union {
    __IM  uint32_t ISTAT;                       /*!< (@ 0x00000010) GPIO port input status register */
    
    struct {
      __IM  uint32_t ISTAT0     : 1;            /*!< [0..0] Port input status (y = 0) */
      __IM  uint32_t ISTAT1     : 1;            /*!< [1..1] Port input status (y = 1) */
      __IM  uint32_t ISTAT2     : 1;            /*!< [2..2] Port input status (y = 2) */
      __IM  uint32_t ISTAT3     : 1;            /*!< [3..3] Port input status (y = 3) */
      __IM  uint32_t ISTAT4     : 1;            /*!< [4..4] Port input status (y = 4) */
      __IM  uint32_t ISTAT5     : 1;            /*!< [5..5] Port input status (y = 5) */
      __IM  uint32_t ISTAT6     : 1;            /*!< [6..6] Port input status (y = 6) */
      __IM  uint32_t ISTAT7     : 1;            /*!< [7..7] Port input status (y = 7) */
      __IM  uint32_t ISTAT8     : 1;            /*!< [8..8] Port input status (y = 8) */
      __IM  uint32_t ISTAT9     : 1;            /*!< [9..9] Port input status (y = 9) */
      __IM  uint32_t ISTAT10    : 1;            /*!< [10..10] Port input status (y = 10) */
      __IM  uint32_t ISTAT11    : 1;            /*!< [11..11] Port input status (y = 11) */
      __IM  uint32_t ISTAT12    : 1;            /*!< [12..12] Port input status (y = 12) */
      __IM  uint32_t ISTAT13    : 1;            /*!< [13..13] Port input status (y = 13) */
      __IM  uint32_t ISTAT14    : 1;            /*!< [14..14] Port input status (y = 14) */
      __IM  uint32_t ISTAT15    : 1;            /*!< [15..15] Port input status (y = 15) */
    } ISTAT_b;
  } ;
  
  union {
    __IOM uint32_t OCTL;                        /*!< (@ 0x00000014) GPIO port output control register */
    
    struct {
      __IOM uint32_t OCTL0      : 1;            /*!< [0..0] Port output control (y = 0) */
      __IOM uint32_t OCTL1      : 1;            /*!< [1..1] Port output control (y = 1) */
      __IOM uint32_t OCTL2      : 1;            /*!< [2..2] Port output control (y = 2) */
      __IOM uint32_t OCTL3      : 1;            /*!< [3..3] Port output control (y = 3) */
      __IOM uint32_t OCTL4      : 1;            /*!< [4..4] Port output control (y = 4) */
      __IOM uint32_t OCTL5      : 1;            /*!< [5..5] Port output control (y = 5) */
      __IOM uint32_t OCTL6      : 1;            /*!< [6..6] Port output control (y = 6) */
      __IOM uint32_t OCTL7      : 1;            /*!< [7..7] Port output control (y = 7) */
      __IOM uint32_t OCTL8      : 1;            /*!< [8..8] Port output control (y = 8) */
      __IOM uint32_t OCTL9      : 1;            /*!< [9..9] Port output control (y = 9) */
      __IOM uint32_t OCTL10     : 1;            /*!< [10..10] Port output control (y = 10) */
      __IOM uint32_t OCTL11     : 1;            /*!< [11..11] Port output control (y = 11) */
      __IOM uint32_t OCTL12     : 1;            /*!< [12..12] Port output control (y = 12) */
      __IOM uint32_t OCTL13     : 1;            /*!< [13..13] Port output control (y = 13) */
      __IOM uint32_t OCTL14     : 1;            /*!< [14..14] Port output control (y = 14) */
      __IOM uint32_t OCTL15     : 1;            /*!< [15..15] Port output control (y = 15) */
    } OCTL_b;
  } ;
  
  union {
    __OM  uint32_t BOP;                         /*!< (@ 0x00000018) GPIO port bit operate register */
    
    struct {
      __OM  uint32_t BOP0       : 1;            /*!< [0..0] Port Set bit 0 */
      __OM  uint32_t BOP1       : 1;            /*!< [1..1] Port Set bit 1 */
      __OM  uint32_t BOP2       : 1;            /*!< [2..2] Port Set bit 2 */
      __OM  uint32_t BOP3       : 1;            /*!< [3..3] Port Set bit 3 */
      __OM  uint32_t BOP4       : 1;            /*!< [4..4] Port Set bit 4 */
      __OM  uint32_t BOP5       : 1;            /*!< [5..5] Port Set bit 5 */
      __OM  uint32_t BOP6       : 1;            /*!< [6..6] Port Set bit 6 */
      __OM  uint32_t BOP7       : 1;            /*!< [7..7] Port Set bit 7 */
      __OM  uint32_t BOP8       : 1;            /*!< [8..8] Port Set bit 8 */
      __OM  uint32_t BOP9       : 1;            /*!< [9..9] Port Set bit 9 */
      __OM  uint32_t BOP10      : 1;            /*!< [10..10] Port Set bit 10 */
      __OM  uint32_t BOP11      : 1;            /*!< [11..11] Port Set bit 11 */
      __OM  uint32_t BOP12      : 1;            /*!< [12..12] Port Set bit 12 */
      __OM  uint32_t BOP13      : 1;            /*!< [13..13] Port Set bit 13 */
      __OM  uint32_t BOP14      : 1;            /*!< [14..14] Port Set bit 14 */
      __OM  uint32_t BOP15      : 1;            /*!< [15..15] Port Set bit 15 */
      __OM  uint32_t CR0        : 1;            /*!< [16..16] Port Clear bit 0 */
      __OM  uint32_t CR1        : 1;            /*!< [17..17] Port Clear bit 1 */
      __OM  uint32_t CR2        : 1;            /*!< [18..18] Port Clear bit 2 */
      __OM  uint32_t CR3        : 1;            /*!< [19..19] Port Clear bit 3 */
      __OM  uint32_t CR4        : 1;            /*!< [20..20] Port Clear bit 4 */
      __OM  uint32_t CR5        : 1;            /*!< [21..21] Port Clear bit 5 */
      __OM  uint32_t CR6        : 1;            /*!< [22..22] Port Clear bit 6 */
      __OM  uint32_t CR7        : 1;            /*!< [23..23] Port Clear bit 7 */
      __OM  uint32_t CR8        : 1;            /*!< [24..24] Port Clear bit 8 */
      __OM  uint32_t CR9        : 1;            /*!< [25..25] Port Clear bit 9 */
      __OM  uint32_t CR10       : 1;            /*!< [26..26] Port Clear bit 10 */
      __OM  uint32_t CR11       : 1;            /*!< [27..27] Port Clear bit 11 */
      __OM  uint32_t CR12       : 1;            /*!< [28..28] Port Clear bit 12 */
      __OM  uint32_t CR13       : 1;            /*!< [29..29] Port Clear bit 13 */
      __OM  uint32_t CR14       : 1;            /*!< [30..30] Port Clear bit 14 */
      __OM  uint32_t CR15       : 1;            /*!< [31..31] Port Clear bit 15 */
    } BOP_b;
  } ;
  
  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x0000001C) GPIO port configuration lock register */
    
    struct {
      __IOM uint32_t LK0        : 1;            /*!< [0..0] Port Lock bit 0 */
      __IOM uint32_t LK1        : 1;            /*!< [1..1] Port Lock bit 1 */
      __IOM uint32_t LK2        : 1;            /*!< [2..2] Port Lock bit 2 */
      __IOM uint32_t LK3        : 1;            /*!< [3..3] Port Lock bit 3 */
      __IOM uint32_t LK4        : 1;            /*!< [4..4] Port Lock bit 4 */
      __IOM uint32_t LK5        : 1;            /*!< [5..5] Port Lock bit 5 */
      __IOM uint32_t LK6        : 1;            /*!< [6..6] Port Lock bit 6 */
      __IOM uint32_t LK7        : 1;            /*!< [7..7] Port Lock bit 7 */
      __IOM uint32_t LK8        : 1;            /*!< [8..8] Port Lock bit 8 */
      __IOM uint32_t LK9        : 1;            /*!< [9..9] Port Lock bit 9 */
      __IOM uint32_t LK10       : 1;            /*!< [10..10] Port Lock bit 10 */
      __IOM uint32_t LK11       : 1;            /*!< [11..11] Port Lock bit 11 */
      __IOM uint32_t LK12       : 1;            /*!< [12..12] Port Lock bit 12 */
      __IOM uint32_t LK13       : 1;            /*!< [13..13] Port Lock bit 13 */
      __IOM uint32_t LK14       : 1;            /*!< [14..14] Port Lock bit 14 */
      __IOM uint32_t LK15       : 1;            /*!< [15..15] Port Lock bit 15 */
      __IOM uint32_t LKK        : 1;            /*!< [16..16] Lock sequence key */
    } LOCK_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL0;                      /*!< (@ 0x00000020) GPIO alternate function selected register 0 */
    
    struct {
      __IOM uint32_t SEL0       : 4;            /*!< [3..0] Port 0 alternate function selected */
      __IOM uint32_t SEL1       : 4;            /*!< [7..4] Port 1 alternate function selected */
      __IOM uint32_t SEL2       : 4;            /*!< [11..8] Port 2 alternate function selected */
      __IOM uint32_t SEL3       : 4;            /*!< [15..12] Port 3 alternate function selected */
      __IOM uint32_t SEL4       : 4;            /*!< [19..16] Port 4 alternate function selected */
      __IOM uint32_t SEL5       : 4;            /*!< [23..20] Port 5 alternate function selected */
      __IOM uint32_t SEL6       : 4;            /*!< [27..24] Port 6 alternate function selected */
      __IOM uint32_t SEL7       : 4;            /*!< [31..28] Port 7 alternate function selected */
    } AFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL1;                      /*!< (@ 0x00000024) GPIO alternate function selected register 1 */
    
    struct {
      __IOM uint32_t SEL8       : 4;            /*!< [3..0] Port 8 alternate function selected */
      __IOM uint32_t SEL9       : 4;            /*!< [7..4] Port 9 alternate function selected */
      __IOM uint32_t SEL10      : 4;            /*!< [11..8] Port 10 alternate function selected */
      __IOM uint32_t SEL11      : 4;            /*!< [15..12] Port 11 alternate function selected */
      __IOM uint32_t SEL12      : 4;            /*!< [19..16] Port 12 alternate function selected */
      __IOM uint32_t SEL13      : 4;            /*!< [23..20] Port 13 alternate function selected */
      __IOM uint32_t SEL14      : 4;            /*!< [27..24] Port 14 alternate function selected */
      __IOM uint32_t SEL15      : 4;            /*!< [31..28] Port 15 alternate function selected */
    } AFSEL1_b;
  } ;
  
  union {
    __OM  uint32_t BC;                          /*!< (@ 0x00000028) Bit clear register */
    
    struct {
      __OM  uint32_t CR0        : 1;            /*!< [0..0] Port cleat bit */
      __OM  uint32_t CR1        : 1;            /*!< [1..1] Port cleat bit */
      __OM  uint32_t CR2        : 1;            /*!< [2..2] Port cleat bit */
      __OM  uint32_t CR3        : 1;            /*!< [3..3] Port cleat bit */
      __OM  uint32_t CR4        : 1;            /*!< [4..4] Port cleat bit */
      __OM  uint32_t CR5        : 1;            /*!< [5..5] Port cleat bit */
      __OM  uint32_t CR6        : 1;            /*!< [6..6] Port cleat bit */
      __OM  uint32_t CR7        : 1;            /*!< [7..7] Port cleat bit */
      __OM  uint32_t CR8        : 1;            /*!< [8..8] Port cleat bit */
      __OM  uint32_t CR9        : 1;            /*!< [9..9] Port cleat bit */
      __OM  uint32_t CR10       : 1;            /*!< [10..10] Port cleat bit */
      __OM  uint32_t CR11       : 1;            /*!< [11..11] Port cleat bit */
      __OM  uint32_t CR12       : 1;            /*!< [12..12] Port cleat bit */
      __OM  uint32_t CR13       : 1;            /*!< [13..13] Port cleat bit */
      __OM  uint32_t CR14       : 1;            /*!< [14..14] Port cleat bit */
      __OM  uint32_t CR15       : 1;            /*!< [15..15] Port cleat bit */
    } BC_b;
  } ;
  
  union {
    __OM  uint32_t TG;                          /*!< (@ 0x0000002C) Port bit toggle register */
    
    struct {
      __OM  uint32_t TG0        : 1;            /*!< [0..0] Port toggle bit */
      __OM  uint32_t TG1        : 1;            /*!< [1..1] Port toggle bit */
      __OM  uint32_t TG2        : 1;            /*!< [2..2] Port toggle bit */
      __OM  uint32_t TG3        : 1;            /*!< [3..3] Port toggle bit */
      __OM  uint32_t TG4        : 1;            /*!< [4..4] Port toggle bit */
      __OM  uint32_t TG5        : 1;            /*!< [5..5] Port toggle bit */
      __OM  uint32_t TG6        : 1;            /*!< [6..6] Port toggle bit */
      __OM  uint32_t TG7        : 1;            /*!< [7..7] Port toggle bit */
      __OM  uint32_t TG8        : 1;            /*!< [8..8] Port toggle bit */
      __OM  uint32_t TG9        : 1;            /*!< [9..9] Port toggle bit */
      __OM  uint32_t TG10       : 1;            /*!< [10..10] Port toggle bit */
      __OM  uint32_t TG11       : 1;            /*!< [11..11] Port toggle bit */
      __OM  uint32_t TG12       : 1;            /*!< [12..12] Port toggle bit */
      __OM  uint32_t TG13       : 1;            /*!< [13..13] Port toggle bit */
      __OM  uint32_t TG14       : 1;            /*!< [14..14] Port toggle bit */
      __OM  uint32_t TG15       : 1;            /*!< [15..15] Port toggle bit */
    } TG_b;
  } ;
} GPIOF_Type;                                   /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           GPIOG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOG)
  */

typedef struct {                                /*!< (@ 0x40021800) GPIOG Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) GPIO port control register */
    
    struct {
      __IOM uint32_t CTL0       : 2;            /*!< [1..0] Port x configuration bits (x = 0) */
      __IOM uint32_t CTL1       : 2;            /*!< [3..2] Port x configuration bits (x = 1) */
      __IOM uint32_t CTL2       : 2;            /*!< [5..4] Port x configuration bits (x = 2) */
      __IOM uint32_t CTL3       : 2;            /*!< [7..6] Port x configuration bits (x = 3) */
      __IOM uint32_t CTL4       : 2;            /*!< [9..8] Port x configuration bits (x = 4 ) */
      __IOM uint32_t CTL5       : 2;            /*!< [11..10] Port x configuration bits (x = 5) */
      __IOM uint32_t CTL6       : 2;            /*!< [13..12] Port x configuration bits (x = 6 ) */
      __IOM uint32_t CTL7       : 2;            /*!< [15..14] Port x configuration bits (x = 7) */
      __IOM uint32_t CTL8       : 2;            /*!< [17..16] Port x configuration bits (x = 8) */
      __IOM uint32_t CTL9       : 2;            /*!< [19..18] Port x configuration bits (x = 9) */
      __IOM uint32_t CTL10      : 2;            /*!< [21..20] Port x configuration bits (x = 10) */
      __IOM uint32_t CTL11      : 2;            /*!< [23..22] Port x configuration bits (x = 11) */
      __IOM uint32_t CTL12      : 2;            /*!< [25..24] Port x configuration bits (x = 12) */
      __IOM uint32_t CTL13      : 2;            /*!< [27..26] Port x configuration bits (x = 13) */
      __IOM uint32_t CTL14      : 2;            /*!< [29..28] Port x configuration bits (x = 14) */
      __IOM uint32_t CTL15      : 2;            /*!< [31..30] Port x configuration bits (x = 15) */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OMODE;                       /*!< (@ 0x00000004) GPIO port output mode register */
    
    struct {
      __IOM uint32_t OM0        : 1;            /*!< [0..0] Port 0 output mode bit */
      __IOM uint32_t OM1        : 1;            /*!< [1..1] Port 1 output mode bit */
      __IOM uint32_t OM2        : 1;            /*!< [2..2] Port 2 output mode bit */
      __IOM uint32_t OM3        : 1;            /*!< [3..3] Port 3 output mode bit */
      __IOM uint32_t OM4        : 1;            /*!< [4..4] Port 4 output mode bit */
      __IOM uint32_t OM5        : 1;            /*!< [5..5] Port 5 output mode bit */
      __IOM uint32_t OM6        : 1;            /*!< [6..6] Port 6 output mode bit */
      __IOM uint32_t OM7        : 1;            /*!< [7..7] Port 7 output mode bit */
      __IOM uint32_t OM8        : 1;            /*!< [8..8] Port 8 output mode bit */
      __IOM uint32_t OM9        : 1;            /*!< [9..9] Port 9 output mode bit */
      __IOM uint32_t OM10       : 1;            /*!< [10..10] Port 10 output mode bit */
      __IOM uint32_t OM11       : 1;            /*!< [11..11] Port 11 output mode bit */
      __IOM uint32_t OM12       : 1;            /*!< [12..12] Port 12 output mode bit */
      __IOM uint32_t OM13       : 1;            /*!< [13..13] Port 13 output mode bit */
      __IOM uint32_t OM14       : 1;            /*!< [14..14] Port 14 output mode bit */
      __IOM uint32_t OM15       : 1;            /*!< [15..15] Port 15 output mode bit */
    } OMODE_b;
  } ;
  
  union {
    __IOM uint32_t OSPD;                        /*!< (@ 0x00000008) GPIO port output speed register */
    
    struct {
      __IOM uint32_t OSPD0      : 2;            /*!< [1..0] Port 0 output max speed bits */
      __IOM uint32_t OSPD1      : 2;            /*!< [3..2] Port 1 output max speed bits */
      __IOM uint32_t OSPD2      : 2;            /*!< [5..4] Port 2 output max speed bits */
      __IOM uint32_t OSPD3      : 2;            /*!< [7..6] Port 3 output max speed bits */
      __IOM uint32_t OSPD4      : 2;            /*!< [9..8] Port 4 output max speed bits */
      __IOM uint32_t OSPD5      : 2;            /*!< [11..10] Port 5 output max speed bits */
      __IOM uint32_t OSPD6      : 2;            /*!< [13..12] Port 6 output max speed bits */
      __IOM uint32_t OSPD7      : 2;            /*!< [15..14] Port 7 output max speed bits */
      __IOM uint32_t OSPD8      : 2;            /*!< [17..16] Port 8 output max speed bits */
      __IOM uint32_t OSPD9      : 2;            /*!< [19..18] Port 9 output max speed bits */
      __IOM uint32_t OSPD10     : 2;            /*!< [21..20] Port 10 output max speed bits */
      __IOM uint32_t OSPD11     : 2;            /*!< [23..22] Port 11 output max speed bits */
      __IOM uint32_t OSPD12     : 2;            /*!< [25..24] Port 12 output max speed bits */
      __IOM uint32_t OSPD13     : 2;            /*!< [27..26] Port 13 output max speed bits */
      __IOM uint32_t OSPD14     : 2;            /*!< [29..28] Port 14 output max speed bits */
      __IOM uint32_t OSPD15     : 2;            /*!< [31..30] Port 15 output max speed bits */
    } OSPD_b;
  } ;
  
  union {
    __IOM uint32_t PUD;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register */
    
    struct {
      __IOM uint32_t PUD0       : 2;            /*!< [1..0] Port 0 pull-up or pull-down bits */
      __IOM uint32_t PUD1       : 2;            /*!< [3..2] Port 1 pull-up or pull-down bits */
      __IOM uint32_t PUD2       : 2;            /*!< [5..4] Port 2 pull-up or pull-down bits */
      __IOM uint32_t PUD3       : 2;            /*!< [7..6] Port 3 pull-up or pull-down bits */
      __IOM uint32_t PUD4       : 2;            /*!< [9..8] Port 4 pull-up or pull-down bits */
      __IOM uint32_t PUD5       : 2;            /*!< [11..10] Port 5 pull-up or pull-down bits */
      __IOM uint32_t PUD6       : 2;            /*!< [13..12] Port 6 pull-up or pull-down bits */
      __IOM uint32_t PUD7       : 2;            /*!< [15..14] Port 7 pull-up or pull-down bits */
      __IOM uint32_t PUD8       : 2;            /*!< [17..16] Port 8 pull-up or pull-down bits */
      __IOM uint32_t PUD9       : 2;            /*!< [19..18] Port 9 pull-up or pull-down bits */
      __IOM uint32_t PUD10      : 2;            /*!< [21..20] Port 10 pull-up or pull-down bits */
      __IOM uint32_t PUD11      : 2;            /*!< [23..22] Port 11 pull-up or pull-down bits */
      __IOM uint32_t PUD12      : 2;            /*!< [25..24] Port 12 pull-up or pull-down bits */
      __IOM uint32_t PUD13      : 2;            /*!< [27..26] Port 13 pull-up or pull-down bits */
      __IOM uint32_t PUD14      : 2;            /*!< [29..28] Port 14 pull-up or pull-down bits */
      __IOM uint32_t PUD15      : 2;            /*!< [31..30] Port 15 pull-up or pull-down bits */
    } PUD_b;
  } ;
  
  union {
    __IM  uint32_t ISTAT;                       /*!< (@ 0x00000010) GPIO port input status register */
    
    struct {
      __IM  uint32_t ISTAT0     : 1;            /*!< [0..0] Port input status (y = 0) */
      __IM  uint32_t ISTAT1     : 1;            /*!< [1..1] Port input status (y = 1) */
      __IM  uint32_t ISTAT2     : 1;            /*!< [2..2] Port input status (y = 2) */
      __IM  uint32_t ISTAT3     : 1;            /*!< [3..3] Port input status (y = 3) */
      __IM  uint32_t ISTAT4     : 1;            /*!< [4..4] Port input status (y = 4) */
      __IM  uint32_t ISTAT5     : 1;            /*!< [5..5] Port input status (y = 5) */
      __IM  uint32_t ISTAT6     : 1;            /*!< [6..6] Port input status (y = 6) */
      __IM  uint32_t ISTAT7     : 1;            /*!< [7..7] Port input status (y = 7) */
      __IM  uint32_t ISTAT8     : 1;            /*!< [8..8] Port input status (y = 8) */
      __IM  uint32_t ISTAT9     : 1;            /*!< [9..9] Port input status (y = 9) */
      __IM  uint32_t ISTAT10    : 1;            /*!< [10..10] Port input status (y = 10) */
      __IM  uint32_t ISTAT11    : 1;            /*!< [11..11] Port input status (y = 11) */
      __IM  uint32_t ISTAT12    : 1;            /*!< [12..12] Port input status (y = 12) */
      __IM  uint32_t ISTAT13    : 1;            /*!< [13..13] Port input status (y = 13) */
      __IM  uint32_t ISTAT14    : 1;            /*!< [14..14] Port input status (y = 14) */
      __IM  uint32_t ISTAT15    : 1;            /*!< [15..15] Port input status (y = 15) */
    } ISTAT_b;
  } ;
  
  union {
    __IOM uint32_t OCTL;                        /*!< (@ 0x00000014) GPIO port output control register */
    
    struct {
      __IOM uint32_t OCTL0      : 1;            /*!< [0..0] Port output control (y = 0) */
      __IOM uint32_t OCTL1      : 1;            /*!< [1..1] Port output control (y = 1) */
      __IOM uint32_t OCTL2      : 1;            /*!< [2..2] Port output control (y = 2) */
      __IOM uint32_t OCTL3      : 1;            /*!< [3..3] Port output control (y = 3) */
      __IOM uint32_t OCTL4      : 1;            /*!< [4..4] Port output control (y = 4) */
      __IOM uint32_t OCTL5      : 1;            /*!< [5..5] Port output control (y = 5) */
      __IOM uint32_t OCTL6      : 1;            /*!< [6..6] Port output control (y = 6) */
      __IOM uint32_t OCTL7      : 1;            /*!< [7..7] Port output control (y = 7) */
      __IOM uint32_t OCTL8      : 1;            /*!< [8..8] Port output control (y = 8) */
      __IOM uint32_t OCTL9      : 1;            /*!< [9..9] Port output control (y = 9) */
      __IOM uint32_t OCTL10     : 1;            /*!< [10..10] Port output control (y = 10) */
      __IOM uint32_t OCTL11     : 1;            /*!< [11..11] Port output control (y = 11) */
      __IOM uint32_t OCTL12     : 1;            /*!< [12..12] Port output control (y = 12) */
      __IOM uint32_t OCTL13     : 1;            /*!< [13..13] Port output control (y = 13) */
      __IOM uint32_t OCTL14     : 1;            /*!< [14..14] Port output control (y = 14) */
      __IOM uint32_t OCTL15     : 1;            /*!< [15..15] Port output control (y = 15) */
    } OCTL_b;
  } ;
  
  union {
    __OM  uint32_t BOP;                         /*!< (@ 0x00000018) GPIO port bit operate register */
    
    struct {
      __OM  uint32_t BOP0       : 1;            /*!< [0..0] Port Set bit 0 */
      __OM  uint32_t BOP1       : 1;            /*!< [1..1] Port Set bit 1 */
      __OM  uint32_t BOP2       : 1;            /*!< [2..2] Port Set bit 2 */
      __OM  uint32_t BOP3       : 1;            /*!< [3..3] Port Set bit 3 */
      __OM  uint32_t BOP4       : 1;            /*!< [4..4] Port Set bit 4 */
      __OM  uint32_t BOP5       : 1;            /*!< [5..5] Port Set bit 5 */
      __OM  uint32_t BOP6       : 1;            /*!< [6..6] Port Set bit 6 */
      __OM  uint32_t BOP7       : 1;            /*!< [7..7] Port Set bit 7 */
      __OM  uint32_t BOP8       : 1;            /*!< [8..8] Port Set bit 8 */
      __OM  uint32_t BOP9       : 1;            /*!< [9..9] Port Set bit 9 */
      __OM  uint32_t BOP10      : 1;            /*!< [10..10] Port Set bit 10 */
      __OM  uint32_t BOP11      : 1;            /*!< [11..11] Port Set bit 11 */
      __OM  uint32_t BOP12      : 1;            /*!< [12..12] Port Set bit 12 */
      __OM  uint32_t BOP13      : 1;            /*!< [13..13] Port Set bit 13 */
      __OM  uint32_t BOP14      : 1;            /*!< [14..14] Port Set bit 14 */
      __OM  uint32_t BOP15      : 1;            /*!< [15..15] Port Set bit 15 */
      __OM  uint32_t CR0        : 1;            /*!< [16..16] Port Clear bit 0 */
      __OM  uint32_t CR1        : 1;            /*!< [17..17] Port Clear bit 1 */
      __OM  uint32_t CR2        : 1;            /*!< [18..18] Port Clear bit 2 */
      __OM  uint32_t CR3        : 1;            /*!< [19..19] Port Clear bit 3 */
      __OM  uint32_t CR4        : 1;            /*!< [20..20] Port Clear bit 4 */
      __OM  uint32_t CR5        : 1;            /*!< [21..21] Port Clear bit 5 */
      __OM  uint32_t CR6        : 1;            /*!< [22..22] Port Clear bit 6 */
      __OM  uint32_t CR7        : 1;            /*!< [23..23] Port Clear bit 7 */
      __OM  uint32_t CR8        : 1;            /*!< [24..24] Port Clear bit 8 */
      __OM  uint32_t CR9        : 1;            /*!< [25..25] Port Clear bit 9 */
      __OM  uint32_t CR10       : 1;            /*!< [26..26] Port Clear bit 10 */
      __OM  uint32_t CR11       : 1;            /*!< [27..27] Port Clear bit 11 */
      __OM  uint32_t CR12       : 1;            /*!< [28..28] Port Clear bit 12 */
      __OM  uint32_t CR13       : 1;            /*!< [29..29] Port Clear bit 13 */
      __OM  uint32_t CR14       : 1;            /*!< [30..30] Port Clear bit 14 */
      __OM  uint32_t CR15       : 1;            /*!< [31..31] Port Clear bit 15 */
    } BOP_b;
  } ;
  
  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x0000001C) GPIO port configuration lock register */
    
    struct {
      __IOM uint32_t LK0        : 1;            /*!< [0..0] Port Lock bit 0 */
      __IOM uint32_t LK1        : 1;            /*!< [1..1] Port Lock bit 1 */
      __IOM uint32_t LK2        : 1;            /*!< [2..2] Port Lock bit 2 */
      __IOM uint32_t LK3        : 1;            /*!< [3..3] Port Lock bit 3 */
      __IOM uint32_t LK4        : 1;            /*!< [4..4] Port Lock bit 4 */
      __IOM uint32_t LK5        : 1;            /*!< [5..5] Port Lock bit 5 */
      __IOM uint32_t LK6        : 1;            /*!< [6..6] Port Lock bit 6 */
      __IOM uint32_t LK7        : 1;            /*!< [7..7] Port Lock bit 7 */
      __IOM uint32_t LK8        : 1;            /*!< [8..8] Port Lock bit 8 */
      __IOM uint32_t LK9        : 1;            /*!< [9..9] Port Lock bit 9 */
      __IOM uint32_t LK10       : 1;            /*!< [10..10] Port Lock bit 10 */
      __IOM uint32_t LK11       : 1;            /*!< [11..11] Port Lock bit 11 */
      __IOM uint32_t LK12       : 1;            /*!< [12..12] Port Lock bit 12 */
      __IOM uint32_t LK13       : 1;            /*!< [13..13] Port Lock bit 13 */
      __IOM uint32_t LK14       : 1;            /*!< [14..14] Port Lock bit 14 */
      __IOM uint32_t LK15       : 1;            /*!< [15..15] Port Lock bit 15 */
      __IOM uint32_t LKK        : 1;            /*!< [16..16] Lock sequence key */
    } LOCK_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL0;                      /*!< (@ 0x00000020) GPIO alternate function selected register 0 */
    
    struct {
      __IOM uint32_t SEL0       : 4;            /*!< [3..0] Port 0 alternate function selected */
      __IOM uint32_t SEL1       : 4;            /*!< [7..4] Port 1 alternate function selected */
      __IOM uint32_t SEL2       : 4;            /*!< [11..8] Port 2 alternate function selected */
      __IOM uint32_t SEL3       : 4;            /*!< [15..12] Port 3 alternate function selected */
      __IOM uint32_t SEL4       : 4;            /*!< [19..16] Port 4 alternate function selected */
      __IOM uint32_t SEL5       : 4;            /*!< [23..20] Port 5 alternate function selected */
      __IOM uint32_t SEL6       : 4;            /*!< [27..24] Port 6 alternate function selected */
      __IOM uint32_t SEL7       : 4;            /*!< [31..28] Port 7 alternate function selected */
    } AFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL1;                      /*!< (@ 0x00000024) GPIO alternate function selected register 1 */
    
    struct {
      __IOM uint32_t SEL8       : 4;            /*!< [3..0] Port 8 alternate function selected */
      __IOM uint32_t SEL9       : 4;            /*!< [7..4] Port 9 alternate function selected */
      __IOM uint32_t SEL10      : 4;            /*!< [11..8] Port 10 alternate function selected */
      __IOM uint32_t SEL11      : 4;            /*!< [15..12] Port 11 alternate function selected */
      __IOM uint32_t SEL12      : 4;            /*!< [19..16] Port 12 alternate function selected */
      __IOM uint32_t SEL13      : 4;            /*!< [23..20] Port 13 alternate function selected */
      __IOM uint32_t SEL14      : 4;            /*!< [27..24] Port 14 alternate function selected */
      __IOM uint32_t SEL15      : 4;            /*!< [31..28] Port 15 alternate function selected */
    } AFSEL1_b;
  } ;
  
  union {
    __OM  uint32_t BC;                          /*!< (@ 0x00000028) Bit clear register */
    
    struct {
      __OM  uint32_t CR0        : 1;            /*!< [0..0] Port cleat bit */
      __OM  uint32_t CR1        : 1;            /*!< [1..1] Port cleat bit */
      __OM  uint32_t CR2        : 1;            /*!< [2..2] Port cleat bit */
      __OM  uint32_t CR3        : 1;            /*!< [3..3] Port cleat bit */
      __OM  uint32_t CR4        : 1;            /*!< [4..4] Port cleat bit */
      __OM  uint32_t CR5        : 1;            /*!< [5..5] Port cleat bit */
      __OM  uint32_t CR6        : 1;            /*!< [6..6] Port cleat bit */
      __OM  uint32_t CR7        : 1;            /*!< [7..7] Port cleat bit */
      __OM  uint32_t CR8        : 1;            /*!< [8..8] Port cleat bit */
      __OM  uint32_t CR9        : 1;            /*!< [9..9] Port cleat bit */
      __OM  uint32_t CR10       : 1;            /*!< [10..10] Port cleat bit */
      __OM  uint32_t CR11       : 1;            /*!< [11..11] Port cleat bit */
      __OM  uint32_t CR12       : 1;            /*!< [12..12] Port cleat bit */
      __OM  uint32_t CR13       : 1;            /*!< [13..13] Port cleat bit */
      __OM  uint32_t CR14       : 1;            /*!< [14..14] Port cleat bit */
      __OM  uint32_t CR15       : 1;            /*!< [15..15] Port cleat bit */
    } BC_b;
  } ;
  
  union {
    __OM  uint32_t TG;                          /*!< (@ 0x0000002C) Port bit toggle register */
    
    struct {
      __OM  uint32_t TG0        : 1;            /*!< [0..0] Port toggle bit */
      __OM  uint32_t TG1        : 1;            /*!< [1..1] Port toggle bit */
      __OM  uint32_t TG2        : 1;            /*!< [2..2] Port toggle bit */
      __OM  uint32_t TG3        : 1;            /*!< [3..3] Port toggle bit */
      __OM  uint32_t TG4        : 1;            /*!< [4..4] Port toggle bit */
      __OM  uint32_t TG5        : 1;            /*!< [5..5] Port toggle bit */
      __OM  uint32_t TG6        : 1;            /*!< [6..6] Port toggle bit */
      __OM  uint32_t TG7        : 1;            /*!< [7..7] Port toggle bit */
      __OM  uint32_t TG8        : 1;            /*!< [8..8] Port toggle bit */
      __OM  uint32_t TG9        : 1;            /*!< [9..9] Port toggle bit */
      __OM  uint32_t TG10       : 1;            /*!< [10..10] Port toggle bit */
      __OM  uint32_t TG11       : 1;            /*!< [11..11] Port toggle bit */
      __OM  uint32_t TG12       : 1;            /*!< [12..12] Port toggle bit */
      __OM  uint32_t TG13       : 1;            /*!< [13..13] Port toggle bit */
      __OM  uint32_t TG14       : 1;            /*!< [14..14] Port toggle bit */
      __OM  uint32_t TG15       : 1;            /*!< [15..15] Port toggle bit */
    } TG_b;
  } ;
} GPIOG_Type;                                   /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           GPIOH                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOH)
  */

typedef struct {                                /*!< (@ 0x40021C00) GPIOH Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) GPIO port control register */
    
    struct {
      __IOM uint32_t CTL0       : 2;            /*!< [1..0] Port x configuration bits (x = 0) */
      __IOM uint32_t CTL1       : 2;            /*!< [3..2] Port x configuration bits (x = 1) */
      __IOM uint32_t CTL2       : 2;            /*!< [5..4] Port x configuration bits (x = 2) */
      __IOM uint32_t CTL3       : 2;            /*!< [7..6] Port x configuration bits (x = 3) */
      __IOM uint32_t CTL4       : 2;            /*!< [9..8] Port x configuration bits (x = 4 ) */
      __IOM uint32_t CTL5       : 2;            /*!< [11..10] Port x configuration bits (x = 5) */
      __IOM uint32_t CTL6       : 2;            /*!< [13..12] Port x configuration bits (x = 6 ) */
      __IOM uint32_t CTL7       : 2;            /*!< [15..14] Port x configuration bits (x = 7) */
      __IOM uint32_t CTL8       : 2;            /*!< [17..16] Port x configuration bits (x = 8) */
      __IOM uint32_t CTL9       : 2;            /*!< [19..18] Port x configuration bits (x = 9) */
      __IOM uint32_t CTL10      : 2;            /*!< [21..20] Port x configuration bits (x = 10) */
      __IOM uint32_t CTL11      : 2;            /*!< [23..22] Port x configuration bits (x = 11) */
      __IOM uint32_t CTL12      : 2;            /*!< [25..24] Port x configuration bits (x = 12) */
      __IOM uint32_t CTL13      : 2;            /*!< [27..26] Port x configuration bits (x = 13) */
      __IOM uint32_t CTL14      : 2;            /*!< [29..28] Port x configuration bits (x = 14) */
      __IOM uint32_t CTL15      : 2;            /*!< [31..30] Port x configuration bits (x = 15) */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OMODE;                       /*!< (@ 0x00000004) GPIO port output mode register */
    
    struct {
      __IOM uint32_t OM0        : 1;            /*!< [0..0] Port 0 output mode bit */
      __IOM uint32_t OM1        : 1;            /*!< [1..1] Port 1 output mode bit */
      __IOM uint32_t OM2        : 1;            /*!< [2..2] Port 2 output mode bit */
      __IOM uint32_t OM3        : 1;            /*!< [3..3] Port 3 output mode bit */
      __IOM uint32_t OM4        : 1;            /*!< [4..4] Port 4 output mode bit */
      __IOM uint32_t OM5        : 1;            /*!< [5..5] Port 5 output mode bit */
      __IOM uint32_t OM6        : 1;            /*!< [6..6] Port 6 output mode bit */
      __IOM uint32_t OM7        : 1;            /*!< [7..7] Port 7 output mode bit */
      __IOM uint32_t OM8        : 1;            /*!< [8..8] Port 8 output mode bit */
      __IOM uint32_t OM9        : 1;            /*!< [9..9] Port 9 output mode bit */
      __IOM uint32_t OM10       : 1;            /*!< [10..10] Port 10 output mode bit */
      __IOM uint32_t OM11       : 1;            /*!< [11..11] Port 11 output mode bit */
      __IOM uint32_t OM12       : 1;            /*!< [12..12] Port 12 output mode bit */
      __IOM uint32_t OM13       : 1;            /*!< [13..13] Port 13 output mode bit */
      __IOM uint32_t OM14       : 1;            /*!< [14..14] Port 14 output mode bit */
      __IOM uint32_t OM15       : 1;            /*!< [15..15] Port 15 output mode bit */
    } OMODE_b;
  } ;
  
  union {
    __IOM uint32_t OSPD;                        /*!< (@ 0x00000008) GPIO port output speed register */
    
    struct {
      __IOM uint32_t OSPD0      : 2;            /*!< [1..0] Port 0 output max speed bits */
      __IOM uint32_t OSPD1      : 2;            /*!< [3..2] Port 1 output max speed bits */
      __IOM uint32_t OSPD2      : 2;            /*!< [5..4] Port 2 output max speed bits */
      __IOM uint32_t OSPD3      : 2;            /*!< [7..6] Port 3 output max speed bits */
      __IOM uint32_t OSPD4      : 2;            /*!< [9..8] Port 4 output max speed bits */
      __IOM uint32_t OSPD5      : 2;            /*!< [11..10] Port 5 output max speed bits */
      __IOM uint32_t OSPD6      : 2;            /*!< [13..12] Port 6 output max speed bits */
      __IOM uint32_t OSPD7      : 2;            /*!< [15..14] Port 7 output max speed bits */
      __IOM uint32_t OSPD8      : 2;            /*!< [17..16] Port 8 output max speed bits */
      __IOM uint32_t OSPD9      : 2;            /*!< [19..18] Port 9 output max speed bits */
      __IOM uint32_t OSPD10     : 2;            /*!< [21..20] Port 10 output max speed bits */
      __IOM uint32_t OSPD11     : 2;            /*!< [23..22] Port 11 output max speed bits */
      __IOM uint32_t OSPD12     : 2;            /*!< [25..24] Port 12 output max speed bits */
      __IOM uint32_t OSPD13     : 2;            /*!< [27..26] Port 13 output max speed bits */
      __IOM uint32_t OSPD14     : 2;            /*!< [29..28] Port 14 output max speed bits */
      __IOM uint32_t OSPD15     : 2;            /*!< [31..30] Port 15 output max speed bits */
    } OSPD_b;
  } ;
  
  union {
    __IOM uint32_t PUD;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register */
    
    struct {
      __IOM uint32_t PUD0       : 2;            /*!< [1..0] Port 0 pull-up or pull-down bits */
      __IOM uint32_t PUD1       : 2;            /*!< [3..2] Port 1 pull-up or pull-down bits */
      __IOM uint32_t PUD2       : 2;            /*!< [5..4] Port 2 pull-up or pull-down bits */
      __IOM uint32_t PUD3       : 2;            /*!< [7..6] Port 3 pull-up or pull-down bits */
      __IOM uint32_t PUD4       : 2;            /*!< [9..8] Port 4 pull-up or pull-down bits */
      __IOM uint32_t PUD5       : 2;            /*!< [11..10] Port 5 pull-up or pull-down bits */
      __IOM uint32_t PUD6       : 2;            /*!< [13..12] Port 6 pull-up or pull-down bits */
      __IOM uint32_t PUD7       : 2;            /*!< [15..14] Port 7 pull-up or pull-down bits */
      __IOM uint32_t PUD8       : 2;            /*!< [17..16] Port 8 pull-up or pull-down bits */
      __IOM uint32_t PUD9       : 2;            /*!< [19..18] Port 9 pull-up or pull-down bits */
      __IOM uint32_t PUD10      : 2;            /*!< [21..20] Port 10 pull-up or pull-down bits */
      __IOM uint32_t PUD11      : 2;            /*!< [23..22] Port 11 pull-up or pull-down bits */
      __IOM uint32_t PUD12      : 2;            /*!< [25..24] Port 12 pull-up or pull-down bits */
      __IOM uint32_t PUD13      : 2;            /*!< [27..26] Port 13 pull-up or pull-down bits */
      __IOM uint32_t PUD14      : 2;            /*!< [29..28] Port 14 pull-up or pull-down bits */
      __IOM uint32_t PUD15      : 2;            /*!< [31..30] Port 15 pull-up or pull-down bits */
    } PUD_b;
  } ;
  
  union {
    __IM  uint32_t ISTAT;                       /*!< (@ 0x00000010) GPIO port input status register */
    
    struct {
      __IM  uint32_t ISTAT0     : 1;            /*!< [0..0] Port input status (y = 0) */
      __IM  uint32_t ISTAT1     : 1;            /*!< [1..1] Port input status (y = 1) */
      __IM  uint32_t ISTAT2     : 1;            /*!< [2..2] Port input status (y = 2) */
      __IM  uint32_t ISTAT3     : 1;            /*!< [3..3] Port input status (y = 3) */
      __IM  uint32_t ISTAT4     : 1;            /*!< [4..4] Port input status (y = 4) */
      __IM  uint32_t ISTAT5     : 1;            /*!< [5..5] Port input status (y = 5) */
      __IM  uint32_t ISTAT6     : 1;            /*!< [6..6] Port input status (y = 6) */
      __IM  uint32_t ISTAT7     : 1;            /*!< [7..7] Port input status (y = 7) */
      __IM  uint32_t ISTAT8     : 1;            /*!< [8..8] Port input status (y = 8) */
      __IM  uint32_t ISTAT9     : 1;            /*!< [9..9] Port input status (y = 9) */
      __IM  uint32_t ISTAT10    : 1;            /*!< [10..10] Port input status (y = 10) */
      __IM  uint32_t ISTAT11    : 1;            /*!< [11..11] Port input status (y = 11) */
      __IM  uint32_t ISTAT12    : 1;            /*!< [12..12] Port input status (y = 12) */
      __IM  uint32_t ISTAT13    : 1;            /*!< [13..13] Port input status (y = 13) */
      __IM  uint32_t ISTAT14    : 1;            /*!< [14..14] Port input status (y = 14) */
      __IM  uint32_t ISTAT15    : 1;            /*!< [15..15] Port input status (y = 15) */
    } ISTAT_b;
  } ;
  
  union {
    __IOM uint32_t OCTL;                        /*!< (@ 0x00000014) GPIO port output control register */
    
    struct {
      __IOM uint32_t OCTL0      : 1;            /*!< [0..0] Port output control (y = 0) */
      __IOM uint32_t OCTL1      : 1;            /*!< [1..1] Port output control (y = 1) */
      __IOM uint32_t OCTL2      : 1;            /*!< [2..2] Port output control (y = 2) */
      __IOM uint32_t OCTL3      : 1;            /*!< [3..3] Port output control (y = 3) */
      __IOM uint32_t OCTL4      : 1;            /*!< [4..4] Port output control (y = 4) */
      __IOM uint32_t OCTL5      : 1;            /*!< [5..5] Port output control (y = 5) */
      __IOM uint32_t OCTL6      : 1;            /*!< [6..6] Port output control (y = 6) */
      __IOM uint32_t OCTL7      : 1;            /*!< [7..7] Port output control (y = 7) */
      __IOM uint32_t OCTL8      : 1;            /*!< [8..8] Port output control (y = 8) */
      __IOM uint32_t OCTL9      : 1;            /*!< [9..9] Port output control (y = 9) */
      __IOM uint32_t OCTL10     : 1;            /*!< [10..10] Port output control (y = 10) */
      __IOM uint32_t OCTL11     : 1;            /*!< [11..11] Port output control (y = 11) */
      __IOM uint32_t OCTL12     : 1;            /*!< [12..12] Port output control (y = 12) */
      __IOM uint32_t OCTL13     : 1;            /*!< [13..13] Port output control (y = 13) */
      __IOM uint32_t OCTL14     : 1;            /*!< [14..14] Port output control (y = 14) */
      __IOM uint32_t OCTL15     : 1;            /*!< [15..15] Port output control (y = 15) */
    } OCTL_b;
  } ;
  
  union {
    __OM  uint32_t BOP;                         /*!< (@ 0x00000018) GPIO port bit operate register */
    
    struct {
      __OM  uint32_t BOP0       : 1;            /*!< [0..0] Port Set bit 0 */
      __OM  uint32_t BOP1       : 1;            /*!< [1..1] Port Set bit 1 */
      __OM  uint32_t BOP2       : 1;            /*!< [2..2] Port Set bit 2 */
      __OM  uint32_t BOP3       : 1;            /*!< [3..3] Port Set bit 3 */
      __OM  uint32_t BOP4       : 1;            /*!< [4..4] Port Set bit 4 */
      __OM  uint32_t BOP5       : 1;            /*!< [5..5] Port Set bit 5 */
      __OM  uint32_t BOP6       : 1;            /*!< [6..6] Port Set bit 6 */
      __OM  uint32_t BOP7       : 1;            /*!< [7..7] Port Set bit 7 */
      __OM  uint32_t BOP8       : 1;            /*!< [8..8] Port Set bit 8 */
      __OM  uint32_t BOP9       : 1;            /*!< [9..9] Port Set bit 9 */
      __OM  uint32_t BOP10      : 1;            /*!< [10..10] Port Set bit 10 */
      __OM  uint32_t BOP11      : 1;            /*!< [11..11] Port Set bit 11 */
      __OM  uint32_t BOP12      : 1;            /*!< [12..12] Port Set bit 12 */
      __OM  uint32_t BOP13      : 1;            /*!< [13..13] Port Set bit 13 */
      __OM  uint32_t BOP14      : 1;            /*!< [14..14] Port Set bit 14 */
      __OM  uint32_t BOP15      : 1;            /*!< [15..15] Port Set bit 15 */
      __OM  uint32_t CR0        : 1;            /*!< [16..16] Port Clear bit 0 */
      __OM  uint32_t CR1        : 1;            /*!< [17..17] Port Clear bit 1 */
      __OM  uint32_t CR2        : 1;            /*!< [18..18] Port Clear bit 2 */
      __OM  uint32_t CR3        : 1;            /*!< [19..19] Port Clear bit 3 */
      __OM  uint32_t CR4        : 1;            /*!< [20..20] Port Clear bit 4 */
      __OM  uint32_t CR5        : 1;            /*!< [21..21] Port Clear bit 5 */
      __OM  uint32_t CR6        : 1;            /*!< [22..22] Port Clear bit 6 */
      __OM  uint32_t CR7        : 1;            /*!< [23..23] Port Clear bit 7 */
      __OM  uint32_t CR8        : 1;            /*!< [24..24] Port Clear bit 8 */
      __OM  uint32_t CR9        : 1;            /*!< [25..25] Port Clear bit 9 */
      __OM  uint32_t CR10       : 1;            /*!< [26..26] Port Clear bit 10 */
      __OM  uint32_t CR11       : 1;            /*!< [27..27] Port Clear bit 11 */
      __OM  uint32_t CR12       : 1;            /*!< [28..28] Port Clear bit 12 */
      __OM  uint32_t CR13       : 1;            /*!< [29..29] Port Clear bit 13 */
      __OM  uint32_t CR14       : 1;            /*!< [30..30] Port Clear bit 14 */
      __OM  uint32_t CR15       : 1;            /*!< [31..31] Port Clear bit 15 */
    } BOP_b;
  } ;
  
  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x0000001C) GPIO port configuration lock register */
    
    struct {
      __IOM uint32_t LK0        : 1;            /*!< [0..0] Port Lock bit 0 */
      __IOM uint32_t LK1        : 1;            /*!< [1..1] Port Lock bit 1 */
      __IOM uint32_t LK2        : 1;            /*!< [2..2] Port Lock bit 2 */
      __IOM uint32_t LK3        : 1;            /*!< [3..3] Port Lock bit 3 */
      __IOM uint32_t LK4        : 1;            /*!< [4..4] Port Lock bit 4 */
      __IOM uint32_t LK5        : 1;            /*!< [5..5] Port Lock bit 5 */
      __IOM uint32_t LK6        : 1;            /*!< [6..6] Port Lock bit 6 */
      __IOM uint32_t LK7        : 1;            /*!< [7..7] Port Lock bit 7 */
      __IOM uint32_t LK8        : 1;            /*!< [8..8] Port Lock bit 8 */
      __IOM uint32_t LK9        : 1;            /*!< [9..9] Port Lock bit 9 */
      __IOM uint32_t LK10       : 1;            /*!< [10..10] Port Lock bit 10 */
      __IOM uint32_t LK11       : 1;            /*!< [11..11] Port Lock bit 11 */
      __IOM uint32_t LK12       : 1;            /*!< [12..12] Port Lock bit 12 */
      __IOM uint32_t LK13       : 1;            /*!< [13..13] Port Lock bit 13 */
      __IOM uint32_t LK14       : 1;            /*!< [14..14] Port Lock bit 14 */
      __IOM uint32_t LK15       : 1;            /*!< [15..15] Port Lock bit 15 */
      __IOM uint32_t LKK        : 1;            /*!< [16..16] Lock sequence key */
    } LOCK_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL0;                      /*!< (@ 0x00000020) GPIO alternate function selected register 0 */
    
    struct {
      __IOM uint32_t SEL0       : 4;            /*!< [3..0] Port 0 alternate function selected */
      __IOM uint32_t SEL1       : 4;            /*!< [7..4] Port 1 alternate function selected */
      __IOM uint32_t SEL2       : 4;            /*!< [11..8] Port 2 alternate function selected */
      __IOM uint32_t SEL3       : 4;            /*!< [15..12] Port 3 alternate function selected */
      __IOM uint32_t SEL4       : 4;            /*!< [19..16] Port 4 alternate function selected */
      __IOM uint32_t SEL5       : 4;            /*!< [23..20] Port 5 alternate function selected */
      __IOM uint32_t SEL6       : 4;            /*!< [27..24] Port 6 alternate function selected */
      __IOM uint32_t SEL7       : 4;            /*!< [31..28] Port 7 alternate function selected */
    } AFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL1;                      /*!< (@ 0x00000024) GPIO alternate function selected register 1 */
    
    struct {
      __IOM uint32_t SEL8       : 4;            /*!< [3..0] Port 8 alternate function selected */
      __IOM uint32_t SEL9       : 4;            /*!< [7..4] Port 9 alternate function selected */
      __IOM uint32_t SEL10      : 4;            /*!< [11..8] Port 10 alternate function selected */
      __IOM uint32_t SEL11      : 4;            /*!< [15..12] Port 11 alternate function selected */
      __IOM uint32_t SEL12      : 4;            /*!< [19..16] Port 12 alternate function selected */
      __IOM uint32_t SEL13      : 4;            /*!< [23..20] Port 13 alternate function selected */
      __IOM uint32_t SEL14      : 4;            /*!< [27..24] Port 14 alternate function selected */
      __IOM uint32_t SEL15      : 4;            /*!< [31..28] Port 15 alternate function selected */
    } AFSEL1_b;
  } ;
  
  union {
    __OM  uint32_t BC;                          /*!< (@ 0x00000028) Bit clear register */
    
    struct {
      __OM  uint32_t CR0        : 1;            /*!< [0..0] Port cleat bit */
      __OM  uint32_t CR1        : 1;            /*!< [1..1] Port cleat bit */
      __OM  uint32_t CR2        : 1;            /*!< [2..2] Port cleat bit */
      __OM  uint32_t CR3        : 1;            /*!< [3..3] Port cleat bit */
      __OM  uint32_t CR4        : 1;            /*!< [4..4] Port cleat bit */
      __OM  uint32_t CR5        : 1;            /*!< [5..5] Port cleat bit */
      __OM  uint32_t CR6        : 1;            /*!< [6..6] Port cleat bit */
      __OM  uint32_t CR7        : 1;            /*!< [7..7] Port cleat bit */
      __OM  uint32_t CR8        : 1;            /*!< [8..8] Port cleat bit */
      __OM  uint32_t CR9        : 1;            /*!< [9..9] Port cleat bit */
      __OM  uint32_t CR10       : 1;            /*!< [10..10] Port cleat bit */
      __OM  uint32_t CR11       : 1;            /*!< [11..11] Port cleat bit */
      __OM  uint32_t CR12       : 1;            /*!< [12..12] Port cleat bit */
      __OM  uint32_t CR13       : 1;            /*!< [13..13] Port cleat bit */
      __OM  uint32_t CR14       : 1;            /*!< [14..14] Port cleat bit */
      __OM  uint32_t CR15       : 1;            /*!< [15..15] Port cleat bit */
    } BC_b;
  } ;
  
  union {
    __OM  uint32_t TG;                          /*!< (@ 0x0000002C) Port bit toggle register */
    
    struct {
      __OM  uint32_t TG0        : 1;            /*!< [0..0] Port toggle bit */
      __OM  uint32_t TG1        : 1;            /*!< [1..1] Port toggle bit */
      __OM  uint32_t TG2        : 1;            /*!< [2..2] Port toggle bit */
      __OM  uint32_t TG3        : 1;            /*!< [3..3] Port toggle bit */
      __OM  uint32_t TG4        : 1;            /*!< [4..4] Port toggle bit */
      __OM  uint32_t TG5        : 1;            /*!< [5..5] Port toggle bit */
      __OM  uint32_t TG6        : 1;            /*!< [6..6] Port toggle bit */
      __OM  uint32_t TG7        : 1;            /*!< [7..7] Port toggle bit */
      __OM  uint32_t TG8        : 1;            /*!< [8..8] Port toggle bit */
      __OM  uint32_t TG9        : 1;            /*!< [9..9] Port toggle bit */
      __OM  uint32_t TG10       : 1;            /*!< [10..10] Port toggle bit */
      __OM  uint32_t TG11       : 1;            /*!< [11..11] Port toggle bit */
      __OM  uint32_t TG12       : 1;            /*!< [12..12] Port toggle bit */
      __OM  uint32_t TG13       : 1;            /*!< [13..13] Port toggle bit */
      __OM  uint32_t TG14       : 1;            /*!< [14..14] Port toggle bit */
      __OM  uint32_t TG15       : 1;            /*!< [15..15] Port toggle bit */
    } TG_b;
  } ;
} GPIOH_Type;                                   /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           GPIOI                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOI)
  */

typedef struct {                                /*!< (@ 0x40022000) GPIOI Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) GPIO port control register */
    
    struct {
      __IOM uint32_t CTL0       : 2;            /*!< [1..0] Port x configuration bits (x = 0) */
      __IOM uint32_t CTL1       : 2;            /*!< [3..2] Port x configuration bits (x = 1) */
      __IOM uint32_t CTL2       : 2;            /*!< [5..4] Port x configuration bits (x = 2) */
      __IOM uint32_t CTL3       : 2;            /*!< [7..6] Port x configuration bits (x = 3) */
      __IOM uint32_t CTL4       : 2;            /*!< [9..8] Port x configuration bits (x = 4 ) */
      __IOM uint32_t CTL5       : 2;            /*!< [11..10] Port x configuration bits (x = 5) */
      __IOM uint32_t CTL6       : 2;            /*!< [13..12] Port x configuration bits (x = 6 ) */
      __IOM uint32_t CTL7       : 2;            /*!< [15..14] Port x configuration bits (x = 7) */
      __IOM uint32_t CTL8       : 2;            /*!< [17..16] Port x configuration bits (x = 8) */
      __IOM uint32_t CTL9       : 2;            /*!< [19..18] Port x configuration bits (x = 9) */
      __IOM uint32_t CTL10      : 2;            /*!< [21..20] Port x configuration bits (x = 10) */
      __IOM uint32_t CTL11      : 2;            /*!< [23..22] Port x configuration bits (x = 11) */
      __IOM uint32_t CTL12      : 2;            /*!< [25..24] Port x configuration bits (x = 12) */
      __IOM uint32_t CTL13      : 2;            /*!< [27..26] Port x configuration bits (x = 13) */
      __IOM uint32_t CTL14      : 2;            /*!< [29..28] Port x configuration bits (x = 14) */
      __IOM uint32_t CTL15      : 2;            /*!< [31..30] Port x configuration bits (x = 15) */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t OMODE;                       /*!< (@ 0x00000004) GPIO port output mode register */
    
    struct {
      __IOM uint32_t OM0        : 1;            /*!< [0..0] Port 0 output mode bit */
      __IOM uint32_t OM1        : 1;            /*!< [1..1] Port 1 output mode bit */
      __IOM uint32_t OM2        : 1;            /*!< [2..2] Port 2 output mode bit */
      __IOM uint32_t OM3        : 1;            /*!< [3..3] Port 3 output mode bit */
      __IOM uint32_t OM4        : 1;            /*!< [4..4] Port 4 output mode bit */
      __IOM uint32_t OM5        : 1;            /*!< [5..5] Port 5 output mode bit */
      __IOM uint32_t OM6        : 1;            /*!< [6..6] Port 6 output mode bit */
      __IOM uint32_t OM7        : 1;            /*!< [7..7] Port 7 output mode bit */
      __IOM uint32_t OM8        : 1;            /*!< [8..8] Port 8 output mode bit */
      __IOM uint32_t OM9        : 1;            /*!< [9..9] Port 9 output mode bit */
      __IOM uint32_t OM10       : 1;            /*!< [10..10] Port 10 output mode bit */
      __IOM uint32_t OM11       : 1;            /*!< [11..11] Port 11 output mode bit */
      __IOM uint32_t OM12       : 1;            /*!< [12..12] Port 12 output mode bit */
      __IOM uint32_t OM13       : 1;            /*!< [13..13] Port 13 output mode bit */
      __IOM uint32_t OM14       : 1;            /*!< [14..14] Port 14 output mode bit */
      __IOM uint32_t OM15       : 1;            /*!< [15..15] Port 15 output mode bit */
    } OMODE_b;
  } ;
  
  union {
    __IOM uint32_t OSPD;                        /*!< (@ 0x00000008) GPIO port output speed register */
    
    struct {
      __IOM uint32_t OSPD0      : 2;            /*!< [1..0] Port 0 output max speed bits */
      __IOM uint32_t OSPD1      : 2;            /*!< [3..2] Port 1 output max speed bits */
      __IOM uint32_t OSPD2      : 2;            /*!< [5..4] Port 2 output max speed bits */
      __IOM uint32_t OSPD3      : 2;            /*!< [7..6] Port 3 output max speed bits */
      __IOM uint32_t OSPD4      : 2;            /*!< [9..8] Port 4 output max speed bits */
      __IOM uint32_t OSPD5      : 2;            /*!< [11..10] Port 5 output max speed bits */
      __IOM uint32_t OSPD6      : 2;            /*!< [13..12] Port 6 output max speed bits */
      __IOM uint32_t OSPD7      : 2;            /*!< [15..14] Port 7 output max speed bits */
      __IOM uint32_t OSPD8      : 2;            /*!< [17..16] Port 8 output max speed bits */
      __IOM uint32_t OSPD9      : 2;            /*!< [19..18] Port 9 output max speed bits */
      __IOM uint32_t OSPD10     : 2;            /*!< [21..20] Port 10 output max speed bits */
      __IOM uint32_t OSPD11     : 2;            /*!< [23..22] Port 11 output max speed bits */
      __IOM uint32_t OSPD12     : 2;            /*!< [25..24] Port 12 output max speed bits */
      __IOM uint32_t OSPD13     : 2;            /*!< [27..26] Port 13 output max speed bits */
      __IOM uint32_t OSPD14     : 2;            /*!< [29..28] Port 14 output max speed bits */
      __IOM uint32_t OSPD15     : 2;            /*!< [31..30] Port 15 output max speed bits */
    } OSPD_b;
  } ;
  
  union {
    __IOM uint32_t PUD;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register */
    
    struct {
      __IOM uint32_t PUD0       : 2;            /*!< [1..0] Port 0 pull-up or pull-down bits */
      __IOM uint32_t PUD1       : 2;            /*!< [3..2] Port 1 pull-up or pull-down bits */
      __IOM uint32_t PUD2       : 2;            /*!< [5..4] Port 2 pull-up or pull-down bits */
      __IOM uint32_t PUD3       : 2;            /*!< [7..6] Port 3 pull-up or pull-down bits */
      __IOM uint32_t PUD4       : 2;            /*!< [9..8] Port 4 pull-up or pull-down bits */
      __IOM uint32_t PUD5       : 2;            /*!< [11..10] Port 5 pull-up or pull-down bits */
      __IOM uint32_t PUD6       : 2;            /*!< [13..12] Port 6 pull-up or pull-down bits */
      __IOM uint32_t PUD7       : 2;            /*!< [15..14] Port 7 pull-up or pull-down bits */
      __IOM uint32_t PUD8       : 2;            /*!< [17..16] Port 8 pull-up or pull-down bits */
      __IOM uint32_t PUD9       : 2;            /*!< [19..18] Port 9 pull-up or pull-down bits */
      __IOM uint32_t PUD10      : 2;            /*!< [21..20] Port 10 pull-up or pull-down bits */
      __IOM uint32_t PUD11      : 2;            /*!< [23..22] Port 11 pull-up or pull-down bits */
      __IOM uint32_t PUD12      : 2;            /*!< [25..24] Port 12 pull-up or pull-down bits */
      __IOM uint32_t PUD13      : 2;            /*!< [27..26] Port 13 pull-up or pull-down bits */
      __IOM uint32_t PUD14      : 2;            /*!< [29..28] Port 14 pull-up or pull-down bits */
      __IOM uint32_t PUD15      : 2;            /*!< [31..30] Port 15 pull-up or pull-down bits */
    } PUD_b;
  } ;
  
  union {
    __IM  uint32_t ISTAT;                       /*!< (@ 0x00000010) GPIO port input status register */
    
    struct {
      __IM  uint32_t ISTAT0     : 1;            /*!< [0..0] Port input status (y = 0) */
      __IM  uint32_t ISTAT1     : 1;            /*!< [1..1] Port input status (y = 1) */
      __IM  uint32_t ISTAT2     : 1;            /*!< [2..2] Port input status (y = 2) */
      __IM  uint32_t ISTAT3     : 1;            /*!< [3..3] Port input status (y = 3) */
      __IM  uint32_t ISTAT4     : 1;            /*!< [4..4] Port input status (y = 4) */
      __IM  uint32_t ISTAT5     : 1;            /*!< [5..5] Port input status (y = 5) */
      __IM  uint32_t ISTAT6     : 1;            /*!< [6..6] Port input status (y = 6) */
      __IM  uint32_t ISTAT7     : 1;            /*!< [7..7] Port input status (y = 7) */
      __IM  uint32_t ISTAT8     : 1;            /*!< [8..8] Port input status (y = 8) */
      __IM  uint32_t ISTAT9     : 1;            /*!< [9..9] Port input status (y = 9) */
      __IM  uint32_t ISTAT10    : 1;            /*!< [10..10] Port input status (y = 10) */
      __IM  uint32_t ISTAT11    : 1;            /*!< [11..11] Port input status (y = 11) */
      __IM  uint32_t ISTAT12    : 1;            /*!< [12..12] Port input status (y = 12) */
      __IM  uint32_t ISTAT13    : 1;            /*!< [13..13] Port input status (y = 13) */
      __IM  uint32_t ISTAT14    : 1;            /*!< [14..14] Port input status (y = 14) */
      __IM  uint32_t ISTAT15    : 1;            /*!< [15..15] Port input status (y = 15) */
    } ISTAT_b;
  } ;
  
  union {
    __IOM uint32_t OCTL;                        /*!< (@ 0x00000014) GPIO port output control register */
    
    struct {
      __IOM uint32_t OCTL0      : 1;            /*!< [0..0] Port output control (y = 0) */
      __IOM uint32_t OCTL1      : 1;            /*!< [1..1] Port output control (y = 1) */
      __IOM uint32_t OCTL2      : 1;            /*!< [2..2] Port output control (y = 2) */
      __IOM uint32_t OCTL3      : 1;            /*!< [3..3] Port output control (y = 3) */
      __IOM uint32_t OCTL4      : 1;            /*!< [4..4] Port output control (y = 4) */
      __IOM uint32_t OCTL5      : 1;            /*!< [5..5] Port output control (y = 5) */
      __IOM uint32_t OCTL6      : 1;            /*!< [6..6] Port output control (y = 6) */
      __IOM uint32_t OCTL7      : 1;            /*!< [7..7] Port output control (y = 7) */
      __IOM uint32_t OCTL8      : 1;            /*!< [8..8] Port output control (y = 8) */
      __IOM uint32_t OCTL9      : 1;            /*!< [9..9] Port output control (y = 9) */
      __IOM uint32_t OCTL10     : 1;            /*!< [10..10] Port output control (y = 10) */
      __IOM uint32_t OCTL11     : 1;            /*!< [11..11] Port output control (y = 11) */
      __IOM uint32_t OCTL12     : 1;            /*!< [12..12] Port output control (y = 12) */
      __IOM uint32_t OCTL13     : 1;            /*!< [13..13] Port output control (y = 13) */
      __IOM uint32_t OCTL14     : 1;            /*!< [14..14] Port output control (y = 14) */
      __IOM uint32_t OCTL15     : 1;            /*!< [15..15] Port output control (y = 15) */
    } OCTL_b;
  } ;
  
  union {
    __OM  uint32_t BOP;                         /*!< (@ 0x00000018) GPIO port bit operate register */
    
    struct {
      __OM  uint32_t BOP0       : 1;            /*!< [0..0] Port Set bit 0 */
      __OM  uint32_t BOP1       : 1;            /*!< [1..1] Port Set bit 1 */
      __OM  uint32_t BOP2       : 1;            /*!< [2..2] Port Set bit 2 */
      __OM  uint32_t BOP3       : 1;            /*!< [3..3] Port Set bit 3 */
      __OM  uint32_t BOP4       : 1;            /*!< [4..4] Port Set bit 4 */
      __OM  uint32_t BOP5       : 1;            /*!< [5..5] Port Set bit 5 */
      __OM  uint32_t BOP6       : 1;            /*!< [6..6] Port Set bit 6 */
      __OM  uint32_t BOP7       : 1;            /*!< [7..7] Port Set bit 7 */
      __OM  uint32_t BOP8       : 1;            /*!< [8..8] Port Set bit 8 */
      __OM  uint32_t BOP9       : 1;            /*!< [9..9] Port Set bit 9 */
      __OM  uint32_t BOP10      : 1;            /*!< [10..10] Port Set bit 10 */
      __OM  uint32_t BOP11      : 1;            /*!< [11..11] Port Set bit 11 */
      __OM  uint32_t BOP12      : 1;            /*!< [12..12] Port Set bit 12 */
      __OM  uint32_t BOP13      : 1;            /*!< [13..13] Port Set bit 13 */
      __OM  uint32_t BOP14      : 1;            /*!< [14..14] Port Set bit 14 */
      __OM  uint32_t BOP15      : 1;            /*!< [15..15] Port Set bit 15 */
      __OM  uint32_t CR0        : 1;            /*!< [16..16] Port Clear bit 0 */
      __OM  uint32_t CR1        : 1;            /*!< [17..17] Port Clear bit 1 */
      __OM  uint32_t CR2        : 1;            /*!< [18..18] Port Clear bit 2 */
      __OM  uint32_t CR3        : 1;            /*!< [19..19] Port Clear bit 3 */
      __OM  uint32_t CR4        : 1;            /*!< [20..20] Port Clear bit 4 */
      __OM  uint32_t CR5        : 1;            /*!< [21..21] Port Clear bit 5 */
      __OM  uint32_t CR6        : 1;            /*!< [22..22] Port Clear bit 6 */
      __OM  uint32_t CR7        : 1;            /*!< [23..23] Port Clear bit 7 */
      __OM  uint32_t CR8        : 1;            /*!< [24..24] Port Clear bit 8 */
      __OM  uint32_t CR9        : 1;            /*!< [25..25] Port Clear bit 9 */
      __OM  uint32_t CR10       : 1;            /*!< [26..26] Port Clear bit 10 */
      __OM  uint32_t CR11       : 1;            /*!< [27..27] Port Clear bit 11 */
      __OM  uint32_t CR12       : 1;            /*!< [28..28] Port Clear bit 12 */
      __OM  uint32_t CR13       : 1;            /*!< [29..29] Port Clear bit 13 */
      __OM  uint32_t CR14       : 1;            /*!< [30..30] Port Clear bit 14 */
      __OM  uint32_t CR15       : 1;            /*!< [31..31] Port Clear bit 15 */
    } BOP_b;
  } ;
  
  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x0000001C) GPIO port configuration lock register */
    
    struct {
      __IOM uint32_t LK0        : 1;            /*!< [0..0] Port Lock bit 0 */
      __IOM uint32_t LK1        : 1;            /*!< [1..1] Port Lock bit 1 */
      __IOM uint32_t LK2        : 1;            /*!< [2..2] Port Lock bit 2 */
      __IOM uint32_t LK3        : 1;            /*!< [3..3] Port Lock bit 3 */
      __IOM uint32_t LK4        : 1;            /*!< [4..4] Port Lock bit 4 */
      __IOM uint32_t LK5        : 1;            /*!< [5..5] Port Lock bit 5 */
      __IOM uint32_t LK6        : 1;            /*!< [6..6] Port Lock bit 6 */
      __IOM uint32_t LK7        : 1;            /*!< [7..7] Port Lock bit 7 */
      __IOM uint32_t LK8        : 1;            /*!< [8..8] Port Lock bit 8 */
      __IOM uint32_t LK9        : 1;            /*!< [9..9] Port Lock bit 9 */
      __IOM uint32_t LK10       : 1;            /*!< [10..10] Port Lock bit 10 */
      __IOM uint32_t LK11       : 1;            /*!< [11..11] Port Lock bit 11 */
      __IOM uint32_t LK12       : 1;            /*!< [12..12] Port Lock bit 12 */
      __IOM uint32_t LK13       : 1;            /*!< [13..13] Port Lock bit 13 */
      __IOM uint32_t LK14       : 1;            /*!< [14..14] Port Lock bit 14 */
      __IOM uint32_t LK15       : 1;            /*!< [15..15] Port Lock bit 15 */
      __IOM uint32_t LKK        : 1;            /*!< [16..16] Lock sequence key */
    } LOCK_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL0;                      /*!< (@ 0x00000020) GPIO alternate function selected register 0 */
    
    struct {
      __IOM uint32_t SEL0       : 4;            /*!< [3..0] Port 0 alternate function selected */
      __IOM uint32_t SEL1       : 4;            /*!< [7..4] Port 1 alternate function selected */
      __IOM uint32_t SEL2       : 4;            /*!< [11..8] Port 2 alternate function selected */
      __IOM uint32_t SEL3       : 4;            /*!< [15..12] Port 3 alternate function selected */
      __IOM uint32_t SEL4       : 4;            /*!< [19..16] Port 4 alternate function selected */
      __IOM uint32_t SEL5       : 4;            /*!< [23..20] Port 5 alternate function selected */
      __IOM uint32_t SEL6       : 4;            /*!< [27..24] Port 6 alternate function selected */
      __IOM uint32_t SEL7       : 4;            /*!< [31..28] Port 7 alternate function selected */
    } AFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t AFSEL1;                      /*!< (@ 0x00000024) GPIO alternate function selected register 1 */
    
    struct {
      __IOM uint32_t SEL8       : 4;            /*!< [3..0] Port 8 alternate function selected */
      __IOM uint32_t SEL9       : 4;            /*!< [7..4] Port 9 alternate function selected */
      __IOM uint32_t SEL10      : 4;            /*!< [11..8] Port 10 alternate function selected */
      __IOM uint32_t SEL11      : 4;            /*!< [15..12] Port 11 alternate function selected */
      __IOM uint32_t SEL12      : 4;            /*!< [19..16] Port 12 alternate function selected */
      __IOM uint32_t SEL13      : 4;            /*!< [23..20] Port 13 alternate function selected */
      __IOM uint32_t SEL14      : 4;            /*!< [27..24] Port 14 alternate function selected */
      __IOM uint32_t SEL15      : 4;            /*!< [31..28] Port 15 alternate function selected */
    } AFSEL1_b;
  } ;
  
  union {
    __OM  uint32_t BC;                          /*!< (@ 0x00000028) Bit clear register */
    
    struct {
      __OM  uint32_t CR0        : 1;            /*!< [0..0] Port cleat bit */
      __OM  uint32_t CR1        : 1;            /*!< [1..1] Port cleat bit */
      __OM  uint32_t CR2        : 1;            /*!< [2..2] Port cleat bit */
      __OM  uint32_t CR3        : 1;            /*!< [3..3] Port cleat bit */
      __OM  uint32_t CR4        : 1;            /*!< [4..4] Port cleat bit */
      __OM  uint32_t CR5        : 1;            /*!< [5..5] Port cleat bit */
      __OM  uint32_t CR6        : 1;            /*!< [6..6] Port cleat bit */
      __OM  uint32_t CR7        : 1;            /*!< [7..7] Port cleat bit */
      __OM  uint32_t CR8        : 1;            /*!< [8..8] Port cleat bit */
      __OM  uint32_t CR9        : 1;            /*!< [9..9] Port cleat bit */
      __OM  uint32_t CR10       : 1;            /*!< [10..10] Port cleat bit */
      __OM  uint32_t CR11       : 1;            /*!< [11..11] Port cleat bit */
      __OM  uint32_t CR12       : 1;            /*!< [12..12] Port cleat bit */
      __OM  uint32_t CR13       : 1;            /*!< [13..13] Port cleat bit */
      __OM  uint32_t CR14       : 1;            /*!< [14..14] Port cleat bit */
      __OM  uint32_t CR15       : 1;            /*!< [15..15] Port cleat bit */
    } BC_b;
  } ;
  
  union {
    __OM  uint32_t TG;                          /*!< (@ 0x0000002C) Port bit toggle register */
    
    struct {
      __OM  uint32_t TG0        : 1;            /*!< [0..0] Port toggle bit */
      __OM  uint32_t TG1        : 1;            /*!< [1..1] Port toggle bit */
      __OM  uint32_t TG2        : 1;            /*!< [2..2] Port toggle bit */
      __OM  uint32_t TG3        : 1;            /*!< [3..3] Port toggle bit */
      __OM  uint32_t TG4        : 1;            /*!< [4..4] Port toggle bit */
      __OM  uint32_t TG5        : 1;            /*!< [5..5] Port toggle bit */
      __OM  uint32_t TG6        : 1;            /*!< [6..6] Port toggle bit */
      __OM  uint32_t TG7        : 1;            /*!< [7..7] Port toggle bit */
      __OM  uint32_t TG8        : 1;            /*!< [8..8] Port toggle bit */
      __OM  uint32_t TG9        : 1;            /*!< [9..9] Port toggle bit */
      __OM  uint32_t TG10       : 1;            /*!< [10..10] Port toggle bit */
      __OM  uint32_t TG11       : 1;            /*!< [11..11] Port toggle bit */
      __OM  uint32_t TG12       : 1;            /*!< [12..12] Port toggle bit */
      __OM  uint32_t TG13       : 1;            /*!< [13..13] Port toggle bit */
      __OM  uint32_t TG14       : 1;            /*!< [14..14] Port toggle bit */
      __OM  uint32_t TG15       : 1;            /*!< [15..15] Port toggle bit */
    } TG_b;
  } ;
} GPIOI_Type;                                   /*!< Size = 48 (0x30) */



/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter integrated circuit (I2C0)
  */

typedef struct {                                /*!< (@ 0x40005400) I2C0 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) Control register 0 */
    
    struct {
      __IOM uint16_t I2CEN      : 1;            /*!< [0..0] I2C peripheral enable */
      __IOM uint16_t SMBEN      : 1;            /*!< [1..1] SMBus/I2C mode switch */
      __IM  uint16_t            : 1;
      __IOM uint16_t SMBSEL     : 1;            /*!< [3..3] SMBusType Selection */
      __IOM uint16_t ARPEN      : 1;            /*!< [4..4] ARP protocol in SMBus switch */
      __IOM uint16_t PECEN      : 1;            /*!< [5..5] PEC Calculation Switch */
      __IOM uint16_t GCEN       : 1;            /*!< [6..6] Whether or not to response to a General Call (0x00) */
      __IOM uint16_t DISSTRC    : 1;            /*!< [7..7] Whether to stretch SCL low when data is not ready in slave mode */
      __IOM uint16_t START      : 1;            /*!< [8..8] Generate a START condition on I2C bus */
      __IOM uint16_t STOP       : 1;            /*!< [9..9] Generate a STOP condition on I2C bus */
      __IOM uint16_t ACKEN      : 1;            /*!< [10..10] Whether or not to send an ACK */
      __IOM uint16_t POAP       : 1;            /*!< [11..11] Position of ACK and PEC when receiving */
      __IOM uint16_t PECTRANS   : 1;            /*!< [12..12] PEC Transfer */
      __IOM uint16_t SALT       : 1;            /*!< [13..13] SMBus alert */
      __IM  uint16_t            : 1;
      __IOM uint16_t SRESET     : 1;            /*!< [15..15] Software reset */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) Control register 1 */
    
    struct {
      __IOM uint16_t I2CCLK     : 6;            /*!< [5..0] I2C Peripheral clock frequency */
      __IM  uint16_t            : 2;
      __IOM uint16_t ERRIE      : 1;            /*!< [8..8] Error interrupt enable */
      __IOM uint16_t EVIE       : 1;            /*!< [9..9] Event interrupt enable */
      __IOM uint16_t BUFIE      : 1;            /*!< [10..10] Buffer interrupt enable */
      __IOM uint16_t DMAON      : 1;            /*!< [11..11] DMA mode switch */
      __IOM uint16_t DMALST     : 1;            /*!< [12..12] Flag indicating DMA last transfer */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SADDR0;                      /*!< (@ 0x00000008) Slave address register 0 */
    
    struct {
      __IOM uint16_t ADDRESS0   : 1;            /*!< [0..0] Bit 0 of a 10-bit address */
      __IOM uint16_t ADDRESS7_1 : 7;            /*!< [7..1] 7-bit address or bits 7:1 of a 10-bit address */
      __IOM uint16_t ADDRESS9_8 : 2;            /*!< [9..8] Highest two bits of a 10-bit address */
      __IM  uint16_t            : 5;
      __IOM uint16_t ADDFORMAT  : 1;            /*!< [15..15] Address mode for the I2C slave */
    } SADDR0_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t SADDR1;                      /*!< (@ 0x0000000C) Slave address register 1 */
    
    struct {
      __IOM uint16_t DUADEN     : 1;            /*!< [0..0] Dual-Address mode switch */
      __IOM uint16_t ADDRESS2   : 7;            /*!< [7..1] Second I2C address for the slave in Dual-Address mode */
    } SADDR1_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x00000010) Transfer buffer register */
    
    struct {
      __IOM uint16_t TRB        : 8;            /*!< [7..0] Transmission or reception data buffer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IOM uint16_t STAT0;                       /*!< (@ 0x00000014) Transfer status register 0 */
    
    struct {
      __IM  uint16_t SBSEND     : 1;            /*!< [0..0] START condition sent out in master mode */
      __IM  uint16_t ADDSEND    : 1;            /*!< [1..1] Address is sent in master mode or received and matches in slave mode */
      __IM  uint16_t BTC        : 1;            /*!< [2..2] Byte transmission completed */
      __IM  uint16_t ADD10SEND  : 1;            /*!< [3..3] Header of 10-bit address is sent in master mode */
      __IM  uint16_t STPDET     : 1;            /*!< [4..4] STOP condition detected in slave mode */
      __IM  uint16_t            : 1;
      __IM  uint16_t RBNE       : 1;            /*!< [6..6] I2C_DATA is not Empty during receiving */
      __IM  uint16_t TBE        : 1;            /*!< [7..7] I2C_DATA is Empty during transmitting */
      __IOM uint16_t BERR       : 1;            /*!< [8..8] A bus error occurs indication a unexpected START or STOP condition on I2C bus */
      __IOM uint16_t LOSTARB    : 1;            /*!< [9..9] Arbitration Lost in master mode */
      __IOM uint16_t AERR       : 1;            /*!< [10..10] Acknowledge error */
      __IOM uint16_t OUERR      : 1;            /*!< [11..11] Over-run or under-run situation occurs in slave mode */
      __IOM uint16_t PECERR     : 1;            /*!< [12..12] PEC error when receiving data */
      __IM  uint16_t            : 1;
      __IOM uint16_t SMBTO      : 1;            /*!< [14..14] Timeout signal in SMBus mode */
      __IOM uint16_t SMBALT     : 1;            /*!< [15..15] SMBus Alert status */
    } STAT0_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t STAT1;                       /*!< (@ 0x00000018) Transfer status register 1 */
    
    struct {
      __IM  uint16_t MASTER     : 1;            /*!< [0..0] A flag indicating whether I2C block is in master or slave mode */
      __IM  uint16_t I2CBSY     : 1;            /*!< [1..1] Busy flag */
      __IM  uint16_t TRS        : 1;            /*!< [2..2] Whether the I2C is a transmitter or a receiver */
      __IM  uint16_t            : 1;
      __IM  uint16_t RXGC       : 1;            /*!< [4..4] General call address (00h) received */
      __IM  uint16_t DEFSMB     : 1;            /*!< [5..5] Default address of SMBusDevice */
      __IM  uint16_t HSTSMB     : 1;            /*!< [6..6] SMBus Host Header detected in slave mode */
      __IM  uint16_t DUMODF     : 1;            /*!< [7..7] Dual Flag in slave mode */
      __IM  uint16_t ECV        : 8;            /*!< [15..8] Packet Error Checking Value that calculated by hardware when PEC is enabled */
    } STAT1_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t CKCFG;                       /*!< (@ 0x0000001C) Clock configure register */
    
    struct {
      __IOM uint16_t CLKC       : 12;           /*!< [11..0] I2C Clock control in master mode */
      __IM  uint16_t            : 2;
      __IOM uint16_t DTCY       : 1;            /*!< [14..14] Duty cycle in fast mode */
      __IOM uint16_t FAST       : 1;            /*!< [15..15] I2C speed selection in master mode */
    } CKCFG_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t RT;                          /*!< (@ 0x00000020) Rise time register */
    
    struct {
      __IOM uint16_t RISETIME   : 6;            /*!< [5..0] Maximum rise time in master mode */
    } RT_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint16_t FCTL;                        /*!< (@ 0x00000024) Filter control register */
    
    struct {
      __IOM uint16_t DF         : 4;            /*!< [3..0] Digital noise filter */
      __IOM uint16_t AFD        : 1;            /*!< [4..4] Analog noise filter disable */
    } FCTL_b;
  } ;
  __IM  uint16_t  RESERVED9;
  __IM  uint32_t  RESERVED10[22];
  
  union {
    __IOM uint32_t SAMCS;                       /*!< (@ 0x00000080) SAM control and status register */
    
    struct {
      __IOM uint32_t SAMEN      : 1;            /*!< [0..0] SAM_V interface enable */
      __IOM uint32_t STOEN      : 1;            /*!< [1..1] SAM_V interface timeout detect enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t TFFIE      : 1;            /*!< [4..4] Txframe fall interrupt enable */
      __IOM uint32_t TFRIE      : 1;            /*!< [5..5] Txframe rise interrupt enable */
      __IOM uint32_t RFFIE      : 1;            /*!< [6..6] Rxframe fall interrupt enable */
      __IOM uint32_t RFRIE      : 1;            /*!< [7..7] Rxframe rise interrupt enable */
      __IM  uint32_t TXF        : 1;            /*!< [8..8] Level of Txframe signal */
      __IM  uint32_t RXF        : 1;            /*!< [9..9] Level of Rxframe signal */
      __IM  uint32_t            : 2;
      __IOM uint32_t TFF        : 1;            /*!< [12..12] Txframe fall flag */
      __IOM uint32_t TFR        : 1;            /*!< [13..13] Txframe rise flag */
      __IOM uint32_t RFF        : 1;            /*!< [14..14] Rxframe fall flag */
      __IOM uint32_t RFR        : 1;            /*!< [15..15] Rxframe rise flag */
    } SAMCS_b;
  } ;
} I2C0_Type;                                    /*!< Size = 132 (0x84) */



/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter integrated circuit (I2C1)
  */

typedef struct {                                /*!< (@ 0x40005800) I2C1 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) Control register 0 */
    
    struct {
      __IOM uint16_t I2CEN      : 1;            /*!< [0..0] I2C peripheral enable */
      __IOM uint16_t SMBEN      : 1;            /*!< [1..1] SMBus/I2C mode switch */
      __IM  uint16_t            : 1;
      __IOM uint16_t SMBSEL     : 1;            /*!< [3..3] SMBusType Selection */
      __IOM uint16_t ARPEN      : 1;            /*!< [4..4] ARP protocol in SMBus switch */
      __IOM uint16_t PECEN      : 1;            /*!< [5..5] PEC Calculation Switch */
      __IOM uint16_t GCEN       : 1;            /*!< [6..6] Whether or not to response to a General Call (0x00) */
      __IOM uint16_t DISSTRC    : 1;            /*!< [7..7] Whether to stretch SCL low when data is not ready in slave mode */
      __IOM uint16_t START      : 1;            /*!< [8..8] Generate a START condition on I2C bus */
      __IOM uint16_t STOP       : 1;            /*!< [9..9] Generate a STOP condition on I2C bus */
      __IOM uint16_t ACKEN      : 1;            /*!< [10..10] Whether or not to send an ACK */
      __IOM uint16_t POAP       : 1;            /*!< [11..11] Position of ACK and PEC when receiving */
      __IOM uint16_t PECTRANS   : 1;            /*!< [12..12] PEC Transfer */
      __IOM uint16_t SALT       : 1;            /*!< [13..13] SMBus alert */
      __IM  uint16_t            : 1;
      __IOM uint16_t SRESET     : 1;            /*!< [15..15] Software reset */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) Control register 1 */
    
    struct {
      __IOM uint16_t I2CCLK     : 6;            /*!< [5..0] I2C Peripheral clock frequency */
      __IM  uint16_t            : 2;
      __IOM uint16_t ERRIE      : 1;            /*!< [8..8] Error interrupt enable */
      __IOM uint16_t EVIE       : 1;            /*!< [9..9] Event interrupt enable */
      __IOM uint16_t BUFIE      : 1;            /*!< [10..10] Buffer interrupt enable */
      __IOM uint16_t DMAON      : 1;            /*!< [11..11] DMA mode switch */
      __IOM uint16_t DMALST     : 1;            /*!< [12..12] Flag indicating DMA last transfer */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SADDR0;                      /*!< (@ 0x00000008) Slave address register 0 */
    
    struct {
      __IOM uint16_t ADDRESS0   : 1;            /*!< [0..0] Bit 0 of a 10-bit address */
      __IOM uint16_t ADDRESS7_1 : 7;            /*!< [7..1] 7-bit address or bits 7:1 of a 10-bit address */
      __IOM uint16_t ADDRESS9_8 : 2;            /*!< [9..8] Highest two bits of a 10-bit address */
      __IM  uint16_t            : 5;
      __IOM uint16_t ADDFORMAT  : 1;            /*!< [15..15] Address mode for the I2C slave */
    } SADDR0_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t SADDR1;                      /*!< (@ 0x0000000C) Slave address register 1 */
    
    struct {
      __IOM uint16_t DUADEN     : 1;            /*!< [0..0] Dual-Address mode switch */
      __IOM uint16_t ADDRESS2   : 7;            /*!< [7..1] Second I2C address for the slave in Dual-Address mode */
    } SADDR1_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x00000010) Transfer buffer register */
    
    struct {
      __IOM uint16_t TRB        : 8;            /*!< [7..0] Transmission or reception data buffer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IOM uint16_t STAT0;                       /*!< (@ 0x00000014) Transfer status register 0 */
    
    struct {
      __IM  uint16_t SBSEND     : 1;            /*!< [0..0] START condition sent out in master mode */
      __IM  uint16_t ADDSEND    : 1;            /*!< [1..1] Address is sent in master mode or received and matches in slave mode */
      __IM  uint16_t BTC        : 1;            /*!< [2..2] Byte transmission completed */
      __IM  uint16_t ADD10SEND  : 1;            /*!< [3..3] Header of 10-bit address is sent in master mode */
      __IM  uint16_t STPDET     : 1;            /*!< [4..4] STOP condition detected in slave mode */
      __IM  uint16_t            : 1;
      __IM  uint16_t RBNE       : 1;            /*!< [6..6] I2C_DATA is not Empty during receiving */
      __IM  uint16_t TBE        : 1;            /*!< [7..7] I2C_DATA is Empty during transmitting */
      __IOM uint16_t BERR       : 1;            /*!< [8..8] A bus error occurs indication a unexpected START or STOP condition on I2C bus */
      __IOM uint16_t LOSTARB    : 1;            /*!< [9..9] Arbitration Lost in master mode */
      __IOM uint16_t AERR       : 1;            /*!< [10..10] Acknowledge error */
      __IOM uint16_t OUERR      : 1;            /*!< [11..11] Over-run or under-run situation occurs in slave mode */
      __IOM uint16_t PECERR     : 1;            /*!< [12..12] PEC error when receiving data */
      __IM  uint16_t            : 1;
      __IOM uint16_t SMBTO      : 1;            /*!< [14..14] Timeout signal in SMBus mode */
      __IOM uint16_t SMBALT     : 1;            /*!< [15..15] SMBus Alert status */
    } STAT0_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t STAT1;                       /*!< (@ 0x00000018) Transfer status register 1 */
    
    struct {
      __IM  uint16_t MASTER     : 1;            /*!< [0..0] A flag indicating whether I2C block is in master or slave mode */
      __IM  uint16_t I2CBSY     : 1;            /*!< [1..1] Busy flag */
      __IM  uint16_t TRS        : 1;            /*!< [2..2] Whether the I2C is a transmitter or a receiver */
      __IM  uint16_t            : 1;
      __IM  uint16_t RXGC       : 1;            /*!< [4..4] General call address (00h) received */
      __IM  uint16_t DEFSMB     : 1;            /*!< [5..5] Default address of SMBusDevice */
      __IM  uint16_t HSTSMB     : 1;            /*!< [6..6] SMBus Host Header detected in slave mode */
      __IM  uint16_t DUMODF     : 1;            /*!< [7..7] Dual Flag in slave mode */
      __IM  uint16_t ECV        : 8;            /*!< [15..8] Packet Error Checking Value that calculated by hardware when PEC is enabled */
    } STAT1_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t CKCFG;                       /*!< (@ 0x0000001C) Clock configure register */
    
    struct {
      __IOM uint16_t CLKC       : 12;           /*!< [11..0] I2C Clock control in master mode */
      __IM  uint16_t            : 2;
      __IOM uint16_t DTCY       : 1;            /*!< [14..14] Duty cycle in fast mode */
      __IOM uint16_t FAST       : 1;            /*!< [15..15] I2C speed selection in master mode */
    } CKCFG_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t RT;                          /*!< (@ 0x00000020) Rise time register */
    
    struct {
      __IOM uint16_t RISETIME   : 6;            /*!< [5..0] Maximum rise time in master mode */
    } RT_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint16_t FCTL;                        /*!< (@ 0x00000024) Filter control register */
    
    struct {
      __IOM uint16_t DF         : 4;            /*!< [3..0] Digital noise filter */
      __IOM uint16_t AFD        : 1;            /*!< [4..4] Analog noise filter disable */
    } FCTL_b;
  } ;
  __IM  uint16_t  RESERVED9;
  __IM  uint32_t  RESERVED10[22];
  
  union {
    __IOM uint32_t SAMCS;                       /*!< (@ 0x00000080) SAM control and status register */
    
    struct {
      __IOM uint32_t SAMEN      : 1;            /*!< [0..0] SAM_V interface enable */
      __IOM uint32_t STOEN      : 1;            /*!< [1..1] SAM_V interface timeout detect enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t TFFIE      : 1;            /*!< [4..4] Txframe fall interrupt enable */
      __IOM uint32_t TFRIE      : 1;            /*!< [5..5] Txframe rise interrupt enable */
      __IOM uint32_t RFFIE      : 1;            /*!< [6..6] Rxframe fall interrupt enable */
      __IOM uint32_t RFRIE      : 1;            /*!< [7..7] Rxframe rise interrupt enable */
      __IM  uint32_t TXF        : 1;            /*!< [8..8] Level of Txframe signal */
      __IM  uint32_t RXF        : 1;            /*!< [9..9] Level of Rxframe signal */
      __IM  uint32_t            : 2;
      __IOM uint32_t TFF        : 1;            /*!< [12..12] Txframe fall flag */
      __IOM uint32_t TFR        : 1;            /*!< [13..13] Txframe rise flag */
      __IOM uint32_t RFF        : 1;            /*!< [14..14] Rxframe fall flag */
      __IOM uint32_t RFR        : 1;            /*!< [15..15] Rxframe rise flag */
    } SAMCS_b;
  } ;
} I2C1_Type;                                    /*!< Size = 132 (0x84) */



/* =========================================================================================================================== */
/* ================                                           I2C2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter integrated circuit (I2C2)
  */

typedef struct {                                /*!< (@ 0x40005C00) I2C2 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) Control register 0 */
    
    struct {
      __IOM uint16_t I2CEN      : 1;            /*!< [0..0] I2C peripheral enable */
      __IOM uint16_t SMBEN      : 1;            /*!< [1..1] SMBus/I2C mode switch */
      __IM  uint16_t            : 1;
      __IOM uint16_t SMBSEL     : 1;            /*!< [3..3] SMBusType Selection */
      __IOM uint16_t ARPEN      : 1;            /*!< [4..4] ARP protocol in SMBus switch */
      __IOM uint16_t PECEN      : 1;            /*!< [5..5] PEC Calculation Switch */
      __IOM uint16_t GCEN       : 1;            /*!< [6..6] Whether or not to response to a General Call (0x00) */
      __IOM uint16_t DISSTRC    : 1;            /*!< [7..7] Whether to stretch SCL low when data is not ready in slave mode */
      __IOM uint16_t START      : 1;            /*!< [8..8] Generate a START condition on I2C bus */
      __IOM uint16_t STOP       : 1;            /*!< [9..9] Generate a STOP condition on I2C bus */
      __IOM uint16_t ACKEN      : 1;            /*!< [10..10] Whether or not to send an ACK */
      __IOM uint16_t POAP       : 1;            /*!< [11..11] Position of ACK and PEC when receiving */
      __IOM uint16_t PECTRANS   : 1;            /*!< [12..12] PEC Transfer */
      __IOM uint16_t SALT       : 1;            /*!< [13..13] SMBus alert */
      __IM  uint16_t            : 1;
      __IOM uint16_t SRESET     : 1;            /*!< [15..15] Software reset */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) Control register 1 */
    
    struct {
      __IOM uint16_t I2CCLK     : 6;            /*!< [5..0] I2C Peripheral clock frequency */
      __IM  uint16_t            : 2;
      __IOM uint16_t ERRIE      : 1;            /*!< [8..8] Error interrupt enable */
      __IOM uint16_t EVIE       : 1;            /*!< [9..9] Event interrupt enable */
      __IOM uint16_t BUFIE      : 1;            /*!< [10..10] Buffer interrupt enable */
      __IOM uint16_t DMAON      : 1;            /*!< [11..11] DMA mode switch */
      __IOM uint16_t DMALST     : 1;            /*!< [12..12] Flag indicating DMA last transfer */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SADDR0;                      /*!< (@ 0x00000008) Slave address register 0 */
    
    struct {
      __IOM uint16_t ADDRESS0   : 1;            /*!< [0..0] Bit 0 of a 10-bit address */
      __IOM uint16_t ADDRESS7_1 : 7;            /*!< [7..1] 7-bit address or bits 7:1 of a 10-bit address */
      __IOM uint16_t ADDRESS9_8 : 2;            /*!< [9..8] Highest two bits of a 10-bit address */
      __IM  uint16_t            : 5;
      __IOM uint16_t ADDFORMAT  : 1;            /*!< [15..15] Address mode for the I2C slave */
    } SADDR0_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t SADDR1;                      /*!< (@ 0x0000000C) Slave address register 1 */
    
    struct {
      __IOM uint16_t DUADEN     : 1;            /*!< [0..0] Dual-Address mode switch */
      __IOM uint16_t ADDRESS2   : 7;            /*!< [7..1] Second I2C address for the slave in Dual-Address mode */
    } SADDR1_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x00000010) Transfer buffer register */
    
    struct {
      __IOM uint16_t TRB        : 8;            /*!< [7..0] Transmission or reception data buffer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IOM uint16_t STAT0;                       /*!< (@ 0x00000014) Transfer status register 0 */
    
    struct {
      __IM  uint16_t SBSEND     : 1;            /*!< [0..0] START condition sent out in master mode */
      __IM  uint16_t ADDSEND    : 1;            /*!< [1..1] Address is sent in master mode or received and matches in slave mode */
      __IM  uint16_t BTC        : 1;            /*!< [2..2] Byte transmission completed */
      __IM  uint16_t ADD10SEND  : 1;            /*!< [3..3] Header of 10-bit address is sent in master mode */
      __IM  uint16_t STPDET     : 1;            /*!< [4..4] STOP condition detected in slave mode */
      __IM  uint16_t            : 1;
      __IM  uint16_t RBNE       : 1;            /*!< [6..6] I2C_DATA is not Empty during receiving */
      __IM  uint16_t TBE        : 1;            /*!< [7..7] I2C_DATA is Empty during transmitting */
      __IOM uint16_t BERR       : 1;            /*!< [8..8] A bus error occurs indication a unexpected START or STOP condition on I2C bus */
      __IOM uint16_t LOSTARB    : 1;            /*!< [9..9] Arbitration Lost in master mode */
      __IOM uint16_t AERR       : 1;            /*!< [10..10] Acknowledge error */
      __IOM uint16_t OUERR      : 1;            /*!< [11..11] Over-run or under-run situation occurs in slave mode */
      __IOM uint16_t PECERR     : 1;            /*!< [12..12] PEC error when receiving data */
      __IM  uint16_t            : 1;
      __IOM uint16_t SMBTO      : 1;            /*!< [14..14] Timeout signal in SMBus mode */
      __IOM uint16_t SMBALT     : 1;            /*!< [15..15] SMBus Alert status */
    } STAT0_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t STAT1;                       /*!< (@ 0x00000018) Transfer status register 1 */
    
    struct {
      __IM  uint16_t MASTER     : 1;            /*!< [0..0] A flag indicating whether I2C block is in master or slave mode */
      __IM  uint16_t I2CBSY     : 1;            /*!< [1..1] Busy flag */
      __IM  uint16_t TRS        : 1;            /*!< [2..2] Whether the I2C is a transmitter or a receiver */
      __IM  uint16_t            : 1;
      __IM  uint16_t RXGC       : 1;            /*!< [4..4] General call address (00h) received */
      __IM  uint16_t DEFSMB     : 1;            /*!< [5..5] Default address of SMBusDevice */
      __IM  uint16_t HSTSMB     : 1;            /*!< [6..6] SMBus Host Header detected in slave mode */
      __IM  uint16_t DUMODF     : 1;            /*!< [7..7] Dual Flag in slave mode */
      __IM  uint16_t ECV        : 8;            /*!< [15..8] Packet Error Checking Value that calculated by hardware when PEC is enabled */
    } STAT1_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t CKCFG;                       /*!< (@ 0x0000001C) Clock configure register */
    
    struct {
      __IOM uint16_t CLKC       : 12;           /*!< [11..0] I2C Clock control in master mode */
      __IM  uint16_t            : 2;
      __IOM uint16_t DTCY       : 1;            /*!< [14..14] Duty cycle in fast mode */
      __IOM uint16_t FAST       : 1;            /*!< [15..15] I2C speed selection in master mode */
    } CKCFG_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t RT;                          /*!< (@ 0x00000020) Rise time register */
    
    struct {
      __IOM uint16_t RISETIME   : 6;            /*!< [5..0] Maximum rise time in master mode */
    } RT_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint16_t FCTL;                        /*!< (@ 0x00000024) Filter control register */
    
    struct {
      __IOM uint16_t DF         : 4;            /*!< [3..0] Digital noise filter */
      __IOM uint16_t AFD        : 1;            /*!< [4..4] Analog noise filter disable */
    } FCTL_b;
  } ;
  __IM  uint16_t  RESERVED9;
  __IM  uint32_t  RESERVED10[22];
  
  union {
    __IOM uint32_t SAMCS;                       /*!< (@ 0x00000080) SAM control and status register */
    
    struct {
      __IOM uint32_t SAMEN      : 1;            /*!< [0..0] SAM_V interface enable */
      __IOM uint32_t STOEN      : 1;            /*!< [1..1] SAM_V interface timeout detect enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t TFFIE      : 1;            /*!< [4..4] Txframe fall interrupt enable */
      __IOM uint32_t TFRIE      : 1;            /*!< [5..5] Txframe rise interrupt enable */
      __IOM uint32_t RFFIE      : 1;            /*!< [6..6] Rxframe fall interrupt enable */
      __IOM uint32_t RFRIE      : 1;            /*!< [7..7] Rxframe rise interrupt enable */
      __IM  uint32_t TXF        : 1;            /*!< [8..8] Level of Txframe signal */
      __IM  uint32_t RXF        : 1;            /*!< [9..9] Level of Rxframe signal */
      __IM  uint32_t            : 2;
      __IOM uint32_t TFF        : 1;            /*!< [12..12] Txframe fall flag */
      __IOM uint32_t TFR        : 1;            /*!< [13..13] Txframe rise flag */
      __IOM uint32_t RFF        : 1;            /*!< [14..14] Rxframe fall flag */
      __IOM uint32_t RFR        : 1;            /*!< [15..15] Rxframe rise flag */
    } SAMCS_b;
  } ;
} I2C2_Type;                                    /*!< Size = 132 (0x84) */



/* =========================================================================================================================== */
/* ================                                            IPA                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Image processing accelerator (IPA)
  */

typedef struct {                                /*!< (@ 0x4002B000) IPA Structure */
  
  union {
    __IOM uint32_t IPA_CTL;                     /*!< (@ 0x00000000) Control register */
    
    struct {
      __IOM uint32_t TEN        : 1;            /*!< [0..0] Transfer enable */
      __IOM uint32_t THU        : 1;            /*!< [1..1] Transfer hang up */
      __IOM uint32_t TST        : 1;            /*!< [2..2] Transfer stop */
      __IM  uint32_t            : 5;
      __IOM uint32_t TAEIE      : 1;            /*!< [8..8] Enable bit for transfer access error interrupt */
      __IOM uint32_t FTFIE      : 1;            /*!< [9..9] Enable bit for full transfer finish interrupt */
      __IOM uint32_t TLMIE      : 1;            /*!< [10..10] Enable bit for transfer line mark interrupt */
      __IOM uint32_t LACIE      : 1;            /*!< [11..11] Enable bit for LUT access conflict interrupt */
      __IOM uint32_t LLFIE      : 1;            /*!< [12..12] Enable bit for LUT loading finish interrupt */
      __IOM uint32_t WCFIE      : 1;            /*!< [13..13] Enable bit for wrong configuration interrupt */
      __IM  uint32_t            : 2;
      __IOM uint32_t PFCM       : 2;            /*!< [17..16] Pixel format convert mode */
    } IPA_CTL_b;
  } ;
  
  union {
    __IM  uint32_t IPA_INTF;                    /*!< (@ 0x00000004) Interrupt flag register */
    
    struct {
      __IM  uint32_t TAEIF      : 1;            /*!< [0..0] Transfer access error interrupt flag */
      __IM  uint32_t FTFIF      : 1;            /*!< [1..1] Full transfer finish interrupt flag */
      __IM  uint32_t TLMIF      : 1;            /*!< [2..2] Transfer line mark interrupt flag */
      __IM  uint32_t LACIF      : 1;            /*!< [3..3] LUT access conflict interrupt flag */
      __IM  uint32_t LLFIF      : 1;            /*!< [4..4] LUT loading finish interrupt flag */
      __IM  uint32_t WCFIF      : 1;            /*!< [5..5] Wrong configuration interrupt flag */
    } IPA_INTF_b;
  } ;
  
  union {
    __IOM uint32_t IPA_INTC;                    /*!< (@ 0x00000008) Interrupt flag clear register */
    
    struct {
      __IOM uint32_t TAEIFC     : 1;            /*!< [0..0] Clear bit for transfer access error interrupt flag */
      __IOM uint32_t TFIFC      : 1;            /*!< [1..1] Clear bit for full transfer finish interrupt flag */
      __IOM uint32_t TLMIF      : 1;            /*!< [2..2] Clear bit for transfer line mark interrupt flag */
      __IOM uint32_t LACIFC     : 1;            /*!< [3..3] Clear bit for LUT access conflict interrupt flag */
      __IOM uint32_t LLFIFC     : 1;            /*!< [4..4] Clear bit for LUT loading finish interrupt flag */
      __IOM uint32_t CWCFIF     : 1;            /*!< [5..5] Clear bit for wrong configuration interrupt flag */
    } IPA_INTC_b;
  } ;
  
  union {
    __IOM uint32_t IPA_FMADDR;                  /*!< (@ 0x0000000C) Foreground memory base address register */
    
    struct {
      __IOM uint32_t FMADDR     : 32;           /*!< [31..0] Foreground memory base address */
    } IPA_FMADDR_b;
  } ;
  
  union {
    __IOM uint32_t IPA_FLOFF;                   /*!< (@ 0x00000010) Foreground line offset register */
    
    struct {
      __IOM uint32_t FLOFF      : 14;           /*!< [13..0] Foreground line offset */
    } IPA_FLOFF_b;
  } ;
  
  union {
    __IOM uint32_t IPA_BMADDR;                  /*!< (@ 0x00000014) Background memory base address register */
    
    struct {
      __IOM uint32_t BMADDR     : 32;           /*!< [31..0] Background memory base address */
    } IPA_BMADDR_b;
  } ;
  
  union {
    __IOM uint32_t IPA_BLOFF;                   /*!< (@ 0x00000018) Background line offset register */
    
    struct {
      __IOM uint32_t BLOFF      : 14;           /*!< [13..0] Background line offset */
    } IPA_BLOFF_b;
  } ;
  
  union {
    __IOM uint32_t IPA_FPCTL;                   /*!< (@ 0x0000001C) Foreground pixel control register */
    
    struct {
      __IOM uint32_t FPF        : 4;            /*!< [3..0] Foreground pixel format */
      __IOM uint32_t FLPF       : 1;            /*!< [4..4] Foreground LUT pixel format */
      __IOM uint32_t FLLEN      : 1;            /*!< [5..5] Foreground LUT loading enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t FCNP       : 8;            /*!< [15..8] Foreground LUT number of pixel */
      __IOM uint32_t FAVCA      : 2;            /*!< [17..16] Foreground alpha value calculation algorithm */
      __IM  uint32_t            : 6;
      __IOM uint32_t FPDAV      : 8;            /*!< [31..24] Foreground pre- defined alpha value */
    } IPA_FPCTL_b;
  } ;
  
  union {
    __IOM uint32_t IPA_FPV;                     /*!< (@ 0x00000020) Foreground pixel value register */
    
    struct {
      __IOM uint32_t FPDBV      : 8;            /*!< [7..0] Foreground pre-defined blue value */
      __IOM uint32_t FPDGV      : 8;            /*!< [15..8] Foreground pre-defined green value */
      __IOM uint32_t FPDRV      : 8;            /*!< [23..16] Foreground pre-defined red value */
    } IPA_FPV_b;
  } ;
  
  union {
    __IOM uint32_t IPA_BPCTL;                   /*!< (@ 0x00000024) Background pixel control register */
    
    struct {
      __IOM uint32_t BPF        : 4;            /*!< [3..0] Background pixel format */
      __IOM uint32_t BLPF       : 1;            /*!< [4..4] Background LUT pixel format */
      __IOM uint32_t BLLEN      : 1;            /*!< [5..5] Background LUT loading enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t BCNP       : 8;            /*!< [15..8] Background LUT number of pixel */
      __IOM uint32_t BAVCA      : 2;            /*!< [17..16] Background alpha value calculation algorithm */
      __IM  uint32_t            : 6;
      __IOM uint32_t BPDAV      : 8;            /*!< [31..24] Background pre- defined alpha value */
    } IPA_BPCTL_b;
  } ;
  
  union {
    __IOM uint32_t IPA_BPV;                     /*!< (@ 0x00000028) Background pixel value register */
    
    struct {
      __IOM uint32_t BPDBV      : 8;            /*!< [7..0] Background pre-defined blue value */
      __IOM uint32_t BPDGV      : 8;            /*!< [15..8] Background pre-defined green value */
      __IOM uint32_t BPDRV      : 8;            /*!< [23..16] Background pre-defined red value */
    } IPA_BPV_b;
  } ;
  
  union {
    __IOM uint32_t IPA_FLMADDR;                 /*!< (@ 0x0000002C) Foreground LUT memory base address register */
    
    struct {
      __IOM uint32_t FLMBADDR   : 32;           /*!< [31..0] Foreground LUT memory base address */
    } IPA_FLMADDR_b;
  } ;
  
  union {
    __IOM uint32_t IPA_BLMADDR;                 /*!< (@ 0x00000030) Background LUT memory base address register */
    
    struct {
      __IOM uint32_t BLMADDR    : 32;           /*!< [31..0] Background LUT memory base address */
    } IPA_BLMADDR_b;
  } ;
  
  union {
    __IOM uint32_t IPA_DPCTL;                   /*!< (@ 0x00000034) Destination pixel control register */
    
    struct {
      __IOM uint32_t DPF        : 3;            /*!< [2..0] Destination pixel format */
    } IPA_DPCTL_b;
  } ;
  
  union {
    union {
      __IOM uint32_t IPA_DPV_ARGB8888;          /*!< (@ 0x00000038) Destination pixel value register(When the destination pixel format is ARGB8888) */
      
      struct {
        __IOM uint32_t DPDBV    : 8;            /*!< [7..0] Destination pre-defined blue value */
        __IOM uint32_t DPDGV    : 8;            /*!< [15..8] Destination pre-defined green value */
        __IOM uint32_t DPDRV    : 8;            /*!< [23..16] Destination pre-defined red value */
        __IOM uint32_t DPDAV    : 8;            /*!< [31..24] Destination pre-defined alpha value */
      } IPA_DPV_ARGB8888_b;
    } ;
    
    union {
      __IOM uint32_t IPA_DPV_RGB888;            /*!< (@ 0x00000038) Destination pixel value register(When the destination pixel format is RGB888) */
      
      struct {
        __IOM uint32_t DPDBV    : 8;            /*!< [7..0] Destination pre-defined blue value */
        __IOM uint32_t DPDGV    : 8;            /*!< [15..8] Destination pre-defined green value */
        __IOM uint32_t DPDRV    : 8;            /*!< [23..16] Destination pre-defined red value */
      } IPA_DPV_RGB888_b;
    } ;
    
    union {
      __IOM uint32_t IPA_DPV_RGB565;            /*!< (@ 0x00000038) Destination pixel value register(When the destination pixel format is RGB565) */
      
      struct {
        __IOM uint32_t DPDBV    : 5;            /*!< [4..0] Destination pre-defined blue value */
        __IOM uint32_t DPDGV    : 6;            /*!< [10..5] Destination pre-defined green value */
        __IOM uint32_t DPDRV    : 5;            /*!< [15..11] Destination pre-defined red value */
      } IPA_DPV_RGB565_b;
    } ;
    
    union {
      __IOM uint32_t IPA_DPV_ARGB1555;          /*!< (@ 0x00000038) Destination pixel value register(When the destination pixel format is ARGB1555) */
      
      struct {
        __IOM uint32_t DPDBV    : 5;            /*!< [4..0] Destination pre-defined blue value */
        __IOM uint32_t DPDGV    : 5;            /*!< [9..5] Destination pre-defined green value */
        __IOM uint32_t DPDRV    : 5;            /*!< [14..10] Destination pre-defined red value */
        __IOM uint32_t DPDAV    : 1;            /*!< [15..15] Destination pre-defined alpha value */
      } IPA_DPV_ARGB1555_b;
    } ;
    
    union {
      __IOM uint32_t IPA_DPV_ARGB4444;          /*!< (@ 0x00000038) Destination pixel value register(When the destination pixel format is ARGB4444,) */
      
      struct {
        __IOM uint32_t DPDBV    : 4;            /*!< [3..0] Destination pre-defined blue value */
        __IOM uint32_t DPDGV    : 4;            /*!< [7..4] Destination pre-defined green value */
        __IOM uint32_t DPDRV    : 4;            /*!< [11..8] Destination pre-defined red value */
        __IOM uint32_t DPDAV    : 4;            /*!< [15..12] Destination pre-defined alpha value */
      } IPA_DPV_ARGB4444_b;
    } ;
  };
  
  union {
    __IOM uint32_t IPA_DMADDR;                  /*!< (@ 0x0000003C) Destination memory base address register */
    
    struct {
      __IOM uint32_t DMADDR     : 32;           /*!< [31..0] Destination memory base address */
    } IPA_DMADDR_b;
  } ;
  
  union {
    __IOM uint32_t IPA_DLOFF;                   /*!< (@ 0x00000040) Destination line offset register */
    
    struct {
      __IOM uint32_t DLOFF      : 14;           /*!< [13..0] Destination line offset */
    } IPA_DLOFF_b;
  } ;
  
  union {
    __IOM uint32_t IPA_IMS;                     /*!< (@ 0x00000044) Image size register */
    
    struct {
      __IOM uint32_t HEIGHT     : 16;           /*!< [15..0] Height of the image to be processed */
      __IOM uint32_t WIDTH      : 14;           /*!< [29..16] Width of the image to be processed */
    } IPA_IMS_b;
  } ;
  
  union {
    __IOM uint32_t IPA_LM;                      /*!< (@ 0x00000048) Line mark register */
    
    struct {
      __IOM uint32_t LM         : 16;           /*!< [15..0] line mark */
    } IPA_LM_b;
  } ;
  
  union {
    __IOM uint32_t IPA_ITCTL;                   /*!< (@ 0x0000004C) Inter-timer control register */
    
    struct {
      __IOM uint32_t ITEN       : 1;            /*!< [0..0] Inter-timer enable */
      __IM  uint32_t            : 7;
      __IOM uint32_t NCCI       : 8;            /*!< [15..8] Number of clock cycles interval */
    } IPA_ITCTL_b;
  } ;
} IPA_Type;                                     /*!< Size = 80 (0x50) */



/* =========================================================================================================================== */
/* ================                                           IREF                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Programmable current reference (IREF)
  */

typedef struct {                                /*!< (@ 0x4000C400) IREF Structure */
  __IM  uint32_t  RESERVED[192];
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000300) control register */
    
    struct {
      __IOM uint32_t CSDT       : 6;            /*!< [5..0] Current step data */
      __IM  uint32_t            : 1;
      __IOM uint32_t SCMOD      : 1;            /*!< [7..7] Sink current mode */
      __IOM uint32_t CPT        : 5;            /*!< [12..8] Current precision trim */
      __IM  uint32_t            : 1;
      __IOM uint32_t SSEL       : 1;            /*!< [14..14] Step selection */
      __IOM uint32_t CREN       : 1;            /*!< [15..15] Current reference enable */
    } CTL_b;
  } ;
} IREF_Type;                                    /*!< Size = 772 (0x304) */



/* =========================================================================================================================== */
/* ================                                            PMU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power management unit (PMU)
  */

typedef struct {                                /*!< (@ 0x40007000) PMU Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) power control register */
    
    struct {
      __IOM uint32_t LDOLP      : 1;            /*!< [0..0] LDO Low Power Mode */
      __IOM uint32_t STBMOD     : 1;            /*!< [1..1] Standby Mode */
      __IOM uint32_t WURST      : 1;            /*!< [2..2] Wakeup Flag Reset */
      __IOM uint32_t STBRST     : 1;            /*!< [3..3] Standby Flag Reset */
      __IOM uint32_t LVDEN      : 1;            /*!< [4..4] Low Voltage Detector Enable */
      __IOM uint32_t LVDT       : 3;            /*!< [7..5] Low Voltage Detector Threshold */
      __IOM uint32_t BKPWEN     : 1;            /*!< [8..8] Backup Domain Write Enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t LDLP       : 1;            /*!< [10..10] Low-driver mode when use low power LDO. */
      __IOM uint32_t LDNP       : 1;            /*!< [11..11] Low-driver mode when use normal power LDO */
      __IM  uint32_t            : 2;
      __IOM uint32_t LDOVS      : 2;            /*!< [15..14] LDO output voltage select */
      __IOM uint32_t HDEN       : 1;            /*!< [16..16] High-driver mode enable */
      __IOM uint32_t HDS        : 1;            /*!< [17..17] High-driver mode switch */
      __IOM uint32_t LDEN       : 2;            /*!< [19..18] Low-driver mode enable in Deep-sleep mode */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t CS;                          /*!< (@ 0x00000004) power control/status register */
    
    struct {
      __IM  uint32_t WUF        : 1;            /*!< [0..0] Wakeup flag */
      __IM  uint32_t STBF       : 1;            /*!< [1..1] Standby flag */
      __IM  uint32_t LVDF       : 1;            /*!< [2..2] Low Voltage Detector Status Flag */
      __IM  uint32_t BLDORF     : 1;            /*!< [3..3] Backup SRAM LDO ready flag */
      __IM  uint32_t            : 4;
      __IOM uint32_t WUPEN      : 1;            /*!< [8..8] Enable WKUP pin */
      __IOM uint32_t BLDOON     : 1;            /*!< [9..9] Backup SRAM LDO on */
      __IM  uint32_t            : 4;
      __IM  uint32_t LDOVSRF    : 1;            /*!< [14..14] LDO voltage select ready flag */
      __IM  uint32_t            : 1;
      __IM  uint32_t HDRF       : 1;            /*!< [16..16] High-driver ready flag */
      __IM  uint32_t HDSRF      : 1;            /*!< [17..17] High-driver switch ready flag */
      __IOM uint32_t LDRF       : 2;            /*!< [19..18] Low-driver mode ready flag */
    } CS_b;
  } ;
} PMU_Type;                                     /*!< Size = 8 (0x8) */



/* =========================================================================================================================== */
/* ================                                            RCU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and clock unit (RCU)
  */

typedef struct {                                /*!< (@ 0x40023800) RCU Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) Control register */
    
    struct {
      __IOM uint32_t IRC16MEN   : 1;            /*!< [0..0] Internal 16MHz RC oscillator Enable */
      __IM  uint32_t IRC16MSTB  : 1;            /*!< [1..1] IRC16M Internal 16MHz RC Oscillator stabilization Flag */
      __IM  uint32_t            : 1;
      __IOM uint32_t IRC16MADJ  : 5;            /*!< [7..3] Internal 16MHz RC Oscillator clock trim adjust value */
      __IM  uint32_t IRC16MCALIB : 8;           /*!< [15..8] Internal 16MHz RC Oscillator calibration value register */
      __IOM uint32_t HXTALEN    : 1;            /*!< [16..16] External High Speed oscillator Enable */
      __IM  uint32_t HXTALSTB   : 1;            /*!< [17..17] External crystal oscillator (HXTAL) clock stabilization flag */
      __IOM uint32_t HXTALBPS   : 1;            /*!< [18..18] External crystal oscillator (HXTAL) clock bypass mode enable */
      __IOM uint32_t CKMEN      : 1;            /*!< [19..19] HXTAL Clock Monitor Enable */
      __IM  uint32_t            : 4;
      __IOM uint32_t PLLEN      : 1;            /*!< [24..24] PLL enable */
      __IM  uint32_t PLLSTB     : 1;            /*!< [25..25] PLL Clock Stabilization Flag */
      __IOM uint32_t PLLI2SEN   : 1;            /*!< [26..26] PLLI2S enable */
      __IM  uint32_t PLLI2SSTB  : 1;            /*!< [27..27] PLLI2S Clock Stabilization Flag */
      __IOM uint32_t PLLSAIEN   : 1;            /*!< [28..28] PLLSAI enable */
      __IM  uint32_t PLLSAISTB  : 1;            /*!< [29..29] PLLSAI Clock Stabilization Flag */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t PLL;                         /*!< (@ 0x00000004) PLL register (RCU_PLL) */
    
    struct {
      __IOM uint32_t PLLPSC     : 6;            /*!< [5..0] The PLL VCO source clock prescaler */
      __IOM uint32_t PLLN       : 9;            /*!< [14..6] The PLL VCO clock multi factor */
      __IM  uint32_t            : 1;
      __IOM uint32_t PLLP       : 2;            /*!< [17..16] The PLLP output frequency division factor from PLL VCO clock */
      __IM  uint32_t            : 4;
      __IOM uint32_t PLLSEL     : 1;            /*!< [22..22] PLL Clock Source Selection */
      __IM  uint32_t            : 1;
      __IOM uint32_t PLLQ       : 4;            /*!< [27..24] The PLL Q output frequency division factor from PLL VCO clock */
    } PLL_b;
  } ;
  
  union {
    __IOM uint32_t CFG0;                        /*!< (@ 0x00000008) Clock configuration register 0 (RCU_CFG0) */
    
    struct {
      __IOM uint32_t SCS        : 2;            /*!< [1..0] System clock switch */
      __IM  uint32_t SCSS       : 2;            /*!< [3..2] System clock switch status */
      __IOM uint32_t AHBPSC     : 4;            /*!< [7..4] AHB prescaler selection */
      __IM  uint32_t            : 2;
      __IOM uint32_t APB1PSC    : 3;            /*!< [12..10] APB1 prescaler selection */
      __IOM uint32_t APB2PSC    : 3;            /*!< [15..13] APB2 prescaler selection */
      __IOM uint32_t RTCDIV     : 5;            /*!< [20..16] RTC clock divider factor */
      __IOM uint32_t CKOUT0SEL  : 2;            /*!< [22..21] CKOUT0 Clock Source Selection */
      __IOM uint32_t I2SSEL     : 1;            /*!< [23..23] I2S Clock Source Selection */
      __IOM uint32_t CKOUT0DIV  : 3;            /*!< [26..24] The CK_OUT0 divider which the CK_OUT0 frequency can be reduced */
      __IOM uint32_t CKOUT1DIV  : 3;            /*!< [29..27] The CK_OUT1 divider which the CK_OUT1 frequency can be reduced */
      __IOM uint32_t CKOUT1SEL  : 2;            /*!< [31..30] CKOUT1 Clock Source Selection */
    } CFG0_b;
  } ;
  
  union {
    __IOM uint32_t INT;                         /*!< (@ 0x0000000C) Clock interrupt register (RCU_INT) */
    
    struct {
      __IM  uint32_t IRC32KSTBIF : 1;           /*!< [0..0] IRC32K stabilization interrupt flag */
      __IM  uint32_t LXTALSTBIF : 1;            /*!< [1..1] LXTAL stabilization interrupt flag */
      __IM  uint32_t IRC16MSTBIF : 1;           /*!< [2..2] IRC16M stabilization interrupt flag */
      __IM  uint32_t HXTALSTBIF : 1;            /*!< [3..3] HXTAL stabilization interrupt flag */
      __IM  uint32_t PLLSTBIF   : 1;            /*!< [4..4] PLL stabilization interrupt flag */
      __IM  uint32_t PLLI2SSTBIF : 1;           /*!< [5..5] PLLI2S stabilization interrupt flag */
      __IM  uint32_t PLLSAISTBIF : 1;           /*!< [6..6] PLLSAI stabilization interrupt flag */
      __IM  uint32_t CKMIF      : 1;            /*!< [7..7] HXTAL Clock Stuck Interrupt Flag */
      __IOM uint32_t IRC32KSTBIE : 1;           /*!< [8..8] IRC32K Stabilization interrupt enable */
      __IOM uint32_t LXTALSTBIE : 1;            /*!< [9..9] LXTAL Stabilization Interrupt Enable */
      __IOM uint32_t IRC16MSTBIE : 1;           /*!< [10..10] IRC16M Stabilization Interrupt Enable */
      __IOM uint32_t HXTALSTBIE : 1;            /*!< [11..11] HXTAL Stabilization Interrupt Enable */
      __IOM uint32_t PLLSTBIE   : 1;            /*!< [12..12] PLL Stabilization Interrupt Enable */
      __IOM uint32_t PLLI2SSTBIE : 1;           /*!< [13..13] PLLI2S Stabilization Interrupt Enable */
      __IOM uint32_t PLLSAISTBIE : 1;           /*!< [14..14] PLLSAI Stabilization Interrupt Enable */
      __IM  uint32_t            : 1;
      __OM  uint32_t IRC32KSTBIC : 1;           /*!< [16..16] IRC32K Stabilization Interrupt Clear */
      __OM  uint32_t LXTALSTBIC : 1;            /*!< [17..17] LXTAL Stabilization Interrupt Clear */
      __OM  uint32_t IRC16MSTBIC : 1;           /*!< [18..18] IRC16M Stabilization Interrupt Clear */
      __OM  uint32_t HXTALSTBIC : 1;            /*!< [19..19] HXTAL Stabilization Interrupt Clear */
      __OM  uint32_t PLLSTBIC   : 1;            /*!< [20..20] PLL stabilization Interrupt Clear */
      __OM  uint32_t PLLI2SSTBIC : 1;           /*!< [21..21] PLLI2S stabilization Interrupt Clear */
      __OM  uint32_t PLLSAISTBIC : 1;           /*!< [22..22] PLLSAI stabilization Interrupt Clear */
      __OM  uint32_t CKMIC      : 1;            /*!< [23..23] HXTAL Clock Stuck Interrupt Clear */
    } INT_b;
  } ;
  
  union {
    __IOM uint32_t AHB1RST;                     /*!< (@ 0x00000010) AHB1 reset register */
    
    struct {
      __IOM uint32_t PARST      : 1;            /*!< [0..0] GPIO port A reset */
      __IOM uint32_t PBRST      : 1;            /*!< [1..1] GPIO port B reset */
      __IOM uint32_t PCRST      : 1;            /*!< [2..2] GPIO port C reset */
      __IOM uint32_t PDRST      : 1;            /*!< [3..3] GPIO port D reset */
      __IOM uint32_t PERST      : 1;            /*!< [4..4] GPIO port E reset */
      __IOM uint32_t PFRST      : 1;            /*!< [5..5] GPIO port F reset */
      __IOM uint32_t PGRST      : 1;            /*!< [6..6] GPIO port G reset */
      __IOM uint32_t PHRST      : 1;            /*!< [7..7] GPIO port H reset */
      __IOM uint32_t PIRST      : 1;            /*!< [8..8] GPIO port I reset */
      __IM  uint32_t            : 3;
      __IOM uint32_t CRCRST     : 1;            /*!< [12..12] CRC reset */
      __IM  uint32_t            : 8;
      __IOM uint32_t DMA0RST    : 1;            /*!< [21..21] DMA0 reset */
      __IOM uint32_t DMA1RST    : 1;            /*!< [22..22] DMA1 reset */
      __IOM uint32_t IPARST     : 1;            /*!< [23..23] IPA reset */
      __IM  uint32_t            : 1;
      __IOM uint32_t ENETRST    : 1;            /*!< [25..25] Ethernet reset */
      __IM  uint32_t            : 3;
      __IOM uint32_t USBHSRST   : 1;            /*!< [29..29] USBHS reset */
    } AHB1RST_b;
  } ;
  
  union {
    __IOM uint32_t AHB2RST;                     /*!< (@ 0x00000014) AHB2 reset register */
    
    struct {
      __IOM uint32_t DCIRST     : 1;            /*!< [0..0] DCI reset */
      __IM  uint32_t            : 5;
      __IOM uint32_t TRNGRST    : 1;            /*!< [6..6] TRNG reset */
      __IOM uint32_t USBFSRST   : 1;            /*!< [7..7] USBFS reset */
    } AHB2RST_b;
  } ;
  
  union {
    __IOM uint32_t AHB3RST;                     /*!< (@ 0x00000018) AHB3 reset register */
    
    struct {
      __IOM uint32_t EXMCRST    : 1;            /*!< [0..0] EXMC reset */
    } AHB3RST_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t APB1RST;                     /*!< (@ 0x00000020) APB1 reset register (RCU_APB1RST) */
    
    struct {
      __IOM uint32_t TIMER1RST  : 1;            /*!< [0..0] TIMER1 timer reset */
      __IOM uint32_t TIMER2RST  : 1;            /*!< [1..1] TIMER2 timer reset */
      __IOM uint32_t TIMER3RST  : 1;            /*!< [2..2] TIMER3 timer reset */
      __IOM uint32_t TIMER4RST  : 1;            /*!< [3..3] TIMER4 timer reset */
      __IOM uint32_t TIMER5RST  : 1;            /*!< [4..4] TIMER5 timer reset */
      __IOM uint32_t TIMER6RST  : 1;            /*!< [5..5] TIMER6 timer reset */
      __IOM uint32_t TIMER11RST : 1;            /*!< [6..6] TIMER11 timer reset */
      __IOM uint32_t TIMER12RST : 1;            /*!< [7..7] TIMER12 timer reset */
      __IOM uint32_t TIMER13RST : 1;            /*!< [8..8] TIMER13 timer reset */
      __IM  uint32_t            : 2;
      __IOM uint32_t WWDGTRST   : 1;            /*!< [11..11] Window watchdog timer reset */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPI1RST    : 1;            /*!< [14..14] SPI1 reset */
      __IOM uint32_t SPI2RST    : 1;            /*!< [15..15] SPI2 reset */
      __IM  uint32_t            : 1;
      __IOM uint32_t USART1RST  : 1;            /*!< [17..17] USART1 reset */
      __IOM uint32_t USART2RST  : 1;            /*!< [18..18] USART2 reset */
      __IOM uint32_t UART3RST   : 1;            /*!< [19..19] UART3 reset */
      __IOM uint32_t UART4RST   : 1;            /*!< [20..20] UART4 reset */
      __IOM uint32_t I2C0RST    : 1;            /*!< [21..21] I2C0 reset */
      __IOM uint32_t I2C1RST    : 1;            /*!< [22..22] I2C1 reset */
      __IOM uint32_t I2C2RST    : 1;            /*!< [23..23] I2C2 reset */
      __IM  uint32_t            : 1;
      __IOM uint32_t CAN0RST    : 1;            /*!< [25..25] CAN0 reset */
      __IOM uint32_t CAN1RST    : 1;            /*!< [26..26] CAN1 reset */
      __IM  uint32_t            : 1;
      __IOM uint32_t PMURST     : 1;            /*!< [28..28] Power control reset */
      __IOM uint32_t DACRST     : 1;            /*!< [29..29] DAC reset */
      __IOM uint32_t UART6RST   : 1;            /*!< [30..30] UART6 reset */
      __IOM uint32_t UART7RST   : 1;            /*!< [31..31] UART7 reset */
    } APB1RST_b;
  } ;
  
  union {
    __IOM uint32_t APB2RST;                     /*!< (@ 0x00000024) APB2 reset register (RCU_APB2RST) */
    
    struct {
      __IOM uint32_t TIMER0RST  : 1;            /*!< [0..0] TIMER0 reset */
      __IOM uint32_t TIMER7RST  : 1;            /*!< [1..1] TIMER7 reset */
      __IM  uint32_t            : 2;
      __IOM uint32_t USART0RST  : 1;            /*!< [4..4] USART0 reset */
      __IOM uint32_t USART5RST  : 1;            /*!< [5..5] USART5 reset */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADCRST     : 1;            /*!< [8..8] ADC reset */
      __IM  uint32_t            : 2;
      __IOM uint32_t SDIORST    : 1;            /*!< [11..11] SDIO reset */
      __IOM uint32_t SPI0RST    : 1;            /*!< [12..12] SPI0 Reset */
      __IOM uint32_t SPI3RST    : 1;            /*!< [13..13] SPI3 Reset */
      __IOM uint32_t SYSCFGRST  : 1;            /*!< [14..14] SYSCFG Reset */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIMER8RST  : 1;            /*!< [16..16] TIMER8 reset */
      __IOM uint32_t TIMER9RST  : 1;            /*!< [17..17] TIMER9 reset */
      __IOM uint32_t TIMER10RST : 1;            /*!< [18..18] TIMER10 reset */
      __IM  uint32_t            : 1;
      __IOM uint32_t SPI4RST    : 1;            /*!< [20..20] SPI4 Reset */
      __IOM uint32_t SPI5RST    : 1;            /*!< [21..21] SPI5 Reset */
      __IM  uint32_t            : 4;
      __IOM uint32_t TLIRST     : 1;            /*!< [26..26] TLI Reset */
    } APB2RST_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t AHB1EN;                      /*!< (@ 0x00000030) AHB1 enable register */
    
    struct {
      __IOM uint32_t PAEN       : 1;            /*!< [0..0] GPIO port A clock enable */
      __IOM uint32_t PBEN       : 1;            /*!< [1..1] GPIO port B clock enable */
      __IOM uint32_t PCEN       : 1;            /*!< [2..2] GPIO port C clock enable */
      __IOM uint32_t PDEN       : 1;            /*!< [3..3] GPIO port D clock enable */
      __IOM uint32_t PEEN       : 1;            /*!< [4..4] GPIO port E clock enable */
      __IOM uint32_t PFEN       : 1;            /*!< [5..5] GPIO port F clock enable */
      __IOM uint32_t PGEN       : 1;            /*!< [6..6] GPIO port G clock enable */
      __IOM uint32_t PHEN       : 1;            /*!< [7..7] GPIO port H clock enable */
      __IOM uint32_t PIEN       : 1;            /*!< [8..8] GPIO port I clock enable */
      __IM  uint32_t            : 3;
      __IOM uint32_t CRCEN      : 1;            /*!< [12..12] CRC clock enable */
      __IM  uint32_t            : 5;
      __IOM uint32_t BKPSRAMEN  : 1;            /*!< [18..18] BKPSRAM clock enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t TCMSRAMEN  : 1;            /*!< [20..20] TCMSRAM clock enable */
      __IOM uint32_t DMA0EN     : 1;            /*!< [21..21] DMA0 clock enable */
      __IOM uint32_t DMA1EN     : 1;            /*!< [22..22] DMA1 clock enable */
      __IOM uint32_t IPAEN      : 1;            /*!< [23..23] IPA clock enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t ENETEN     : 1;            /*!< [25..25] Ethernet clock enable */
      __IOM uint32_t ENETTXEN   : 1;            /*!< [26..26] Ethernet TX clock enable */
      __IOM uint32_t ENETRXEN   : 1;            /*!< [27..27] Ethernet RX clock enable */
      __IOM uint32_t ENETPTPEN  : 1;            /*!< [28..28] Ethernet PTP clock enable */
      __IOM uint32_t USBHSEN    : 1;            /*!< [29..29] USBHS clock enable */
      __IOM uint32_t USBHSULPIEN : 1;           /*!< [30..30] USBHS ULPI clock enable */
    } AHB1EN_b;
  } ;
  
  union {
    __IOM uint32_t AHB2EN;                      /*!< (@ 0x00000034) AHB2 enable register */
    
    struct {
      __IOM uint32_t DCIEN      : 1;            /*!< [0..0] DCI clock enable */
      __IM  uint32_t            : 5;
      __IOM uint32_t TRNGEN     : 1;            /*!< [6..6] TRNG clock enable */
      __IOM uint32_t USBFSEN    : 1;            /*!< [7..7] USBFS clock enable */
    } AHB2EN_b;
  } ;
  
  union {
    __IOM uint32_t AHB3EN;                      /*!< (@ 0x00000038) AHB3 clock enable register */
    
    struct {
      __IOM uint32_t EXMCEN     : 1;            /*!< [0..0] EXMC clock enable */
    } AHB3EN_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t APB1EN;                      /*!< (@ 0x00000040) APB1 clock enable register (RCU_APB1EN) */
    
    struct {
      __IOM uint32_t TIMER1EN   : 1;            /*!< [0..0] TIMER1 timer clock enable */
      __IOM uint32_t TIMER2EN   : 1;            /*!< [1..1] TIMER2 timer clock enable */
      __IOM uint32_t TIMER3EN   : 1;            /*!< [2..2] TIMER3 timer clock enable */
      __IOM uint32_t TIMER4EN   : 1;            /*!< [3..3] TIMER4 timer clock enable */
      __IOM uint32_t TIMER5EN   : 1;            /*!< [4..4] TIMER5 timer clock enable */
      __IOM uint32_t TIMER6EN   : 1;            /*!< [5..5] TIMER6 timer clock enable */
      __IOM uint32_t TIMER11EN  : 1;            /*!< [6..6] TIMER11 timer clock enable */
      __IOM uint32_t TIMER12EN  : 1;            /*!< [7..7] TIMER12 timer clock enable */
      __IOM uint32_t TIMER13EN  : 1;            /*!< [8..8] TIMER13 timer clock enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t WWDGTEN    : 1;            /*!< [11..11] Window watchdog timer clock enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPI1EN     : 1;            /*!< [14..14] SPI1 clock enable */
      __IOM uint32_t SPI2EN     : 1;            /*!< [15..15] SPI2 clock enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t USART1EN   : 1;            /*!< [17..17] USART1 clock enable */
      __IOM uint32_t USART2EN   : 1;            /*!< [18..18] USART2 clock enable */
      __IOM uint32_t UART3EN    : 1;            /*!< [19..19] UART3 clock enable */
      __IOM uint32_t UART4EN    : 1;            /*!< [20..20] UART4 clock enable */
      __IOM uint32_t I2C0EN     : 1;            /*!< [21..21] I2C0 clock enable */
      __IOM uint32_t I2C1EN     : 1;            /*!< [22..22] I2C1 clock enable */
      __IOM uint32_t I2C2EN     : 1;            /*!< [23..23] I2C2 clock enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CAN0EN     : 1;            /*!< [25..25] CAN0 clock enable */
      __IOM uint32_t CAN1EN     : 1;            /*!< [26..26] CAN1 clock enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t PMUEN      : 1;            /*!< [28..28] Power control clock enable */
      __IOM uint32_t DACEN      : 1;            /*!< [29..29] DAC clock enable */
      __IOM uint32_t UART6EN    : 1;            /*!< [30..30] UART6 clock enable */
      __IOM uint32_t UART7EN    : 1;            /*!< [31..31] UART7 clock enable */
    } APB1EN_b;
  } ;
  
  union {
    __IOM uint32_t APB2EN;                      /*!< (@ 0x00000044) APB2 clock enable register (RCU_APB2EN) */
    
    struct {
      __IOM uint32_t TIMER0EN   : 1;            /*!< [0..0] TIMER0 clock enable */
      __IOM uint32_t TIMER7EN   : 1;            /*!< [1..1] TIMER7 clock enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t USART0EN   : 1;            /*!< [4..4] USART0 clock enable */
      __IOM uint32_t USART5EN   : 1;            /*!< [5..5] USART5 clock enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADC0EN     : 1;            /*!< [8..8] ADC0 clock enable */
      __IOM uint32_t ADC1EN     : 1;            /*!< [9..9] ADC1 clock enable */
      __IOM uint32_t ADC2EN     : 1;            /*!< [10..10] ADC2 clock enable */
      __IOM uint32_t SDIOEN     : 1;            /*!< [11..11] SDIO clock enable */
      __IOM uint32_t SPI0EN     : 1;            /*!< [12..12] SPI0 clock enable */
      __IOM uint32_t SPI3EN     : 1;            /*!< [13..13] SPI3 clock enable */
      __IOM uint32_t SYSCFGEN   : 1;            /*!< [14..14] SYSCFG clock enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIMER8EN   : 1;            /*!< [16..16] TIMER8 clock enable */
      __IOM uint32_t TIMER9EN   : 1;            /*!< [17..17] TIMER9 clock enable */
      __IOM uint32_t TIMER10EN  : 1;            /*!< [18..18] TIMER10 clock enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t SPI4EN     : 1;            /*!< [20..20] SPI4 clock enable */
      __IOM uint32_t SPI5EN     : 1;            /*!< [21..21] SPI5 clock enable */
      __IM  uint32_t            : 4;
      __IOM uint32_t TLIEN      : 1;            /*!< [26..26] TLI clock enable */
    } APB2EN_b;
  } ;
  __IM  uint32_t  RESERVED3[2];
  
  union {
    __IOM uint32_t AHB1SPEN;                    /*!< (@ 0x00000050) AHB1 sleep mode enable register */
    
    struct {
      __IOM uint32_t PASPEN     : 1;            /*!< [0..0] GPIO port A clock enable when sleep mode */
      __IOM uint32_t PBSPEN     : 1;            /*!< [1..1] GPIO port B clock enable when sleep mode */
      __IOM uint32_t PCSPEN     : 1;            /*!< [2..2] GPIO port C clock enable when sleep mode */
      __IOM uint32_t PDSPEN     : 1;            /*!< [3..3] GPIO port D clock enable when sleep mode */
      __IOM uint32_t PESPEN     : 1;            /*!< [4..4] GPIO port E clock enable when sleep mode */
      __IOM uint32_t PFSPEN     : 1;            /*!< [5..5] GPIO port F clock enable when sleep mode */
      __IOM uint32_t PGSPEN     : 1;            /*!< [6..6] GPIO port G clock enable when sleep mode */
      __IOM uint32_t PHSPEN     : 1;            /*!< [7..7] GPIO port H clock enable when sleep mode */
      __IOM uint32_t PISPEN     : 1;            /*!< [8..8] GPIO port I clock enable when sleep mode */
      __IM  uint32_t            : 3;
      __IOM uint32_t CRCSPEN    : 1;            /*!< [12..12] CRC clock enable when sleep mode */
      __IM  uint32_t            : 2;
      __IOM uint32_t FMCSPEN    : 1;            /*!< [15..15] FMC clock enable when sleep mode */
      __IOM uint32_t SRAM0SPEN  : 1;            /*!< [16..16] SRAM0 clock enable when sleep mode */
      __IOM uint32_t SRAM1SPEN  : 1;            /*!< [17..17] SRAM1 clock enable when sleep mode */
      __IOM uint32_t BKPSRAMSPEN : 1;           /*!< [18..18] BKPSRAM clock enable when sleep mode */
      __IOM uint32_t SRAM2SPEN  : 1;            /*!< [19..19] SRAM2 clock enable when sleep mode */
      __IM  uint32_t            : 1;
      __IOM uint32_t DMA0SPEN   : 1;            /*!< [21..21] DMA0 clock enable when sleep mode */
      __IOM uint32_t DMA1SPEN   : 1;            /*!< [22..22] DMA1 clock enable when sleep mode */
      __IOM uint32_t IPASPEN    : 1;            /*!< [23..23] IPA clock enable when sleep mode */
      __IM  uint32_t            : 1;
      __IOM uint32_t ENETSPEN   : 1;            /*!< [25..25] Ethernet clock enable when sleep mode */
      __IOM uint32_t ENETTXSPEN : 1;            /*!< [26..26] Ethernet TX clock enable when sleep mode */
      __IOM uint32_t ENETRXSPEN : 1;            /*!< [27..27] Ethernet RX clock enable when sleep mode */
      __IOM uint32_t ENETPTPSPEN : 1;           /*!< [28..28] Ethernet PTP clock enable when sleep mode */
      __IOM uint32_t USBHSSPEN  : 1;            /*!< [29..29] USBHS clock enable when sleep mode */
      __IOM uint32_t USBHSULPISPEN : 1;         /*!< [30..30] USBHS ULPI clock enable when sleep mode */
    } AHB1SPEN_b;
  } ;
  
  union {
    __IOM uint32_t AHB2SPEN;                    /*!< (@ 0x00000054) AHB2 sleep mode enable register */
    
    struct {
      __IOM uint32_t DCISPEN    : 1;            /*!< [0..0] DCI clock enable when sleep mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t TRNGSPEN   : 1;            /*!< [6..6] TRNG clock enable when sleep mode */
      __IOM uint32_t USBFSSPEN  : 1;            /*!< [7..7] USBFS clock enable when sleep mode */
    } AHB2SPEN_b;
  } ;
  
  union {
    __IOM uint32_t AHB3SPEN;                    /*!< (@ 0x00000058) AHB3 Sleep mode enable register */
    
    struct {
      __IOM uint32_t EXMCSPEN   : 1;            /*!< [0..0] EXMC clock enable when sleep mode */
    } AHB3SPEN_b;
  } ;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t APB1SPEN;                    /*!< (@ 0x00000060) APB1 sleep mode clock enable register (RCU_APB1EN) */
    
    struct {
      __IOM uint32_t TIMER1SPEN : 1;            /*!< [0..0] TIMER1 timer clock enable when sleep mode */
      __IOM uint32_t TIMER2SPEN : 1;            /*!< [1..1] TIMER2 timer clock enable when sleep mode */
      __IOM uint32_t TIMER3SPEN : 1;            /*!< [2..2] TIMER3 timer clock enable when sleep mode */
      __IOM uint32_t TIMER4SPEN : 1;            /*!< [3..3] TIMER4 timer clock enable when sleep mode */
      __IOM uint32_t TIMER5SPEN : 1;            /*!< [4..4] TIMER5 timer clock enable when sleep mode */
      __IOM uint32_t TIMER6SPEN : 1;            /*!< [5..5] TIMER6 timer clock enable when sleep mode */
      __IOM uint32_t TIMER11SPEN : 1;           /*!< [6..6] TIMER11 timer clock enable when sleep mode */
      __IOM uint32_t TIMER12SPEN : 1;           /*!< [7..7] TIMER12 timer clock enable when sleep mode */
      __IOM uint32_t TIMER13SPEN : 1;           /*!< [8..8] TIMER13 timer clock enable when sleep mode */
      __IM  uint32_t            : 2;
      __IOM uint32_t WWDGTSPEN  : 1;            /*!< [11..11] Window watchdog timer clock enable when sleep mode */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPI1SPEN   : 1;            /*!< [14..14] SPI1 clock enable when sleep mode */
      __IOM uint32_t SPI2SPEN   : 1;            /*!< [15..15] SPI2 clock enable when sleep mode */
      __IM  uint32_t            : 1;
      __IOM uint32_t USART1SPEN : 1;            /*!< [17..17] USART1 clock enable when sleep mode */
      __IOM uint32_t USART2SPEN : 1;            /*!< [18..18] USART2 clock enable when sleep mode */
      __IOM uint32_t UART3SPEN  : 1;            /*!< [19..19] UART3 clock enable when sleep mode */
      __IOM uint32_t UART4SPEN  : 1;            /*!< [20..20] UART4 clock enable when sleep mode */
      __IOM uint32_t I2C0SPEN   : 1;            /*!< [21..21] I2C0 clock enable when sleep mode */
      __IOM uint32_t I2C1SPEN   : 1;            /*!< [22..22] I2C1 clock enable when sleep mode */
      __IOM uint32_t I2C2SPEN   : 1;            /*!< [23..23] I2C2 clock enable when sleep mode */
      __IM  uint32_t            : 1;
      __IOM uint32_t CAN0SPEN   : 1;            /*!< [25..25] CAN0 clock enable when sleep mode */
      __IOM uint32_t CAN1SPEN   : 1;            /*!< [26..26] CAN1 clock enable when sleep mode */
      __IM  uint32_t            : 1;
      __IOM uint32_t PMUSPEN    : 1;            /*!< [28..28] Power control clock enable when sleep mode */
      __IOM uint32_t DACSPEN    : 1;            /*!< [29..29] DAC clock enable when sleep mode */
      __IOM uint32_t UART6SPEN  : 1;            /*!< [30..30] UART6 clock enable when sleep mode */
      __IOM uint32_t UART7SPEN  : 1;            /*!< [31..31] UART7 clock enable when sleep mode */
    } APB1SPEN_b;
  } ;
  
  union {
    __IOM uint32_t APB2SPEN;                    /*!< (@ 0x00000064) APB2 sleep mode enable register (RCU_APB2SPEN) */
    
    struct {
      __IOM uint32_t TIMER0SPEN : 1;            /*!< [0..0] TIMER0 clock enable when sleep mode */
      __IOM uint32_t TIMER7SPEN : 1;            /*!< [1..1] TIMER7 clock enable when sleep mode */
      __IM  uint32_t            : 2;
      __IOM uint32_t USART0SPEN : 1;            /*!< [4..4] USART0 clock enable when sleep mode */
      __IOM uint32_t USART5SPEN : 1;            /*!< [5..5] USART5 clock enable when sleep mode */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADC0SPEN   : 1;            /*!< [8..8] ADC0 clock enable when sleep mode */
      __IOM uint32_t ADC1SPEN   : 1;            /*!< [9..9] ADC1 clock enable when sleep mode */
      __IOM uint32_t ADC2SPEN   : 1;            /*!< [10..10] ADC2 clock enable when sleep mode */
      __IOM uint32_t SDIOSPEN   : 1;            /*!< [11..11] SDIO clock enable when sleep mode */
      __IOM uint32_t SPI0SPEN   : 1;            /*!< [12..12] SPI0 clock enable when sleep mode */
      __IOM uint32_t SPI3SPEN   : 1;            /*!< [13..13] SPI3 clock enable when sleep mode */
      __IOM uint32_t SYSCFGSPEN : 1;            /*!< [14..14] SYSCFG clock enable when sleep mode */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIMER8SPEN : 1;            /*!< [16..16] TIMER8 clock enable when sleep mode */
      __IOM uint32_t TIMER9SPEN : 1;            /*!< [17..17] TIMER9 clock enable when sleep mode */
      __IOM uint32_t TIMER10SPEN : 1;           /*!< [18..18] TIMER10 clock enable when sleep mode */
      __IM  uint32_t            : 1;
      __IOM uint32_t SPI4SPEN   : 1;            /*!< [20..20] SPI4 clock enable when sleep mode */
      __IOM uint32_t SPI5SPEN   : 1;            /*!< [21..21] SPI5 clock enable when sleep mode */
      __IM  uint32_t            : 4;
      __IOM uint32_t TLISPEN    : 1;            /*!< [26..26] TLI clock enable when sleep mode */
    } APB2SPEN_b;
  } ;
  __IM  uint32_t  RESERVED5[2];
  
  union {
    __IOM uint32_t BDCTL;                       /*!< (@ 0x00000070) Backup domain control register (RCU_BDCTL) */
    
    struct {
      __IOM uint32_t LXTALEN    : 1;            /*!< [0..0] LXTAL enable */
      __IM  uint32_t LXTALSTB   : 1;            /*!< [1..1] External low-speed oscillator stabilization */
      __IOM uint32_t LXTALBPS   : 1;            /*!< [2..2] LXTAL bypass mode enable */
      __IOM uint32_t LXTALDRI   : 2;            /*!< [4..3] LXTAL drive capability */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTCSRC     : 2;            /*!< [9..8] RTC clock entry selection */
      __IM  uint32_t            : 5;
      __IOM uint32_t RTCEN      : 1;            /*!< [15..15] RTC clock enable */
      __IOM uint32_t BKPRST     : 1;            /*!< [16..16] Backup domain reset */
    } BDCTL_b;
  } ;
  
  union {
    __IOM uint32_t RSTSCK;                      /*!< (@ 0x00000074) Reset source /clock register (RCU_RSTSCK) */
    
    struct {
      __IOM uint32_t IRC32KEN   : 1;            /*!< [0..0] IRC32K enable */
      __IM  uint32_t IRC32KSTB  : 1;            /*!< [1..1] IRC32K stabilization */
      __IM  uint32_t            : 22;
      __IOM uint32_t RSTFC      : 1;            /*!< [24..24] Reset flag clear */
      __IM  uint32_t BORRSTF    : 1;            /*!< [25..25] BOR reset flag */
      __IM  uint32_t EPRSTF     : 1;            /*!< [26..26] External PIN reset flag */
      __IM  uint32_t PORRSTF    : 1;            /*!< [27..27] Power reset flag */
      __IM  uint32_t SWRSTF     : 1;            /*!< [28..28] Software reset flag */
      __IM  uint32_t FWDGTRSTF  : 1;            /*!< [29..29] Free Watchdog timer reset flag */
      __IM  uint32_t WWDGTRSTF  : 1;            /*!< [30..30] Window watchdog timer reset flag */
      __IM  uint32_t LPRSTF     : 1;            /*!< [31..31] Low-power reset flag */
    } RSTSCK_b;
  } ;
  __IM  uint32_t  RESERVED6[2];
  
  union {
    __IOM uint32_t PLLSSCTL;                    /*!< (@ 0x00000080) PLL clock spread spectrum control register (RCU_PLLSSCTL) */
    
    struct {
      __IOM uint32_t MODCNT     : 13;           /*!< [12..0] configure PLL spread spectrum modulation profile amplitude andfrequency */
      __IOM uint32_t MODSTEP    : 15;           /*!< [27..13] configure PLL spread spectrum modulation profile amplitude andfrequency */
      __IM  uint32_t            : 2;
      __IOM uint32_t SS_TYPE    : 1;            /*!< [30..30] PLL spread spectrum modulation type select */
      __IOM uint32_t SSCGON     : 1;            /*!< [31..31] PLL spread spectrum modulation enable */
    } PLLSSCTL_b;
  } ;
  
  union {
    __IOM uint32_t PLLI2S;                      /*!< (@ 0x00000084) PLLI2S register (RCU_PLLI2S) */
    
    struct {
      __IOM uint32_t PLLI2SPSC  : 6;            /*!< [5..0] The PLLI2S VCO source clock prescaler */
      __IOM uint32_t PLLI2SN    : 9;            /*!< [14..6] The PLLI2S VCO clock multi factor */
      __IM  uint32_t            : 9;
      __IOM uint32_t PLLI2SQ    : 4;            /*!< [27..24] The PLLI2S Q output frequency division factor from PLLI2S VCO clock */
      __IOM uint32_t PLLI2SR    : 3;            /*!< [30..28] The PLLI2S R output frequency division factor from PLLI2S VCO clock */
    } PLLI2S_b;
  } ;
  
  union {
    __IOM uint32_t PLLSAI;                      /*!< (@ 0x00000088) PLLSAI register (RCU_PLLSAI) */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t PLLSAIN    : 9;            /*!< [14..6] The PLLSAI VCO clock multi factor */
      __IM  uint32_t            : 1;
      __IOM uint32_t PLLSAIP    : 2;            /*!< [17..16] The PLLSAI P output frequency division factor from PLLSAI VCO clock */
      __IM  uint32_t            : 6;
      __IOM uint32_t PLLSAIQ    : 4;            /*!< [27..24] The PLLI2S Q output frequency division factor from PLLI2S VCO clock */
      __IOM uint32_t PLLSAIR    : 3;            /*!< [30..28] The PLLSAI R output frequency division factor from PLLSAI VCO clock */
    } PLLSAI_b;
  } ;
  
  union {
    __IOM uint32_t CFG1;                        /*!< (@ 0x0000008C) Clock Configuration register 1 */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t PLLSAIRDIV : 2;            /*!< [17..16] The divider factor from PLLSAIR clock */
      __IM  uint32_t            : 6;
      __IOM uint32_t TIMERSEL   : 1;            /*!< [24..24] TIMER clock selection */
    } CFG1_b;
  } ;
  __IM  uint32_t  RESERVED7[12];
  
  union {
    __IOM uint32_t ADDCTL;                      /*!< (@ 0x000000C0) Additional clock control register */
    
    struct {
      __IOM uint32_t CK48MSEL   : 1;            /*!< [0..0] 48MHz clock selection */
      __IOM uint32_t PLL48MSEL  : 1;            /*!< [1..1] PLL48M clock selection */
      __IM  uint32_t            : 14;
      __IOM uint32_t IRC48MEN   : 1;            /*!< [16..16] Internal 48MHz RC oscillator enable */
      __IM  uint32_t IRC48MSTB  : 1;            /*!< [17..17] Internal 48MHz RC oscillator clock stabilization Flag */
      __IM  uint32_t            : 6;
      __IM  uint32_t IRC48MCAL  : 8;            /*!< [31..24] Internal 48MHz RC oscillator calibration value register */
    } ADDCTL_b;
  } ;
  __IM  uint32_t  RESERVED8[2];
  
  union {
    __IOM uint32_t ADDINT;                      /*!< (@ 0x000000CC) Additional clock interrupt register */
    
    struct {
      __IM  uint32_t            : 6;
      __IM  uint32_t IRC48MSTBIF : 1;           /*!< [6..6] IRC48M stabilization interrupt flag */
      __IM  uint32_t            : 7;
      __IOM uint32_t IRC48MSTBIE : 1;           /*!< [14..14] Internal 48 MHz RC oscillator Stabilization Interrupt Enable */
      __IM  uint32_t            : 7;
      __OM  uint32_t IRC48MSTBIC : 1;           /*!< [22..22] Internal 48 MHz RC oscillator Stabilization Interrupt Clear */
    } ADDINT_b;
  } ;
  __IM  uint32_t  RESERVED9[4];
  
  union {
    __IOM uint32_t ADDAPB1RST;                  /*!< (@ 0x000000E0) APB1 additional reset register */
    
    struct {
      __IM  uint32_t            : 27;
      __IOM uint32_t CTCRST     : 1;            /*!< [27..27] CTC reset */
      __IM  uint32_t            : 3;
      __IOM uint32_t IREFRST    : 1;            /*!< [31..31] IREF reset */
    } ADDAPB1RST_b;
  } ;
  
  union {
    __IOM uint32_t ADDAPB1EN;                   /*!< (@ 0x000000E4) APB1 additional enable register */
    
    struct {
      __IM  uint32_t            : 27;
      __IOM uint32_t CTCEN      : 1;            /*!< [27..27] CTC clock enable */
      __IM  uint32_t            : 3;
      __IOM uint32_t IREFEN     : 1;            /*!< [31..31] IREF interface clock enable */
    } ADDAPB1EN_b;
  } ;
  
  union {
    __IOM uint32_t ADDAPB1SPEN;                 /*!< (@ 0x000000E8) APB1 additional sleep mode enable register */
    
    struct {
      __IM  uint32_t            : 27;
      __IOM uint32_t CTCSPEN    : 1;            /*!< [27..27] CTC enable when sleep mode */
      __IM  uint32_t            : 3;
      __IOM uint32_t IREFSPEN   : 1;            /*!< [31..31] IREF enable when sleep mode */
    } ADDAPB1SPEN_b;
  } ;
  __IM  uint32_t  RESERVED10[5];
  
  union {
    __IOM uint32_t VKEY;                        /*!< (@ 0x00000100) Voltage key register */
    
    struct {
      __OM  uint32_t KEY        : 32;           /*!< [31..0] The key of RCU_DSV registe */
    } VKEY_b;
  } ;
  __IM  uint32_t  RESERVED11[12];
  
  union {
    __IOM uint32_t DSV;                         /*!< (@ 0x00000134) Deep sleep mode Voltage register */
    
    struct {
      __IOM uint32_t DSLPVS     : 3;            /*!< [2..0] Deep-sleep mode voltage select */
    } DSV_b;
  } ;
} RCU_Type;                                     /*!< Size = 312 (0x138) */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real-time clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40002800) RTC Structure */
  
  union {
    __IOM uint32_t TIME;                        /*!< (@ 0x00000000) time register */
    
    struct {
      __IOM uint32_t SCU        : 4;            /*!< [3..0] Second units in BCD format */
      __IOM uint32_t SCT        : 3;            /*!< [6..4] Second tens in BCD format */
      __IM  uint32_t            : 1;
      __IOM uint32_t MNU        : 4;            /*!< [11..8] Minute units in BCD format */
      __IOM uint32_t MNT        : 3;            /*!< [14..12] Minute tens in BCD format */
      __IM  uint32_t            : 1;
      __IOM uint32_t HRU        : 4;            /*!< [19..16] Hour units in BCD format */
      __IOM uint32_t HRT        : 2;            /*!< [21..20] Hour tens in BCD format */
      __IOM uint32_t PM         : 1;            /*!< [22..22] AM/PM notation */
    } TIME_b;
  } ;
  
  union {
    __IOM uint32_t DATE;                        /*!< (@ 0x00000004) date register */
    
    struct {
      __IOM uint32_t DAYU       : 4;            /*!< [3..0] Date units in BCD code */
      __IOM uint32_t DAYT       : 2;            /*!< [5..4] Date tens in BCD code */
      __IM  uint32_t            : 2;
      __IOM uint32_t MONU       : 4;            /*!< [11..8] Month units in BCD code */
      __IOM uint32_t MONT       : 1;            /*!< [12..12] Month tens in BCD code */
      __IOM uint32_t DOW        : 3;            /*!< [15..13] Days of the week */
      __IOM uint32_t YRU        : 4;            /*!< [19..16] Year units in BCD code */
      __IOM uint32_t YRT        : 4;            /*!< [23..20] Year tens in BCD code */
    } DATE_b;
  } ;
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000008) control register */
    
    struct {
      __IOM uint32_t WTCS       : 3;            /*!< [2..0] Auto-wakeup timer clock selection */
      __IOM uint32_t TSEG       : 1;            /*!< [3..3] Valid event edge of time-stamp */
      __IOM uint32_t REFEN      : 1;            /*!< [4..4] Reference clock detection function enable enable (50 or 60 Hz) */
      __IOM uint32_t BPSHAD     : 1;            /*!< [5..5] Shadow registers bypass control */
      __IOM uint32_t CS         : 1;            /*!< [6..6] Clock System */
      __IOM uint32_t CCEN       : 1;            /*!< [7..7] Coarse calibration function enable */
      __IOM uint32_t ALRM0EN    : 1;            /*!< [8..8] Alarm-0 function enable */
      __IOM uint32_t ALRM1EN    : 1;            /*!< [9..9] Alarm-1 function enable */
      __IOM uint32_t WTEN       : 1;            /*!< [10..10] Auto-wakeup timer function enable */
      __IOM uint32_t TSEN       : 1;            /*!< [11..11] Time-stamp function enable */
      __IOM uint32_t ALRM0IE    : 1;            /*!< [12..12] RTC alarm-0 interrupt enable */
      __IOM uint32_t ALRM1IE    : 1;            /*!< [13..13] RTC alarm-1 interrupt enable */
      __IOM uint32_t WTIE       : 1;            /*!< [14..14] Auto-wakeup timer interrupt enable */
      __IOM uint32_t TSIE       : 1;            /*!< [15..15] Time-stamp interrupt enable */
      __OM  uint32_t A1H        : 1;            /*!< [16..16] Add 1 hour (summer time change) */
      __OM  uint32_t S1H        : 1;            /*!< [17..17] Subtract 1 hour (winter time change) */
      __IOM uint32_t DSM        : 1;            /*!< [18..18] Daylight saving mark */
      __IOM uint32_t COS        : 1;            /*!< [19..19] Calibration output selection */
      __IOM uint32_t OPOL       : 1;            /*!< [20..20] Output polarity */
      __IOM uint32_t OS         : 2;            /*!< [22..21] Output selection */
      __IOM uint32_t COEN       : 1;            /*!< [23..23] Calibration output enable */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x0000000C) status register */
    
    struct {
      __IM  uint32_t ALRM0WF    : 1;            /*!< [0..0] Alarm 0 configuration can be write flag */
      __IM  uint32_t ALRM1WF    : 1;            /*!< [1..1] Alarm 1 configuration can be write flag */
      __IM  uint32_t WTWF       : 1;            /*!< [2..2] Wakeup timer write enable flag */
      __IOM uint32_t SOPF       : 1;            /*!< [3..3] Shift function operation pending flag */
      __IM  uint32_t YCM        : 1;            /*!< [4..4] Year configuration mark */
      __IOM uint32_t RSYNF      : 1;            /*!< [5..5] Register synchronization flag */
      __IM  uint32_t INITF      : 1;            /*!< [6..6] Initialization state flag */
      __IOM uint32_t INITM      : 1;            /*!< [7..7] Enter initialization mode */
      __IOM uint32_t ALRM0F     : 1;            /*!< [8..8] Alarm-0 occurs flag */
      __IOM uint32_t ALRM1F     : 1;            /*!< [9..9] Alarm-1 occurs flag */
      __IOM uint32_t WTF        : 1;            /*!< [10..10] Wakeup timer flag */
      __IOM uint32_t TSF        : 1;            /*!< [11..11] Time-stamp flag */
      __IOM uint32_t TSOVRF     : 1;            /*!< [12..12] Time-stamp overflow flag */
      __IOM uint32_t TP0F       : 1;            /*!< [13..13] RTC_TAMP0 detected flag */
      __IOM uint32_t TP1F       : 1;            /*!< [14..14] RTC_TAMP1 detected flag */
      __IM  uint32_t            : 1;
      __IM  uint32_t SCPF       : 1;            /*!< [16..16] Smooth calibration pending flag */
    } STAT_b;
  } ;
  
  union {
    __IOM uint32_t PSC;                         /*!< (@ 0x00000010) prescaler register */
    
    struct {
      __IOM uint32_t FACTOR_S   : 15;           /*!< [14..0] Synchronous prescaler factor */
      __IM  uint32_t            : 1;
      __IOM uint32_t FACTOR_A   : 7;            /*!< [22..16] Asynchronous prescaler factor */
    } PSC_b;
  } ;
  
  union {
    __IOM uint32_t WUT;                         /*!< (@ 0x00000014) Wakeup timer register */
    
    struct {
      __IOM uint32_t WTRV       : 16;           /*!< [15..0] Auto-wakeup timer reloads value */
    } WUT_b;
  } ;
  
  union {
    __IOM uint32_t COSC;                        /*!< (@ 0x00000018) Coarse calibration register */
    
    struct {
      __IOM uint32_t COSS       : 5;            /*!< [4..0] Coarse Calibration step */
      __IM  uint32_t            : 2;
      __IOM uint32_t COSD       : 1;            /*!< [7..7] Coarse Calibration direction */
    } COSC_b;
  } ;
  
  union {
    __IOM uint32_t ALRM0TD;                     /*!< (@ 0x0000001C) Alarm 0 time and date register */
    
    struct {
      __IOM uint32_t SCU        : 4;            /*!< [3..0] Second units in BCD code. */
      __IOM uint32_t SCT        : 3;            /*!< [6..4] Second tens in BCD code. */
      __IOM uint32_t MSKS       : 1;            /*!< [7..7] Alarm seconds mask bit */
      __IOM uint32_t MNU        : 4;            /*!< [11..8] Minute units in BCD code. */
      __IOM uint32_t MNT        : 3;            /*!< [14..12] Minute tens in BCD code. */
      __IOM uint32_t MSKM       : 1;            /*!< [15..15] Alarm minutes mask bit */
      __IOM uint32_t HRU        : 4;            /*!< [19..16] Hour units in BCD code. */
      __IOM uint32_t HRT        : 2;            /*!< [21..20] Hour tens in BCD code. */
      __IOM uint32_t PM         : 1;            /*!< [22..22] AM/PM flag */
      __IOM uint32_t MSKH       : 1;            /*!< [23..23] Alarm hours mask bit */
      __IOM uint32_t DAYU       : 4;            /*!< [27..24] Date units or week day in BCD code. */
      __IOM uint32_t DAYT       : 2;            /*!< [29..28] Date tens in BCD code. */
      __IOM uint32_t DOWS       : 1;            /*!< [30..30] Day of the week selected */
      __IOM uint32_t MSKD       : 1;            /*!< [31..31] Alarm date mask bit */
    } ALRM0TD_b;
  } ;
  
  union {
    __IOM uint32_t ALRM1TD;                     /*!< (@ 0x00000020) Alarm 1 time and date register */
    
    struct {
      __IOM uint32_t SCU        : 4;            /*!< [3..0] Second units in BCD code. */
      __IOM uint32_t SCT        : 3;            /*!< [6..4] Second tens in BCD code. */
      __IOM uint32_t MSKS       : 1;            /*!< [7..7] Alarm seconds mask bit */
      __IOM uint32_t MNU        : 4;            /*!< [11..8] Minute units in BCD code. */
      __IOM uint32_t MNT        : 3;            /*!< [14..12] Minute tens in BCD code. */
      __IOM uint32_t MSKM       : 1;            /*!< [15..15] Alarm minutes mask bit */
      __IOM uint32_t HRU        : 4;            /*!< [19..16] Hour units in BCD code. */
      __IOM uint32_t HRT        : 2;            /*!< [21..20] Hour tens in BCD code. */
      __IOM uint32_t PM         : 1;            /*!< [22..22] AM/PM flag */
      __IOM uint32_t MSKH       : 1;            /*!< [23..23] Alarm hours mask bit */
      __IOM uint32_t DAYU       : 4;            /*!< [27..24] Date units or week day in BCD code. */
      __IOM uint32_t DAYT       : 2;            /*!< [29..28] Date tens in BCD code. */
      __IOM uint32_t DOWS       : 1;            /*!< [30..30] Day of the week selected */
      __IOM uint32_t MSKD       : 1;            /*!< [31..31] Alarm date mask bit */
    } ALRM1TD_b;
  } ;
  
  union {
    __OM  uint32_t WPK;                         /*!< (@ 0x00000024) write protection register */
    
    struct {
      __OM  uint32_t WPK        : 8;            /*!< [7..0] Write protection key */
    } WPK_b;
  } ;
  
  union {
    __IM  uint32_t SS;                          /*!< (@ 0x00000028) sub second register */
    
    struct {
      __IM  uint32_t SSC        : 16;           /*!< [15..0] Sub second value */
    } SS_b;
  } ;
  
  union {
    __OM  uint32_t SHIFTCTL;                    /*!< (@ 0x0000002C) shift function control register */
    
    struct {
      __OM  uint32_t SFS        : 15;           /*!< [14..0] Subtract a fraction of a second */
      __IM  uint32_t            : 16;
      __OM  uint32_t A1S        : 1;            /*!< [31..31] One second add */
    } SHIFTCTL_b;
  } ;
  
  union {
    __IM  uint32_t TTS;                         /*!< (@ 0x00000030) Time of time stamp register */
    
    struct {
      __IM  uint32_t SCU        : 4;            /*!< [3..0] Second units in BCD code. */
      __IM  uint32_t SCT        : 3;            /*!< [6..4] Second tens in BCD code. */
      __IM  uint32_t            : 1;
      __IM  uint32_t MNU        : 4;            /*!< [11..8] Minute units in BCD code. */
      __IM  uint32_t MNT        : 3;            /*!< [14..12] Minute tens in BCD code. */
      __IM  uint32_t            : 1;
      __IM  uint32_t HRU        : 4;            /*!< [19..16] Hour units in BCD code. */
      __IM  uint32_t HRT        : 2;            /*!< [21..20] Hour tens in BCD code. */
      __IM  uint32_t PM         : 1;            /*!< [22..22] AM/PM mark */
    } TTS_b;
  } ;
  
  union {
    __IM  uint32_t DTS;                         /*!< (@ 0x00000034) Date of time stamp register */
    
    struct {
      __IM  uint32_t DAYU       : 4;            /*!< [3..0] Date units in BCD format */
      __IM  uint32_t DAYT       : 2;            /*!< [5..4] Date tens in BCD format */
      __IM  uint32_t            : 2;
      __IM  uint32_t MONU       : 4;            /*!< [11..8] Month units in BCD format */
      __IM  uint32_t MONT       : 1;            /*!< [12..12] Month tens in BCD format */
      __IM  uint32_t DOW        : 3;            /*!< [15..13] Week day units */
    } DTS_b;
  } ;
  
  union {
    __IM  uint32_t SSTS;                        /*!< (@ 0x00000038) Sub second of time stamp register */
    
    struct {
      __IM  uint32_t SSC        : 16;           /*!< [15..0] Sub second value */
    } SSTS_b;
  } ;
  
  union {
    __IOM uint32_t HRFC;                        /*!< (@ 0x0000003C) calibration register */
    
    struct {
      __IOM uint32_t CMSK       : 9;            /*!< [8..0] Calibration mask number */
      __IM  uint32_t            : 4;
      __IOM uint32_t CWND16     : 1;            /*!< [13..13] Frequency compensation window 16 second selected */
      __IOM uint32_t CWND8      : 1;            /*!< [14..14] Frequency compensation window 8 second selected */
      __IOM uint32_t FREQI      : 1;            /*!< [15..15] Increase RTC frequency by 488.5PPM */
    } HRFC_b;
  } ;
  
  union {
    __IOM uint32_t TAMP;                        /*!< (@ 0x00000040) tamper and alternate function configuration register */
    
    struct {
      __IOM uint32_t TP0EN      : 1;            /*!< [0..0] Tamper 0 detection enable */
      __IOM uint32_t TP0EG      : 1;            /*!< [1..1] Tamper 0 event trigger edge */
      __IOM uint32_t TPIE       : 1;            /*!< [2..2] Tamper detection interrupt enable */
      __IOM uint32_t TP1EN      : 1;            /*!< [3..3] Tamper 1 detection enable */
      __IOM uint32_t TP1EG      : 1;            /*!< [4..4] Tamper 1 event trigger edge */
      __IM  uint32_t            : 2;
      __IOM uint32_t TPTS       : 1;            /*!< [7..7] Make tamper function used for timestamp function */
      __IOM uint32_t FREQ       : 3;            /*!< [10..8] Sampling frequency of tamper event detection */
      __IOM uint32_t FLT        : 2;            /*!< [12..11] RTC_TAMPx filter count setting */
      __IOM uint32_t PRCH       : 2;            /*!< [14..13] Pre-charge duration time of RTC_TAMPx */
      __IOM uint32_t DISPU      : 1;            /*!< [15..15] RTC_TAMPx pull-up disable */
      __IOM uint32_t TP0SEL     : 1;            /*!< [16..16] Tamper 0 function input mapping selection */
      __IOM uint32_t TSSEL      : 1;            /*!< [17..17] Timestamp input mapping selection */
      __IOM uint32_t AOT        : 1;            /*!< [18..18] RTC_ALARM Output Type */
    } TAMP_b;
  } ;
  
  union {
    __IOM uint32_t ALRM0SS;                     /*!< (@ 0x00000044) alarm A sub second register */
    
    struct {
      __IOM uint32_t SSC        : 15;           /*!< [14..0] Alarm sub second value */
      __IM  uint32_t            : 9;
      __IOM uint32_t MSKSSC     : 4;            /*!< [27..24] Mask control bit of SSC */
    } ALRM0SS_b;
  } ;
  
  union {
    __IOM uint32_t ALRM1SS;                     /*!< (@ 0x00000048) Alarm 1 sub second register */
    
    struct {
      __IOM uint32_t SSC        : 15;           /*!< [14..0] Alarm sub second value */
      __IM  uint32_t            : 9;
      __IOM uint32_t MSKSSC     : 4;            /*!< [27..24] Mask control bit of SSC */
    } ALRM1SS_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t BKP0;                        /*!< (@ 0x00000050) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] BKP */
    } BKP0_b;
  } ;
  
  union {
    __IOM uint32_t BKP1;                        /*!< (@ 0x00000054) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP1_b;
  } ;
  
  union {
    __IOM uint32_t BKP2;                        /*!< (@ 0x00000058) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP2_b;
  } ;
  
  union {
    __IOM uint32_t BKP3;                        /*!< (@ 0x0000005C) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP3_b;
  } ;
  
  union {
    __IOM uint32_t BKP4;                        /*!< (@ 0x00000060) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP4_b;
  } ;
  
  union {
    __IOM uint32_t BKP5;                        /*!< (@ 0x00000064) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP5_b;
  } ;
  
  union {
    __IOM uint32_t BKP6;                        /*!< (@ 0x00000068) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP6_b;
  } ;
  
  union {
    __IOM uint32_t BKP7;                        /*!< (@ 0x0000006C) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP7_b;
  } ;
  
  union {
    __IOM uint32_t BKP8;                        /*!< (@ 0x00000070) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP8_b;
  } ;
  
  union {
    __IOM uint32_t BKP9;                        /*!< (@ 0x00000074) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP9_b;
  } ;
  
  union {
    __IOM uint32_t BKP10;                       /*!< (@ 0x00000078) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP10_b;
  } ;
  
  union {
    __IOM uint32_t BKP11;                       /*!< (@ 0x0000007C) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP11_b;
  } ;
  
  union {
    __IOM uint32_t BKP12;                       /*!< (@ 0x00000080) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP12_b;
  } ;
  
  union {
    __IOM uint32_t BKP13;                       /*!< (@ 0x00000084) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP13_b;
  } ;
  
  union {
    __IOM uint32_t BKP14;                       /*!< (@ 0x00000088) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP14_b;
  } ;
  
  union {
    __IOM uint32_t BKP15;                       /*!< (@ 0x0000008C) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP15_b;
  } ;
  
  union {
    __IOM uint32_t BKP16;                       /*!< (@ 0x00000090) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP16_b;
  } ;
  
  union {
    __IOM uint32_t BKP17;                       /*!< (@ 0x00000094) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP17_b;
  } ;
  
  union {
    __IOM uint32_t BKP18;                       /*!< (@ 0x00000098) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP18_b;
  } ;
  
  union {
    __IOM uint32_t BKP19;                       /*!< (@ 0x0000009C) backup register */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data */
    } BKP19_b;
  } ;
} RTC_Type;                                     /*!< Size = 160 (0xa0) */



/* =========================================================================================================================== */
/* ================                                           SDIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Secure digital input/output
      interface (SDIO)
  */

typedef struct {                                /*!< (@ 0x40012C00) SDIO Structure */
  
  union {
    __IOM uint32_t PWRCTL;                      /*!< (@ 0x00000000) Power control register */
    
    struct {
      __IOM uint32_t PWRCTL     : 2;            /*!< [1..0] SDIO power control bits */
    } PWRCTL_b;
  } ;
  
  union {
    __IOM uint32_t CLKCTL;                      /*!< (@ 0x00000004) Clock control register */
    
    struct {
      __IOM uint32_t DIV_0_7    : 8;            /*!< [7..0] Clock division */
      __IOM uint32_t CLKEN      : 1;            /*!< [8..8] SDIO_CLK clock output enable bit */
      __IOM uint32_t CLKPWRSAV  : 1;            /*!< [9..9] SDIO_CLK clock dynamic switch on/off for power saving */
      __IOM uint32_t CLKBYP     : 1;            /*!< [10..10] Clock bypass enable bit */
      __IOM uint32_t BUSMODE    : 2;            /*!< [12..11] SDIO card bus mode control bit */
      __IOM uint32_t CLKEDGE    : 1;            /*!< [13..13] SDIO_CLK clock edge selection bit */
      __IOM uint32_t HWCLKEN    : 1;            /*!< [14..14] Hardware Clock Control enable bit */
      __IM  uint32_t            : 16;
      __IOM uint32_t DIV_8      : 1;            /*!< [31..31] MSB of Clock division */
    } CLKCTL_b;
  } ;
  
  union {
    __IOM uint32_t CMDAGMT;                     /*!< (@ 0x00000008) Command argument register */
    
    struct {
      __IOM uint32_t CMDAGMT    : 32;           /*!< [31..0] SDIO card command argument */
    } CMDAGMT_b;
  } ;
  
  union {
    __IOM uint32_t CMDCTL;                      /*!< (@ 0x0000000C) Command control register */
    
    struct {
      __IOM uint32_t CMDIDX     : 6;            /*!< [5..0] Command index */
      __IOM uint32_t CMDRESP    : 2;            /*!< [7..6] Command response type bits */
      __IOM uint32_t INTWAIT    : 1;            /*!< [8..8] Interrupt wait instead of timeout */
      __IOM uint32_t WAITDEND   : 1;            /*!< [9..9] Waits for ends of data transfer */
      __IOM uint32_t CSMEN      : 1;            /*!< [10..10] Command state machine (CSM) enable bit */
      __IOM uint32_t SUSPEND    : 1;            /*!< [11..11] SD I/O suspend command(SD I/O only) */
      __IOM uint32_t ENCMDC     : 1;            /*!< [12..12] CMD completion signal enabled (CE-ATA only) */
      __IOM uint32_t NINTEN     : 1;            /*!< [13..13] No CE-ATA Interrupt (CE-ATA only) */
      __IOM uint32_t ATAEN      : 1;            /*!< [14..14] CE-ATA command enable(CE-ATA only) */
    } CMDCTL_b;
  } ;
  
  union {
    __IM  uint32_t RSPCMDIDX;                   /*!< (@ 0x00000010) Command index response register */
    
    struct {
      __IM  uint32_t RSPCMDIDX  : 6;            /*!< [5..0] Last response command index */
    } RSPCMDIDX_b;
  } ;
  
  union {
    __IM  uint32_t RESP0;                       /*!< (@ 0x00000014) Response register 0 */
    
    struct {
      __IM  uint32_t RESP0      : 32;           /*!< [31..0] Card state */
    } RESP0_b;
  } ;
  
  union {
    __IM  uint32_t RESP1;                       /*!< (@ 0x00000018) Response register 1 */
    
    struct {
      __IM  uint32_t RESP1      : 32;           /*!< [31..0] Card state */
    } RESP1_b;
  } ;
  
  union {
    __IM  uint32_t RESP2;                       /*!< (@ 0x0000001C) Response register 2 */
    
    struct {
      __IM  uint32_t RESP2      : 32;           /*!< [31..0] Card state */
    } RESP2_b;
  } ;
  
  union {
    __IM  uint32_t RESP3;                       /*!< (@ 0x00000020) Response register 3 */
    
    struct {
      __IM  uint32_t RESP3      : 32;           /*!< [31..0] Response register 3 */
    } RESP3_b;
  } ;
  
  union {
    __IOM uint32_t DATATO;                      /*!< (@ 0x00000024) Data timeout register */
    
    struct {
      __IOM uint32_t DATATO     : 32;           /*!< [31..0] Data timeout period */
    } DATATO_b;
  } ;
  
  union {
    __IOM uint32_t DATALEN;                     /*!< (@ 0x00000028) Data length register */
    
    struct {
      __IOM uint32_t DATALEN    : 25;           /*!< [24..0] Data transfer length */
    } DATALEN_b;
  } ;
  
  union {
    __IOM uint32_t DATACTL;                     /*!< (@ 0x0000002C) Data control register */
    
    struct {
      __IOM uint32_t DATAEN     : 1;            /*!< [0..0] Data transfer enabled bit */
      __IOM uint32_t DATADIR    : 1;            /*!< [1..1] Data transfer direction */
      __IOM uint32_t TRANSMOD   : 1;            /*!< [2..2] Data transfer mode */
      __IOM uint32_t DMAEN      : 1;            /*!< [3..3] DMA enable bit */
      __IOM uint32_t BLKSZ      : 4;            /*!< [7..4] Data block size */
      __IOM uint32_t RWEN       : 1;            /*!< [8..8] Read wait mode enabled */
      __IOM uint32_t RWSTOP     : 1;            /*!< [9..9] Read wait stop */
      __IOM uint32_t RWTYPE     : 1;            /*!< [10..10] Read wait type */
      __IOM uint32_t IOEN       : 1;            /*!< [11..11] SD I/O specific function enable */
    } DATACTL_b;
  } ;
  
  union {
    __IM  uint32_t DATACNT;                     /*!< (@ 0x00000030) Data counter register */
    
    struct {
      __IM  uint32_t DATACNT    : 25;           /*!< [24..0] Data count value */
    } DATACNT_b;
  } ;
  
  union {
    __IM  uint32_t STAT;                        /*!< (@ 0x00000034) Status register */
    
    struct {
      __IM  uint32_t CCRCERR    : 1;            /*!< [0..0] Command response received */
      __IM  uint32_t DTCRCERR   : 1;            /*!< [1..1] Data block sent/received */
      __IM  uint32_t CMDTMOUT   : 1;            /*!< [2..2] Command response timeout */
      __IM  uint32_t DTTMOUT    : 1;            /*!< [3..3] Data timeout */
      __IM  uint32_t TXURE      : 1;            /*!< [4..4] Transmit FIFO underrun error occurs */
      __IM  uint32_t RXORE      : 1;            /*!< [5..5] Received FIFO overrun error occurs */
      __IM  uint32_t CMDRECV    : 1;            /*!< [6..6] Command response received */
      __IM  uint32_t CMDSEND    : 1;            /*!< [7..7] Command sent */
      __IM  uint32_t DTEND      : 1;            /*!< [8..8] Data end */
      __IM  uint32_t STBITE     : 1;            /*!< [9..9] Start bit error in the bus */
      __IM  uint32_t DTBLKEND   : 1;            /*!< [10..10] Data block sent/received */
      __IM  uint32_t CMDRUN     : 1;            /*!< [11..11] Command transmission in progress */
      __IM  uint32_t TXRUN      : 1;            /*!< [12..12] Data transmission in progress */
      __IM  uint32_t RXRUN      : 1;            /*!< [13..13] Data reception in progress */
      __IM  uint32_t TFH        : 1;            /*!< [14..14] Transmit FIFO is half empty */
      __IM  uint32_t RFH        : 1;            /*!< [15..15] Receive FIFO is half full */
      __IM  uint32_t TFF        : 1;            /*!< [16..16] Transmit FIFO is full */
      __IM  uint32_t RFF        : 1;            /*!< [17..17] Receive FIFO is full */
      __IM  uint32_t TFE        : 1;            /*!< [18..18] Transmit FIFO is empty */
      __IM  uint32_t RFE        : 1;            /*!< [19..19] Receive FIFO is empty */
      __IM  uint32_t TXDTVAL    : 1;            /*!< [20..20] Data is valid in transmit FIFO */
      __IM  uint32_t RXDTVAL    : 1;            /*!< [21..21] Data is valid in receive FIFO */
      __IM  uint32_t SDIOINT    : 1;            /*!< [22..22] SD I/O interrupt received */
      __IM  uint32_t ATAEND     : 1;            /*!< [23..23] CE-ATA command completion signal received */
    } STAT_b;
  } ;
  
  union {
    __OM  uint32_t INTC;                        /*!< (@ 0x00000038) Interrupt clear register */
    
    struct {
      __OM  uint32_t CCRCERRC   : 1;            /*!< [0..0] CCRCERR flag clear bit */
      __OM  uint32_t DTCRCERRC  : 1;            /*!< [1..1] DTCRCERR flag clear bit */
      __OM  uint32_t CMDTMOUTC  : 1;            /*!< [2..2] CMDTMOUT flag clear bit */
      __OM  uint32_t DTTMOUTC   : 1;            /*!< [3..3] DTTMOUT flag clear bit */
      __OM  uint32_t TXUREC     : 1;            /*!< [4..4] TXURE flag clear bit */
      __OM  uint32_t RXOREC     : 1;            /*!< [5..5] RXORE flag clear bit */
      __OM  uint32_t CMDRECVC   : 1;            /*!< [6..6] CMDRECV flag clear bit */
      __OM  uint32_t CMDSENDC   : 1;            /*!< [7..7] CMDSEND flag clear bit */
      __OM  uint32_t DTENDC     : 1;            /*!< [8..8] DTEND flag clear bit */
      __OM  uint32_t STBITEC    : 1;            /*!< [9..9] STBITE flag clear bit */
      __OM  uint32_t DTBLKENDC  : 1;            /*!< [10..10] DTBLKEND flag clear bit */
      __IM  uint32_t            : 11;
      __OM  uint32_t SDIOINTC   : 1;            /*!< [22..22] SDIOINT flag clear bit */
      __OM  uint32_t ATAENDC    : 1;            /*!< [23..23] ATAEND flag clear bit */
    } INTC_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x0000003C) Interrupt enable register */
    
    struct {
      __IOM uint32_t CCRCERRIE  : 1;            /*!< [0..0] Command response CRC fail interrupt enable */
      __IOM uint32_t DTCRCERRIE : 1;            /*!< [1..1] Data CRC fail interrupt enable */
      __IOM uint32_t CMDTMOUTIE : 1;            /*!< [2..2] Command response timeout interrupt enable */
      __IOM uint32_t DTTMOUTIE  : 1;            /*!< [3..3] Data timeout interrupt enable */
      __IOM uint32_t TXUREIE    : 1;            /*!< [4..4] Transmit FIFO underrun error interrupt enable */
      __IOM uint32_t RXOREIE    : 1;            /*!< [5..5] Received FIFO overrun error interrupt enable */
      __IOM uint32_t CMDRECVIE  : 1;            /*!< [6..6] Command response received interrupt enable */
      __IOM uint32_t CMDSENDIE  : 1;            /*!< [7..7] Command sent interrupt enable */
      __IOM uint32_t DTENDIE    : 1;            /*!< [8..8] Data end interrupt enable */
      __IOM uint32_t STBITEIE   : 1;            /*!< [9..9] Start bit error interrupt enable */
      __IOM uint32_t DTBLKENDIE : 1;            /*!< [10..10] Data block end interrupt enable */
      __IOM uint32_t CMDRUNIE   : 1;            /*!< [11..11] Command transmission interrupt enable */
      __IOM uint32_t TXRUNIE    : 1;            /*!< [12..12] Data transmission interrupt enable */
      __IOM uint32_t RXRUNIE    : 1;            /*!< [13..13] Data reception interrupt enable */
      __IOM uint32_t TFHIE      : 1;            /*!< [14..14] Transmit FIFO half empty interrupt enable */
      __IOM uint32_t RFHIE      : 1;            /*!< [15..15] Receive FIFO half full interrupt enable */
      __IOM uint32_t TFFIE      : 1;            /*!< [16..16] Transmit FIFO full interrupt enable */
      __IOM uint32_t RFFIE      : 1;            /*!< [17..17] Receive FIFO full interrupt enable */
      __IOM uint32_t TFEIE      : 1;            /*!< [18..18] Transmit FIFO empty interrupt enable */
      __IOM uint32_t RFEIE      : 1;            /*!< [19..19] Receive FIFO empty interrupt enable */
      __IOM uint32_t TXDTVALIE  : 1;            /*!< [20..20] Data valid in transmit FIFO interrupt enable */
      __IOM uint32_t RXDTVALIE  : 1;            /*!< [21..21] Data valid in receive FIFO interrupt enable */
      __IOM uint32_t SDIOINTIE  : 1;            /*!< [22..22] SD I/O interrupt received interrupt enable */
      __IOM uint32_t ATAENDIE   : 1;            /*!< [23..23] CE-ATA command completion signal received interrupt enable */
    } INTEN_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IM  uint32_t FIFOCNT;                     /*!< (@ 0x00000048) FIFO counter register */
    
    struct {
      __IM  uint32_t FIFOCNT    : 24;           /*!< [23..0] FIFO counter */
    } FIFOCNT_b;
  } ;
  __IM  uint32_t  RESERVED1[13];
  
  union {
    __IOM uint32_t FIFO;                        /*!< (@ 0x00000080) FIFO data register */
    
    struct {
      __IOM uint32_t FIFODT     : 32;           /*!< [31..0] Receive FIFO data or transmit FIFO data */
    } FIFO_b;
  } ;
} SDIO_Type;                                    /*!< Size = 132 (0x84) */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI0)
  */

typedef struct {                                /*!< (@ 0x40013000) SPI0 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CKPH       : 1;            /*!< [0..0] Clock Phase Selection */
      __IOM uint16_t CKPL       : 1;            /*!< [1..1] Clock polarity Selection */
      __IOM uint16_t MSTMOD     : 1;            /*!< [2..2] Master Mode Enable */
      __IOM uint16_t PSC        : 3;            /*!< [5..3] Master Clock Prescaler Selection */
      __IOM uint16_t SPIEN      : 1;            /*!< [6..6] SPI enable */
      __IOM uint16_t LF         : 1;            /*!< [7..7] LSB First Mode */
      __IOM uint16_t SWNSS      : 1;            /*!< [8..8] NSS Pin Selection In NSS Software Mode */
      __IOM uint16_t SWNSSEN    : 1;            /*!< [9..9] NSS Software Mode Selection */
      __IOM uint16_t RO         : 1;            /*!< [10..10] Receive only */
      __IOM uint16_t FF16       : 1;            /*!< [11..11] Data frame format */
      __IOM uint16_t CRCNT      : 1;            /*!< [12..12] CRC Next Transfer */
      __IOM uint16_t CRCEN      : 1;            /*!< [13..13] CRC Calculation Enable */
      __IOM uint16_t BDOEN      : 1;            /*!< [14..14] Bidirectional Transmit output enable */
      __IOM uint16_t BDEN       : 1;            /*!< [15..15] Bidirectional enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t DMAREN     : 1;            /*!< [0..0] Rx buffer DMA enable */
      __IOM uint16_t DMATEN     : 1;            /*!< [1..1] Transmit Buffer DMA Enable */
      __IOM uint16_t NSSDRV     : 1;            /*!< [2..2] Drive NSS Output */
      __IM  uint16_t            : 1;
      __IOM uint16_t TMOD       : 1;            /*!< [4..4] SPI TI Mode Enable */
      __IOM uint16_t ERRIE      : 1;            /*!< [5..5] Error interrupt enable */
      __IOM uint16_t RBNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable */
      __IOM uint16_t TBEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t STAT;                        /*!< (@ 0x00000008) status register */
    
    struct {
      __IM  uint16_t RBNE       : 1;            /*!< [0..0] Receive Buffer Not Empty */
      __IM  uint16_t TBE        : 1;            /*!< [1..1] Transmit Buffer Empty */
      __IM  uint16_t I2SCH      : 1;            /*!< [2..2] I2S channel side */
      __IM  uint16_t TXURERR    : 1;            /*!< [3..3] Transmission underrun error bit */
      __IOM uint16_t CRCERR     : 1;            /*!< [4..4] SPI CRC Error Bit */
      __IM  uint16_t CONFERR    : 1;            /*!< [5..5] SPI Configuration error */
      __IM  uint16_t RXORERR    : 1;            /*!< [6..6] Reception Overrun Error Bit */
      __IM  uint16_t TRANS      : 1;            /*!< [7..7] Transmitting On-going Bit */
      __IOM uint16_t FERR       : 1;            /*!< [8..8] Format Error */
    } STAT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x0000000C) data register */
    
    struct {
      __IOM uint16_t SPI_DATA   : 16;           /*!< [15..0] Data transfer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t CPCPOLY;                     /*!< (@ 0x00000010) CRC polynomial register */
    
    struct {
      __IOM uint16_t CPR        : 16;           /*!< [15..0] CRC polynomial register */
    } CPCPOLY_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IM  uint16_t RCRC;                        /*!< (@ 0x00000014) RX CRC register */
    
    struct {
      __IM  uint16_t RCR        : 16;           /*!< [15..0] RX CRC register */
    } RCRC_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t TCRC;                        /*!< (@ 0x00000018) TX CRC register */
    
    struct {
      __IM  uint16_t TCR        : 16;           /*!< [15..0] Tx CRC register */
    } TCRC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t I2SCTL;                      /*!< (@ 0x0000001C) I2S control register */
    
    struct {
      __IOM uint16_t CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel) */
      __IOM uint16_t DTLEN      : 2;            /*!< [2..1] Data length */
      __IOM uint16_t CKPL       : 1;            /*!< [3..3] Idle state clock polarity */
      __IOM uint16_t I2SSTD     : 2;            /*!< [5..4] I2S standard selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t PCMSMOD    : 1;            /*!< [7..7] PCM frame synchronization mode */
      __IOM uint16_t I2SOPMOD   : 2;            /*!< [9..8] I2S operation mode */
      __IOM uint16_t I2SEN      : 1;            /*!< [10..10] I2S Enable */
      __IOM uint16_t I2SSEL     : 1;            /*!< [11..11] I2S mode selection */
    } I2SCTL_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t I2SPSC;                      /*!< (@ 0x00000020) I2S prescaler register */
    
    struct {
      __IOM uint16_t DIV        : 8;            /*!< [7..0] Dividing factor for the prescaler */
      __IOM uint16_t OF         : 1;            /*!< [8..8] Odd factor for the prescaler */
      __IOM uint16_t MCKOEN     : 1;            /*!< [9..9] I2S_MCK output enable */
    } I2SPSC_b;
  } ;
} SPI0_Type;                                    /*!< Size = 34 (0x22) */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI1)
  */

typedef struct {                                /*!< (@ 0x40003800) SPI1 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CKPH       : 1;            /*!< [0..0] Clock Phase Selection */
      __IOM uint16_t CKPL       : 1;            /*!< [1..1] Clock polarity Selection */
      __IOM uint16_t MSTMOD     : 1;            /*!< [2..2] Master Mode Enable */
      __IOM uint16_t PSC        : 3;            /*!< [5..3] Master Clock Prescaler Selection */
      __IOM uint16_t SPIEN      : 1;            /*!< [6..6] SPI enable */
      __IOM uint16_t LF         : 1;            /*!< [7..7] LSB First Mode */
      __IOM uint16_t SWNSS      : 1;            /*!< [8..8] NSS Pin Selection In NSS Software Mode */
      __IOM uint16_t SWNSSEN    : 1;            /*!< [9..9] NSS Software Mode Selection */
      __IOM uint16_t RO         : 1;            /*!< [10..10] Receive only */
      __IOM uint16_t FF16       : 1;            /*!< [11..11] Data frame format */
      __IOM uint16_t CRCNT      : 1;            /*!< [12..12] CRC Next Transfer */
      __IOM uint16_t CRCEN      : 1;            /*!< [13..13] CRC Calculation Enable */
      __IOM uint16_t BDOEN      : 1;            /*!< [14..14] Bidirectional Transmit output enable */
      __IOM uint16_t BDEN       : 1;            /*!< [15..15] Bidirectional enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t DMAREN     : 1;            /*!< [0..0] Rx buffer DMA enable */
      __IOM uint16_t DMATEN     : 1;            /*!< [1..1] Transmit Buffer DMA Enable */
      __IOM uint16_t NSSDRV     : 1;            /*!< [2..2] Drive NSS Output */
      __IM  uint16_t            : 1;
      __IOM uint16_t TMOD       : 1;            /*!< [4..4] SPI TI Mode Enable */
      __IOM uint16_t ERRIE      : 1;            /*!< [5..5] Error interrupt enable */
      __IOM uint16_t RBNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable */
      __IOM uint16_t TBEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t STAT;                        /*!< (@ 0x00000008) status register */
    
    struct {
      __IM  uint16_t RBNE       : 1;            /*!< [0..0] Receive Buffer Not Empty */
      __IM  uint16_t TBE        : 1;            /*!< [1..1] Transmit Buffer Empty */
      __IM  uint16_t I2SCH      : 1;            /*!< [2..2] I2S channel side */
      __IM  uint16_t TXURERR    : 1;            /*!< [3..3] Transmission underrun error bit */
      __IOM uint16_t CRCERR     : 1;            /*!< [4..4] SPI CRC Error Bit */
      __IM  uint16_t CONFERR    : 1;            /*!< [5..5] SPI Configuration error */
      __IM  uint16_t RXORERR    : 1;            /*!< [6..6] Reception Overrun Error Bit */
      __IM  uint16_t TRANS      : 1;            /*!< [7..7] Transmitting On-going Bit */
      __IOM uint16_t FERR       : 1;            /*!< [8..8] Format Error */
    } STAT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x0000000C) data register */
    
    struct {
      __IOM uint16_t SPI_DATA   : 16;           /*!< [15..0] Data transfer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t CPCPOLY;                     /*!< (@ 0x00000010) CRC polynomial register */
    
    struct {
      __IOM uint16_t CPR        : 16;           /*!< [15..0] CRC polynomial register */
    } CPCPOLY_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IM  uint16_t RCRC;                        /*!< (@ 0x00000014) RX CRC register */
    
    struct {
      __IM  uint16_t RCR        : 16;           /*!< [15..0] RX CRC register */
    } RCRC_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t TCRC;                        /*!< (@ 0x00000018) TX CRC register */
    
    struct {
      __IM  uint16_t TCR        : 16;           /*!< [15..0] Tx CRC register */
    } TCRC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t I2SCTL;                      /*!< (@ 0x0000001C) I2S control register */
    
    struct {
      __IOM uint16_t CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel) */
      __IOM uint16_t DTLEN      : 2;            /*!< [2..1] Data length */
      __IOM uint16_t CKPL       : 1;            /*!< [3..3] Idle state clock polarity */
      __IOM uint16_t I2SSTD     : 2;            /*!< [5..4] I2S standard selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t PCMSMOD    : 1;            /*!< [7..7] PCM frame synchronization mode */
      __IOM uint16_t I2SOPMOD   : 2;            /*!< [9..8] I2S operation mode */
      __IOM uint16_t I2SEN      : 1;            /*!< [10..10] I2S Enable */
      __IOM uint16_t I2SSEL     : 1;            /*!< [11..11] I2S mode selection */
    } I2SCTL_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t I2SPSC;                      /*!< (@ 0x00000020) I2S prescaler register */
    
    struct {
      __IOM uint16_t DIV        : 8;            /*!< [7..0] Dividing factor for the prescaler */
      __IOM uint16_t OF         : 1;            /*!< [8..8] Odd factor for the prescaler */
      __IOM uint16_t MCKOEN     : 1;            /*!< [9..9] I2S_MCK output enable */
    } I2SPSC_b;
  } ;
} SPI1_Type;                                    /*!< Size = 34 (0x22) */



/* =========================================================================================================================== */
/* ================                                           SPI2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI2)
  */

typedef struct {                                /*!< (@ 0x40003C00) SPI2 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CKPH       : 1;            /*!< [0..0] Clock Phase Selection */
      __IOM uint16_t CKPL       : 1;            /*!< [1..1] Clock polarity Selection */
      __IOM uint16_t MSTMOD     : 1;            /*!< [2..2] Master Mode Enable */
      __IOM uint16_t PSC        : 3;            /*!< [5..3] Master Clock Prescaler Selection */
      __IOM uint16_t SPIEN      : 1;            /*!< [6..6] SPI enable */
      __IOM uint16_t LF         : 1;            /*!< [7..7] LSB First Mode */
      __IOM uint16_t SWNSS      : 1;            /*!< [8..8] NSS Pin Selection In NSS Software Mode */
      __IOM uint16_t SWNSSEN    : 1;            /*!< [9..9] NSS Software Mode Selection */
      __IOM uint16_t RO         : 1;            /*!< [10..10] Receive only */
      __IOM uint16_t FF16       : 1;            /*!< [11..11] Data frame format */
      __IOM uint16_t CRCNT      : 1;            /*!< [12..12] CRC Next Transfer */
      __IOM uint16_t CRCEN      : 1;            /*!< [13..13] CRC Calculation Enable */
      __IOM uint16_t BDOEN      : 1;            /*!< [14..14] Bidirectional Transmit output enable */
      __IOM uint16_t BDEN       : 1;            /*!< [15..15] Bidirectional enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t DMAREN     : 1;            /*!< [0..0] Rx buffer DMA enable */
      __IOM uint16_t DMATEN     : 1;            /*!< [1..1] Transmit Buffer DMA Enable */
      __IOM uint16_t NSSDRV     : 1;            /*!< [2..2] Drive NSS Output */
      __IM  uint16_t            : 1;
      __IOM uint16_t TMOD       : 1;            /*!< [4..4] SPI TI Mode Enable */
      __IOM uint16_t ERRIE      : 1;            /*!< [5..5] Error interrupt enable */
      __IOM uint16_t RBNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable */
      __IOM uint16_t TBEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t STAT;                        /*!< (@ 0x00000008) status register */
    
    struct {
      __IM  uint16_t RBNE       : 1;            /*!< [0..0] Receive Buffer Not Empty */
      __IM  uint16_t TBE        : 1;            /*!< [1..1] Transmit Buffer Empty */
      __IM  uint16_t I2SCH      : 1;            /*!< [2..2] I2S channel side */
      __IM  uint16_t TXURERR    : 1;            /*!< [3..3] Transmission underrun error bit */
      __IOM uint16_t CRCERR     : 1;            /*!< [4..4] SPI CRC Error Bit */
      __IM  uint16_t CONFERR    : 1;            /*!< [5..5] SPI Configuration error */
      __IM  uint16_t RXORERR    : 1;            /*!< [6..6] Reception Overrun Error Bit */
      __IM  uint16_t TRANS      : 1;            /*!< [7..7] Transmitting On-going Bit */
      __IOM uint16_t FERR       : 1;            /*!< [8..8] Format Error */
    } STAT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x0000000C) data register */
    
    struct {
      __IOM uint16_t SPI_DATA   : 16;           /*!< [15..0] Data transfer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t CPCPOLY;                     /*!< (@ 0x00000010) CRC polynomial register */
    
    struct {
      __IOM uint16_t CPR        : 16;           /*!< [15..0] CRC polynomial register */
    } CPCPOLY_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IM  uint16_t RCRC;                        /*!< (@ 0x00000014) RX CRC register */
    
    struct {
      __IM  uint16_t RCR        : 16;           /*!< [15..0] RX CRC register */
    } RCRC_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t TCRC;                        /*!< (@ 0x00000018) TX CRC register */
    
    struct {
      __IM  uint16_t TCR        : 16;           /*!< [15..0] Tx CRC register */
    } TCRC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t I2SCTL;                      /*!< (@ 0x0000001C) I2S control register */
    
    struct {
      __IOM uint16_t CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel) */
      __IOM uint16_t DTLEN      : 2;            /*!< [2..1] Data length */
      __IOM uint16_t CKPL       : 1;            /*!< [3..3] Idle state clock polarity */
      __IOM uint16_t I2SSTD     : 2;            /*!< [5..4] I2S standard selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t PCMSMOD    : 1;            /*!< [7..7] PCM frame synchronization mode */
      __IOM uint16_t I2SOPMOD   : 2;            /*!< [9..8] I2S operation mode */
      __IOM uint16_t I2SEN      : 1;            /*!< [10..10] I2S Enable */
      __IOM uint16_t I2SSEL     : 1;            /*!< [11..11] I2S mode selection */
    } I2SCTL_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t I2SPSC;                      /*!< (@ 0x00000020) I2S prescaler register */
    
    struct {
      __IOM uint16_t DIV        : 8;            /*!< [7..0] Dividing factor for the prescaler */
      __IOM uint16_t OF         : 1;            /*!< [8..8] Odd factor for the prescaler */
      __IOM uint16_t MCKOEN     : 1;            /*!< [9..9] I2S_MCK output enable */
    } I2SPSC_b;
  } ;
} SPI2_Type;                                    /*!< Size = 34 (0x22) */



/* =========================================================================================================================== */
/* ================                                           SPI3                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI3)
  */

typedef struct {                                /*!< (@ 0x40013400) SPI3 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CKPH       : 1;            /*!< [0..0] Clock Phase Selection */
      __IOM uint16_t CKPL       : 1;            /*!< [1..1] Clock polarity Selection */
      __IOM uint16_t MSTMOD     : 1;            /*!< [2..2] Master Mode Enable */
      __IOM uint16_t PSC        : 3;            /*!< [5..3] Master Clock Prescaler Selection */
      __IOM uint16_t SPIEN      : 1;            /*!< [6..6] SPI enable */
      __IOM uint16_t LF         : 1;            /*!< [7..7] LSB First Mode */
      __IOM uint16_t SWNSS      : 1;            /*!< [8..8] NSS Pin Selection In NSS Software Mode */
      __IOM uint16_t SWNSSEN    : 1;            /*!< [9..9] NSS Software Mode Selection */
      __IOM uint16_t RO         : 1;            /*!< [10..10] Receive only */
      __IOM uint16_t FF16       : 1;            /*!< [11..11] Data frame format */
      __IOM uint16_t CRCNT      : 1;            /*!< [12..12] CRC Next Transfer */
      __IOM uint16_t CRCEN      : 1;            /*!< [13..13] CRC Calculation Enable */
      __IOM uint16_t BDOEN      : 1;            /*!< [14..14] Bidirectional Transmit output enable */
      __IOM uint16_t BDEN       : 1;            /*!< [15..15] Bidirectional enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t DMAREN     : 1;            /*!< [0..0] Rx buffer DMA enable */
      __IOM uint16_t DMATEN     : 1;            /*!< [1..1] Transmit Buffer DMA Enable */
      __IOM uint16_t NSSDRV     : 1;            /*!< [2..2] Drive NSS Output */
      __IM  uint16_t            : 1;
      __IOM uint16_t TMOD       : 1;            /*!< [4..4] SPI TI Mode Enable */
      __IOM uint16_t ERRIE      : 1;            /*!< [5..5] Error interrupt enable */
      __IOM uint16_t RBNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable */
      __IOM uint16_t TBEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t STAT;                        /*!< (@ 0x00000008) status register */
    
    struct {
      __IM  uint16_t RBNE       : 1;            /*!< [0..0] Receive Buffer Not Empty */
      __IM  uint16_t TBE        : 1;            /*!< [1..1] Transmit Buffer Empty */
      __IM  uint16_t I2SCH      : 1;            /*!< [2..2] I2S channel side */
      __IM  uint16_t TXURERR    : 1;            /*!< [3..3] Transmission underrun error bit */
      __IOM uint16_t CRCERR     : 1;            /*!< [4..4] SPI CRC Error Bit */
      __IM  uint16_t CONFERR    : 1;            /*!< [5..5] SPI Configuration error */
      __IM  uint16_t RXORERR    : 1;            /*!< [6..6] Reception Overrun Error Bit */
      __IM  uint16_t TRANS      : 1;            /*!< [7..7] Transmitting On-going Bit */
      __IOM uint16_t FERR       : 1;            /*!< [8..8] Format Error */
    } STAT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x0000000C) data register */
    
    struct {
      __IOM uint16_t SPI_DATA   : 16;           /*!< [15..0] Data transfer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t CPCPOLY;                     /*!< (@ 0x00000010) CRC polynomial register */
    
    struct {
      __IOM uint16_t CPR        : 16;           /*!< [15..0] CRC polynomial register */
    } CPCPOLY_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IM  uint16_t RCRC;                        /*!< (@ 0x00000014) RX CRC register */
    
    struct {
      __IM  uint16_t RCR        : 16;           /*!< [15..0] RX CRC register */
    } RCRC_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t TCRC;                        /*!< (@ 0x00000018) TX CRC register */
    
    struct {
      __IM  uint16_t TCR        : 16;           /*!< [15..0] Tx CRC register */
    } TCRC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t I2SCTL;                      /*!< (@ 0x0000001C) I2S control register */
    
    struct {
      __IOM uint16_t CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel) */
      __IOM uint16_t DTLEN      : 2;            /*!< [2..1] Data length */
      __IOM uint16_t CKPL       : 1;            /*!< [3..3] Idle state clock polarity */
      __IOM uint16_t I2SSTD     : 2;            /*!< [5..4] I2S standard selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t PCMSMOD    : 1;            /*!< [7..7] PCM frame synchronization mode */
      __IOM uint16_t I2SOPMOD   : 2;            /*!< [9..8] I2S operation mode */
      __IOM uint16_t I2SEN      : 1;            /*!< [10..10] I2S Enable */
      __IOM uint16_t I2SSEL     : 1;            /*!< [11..11] I2S mode selection */
    } I2SCTL_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t I2SPSC;                      /*!< (@ 0x00000020) I2S prescaler register */
    
    struct {
      __IOM uint16_t DIV        : 8;            /*!< [7..0] Dividing factor for the prescaler */
      __IOM uint16_t OF         : 1;            /*!< [8..8] Odd factor for the prescaler */
      __IOM uint16_t MCKOEN     : 1;            /*!< [9..9] I2S_MCK output enable */
    } I2SPSC_b;
  } ;
} SPI3_Type;                                    /*!< Size = 34 (0x22) */



/* =========================================================================================================================== */
/* ================                                           SPI4                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI4)
  */

typedef struct {                                /*!< (@ 0x40015000) SPI4 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CKPH       : 1;            /*!< [0..0] Clock Phase Selection */
      __IOM uint16_t CKPL       : 1;            /*!< [1..1] Clock polarity Selection */
      __IOM uint16_t MSTMOD     : 1;            /*!< [2..2] Master Mode Enable */
      __IOM uint16_t PSC        : 3;            /*!< [5..3] Master Clock Prescaler Selection */
      __IOM uint16_t SPIEN      : 1;            /*!< [6..6] SPI enable */
      __IOM uint16_t LF         : 1;            /*!< [7..7] LSB First Mode */
      __IOM uint16_t SWNSS      : 1;            /*!< [8..8] NSS Pin Selection In NSS Software Mode */
      __IOM uint16_t SWNSSEN    : 1;            /*!< [9..9] NSS Software Mode Selection */
      __IOM uint16_t RO         : 1;            /*!< [10..10] Receive only */
      __IOM uint16_t FF16       : 1;            /*!< [11..11] Data frame format */
      __IOM uint16_t CRCNT      : 1;            /*!< [12..12] CRC Next Transfer */
      __IOM uint16_t CRCEN      : 1;            /*!< [13..13] CRC Calculation Enable */
      __IOM uint16_t BDOEN      : 1;            /*!< [14..14] Bidirectional Transmit output enable */
      __IOM uint16_t BDEN       : 1;            /*!< [15..15] Bidirectional enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t DMAREN     : 1;            /*!< [0..0] Rx buffer DMA enable */
      __IOM uint16_t DMATEN     : 1;            /*!< [1..1] Transmit Buffer DMA Enable */
      __IOM uint16_t NSSDRV     : 1;            /*!< [2..2] Drive NSS Output */
      __IM  uint16_t            : 1;
      __IOM uint16_t TMOD       : 1;            /*!< [4..4] SPI TI Mode Enable */
      __IOM uint16_t ERRIE      : 1;            /*!< [5..5] Error interrupt enable */
      __IOM uint16_t RBNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable */
      __IOM uint16_t TBEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t STAT;                        /*!< (@ 0x00000008) status register */
    
    struct {
      __IM  uint16_t RBNE       : 1;            /*!< [0..0] Receive Buffer Not Empty */
      __IM  uint16_t TBE        : 1;            /*!< [1..1] Transmit Buffer Empty */
      __IM  uint16_t I2SCH      : 1;            /*!< [2..2] I2S channel side */
      __IM  uint16_t TXURERR    : 1;            /*!< [3..3] Transmission underrun error bit */
      __IOM uint16_t CRCERR     : 1;            /*!< [4..4] SPI CRC Error Bit */
      __IM  uint16_t CONFERR    : 1;            /*!< [5..5] SPI Configuration error */
      __IM  uint16_t RXORERR    : 1;            /*!< [6..6] Reception Overrun Error Bit */
      __IM  uint16_t TRANS      : 1;            /*!< [7..7] Transmitting On-going Bit */
      __IOM uint16_t FERR       : 1;            /*!< [8..8] Format Error */
    } STAT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x0000000C) data register */
    
    struct {
      __IOM uint16_t SPI_DATA   : 16;           /*!< [15..0] Data transfer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t CPCPOLY;                     /*!< (@ 0x00000010) CRC polynomial register */
    
    struct {
      __IOM uint16_t CPR        : 16;           /*!< [15..0] CRC polynomial register */
    } CPCPOLY_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IM  uint16_t RCRC;                        /*!< (@ 0x00000014) RX CRC register */
    
    struct {
      __IM  uint16_t RCR        : 16;           /*!< [15..0] RX CRC register */
    } RCRC_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t TCRC;                        /*!< (@ 0x00000018) TX CRC register */
    
    struct {
      __IM  uint16_t TCR        : 16;           /*!< [15..0] Tx CRC register */
    } TCRC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t I2SCTL;                      /*!< (@ 0x0000001C) I2S control register */
    
    struct {
      __IOM uint16_t CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel) */
      __IOM uint16_t DTLEN      : 2;            /*!< [2..1] Data length */
      __IOM uint16_t CKPL       : 1;            /*!< [3..3] Idle state clock polarity */
      __IOM uint16_t I2SSTD     : 2;            /*!< [5..4] I2S standard selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t PCMSMOD    : 1;            /*!< [7..7] PCM frame synchronization mode */
      __IOM uint16_t I2SOPMOD   : 2;            /*!< [9..8] I2S operation mode */
      __IOM uint16_t I2SEN      : 1;            /*!< [10..10] I2S Enable */
      __IOM uint16_t I2SSEL     : 1;            /*!< [11..11] I2S mode selection */
    } I2SCTL_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t I2SPSC;                      /*!< (@ 0x00000020) I2S prescaler register */
    
    struct {
      __IOM uint16_t DIV        : 8;            /*!< [7..0] Dividing factor for the prescaler */
      __IOM uint16_t OF         : 1;            /*!< [8..8] Odd factor for the prescaler */
      __IOM uint16_t MCKOEN     : 1;            /*!< [9..9] I2S_MCK output enable */
    } I2SPSC_b;
  } ;
} SPI4_Type;                                    /*!< Size = 34 (0x22) */



/* =========================================================================================================================== */
/* ================                                           SPI5                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI5)
  */

typedef struct {                                /*!< (@ 0x40015400) SPI5 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CKPH       : 1;            /*!< [0..0] Clock Phase Selection */
      __IOM uint16_t CKPL       : 1;            /*!< [1..1] Clock polarity Selection */
      __IOM uint16_t MSTMOD     : 1;            /*!< [2..2] Master Mode Enable */
      __IOM uint16_t PSC        : 3;            /*!< [5..3] Master Clock Prescaler Selection */
      __IOM uint16_t SPIEN      : 1;            /*!< [6..6] SPI enable */
      __IOM uint16_t LF         : 1;            /*!< [7..7] LSB First Mode */
      __IOM uint16_t SWNSS      : 1;            /*!< [8..8] NSS Pin Selection In NSS Software Mode */
      __IOM uint16_t SWNSSEN    : 1;            /*!< [9..9] NSS Software Mode Selection */
      __IOM uint16_t RO         : 1;            /*!< [10..10] Receive only */
      __IOM uint16_t FF16       : 1;            /*!< [11..11] Data frame format */
      __IOM uint16_t CRCNT      : 1;            /*!< [12..12] CRC Next Transfer */
      __IOM uint16_t CRCEN      : 1;            /*!< [13..13] CRC Calculation Enable */
      __IOM uint16_t BDOEN      : 1;            /*!< [14..14] Bidirectional Transmit output enable */
      __IOM uint16_t BDEN       : 1;            /*!< [15..15] Bidirectional enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t DMAREN     : 1;            /*!< [0..0] Rx buffer DMA enable */
      __IOM uint16_t DMATEN     : 1;            /*!< [1..1] Transmit Buffer DMA Enable */
      __IOM uint16_t NSSDRV     : 1;            /*!< [2..2] Drive NSS Output */
      __IM  uint16_t            : 1;
      __IOM uint16_t TMOD       : 1;            /*!< [4..4] SPI TI Mode Enable */
      __IOM uint16_t ERRIE      : 1;            /*!< [5..5] Error interrupt enable */
      __IOM uint16_t RBNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable */
      __IOM uint16_t TBEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t STAT;                        /*!< (@ 0x00000008) status register */
    
    struct {
      __IM  uint16_t RBNE       : 1;            /*!< [0..0] Receive Buffer Not Empty */
      __IM  uint16_t TBE        : 1;            /*!< [1..1] Transmit Buffer Empty */
      __IM  uint16_t I2SCH      : 1;            /*!< [2..2] I2S channel side */
      __IM  uint16_t TXURERR    : 1;            /*!< [3..3] Transmission underrun error bit */
      __IOM uint16_t CRCERR     : 1;            /*!< [4..4] SPI CRC Error Bit */
      __IM  uint16_t CONFERR    : 1;            /*!< [5..5] SPI Configuration error */
      __IM  uint16_t RXORERR    : 1;            /*!< [6..6] Reception Overrun Error Bit */
      __IM  uint16_t TRANS      : 1;            /*!< [7..7] Transmitting On-going Bit */
      __IOM uint16_t FERR       : 1;            /*!< [8..8] Format Error */
    } STAT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x0000000C) data register */
    
    struct {
      __IOM uint16_t SPI_DATA   : 16;           /*!< [15..0] Data transfer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t CPCPOLY;                     /*!< (@ 0x00000010) CRC polynomial register */
    
    struct {
      __IOM uint16_t CPR        : 16;           /*!< [15..0] CRC polynomial register */
    } CPCPOLY_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IM  uint16_t RCRC;                        /*!< (@ 0x00000014) RX CRC register */
    
    struct {
      __IM  uint16_t RCR        : 16;           /*!< [15..0] RX CRC register */
    } RCRC_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t TCRC;                        /*!< (@ 0x00000018) TX CRC register */
    
    struct {
      __IM  uint16_t TCR        : 16;           /*!< [15..0] Tx CRC register */
    } TCRC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t I2SCTL;                      /*!< (@ 0x0000001C) I2S control register */
    
    struct {
      __IOM uint16_t CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel) */
      __IOM uint16_t DTLEN      : 2;            /*!< [2..1] Data length to be transferred */
      __IOM uint16_t CKPL       : 1;            /*!< [3..3] Idle state clock polarity */
      __IOM uint16_t I2SSTD     : 2;            /*!< [5..4] I2S standard selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t PCMSMOD    : 1;            /*!< [7..7] PCM frame synchronization mode */
      __IOM uint16_t I2SOPMOD   : 2;            /*!< [9..8] I2S operation mode */
      __IOM uint16_t I2SEN      : 1;            /*!< [10..10] I2S Enable */
      __IOM uint16_t I2SSEL     : 1;            /*!< [11..11] I2S mode selection */
    } I2SCTL_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t I2SPSC;                      /*!< (@ 0x00000020) I2S prescaler register */
    
    struct {
      __IOM uint16_t DIV        : 8;            /*!< [7..0] Dividing factor for the prescaler */
      __IOM uint16_t OF         : 1;            /*!< [8..8] Odd factor for the prescaler */
      __IOM uint16_t MCKOEN     : 1;            /*!< [9..9] I2S_MCK output enable */
    } I2SPSC_b;
  } ;
  __IM  uint16_t  RESERVED8[47];
  
  union {
    __IOM uint16_t QCTL;                        /*!< (@ 0x00000080) Quad-SPI mode control register */
    
    struct {
      __IOM uint16_t QMOD       : 1;            /*!< [0..0] Quad-SPI mode enable */
      __IOM uint16_t QRD        : 1;            /*!< [1..1] Quad-SPI mode read select */
      __IOM uint16_t IO23_DRV   : 1;            /*!< [2..2] Drive IO2 and IO3 enable */
    } QCTL_b;
  } ;
} SPI5_Type;                                    /*!< Size = 130 (0x82) */



/* =========================================================================================================================== */
/* ================                                         I2S1_add                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (I2S1_add)
  */

typedef struct {                                /*!< (@ 0x40003400) I2S1_add Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CKPH       : 1;            /*!< [0..0] Clock Phase Selection */
      __IOM uint16_t CKPL       : 1;            /*!< [1..1] Clock polarity Selection */
      __IOM uint16_t MSTMOD     : 1;            /*!< [2..2] Master Mode Enable */
      __IOM uint16_t PSC        : 3;            /*!< [5..3] Master Clock Prescaler Selection */
      __IOM uint16_t SPIEN      : 1;            /*!< [6..6] SPI enable */
      __IOM uint16_t LF         : 1;            /*!< [7..7] LSB First Mode */
      __IOM uint16_t SWNSS      : 1;            /*!< [8..8] NSS Pin Selection In NSS Software Mode */
      __IOM uint16_t SWNSSEN    : 1;            /*!< [9..9] NSS Software Mode Selection */
      __IOM uint16_t RO         : 1;            /*!< [10..10] Receive only */
      __IOM uint16_t FF16       : 1;            /*!< [11..11] Data frame format */
      __IOM uint16_t CRCNT      : 1;            /*!< [12..12] CRC Next Transfer */
      __IOM uint16_t CRCEN      : 1;            /*!< [13..13] CRC Calculation Enable */
      __IOM uint16_t BDOEN      : 1;            /*!< [14..14] Bidirectional Transmit output enable */
      __IOM uint16_t BDEN       : 1;            /*!< [15..15] Bidirectional enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t DMAREN     : 1;            /*!< [0..0] Rx buffer DMA enable */
      __IOM uint16_t DMATEN     : 1;            /*!< [1..1] Transmit Buffer DMA Enable */
      __IOM uint16_t NSSDRV     : 1;            /*!< [2..2] Drive NSS Output */
      __IM  uint16_t            : 1;
      __IOM uint16_t TMOD       : 1;            /*!< [4..4] SPI TI Mode Enable */
      __IOM uint16_t ERRIE      : 1;            /*!< [5..5] Error interrupt enable */
      __IOM uint16_t RBNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable */
      __IOM uint16_t TBEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t STAT;                        /*!< (@ 0x00000008) status register */
    
    struct {
      __IM  uint16_t RBNE       : 1;            /*!< [0..0] Receive Buffer Not Empty */
      __IM  uint16_t TBE        : 1;            /*!< [1..1] Transmit Buffer Empty */
      __IM  uint16_t I2SCH      : 1;            /*!< [2..2] I2S channel side */
      __IM  uint16_t TXURERR    : 1;            /*!< [3..3] Transmission underrun error bit */
      __IOM uint16_t CRCERR     : 1;            /*!< [4..4] SPI CRC Error Bit */
      __IM  uint16_t CONFERR    : 1;            /*!< [5..5] SPI Configuration error */
      __IM  uint16_t RXORERR    : 1;            /*!< [6..6] Reception Overrun Error Bit */
      __IM  uint16_t TRANS      : 1;            /*!< [7..7] Transmitting On-going Bit */
      __IOM uint16_t FERR       : 1;            /*!< [8..8] Format Error */
    } STAT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x0000000C) data register */
    
    struct {
      __IOM uint16_t SPI_DATA   : 16;           /*!< [15..0] Data transfer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t CPCPOLY;                     /*!< (@ 0x00000010) CRC polynomial register */
    
    struct {
      __IOM uint16_t CPR        : 16;           /*!< [15..0] CRC polynomial register */
    } CPCPOLY_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IM  uint16_t RCRC;                        /*!< (@ 0x00000014) RX CRC register */
    
    struct {
      __IM  uint16_t RCR        : 16;           /*!< [15..0] RX CRC register */
    } RCRC_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t TCRC;                        /*!< (@ 0x00000018) TX CRC register */
    
    struct {
      __IM  uint16_t TCR        : 16;           /*!< [15..0] Tx CRC register */
    } TCRC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t I2SCTL;                      /*!< (@ 0x0000001C) I2S control register */
    
    struct {
      __IOM uint16_t CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel) */
      __IOM uint16_t DTLEN      : 2;            /*!< [2..1] Data length */
      __IOM uint16_t CKPL       : 1;            /*!< [3..3] Idle state clock polarity */
      __IOM uint16_t I2SSTD     : 2;            /*!< [5..4] I2S standard selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t PCMSMOD    : 1;            /*!< [7..7] PCM frame synchronization mode */
      __IOM uint16_t I2SOPMOD   : 2;            /*!< [9..8] I2S operation mode */
      __IOM uint16_t I2SEN      : 1;            /*!< [10..10] I2S Enable */
      __IOM uint16_t I2SSEL     : 1;            /*!< [11..11] I2S mode selection */
    } I2SCTL_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t I2SPSC;                      /*!< (@ 0x00000020) I2S prescaler register */
    
    struct {
      __IOM uint16_t DIV        : 8;            /*!< [7..0] Dividing factor for the prescaler */
      __IOM uint16_t OF         : 1;            /*!< [8..8] Odd factor for the prescaler */
      __IOM uint16_t MCKOEN     : 1;            /*!< [9..9] I2S_MCK output enable */
    } I2SPSC_b;
  } ;
} I2S1_add_Type;                                /*!< Size = 34 (0x22) */



/* =========================================================================================================================== */
/* ================                                         I2S2_add                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (I2S2_add)
  */

typedef struct {                                /*!< (@ 0x40004000) I2S2_add Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CKPH       : 1;            /*!< [0..0] Clock Phase Selection */
      __IOM uint16_t CKPL       : 1;            /*!< [1..1] Clock polarity Selection */
      __IOM uint16_t MSTMOD     : 1;            /*!< [2..2] Master Mode Enable */
      __IOM uint16_t PSC        : 3;            /*!< [5..3] Master Clock Prescaler Selection */
      __IOM uint16_t SPIEN      : 1;            /*!< [6..6] SPI enable */
      __IOM uint16_t LF         : 1;            /*!< [7..7] LSB First Mode */
      __IOM uint16_t SWNSS      : 1;            /*!< [8..8] NSS Pin Selection In NSS Software Mode */
      __IOM uint16_t SWNSSEN    : 1;            /*!< [9..9] NSS Software Mode Selection */
      __IOM uint16_t RO         : 1;            /*!< [10..10] Receive only */
      __IOM uint16_t FF16       : 1;            /*!< [11..11] Data frame format */
      __IOM uint16_t CRCNT      : 1;            /*!< [12..12] CRC Next Transfer */
      __IOM uint16_t CRCEN      : 1;            /*!< [13..13] CRC Calculation Enable */
      __IOM uint16_t BDOEN      : 1;            /*!< [14..14] Bidirectional Transmit output enable */
      __IOM uint16_t BDEN       : 1;            /*!< [15..15] Bidirectional enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t DMAREN     : 1;            /*!< [0..0] Rx buffer DMA enable */
      __IOM uint16_t DMATEN     : 1;            /*!< [1..1] Transmit Buffer DMA Enable */
      __IOM uint16_t NSSDRV     : 1;            /*!< [2..2] Drive NSS Output */
      __IM  uint16_t            : 1;
      __IOM uint16_t TMOD       : 1;            /*!< [4..4] SPI TI Mode Enable */
      __IOM uint16_t ERRIE      : 1;            /*!< [5..5] Error interrupt enable */
      __IOM uint16_t RBNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable */
      __IOM uint16_t TBEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t STAT;                        /*!< (@ 0x00000008) status register */
    
    struct {
      __IM  uint16_t RBNE       : 1;            /*!< [0..0] Receive Buffer Not Empty */
      __IM  uint16_t TBE        : 1;            /*!< [1..1] Transmit Buffer Empty */
      __IM  uint16_t I2SCH      : 1;            /*!< [2..2] I2S channel side */
      __IM  uint16_t TXURERR    : 1;            /*!< [3..3] Transmission underrun error bit */
      __IOM uint16_t CRCERR     : 1;            /*!< [4..4] SPI CRC Error Bit */
      __IM  uint16_t CONFERR    : 1;            /*!< [5..5] SPI Configuration error */
      __IM  uint16_t RXORERR    : 1;            /*!< [6..6] Reception Overrun Error Bit */
      __IM  uint16_t TRANS      : 1;            /*!< [7..7] Transmitting On-going Bit */
      __IOM uint16_t FERR       : 1;            /*!< [8..8] Format Error */
    } STAT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DATA;                        /*!< (@ 0x0000000C) data register */
    
    struct {
      __IOM uint16_t SPI_DATA   : 16;           /*!< [15..0] Data transfer register */
    } DATA_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t CPCPOLY;                     /*!< (@ 0x00000010) CRC polynomial register */
    
    struct {
      __IOM uint16_t CPR        : 16;           /*!< [15..0] CRC polynomial register */
    } CPCPOLY_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IM  uint16_t RCRC;                        /*!< (@ 0x00000014) RX CRC register */
    
    struct {
      __IM  uint16_t RCR        : 16;           /*!< [15..0] RX CRC register */
    } RCRC_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IM  uint16_t TCRC;                        /*!< (@ 0x00000018) TX CRC register */
    
    struct {
      __IM  uint16_t TCR        : 16;           /*!< [15..0] Tx CRC register */
    } TCRC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t I2SCTL;                      /*!< (@ 0x0000001C) I2S control register */
    
    struct {
      __IOM uint16_t CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel) */
      __IOM uint16_t DTLEN      : 2;            /*!< [2..1] Data length */
      __IOM uint16_t CKPL       : 1;            /*!< [3..3] Idle state clock polarity */
      __IOM uint16_t I2SSTD     : 2;            /*!< [5..4] I2S standard selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t PCMSMOD    : 1;            /*!< [7..7] PCM frame synchronization mode */
      __IOM uint16_t I2SOPMOD   : 2;            /*!< [9..8] I2S operation mode */
      __IOM uint16_t I2SEN      : 1;            /*!< [10..10] I2S Enable */
      __IOM uint16_t I2SSEL     : 1;            /*!< [11..11] I2S mode selection */
    } I2SCTL_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t I2SPSC;                      /*!< (@ 0x00000020) I2S prescaler register */
    
    struct {
      __IOM uint16_t DIV        : 8;            /*!< [7..0] Dividing factor for the prescaler */
      __IOM uint16_t OF         : 1;            /*!< [8..8] Odd factor for the prescaler */
      __IOM uint16_t MCKOEN     : 1;            /*!< [9..9] I2S_MCK output enable */
    } I2SPSC_b;
  } ;
} I2S2_add_Type;                                /*!< Size = 34 (0x22) */



/* =========================================================================================================================== */
/* ================                                          SYSCFG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System configuration controller (SYSCFG)
  */

typedef struct {                                /*!< (@ 0x40013800) SYSCFG Structure */
  
  union {
    __IOM uint32_t CFG0;                        /*!< (@ 0x00000000) Configuration register 0 */
    
    struct {
      __IOM uint32_t BOOT_MODE  : 3;            /*!< [2..0] Boot mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t FMC_SWP    : 1;            /*!< [8..8] FMC memory mapping swap */
      __IM  uint32_t            : 1;
      __IOM uint32_t EXMC_SWP   : 2;            /*!< [11..10] EXMC memory mapping swap */
    } CFG0_b;
  } ;
  
  union {
    __IOM uint32_t CFG1;                        /*!< (@ 0x00000004) Configuration register 1 */
    
    struct {
      __IM  uint32_t            : 23;
      __IOM uint32_t ENET_PHY_SEL : 1;          /*!< [23..23] Ethernet PHY selection */
    } CFG1_b;
  } ;
  
  union {
    __IOM uint32_t EXTISS0;                     /*!< (@ 0x00000008) EXTI sources selection register 0 */
    
    struct {
      __IOM uint32_t EXTI0_SS   : 4;            /*!< [3..0] EXTI 0 sources selection */
      __IOM uint32_t EXTI1_SS   : 4;            /*!< [7..4] EXTI 1 sources selection */
      __IOM uint32_t EXTI2_SS   : 4;            /*!< [11..8] EXTI 2 sources selection */
      __IOM uint32_t EXTI3_SS   : 4;            /*!< [15..12] EXTI 3 sources selection */
    } EXTISS0_b;
  } ;
  
  union {
    __IOM uint32_t EXTISS1;                     /*!< (@ 0x0000000C) EXTI sources selection register 1 */
    
    struct {
      __IOM uint32_t EXTI4_SS   : 4;            /*!< [3..0] EXTI 4 sources selection */
      __IOM uint32_t EXTI5_SS   : 4;            /*!< [7..4] EXTI 5 sources selection */
      __IOM uint32_t EXTI6_SS   : 4;            /*!< [11..8] EXTI 6 sources selection */
      __IOM uint32_t EXTI7_SS   : 4;            /*!< [15..12] EXTI 7 sources selection */
    } EXTISS1_b;
  } ;
  
  union {
    __IOM uint32_t EXTISS2;                     /*!< (@ 0x00000010) EXTI sources selection register 2 */
    
    struct {
      __IOM uint32_t EXTI8_SS   : 4;            /*!< [3..0] EXTI 8 sources selection */
      __IOM uint32_t EXTI9_SS   : 4;            /*!< [7..4] EXTI 9 sources selection */
      __IOM uint32_t EXTI10_SS  : 4;            /*!< [11..8] EXTI 10 sources selection */
      __IOM uint32_t EXTI11_SS  : 4;            /*!< [15..12] EXTI 11 sources selection */
    } EXTISS2_b;
  } ;
  
  union {
    __IOM uint32_t EXTISS3;                     /*!< (@ 0x00000014) EXTI sources selection register 3 */
    
    struct {
      __IOM uint32_t EXTI12_SS  : 4;            /*!< [3..0] EXTI 12 sources selection */
      __IOM uint32_t EXTI13_SS  : 4;            /*!< [7..4] EXTI 13 sources selection */
      __IOM uint32_t EXTI14_SS  : 4;            /*!< [11..8] EXTI 14 sources selection */
      __IOM uint32_t EXTI15_SS  : 4;            /*!< [15..12] EXTI 15 sources selection */
    } EXTISS3_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t CPSCTL;                      /*!< (@ 0x00000020) I/O compensation control register */
    
    struct {
      __IOM uint32_t CPS_EN     : 1;            /*!< [0..0] I/O compensation cell enable */
      __IM  uint32_t            : 7;
      __IOM uint32_t CPS_RDY    : 1;            /*!< [8..8] I/O compensation cell is ready or not */
    } CPSCTL_b;
  } ;
} SYSCFG_Type;                                  /*!< Size = 36 (0x24) */



/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Advanced-timers (TIMER0)
  */

typedef struct {                                /*!< (@ 0x40010000) TIMER0 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IOM uint16_t DIR        : 1;            /*!< [4..4] Direction */
      __IOM uint16_t CAM        : 2;            /*!< [6..5] Counter aligns mode selection */
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t CCSE       : 1;            /*!< [0..0] Commutation control shadow enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t CCUC       : 1;            /*!< [2..2] Commutation control shadow register update control */
      __IOM uint16_t DMAS       : 1;            /*!< [3..3] DMA request source selection */
      __IOM uint16_t MMC        : 3;            /*!< [6..4] Master mode control */
      __IOM uint16_t TI0S       : 1;            /*!< [7..7] Channel 0 trigger input selection */
      __IOM uint16_t ISO0       : 1;            /*!< [8..8] Idle state of channel 0 output */
      __IOM uint16_t ISO0N      : 1;            /*!< [9..9] Idle state of channel 0 complementary output */
      __IOM uint16_t ISO1       : 1;            /*!< [10..10] Idle state of channel 1 output */
      __IOM uint16_t ISO1N      : 1;            /*!< [11..11] Idle state of channel 1 complementary output */
      __IOM uint16_t ISO2       : 1;            /*!< [12..12] Idle state of channel 2 output */
      __IOM uint16_t ISO2N      : 1;            /*!< [13..13] Idle state of channel 2 complementary output */
      __IOM uint16_t ISO3       : 1;            /*!< [14..14] Idle state of channel 3 output */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SMCFG;                       /*!< (@ 0x00000008) slave mode configuration register */
    
    struct {
      __IOM uint16_t SMC        : 3;            /*!< [2..0] Slave mode selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGS       : 3;            /*!< [6..4] Trigger selection */
      __IOM uint16_t MSM        : 1;            /*!< [7..7] Master/Slave mode */
      __IOM uint16_t ETFC       : 4;            /*!< [11..8] External trigger filter control */
      __IOM uint16_t ETPSC      : 2;            /*!< [13..12] External trigger prescaler */
      __IOM uint16_t SCM1       : 1;            /*!< [14..14] Part of SMC for enable External clock mode1 */
      __IOM uint16_t ETP        : 1;            /*!< [15..15] External trigger polarity */
    } SMCFG_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
      __IOM uint16_t CH1IE      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt enable */
      __IOM uint16_t CH2IE      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IE      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IOM uint16_t CMTIE      : 1;            /*!< [5..5] commutation interrupt enable */
      __IOM uint16_t TRGIE      : 1;            /*!< [6..6] Trigger interrupt enable */
      __IOM uint16_t BRKIE      : 1;            /*!< [7..7] Break interrupt enable */
      __IOM uint16_t UPDEN      : 1;            /*!< [8..8] Update DMA request enable */
      __IOM uint16_t CH0DEN     : 1;            /*!< [9..9] Channel 0 capture/compare DMA request enable */
      __IOM uint16_t CH1DEN     : 1;            /*!< [10..10] Channel 1 capture/compare DMA request enable */
      __IOM uint16_t CH2DEN     : 1;            /*!< [11..11] Channel 2 capture/compare DMA request enable */
      __IOM uint16_t CH3DEN     : 1;            /*!< [12..12] Channel 3 capture/compare DMA request enable */
      __IOM uint16_t CMTDEN     : 1;            /*!< [13..13] Commutation DMA request enable */
      __IOM uint16_t TRGDEN     : 1;            /*!< [14..14] Trigger DMA request enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) Interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IOM uint16_t CH1IF      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt flag */
      __IOM uint16_t CH2IF      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt flag */
      __IOM uint16_t CH3IF      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt flag */
      __IOM uint16_t CMTIF      : 1;            /*!< [5..5] Channel commutation interrupt flag */
      __IOM uint16_t TRGIF      : 1;            /*!< [6..6] Trigger interrupt flag */
      __IOM uint16_t BRKIF      : 1;            /*!< [7..7] Break interrupt flag */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
      __IOM uint16_t CH1OF      : 1;            /*!< [10..10] Channel 1 over capture flag */
      __IOM uint16_t CH2OF      : 1;            /*!< [11..11] Channel 2 over capture flag */
      __IOM uint16_t CH3OF      : 1;            /*!< [12..12] Channel 3 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) Software event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update event generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
      __OM  uint16_t CH1G       : 1;            /*!< [2..2] Channel 1 capture or compare event generation */
      __OM  uint16_t CH2G       : 1;            /*!< [3..3] Channel 2 capture or compare event generation */
      __OM  uint16_t CH3G       : 1;            /*!< [4..4] Channel 3 capture or compare event generation */
      __OM  uint16_t CMTG       : 1;            /*!< [5..5] Channel commutation event generation */
      __OM  uint16_t TRGG       : 1;            /*!< [6..6] Trigger event generation */
      __OM  uint16_t BRKG       : 1;            /*!< [7..7] Break event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
        __IOM uint16_t CH0COMCEN : 1;           /*!< [7..7] Channel 0 output compare clear enable */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1COMFEN : 1;           /*!< [10..10] Channel 1 output compare fast enable */
        __IOM uint16_t CH1COMSEN : 1;           /*!< [11..11] Channel 1 output compare shadow enable */
        __IOM uint16_t CH1COMCTL : 3;           /*!< [14..12] Channel 1 compare output control */
        __IOM uint16_t CH1COMCEN : 1;           /*!< [15..15] Channel 1 output compare clear enable */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1CAPPSC : 2;           /*!< [11..10] Channel 1 input capture prescaler */
        __IOM uint16_t CH1CAPFLT : 4;           /*!< [15..12] Channel 1 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED6;
  
  union {
    union {
      __IOM uint16_t CHCTL1_Output;             /*!< (@ 0x0000001C) Channel control register 1 (output mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 I/O mode selection */
        __IOM uint16_t CH2COMFEN : 1;           /*!< [2..2] Channel 2 output compare fast enable */
        __IOM uint16_t CH2COMSEN : 1;           /*!< [3..3] Channel 2 compare output shadow enable */
        __IOM uint16_t CH2COMCTL : 3;           /*!< [6..4] Channel 2 compare output control */
        __IOM uint16_t CH2COMCEN : 1;           /*!< [7..7] Channel 2 output compare clear enable */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3COMFEN : 1;           /*!< [10..10] Channel 3 output compare fast enable */
        __IOM uint16_t CH3COMSEN : 1;           /*!< [11..11] Channel 3 output compare shadow enable */
        __IOM uint16_t CH3COMCTL : 3;           /*!< [14..12] Channel 3 compare output control */
        __IOM uint16_t CH3COMCEN : 1;           /*!< [15..15] Channel 3 output compare clear enable */
      } CHCTL1_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL1_Input;              /*!< (@ 0x0000001C) Channel control register 1 (input mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 mode selection */
        __IOM uint16_t CH2CAPPSC : 2;           /*!< [3..2] Channel 2 input capture prescaler */
        __IOM uint16_t CH2CAPFLT : 4;           /*!< [7..4] Channel 2 input capture filter control */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3CAPPSC : 2;           /*!< [11..10] Channel 3 input capture prescaler */
        __IOM uint16_t CH3CAPFLT : 4;           /*!< [15..12] Channel 3 input capture filter control */
      } CHCTL1_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare function polarity */
      __IOM uint16_t CH0NEN     : 1;            /*!< [2..2] Channel 0 complementary output enable */
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
      __IOM uint16_t CH1EN      : 1;            /*!< [4..4] Channel 1 capture/compare function enable */
      __IOM uint16_t CH1P       : 1;            /*!< [5..5] Channel 1 capture/compare function polarity */
      __IOM uint16_t CH1NEN     : 1;            /*!< [6..6] Channel 1 complementary output enable */
      __IOM uint16_t CH1NP      : 1;            /*!< [7..7] Channel 1 complementary output polarity */
      __IOM uint16_t CH2EN      : 1;            /*!< [8..8] Channel 2 capture/compare function enable */
      __IOM uint16_t CH2P       : 1;            /*!< [9..9] Channel 2 capture/compare function polarity */
      __IOM uint16_t CH2NEN     : 1;            /*!< [10..10] Channel 2 complementary output enable */
      __IOM uint16_t CH2NP      : 1;            /*!< [11..11] Channel 2 complementary output polarity */
      __IOM uint16_t CH3EN      : 1;            /*!< [12..12] Channel 3 capture/compare function enable */
      __IOM uint16_t CH3P       : 1;            /*!< [13..13] Channel 3 capture/compare function polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) counter */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] current counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) prescaler */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED10;
  
  union {
    __IOM uint16_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint16_t CAR        : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint16_t  RESERVED11;
  
  union {
    __IOM uint16_t CREP;                        /*!< (@ 0x00000030) Counter repetition register */
    
    struct {
      __IOM uint16_t CREP       : 8;            /*!< [7..0] Counter repetition value */
    } CREP_b;
  } ;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint16_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint16_t CH0VAL     : 16;           /*!< [15..0] Capture or compare value of channel0 */
    } CH0CV_b;
  } ;
  __IM  uint16_t  RESERVED13;
  
  union {
    __IOM uint16_t CH1CV;                       /*!< (@ 0x00000038) Channel 1 capture/compare value register */
    
    struct {
      __IOM uint16_t CH1VAL     : 16;           /*!< [15..0] Capture or compare value of channel1 */
    } CH1CV_b;
  } ;
  __IM  uint16_t  RESERVED14;
  
  union {
    __IOM uint16_t CH2CV;                       /*!< (@ 0x0000003C) Channel 2 capture/compare value register */
    
    struct {
      __IOM uint16_t CH2VAL     : 16;           /*!< [15..0] Capture or compare value of channel 2 */
    } CH2CV_b;
  } ;
  __IM  uint16_t  RESERVED15;
  
  union {
    __IOM uint16_t CH3CV;                       /*!< (@ 0x00000040) Channel 3 capture/compare value register */
    
    struct {
      __IOM uint16_t CH3VAL     : 16;           /*!< [15..0] Capture or compare value of channel 3 */
    } CH3CV_b;
  } ;
  __IM  uint16_t  RESERVED16;
  
  union {
    __IOM uint16_t CCHP;                        /*!< (@ 0x00000044) channel complementary protection register */
    
    struct {
      __IOM uint16_t DTCFG      : 8;            /*!< [7..0] Dead time configure */
      __IOM uint16_t PROT       : 2;            /*!< [9..8] Complementary register protect control */
      __IOM uint16_t IOS        : 1;            /*!< [10..10] Idle mode off-state configure */
      __IOM uint16_t ROS        : 1;            /*!< [11..11] Run mode off-state configure */
      __IOM uint16_t BRKEN      : 1;            /*!< [12..12] Break enable */
      __IOM uint16_t BRKP       : 1;            /*!< [13..13] Break polarity */
      __IOM uint16_t OAEN       : 1;            /*!< [14..14] Output automatic enable */
      __IOM uint16_t POEN       : 1;            /*!< [15..15] Primary output enable */
    } CCHP_b;
  } ;
  __IM  uint16_t  RESERVED17;
  
  union {
    __IOM uint16_t DMACFG;                      /*!< (@ 0x00000048) DMA configuration register */
    
    struct {
      __IOM uint16_t DMATA      : 5;            /*!< [4..0] DMA transfer access start address */
      __IM  uint16_t            : 3;
      __IOM uint16_t DMATC      : 5;            /*!< [12..8] DMA transfer count */
    } DMACFG_b;
  } ;
  __IM  uint16_t  RESERVED18;
  
  union {
    __IOM uint16_t DMATB;                       /*!< (@ 0x0000004C) DMA transfer buffer register */
    
    struct {
      __IOM uint16_t DMATB      : 16;           /*!< [15..0] DMA transfer buffer */
    } DMATB_b;
  } ;
  __IM  uint16_t  RESERVED19[87];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) Configuration register */
    
    struct {
      __IOM uint16_t OUTSEL     : 1;            /*!< [0..0] The output value selection */
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
} TIMER0_Type;                                  /*!< Size = 254 (0xfe) */



/* =========================================================================================================================== */
/* ================                                          TIMER1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER1)
  */

typedef struct {                                /*!< (@ 0x40000000) TIMER1 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IOM uint16_t DIR        : 1;            /*!< [4..4] Direction */
      __IOM uint16_t CAM        : 2;            /*!< [6..5] Counter aligns mode selection */
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IM  uint16_t            : 3;
      __IOM uint16_t DMAS       : 1;            /*!< [3..3] DMA request source selection */
      __IOM uint16_t MMC        : 3;            /*!< [6..4] Master mode control */
      __IOM uint16_t TI0S       : 1;            /*!< [7..7] Channel 0 trigger input selection */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SMCFG;                       /*!< (@ 0x00000008) slave mode control register */
    
    struct {
      __IOM uint16_t SMC        : 3;            /*!< [2..0] Slave mode control */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGS       : 3;            /*!< [6..4] Trigger selection */
      __IOM uint16_t MSM        : 1;            /*!< [7..7] Master-slave mode */
      __IOM uint16_t ETFC       : 4;            /*!< [11..8] External trigger filter control */
      __IOM uint16_t ETPSC      : 2;            /*!< [13..12] External trigger prescaler */
      __IOM uint16_t SMC1       : 1;            /*!< [14..14] Part of SMC for enable External clock mode1 */
      __IOM uint16_t ETP        : 1;            /*!< [15..15] External trigger polarity */
    } SMCFG_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
      __IOM uint16_t CH1IE      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt enable */
      __IOM uint16_t CH2IE      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IE      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGIE      : 1;            /*!< [6..6] Trigger interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t UPDEN      : 1;            /*!< [8..8] Update DMA request enable */
      __IOM uint16_t CH0DEN     : 1;            /*!< [9..9] Channel 0 capture/compare DMA request enable */
      __IOM uint16_t CH1DEN     : 1;            /*!< [10..10] Channel 1 capture/compare DMA request enable */
      __IOM uint16_t CH2DEN     : 1;            /*!< [11..11] Channel 2 capture/compare DMA request enable */
      __IOM uint16_t CH3DEN     : 1;            /*!< [12..12] Channel 3 capture/compare DMA request enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGDEN     : 1;            /*!< [14..14] Trigger DMA request enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IOM uint16_t CH1IF      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt flag */
      __IOM uint16_t CH2IF      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IF      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGIF      : 1;            /*!< [6..6] Trigger interrupt flag */
      __IM  uint16_t            : 2;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
      __IOM uint16_t CH1OF      : 1;            /*!< [10..10] Channel 1 over capture flag */
      __IOM uint16_t CH2OF      : 1;            /*!< [11..11] Channel 2 over capture flag */
      __IOM uint16_t CH3OF      : 1;            /*!< [12..12] Channel 3 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
      __OM  uint16_t CH1G       : 1;            /*!< [2..2] Channel 1 capture or compare event generation */
      __OM  uint16_t CH2G       : 1;            /*!< [3..3] Channel 2 capture or compare event generation */
      __OM  uint16_t CH3G       : 1;            /*!< [4..4] Channel 3 capture or compare event generation */
      __IM  uint16_t            : 1;
      __OM  uint16_t TRGG       : 1;            /*!< [6..6] Trigger event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
        __IOM uint16_t CH0COMCEN : 1;           /*!< [7..7] Channel 0 output compare clear enable */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1COMFEN : 1;           /*!< [10..10] Channel 1 output compare fast enable */
        __IOM uint16_t CH1COMSEN : 1;           /*!< [11..11] Channel 1 output compare shadow enable */
        __IOM uint16_t CH1COMCTL : 3;           /*!< [14..12] Channel 1 compare output control */
        __IOM uint16_t CH1COMCEN : 1;           /*!< [15..15] Channel 1 output compare clear enable */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1CAPPSC : 2;           /*!< [11..10] Channel 1 input capture prescaler */
        __IOM uint16_t CH1CAPFLT : 4;           /*!< [15..12] Channel 1 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED6;
  
  union {
    union {
      __IOM uint16_t CHCTL1_Output;             /*!< (@ 0x0000001C) Channel control register 1 (output mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 I/O mode selection */
        __IOM uint16_t CH2COMFEN : 1;           /*!< [2..2] Channel 2 output compare fast enable */
        __IOM uint16_t CH2COMSEN : 1;           /*!< [3..3] Channel 2 compare output shadow enable */
        __IOM uint16_t CH2COMCTL : 3;           /*!< [6..4] Channel 2 compare output control */
        __IOM uint16_t CH2COMCEN : 1;           /*!< [7..7] Channel 2 output compare clear enable */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3COMFEN : 1;           /*!< [10..10] Channel 3 output compare fast enable */
        __IOM uint16_t CH3COMSEN : 1;           /*!< [11..11] Channel 3 output compare shadow enable */
        __IOM uint16_t CH3COMCTL : 3;           /*!< [14..12] Channel 3 compare output control */
        __IOM uint16_t CH3COMCEN : 1;           /*!< [15..15] Channel 3 output compare clear enable */
      } CHCTL1_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL1_Input;              /*!< (@ 0x0000001C) Channel control register 1 (input mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 mode selection */
        __IOM uint16_t CH2CAPPSC : 2;           /*!< [3..2] Channel 2 input capture prescaler */
        __IOM uint16_t CH2CAPFLT : 4;           /*!< [7..4] Channel 2 input capture filter control */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3CAPPSC : 2;           /*!< [11..10] Channel 3 input capture prescaler */
        __IOM uint16_t CH3CAPFLT : 4;           /*!< [15..12] Channel 3 input capture filter control */
      } CHCTL1_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
      __IOM uint16_t CH1EN      : 1;            /*!< [4..4] Channel 1 capture/compare function enable */
      __IOM uint16_t CH1P       : 1;            /*!< [5..5] Channel 1 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH1NP      : 1;            /*!< [7..7] Channel 1 complementary output polarity */
      __IOM uint16_t CH2EN      : 1;            /*!< [8..8] Channel 2 capture/compare function enable */
      __IOM uint16_t CH2P       : 1;            /*!< [9..9] Channel 2 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH2NP      : 1;            /*!< [11..11] Channel 2 complementary output polarity */
      __IOM uint16_t CH3EN      : 1;            /*!< [12..12] Channel 3 capture/compare function enable */
      __IOM uint16_t CH3P       : 1;            /*!< [13..13] Channel 3 capture/compare function polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint32_t CNT        : 32;           /*!< [31..0] counter value */
    } CNT_b;
  } ;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint32_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint32_t CARL       : 32;           /*!< [31..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint32_t CH0VAL     : 32;           /*!< [31..0] Capture or compare value of channel 0 */
    } CH0CV_b;
  } ;
  
  union {
    __IOM uint32_t CH1CV;                       /*!< (@ 0x00000038) Channel 1 capture/compare value register */
    
    struct {
      __IOM uint32_t CH1VAL     : 32;           /*!< [31..0] Capture or compare value of channel1 */
    } CH1CV_b;
  } ;
  
  union {
    __IOM uint32_t CH2CV;                       /*!< (@ 0x0000003C) Channel 2 capture/compare value register */
    
    struct {
      __IOM uint32_t CH2VAL     : 32;           /*!< [31..0] Capture or compare value of channel 2 */
    } CH2CV_b;
  } ;
  
  union {
    __IOM uint32_t CH3CV;                       /*!< (@ 0x00000040) Channel 3 capture/compare value register */
    
    struct {
      __IOM uint32_t CH3VAL     : 32;           /*!< [31..0] Capture or compare value of channel 3 */
    } CH3CV_b;
  } ;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint16_t DMACFG;                      /*!< (@ 0x00000048) DMA configuration register */
    
    struct {
      __IOM uint16_t DMATA      : 5;            /*!< [4..0] DMA transfer access start address */
      __IM  uint16_t            : 3;
      __IOM uint16_t DMATC      : 5;            /*!< [12..8] DMA transfer count */
    } DMACFG_b;
  } ;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint32_t DMATB;                       /*!< (@ 0x0000004C) DMA transfer buffer register */
    
    struct {
      __IOM uint32_t DMATB      : 16;           /*!< [15..0] DMA transfer buffer */
    } DMATB_b;
  } ;
  
  union {
    __IOM uint16_t IRMP;                        /*!< (@ 0x00000050) Input remap register */
    
    struct {
      __IM  uint16_t            : 6;
      __IOM uint16_t CI3_RMP    : 2;            /*!< [7..6] Channel 3 input remap */
      __IM  uint16_t            : 2;
      __IOM uint16_t ITI1_RMP   : 2;            /*!< [11..10] Internal trigger input1 remap */
    } IRMP_b;
  } ;
  __IM  uint16_t  RESERVED13;
  __IM  uint32_t  RESERVED14[42];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) Configuration */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
  __IM  uint16_t  RESERVED15;
} TIMER1_Type;                                  /*!< Size = 256 (0x100) */



/* =========================================================================================================================== */
/* ================                                          TIMER2                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER2)
  */

typedef struct {                                /*!< (@ 0x40000400) TIMER2 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IOM uint16_t DIR        : 1;            /*!< [4..4] Direction */
      __IOM uint16_t CAM        : 2;            /*!< [6..5] Counter aligns mode selection */
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IM  uint16_t            : 3;
      __IOM uint16_t DMAS       : 1;            /*!< [3..3] DMA request source selection */
      __IOM uint16_t MMC        : 3;            /*!< [6..4] Master mode control */
      __IOM uint16_t TI0S       : 1;            /*!< [7..7] Channel 0 trigger input selection */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SMCFG;                       /*!< (@ 0x00000008) slave mode control register */
    
    struct {
      __IOM uint16_t SMC        : 3;            /*!< [2..0] Slave mode control */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGS       : 3;            /*!< [6..4] Trigger selection */
      __IOM uint16_t MSM        : 1;            /*!< [7..7] Master-slave mode */
      __IOM uint16_t ETFC       : 4;            /*!< [11..8] External trigger filter control */
      __IOM uint16_t ETPSC      : 2;            /*!< [13..12] External trigger prescaler */
      __IOM uint16_t SMC1       : 1;            /*!< [14..14] Part of SMC for enable External clock mode1 */
      __IOM uint16_t ETP        : 1;            /*!< [15..15] External trigger polarity */
    } SMCFG_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
      __IOM uint16_t CH1IE      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt enable */
      __IOM uint16_t CH2IE      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IE      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGIE      : 1;            /*!< [6..6] Trigger interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t UPDEN      : 1;            /*!< [8..8] Update DMA request enable */
      __IOM uint16_t CH0DEN     : 1;            /*!< [9..9] Channel 0 capture/compare DMA request enable */
      __IOM uint16_t CH1DEN     : 1;            /*!< [10..10] Channel 1 capture/compare DMA request enable */
      __IOM uint16_t CH2DEN     : 1;            /*!< [11..11] Channel 2 capture/compare DMA request enable */
      __IOM uint16_t CH3DEN     : 1;            /*!< [12..12] Channel 3 capture/compare DMA request enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGDEN     : 1;            /*!< [14..14] Trigger DMA request enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IOM uint16_t CH1IF      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt flag */
      __IOM uint16_t CH2IF      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IF      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGIF      : 1;            /*!< [6..6] Trigger interrupt flag */
      __IM  uint16_t            : 2;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
      __IOM uint16_t CH1OF      : 1;            /*!< [10..10] Channel 1 over capture flag */
      __IOM uint16_t CH2OF      : 1;            /*!< [11..11] Channel 2 over capture flag */
      __IOM uint16_t CH3OF      : 1;            /*!< [12..12] Channel 3 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
      __OM  uint16_t CH1G       : 1;            /*!< [2..2] Channel 1 capture or compare event generation */
      __OM  uint16_t CH2G       : 1;            /*!< [3..3] Channel 2 capture or compare event generation */
      __OM  uint16_t CH3G       : 1;            /*!< [4..4] Channel 3 capture or compare event generation */
      __IM  uint16_t            : 1;
      __OM  uint16_t TRGG       : 1;            /*!< [6..6] Trigger event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
        __IOM uint16_t CH0COMCEN : 1;           /*!< [7..7] Channel 0 output compare clear enable */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1COMFEN : 1;           /*!< [10..10] Channel 1 output compare fast enable */
        __IOM uint16_t CH1COMSEN : 1;           /*!< [11..11] Channel 1 output compare shadow enable */
        __IOM uint16_t CH1COMCTL : 3;           /*!< [14..12] Channel 1 compare output control */
        __IOM uint16_t CH1COMCEN : 1;           /*!< [15..15] Channel 1 output compare clear enable */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1CAPPSC : 2;           /*!< [11..10] Channel 1 input capture prescaler */
        __IOM uint16_t CH1CAPFLT : 4;           /*!< [15..12] Channel 1 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED6;
  
  union {
    union {
      __IOM uint16_t CHCTL1_Output;             /*!< (@ 0x0000001C) Channel control register 1 (output mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 I/O mode selection */
        __IOM uint16_t CH2COMFEN : 1;           /*!< [2..2] Channel 2 output compare fast enable */
        __IOM uint16_t CH2COMSEN : 1;           /*!< [3..3] Channel 2 compare output shadow enable */
        __IOM uint16_t CH2COMCTL : 3;           /*!< [6..4] Channel 2 compare output control */
        __IOM uint16_t CH2COMCEN : 1;           /*!< [7..7] Channel 2 output compare clear enable */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3COMFEN : 1;           /*!< [10..10] Channel 3 output compare fast enable */
        __IOM uint16_t CH3COMSEN : 1;           /*!< [11..11] Channel 3 output compare shadow enable */
        __IOM uint16_t CH3COMCTL : 3;           /*!< [14..12] Channel 3 compare output control */
        __IOM uint16_t CH3COMCEN : 1;           /*!< [15..15] Channel 3 output compare clear enable */
      } CHCTL1_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL1_Input;              /*!< (@ 0x0000001C) Channel control register 1 (input mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 mode selection */
        __IOM uint16_t CH2CAPPSC : 2;           /*!< [3..2] Channel 2 input capture prescaler */
        __IOM uint16_t CH2CAPFLT : 4;           /*!< [7..4] Channel 2 input capture filter control */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3CAPPSC : 2;           /*!< [11..10] Channel 3 input capture prescaler */
        __IOM uint16_t CH3CAPFLT : 4;           /*!< [15..12] Channel 3 input capture filter control */
      } CHCTL1_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
      __IOM uint16_t CH1EN      : 1;            /*!< [4..4] Channel 1 capture/compare function enable */
      __IOM uint16_t CH1P       : 1;            /*!< [5..5] Channel 1 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH1NP      : 1;            /*!< [7..7] Channel 1 complementary output polarity */
      __IOM uint16_t CH2EN      : 1;            /*!< [8..8] Channel 2 capture/compare function enable */
      __IOM uint16_t CH2P       : 1;            /*!< [9..9] Channel 2 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH2NP      : 1;            /*!< [11..11] Channel 2 complementary output polarity */
      __IOM uint16_t CH3EN      : 1;            /*!< [12..12] Channel 3 capture/compare function enable */
      __IOM uint16_t CH3P       : 1;            /*!< [13..13] Channel 3 capture/compare function polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint32_t CNT        : 32;           /*!< [31..0] counter value */
    } CNT_b;
  } ;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint32_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint32_t CARL       : 32;           /*!< [31..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint32_t CH0VAL     : 32;           /*!< [31..0] Capture or compare value of channel 0 */
    } CH0CV_b;
  } ;
  
  union {
    __IOM uint32_t CH1CV;                       /*!< (@ 0x00000038) Channel 1 capture/compare value register */
    
    struct {
      __IOM uint32_t CH1VAL     : 32;           /*!< [31..0] Capture or compare value of channel1 */
    } CH1CV_b;
  } ;
  
  union {
    __IOM uint32_t CH2CV;                       /*!< (@ 0x0000003C) Channel 2 capture/compare value register */
    
    struct {
      __IOM uint32_t CH2VAL     : 32;           /*!< [31..0] Capture or compare value of channel 2 */
    } CH2CV_b;
  } ;
  
  union {
    __IOM uint32_t CH3CV;                       /*!< (@ 0x00000040) Channel 3 capture/compare value register */
    
    struct {
      __IOM uint32_t CH3VAL     : 32;           /*!< [31..0] Capture or compare value of channel 3 */
    } CH3CV_b;
  } ;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint16_t DMACFG;                      /*!< (@ 0x00000048) DMA configuration register */
    
    struct {
      __IOM uint16_t DMATA      : 5;            /*!< [4..0] DMA transfer access start address */
      __IM  uint16_t            : 3;
      __IOM uint16_t DMATC      : 5;            /*!< [12..8] DMA transfer count */
    } DMACFG_b;
  } ;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint32_t DMATB;                       /*!< (@ 0x0000004C) DMA transfer buffer register */
    
    struct {
      __IOM uint32_t DMATB      : 16;           /*!< [15..0] DMA transfer buffer */
    } DMATB_b;
  } ;
  
  union {
    __IOM uint16_t IRMP;                        /*!< (@ 0x00000050) Input remap register */
    
    struct {
      __IM  uint16_t            : 6;
      __IOM uint16_t CI3_RMP    : 2;            /*!< [7..6] Channel 3 input remap */
      __IM  uint16_t            : 2;
      __IOM uint16_t ITI1_RMP   : 2;            /*!< [11..10] Internal trigger input1 remap */
    } IRMP_b;
  } ;
  __IM  uint16_t  RESERVED13;
  __IM  uint32_t  RESERVED14[42];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) Configuration */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
  __IM  uint16_t  RESERVED15;
} TIMER2_Type;                                  /*!< Size = 256 (0x100) */



/* =========================================================================================================================== */
/* ================                                          TIMER3                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER3)
  */

typedef struct {                                /*!< (@ 0x40000800) TIMER3 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IOM uint16_t DIR        : 1;            /*!< [4..4] Direction */
      __IOM uint16_t CAM        : 2;            /*!< [6..5] Counter aligns mode selection */
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IM  uint16_t            : 3;
      __IOM uint16_t DMAS       : 1;            /*!< [3..3] DMA request source selection */
      __IOM uint16_t MMC        : 3;            /*!< [6..4] Master mode control */
      __IOM uint16_t TI0S       : 1;            /*!< [7..7] Channel 0 trigger input selection */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SMCFG;                       /*!< (@ 0x00000008) slave mode control register */
    
    struct {
      __IOM uint16_t SMC        : 3;            /*!< [2..0] Slave mode control */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGS       : 3;            /*!< [6..4] Trigger selection */
      __IOM uint16_t MSM        : 1;            /*!< [7..7] Master-slave mode */
      __IOM uint16_t ETFC       : 4;            /*!< [11..8] External trigger filter control */
      __IOM uint16_t ETPSC      : 2;            /*!< [13..12] External trigger prescaler */
      __IOM uint16_t SMC1       : 1;            /*!< [14..14] Part of SMC for enable External clock mode1 */
      __IOM uint16_t ETP        : 1;            /*!< [15..15] External trigger polarity */
    } SMCFG_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
      __IOM uint16_t CH1IE      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt enable */
      __IOM uint16_t CH2IE      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IE      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGIE      : 1;            /*!< [6..6] Trigger interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t UPDEN      : 1;            /*!< [8..8] Update DMA request enable */
      __IOM uint16_t CH0DEN     : 1;            /*!< [9..9] Channel 0 capture/compare DMA request enable */
      __IOM uint16_t CH1DEN     : 1;            /*!< [10..10] Channel 1 capture/compare DMA request enable */
      __IOM uint16_t CH2DEN     : 1;            /*!< [11..11] Channel 2 capture/compare DMA request enable */
      __IOM uint16_t CH3DEN     : 1;            /*!< [12..12] Channel 3 capture/compare DMA request enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGDEN     : 1;            /*!< [14..14] Trigger DMA request enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IOM uint16_t CH1IF      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt flag */
      __IOM uint16_t CH2IF      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IF      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGIF      : 1;            /*!< [6..6] Trigger interrupt flag */
      __IM  uint16_t            : 2;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
      __IOM uint16_t CH1OF      : 1;            /*!< [10..10] Channel 1 over capture flag */
      __IOM uint16_t CH2OF      : 1;            /*!< [11..11] Channel 2 over capture flag */
      __IOM uint16_t CH3OF      : 1;            /*!< [12..12] Channel 3 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
      __OM  uint16_t CH1G       : 1;            /*!< [2..2] Channel 1 capture or compare event generation */
      __OM  uint16_t CH2G       : 1;            /*!< [3..3] Channel 2 capture or compare event generation */
      __OM  uint16_t CH3G       : 1;            /*!< [4..4] Channel 3 capture or compare event generation */
      __IM  uint16_t            : 1;
      __OM  uint16_t TRGG       : 1;            /*!< [6..6] Trigger event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
        __IOM uint16_t CH0COMCEN : 1;           /*!< [7..7] Channel 0 output compare clear enable */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1COMFEN : 1;           /*!< [10..10] Channel 1 output compare fast enable */
        __IOM uint16_t CH1COMSEN : 1;           /*!< [11..11] Channel 1 output compare shadow enable */
        __IOM uint16_t CH1COMCTL : 3;           /*!< [14..12] Channel 1 compare output control */
        __IOM uint16_t CH1COMCEN : 1;           /*!< [15..15] Channel 1 output compare clear enable */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1CAPPSC : 2;           /*!< [11..10] Channel 1 input capture prescaler */
        __IOM uint16_t CH1CAPFLT : 4;           /*!< [15..12] Channel 1 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED6;
  
  union {
    union {
      __IOM uint16_t CHCTL1_Output;             /*!< (@ 0x0000001C) Channel control register 1 (output mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 I/O mode selection */
        __IOM uint16_t CH2COMFEN : 1;           /*!< [2..2] Channel 2 output compare fast enable */
        __IOM uint16_t CH2COMSEN : 1;           /*!< [3..3] Channel 2 compare output shadow enable */
        __IOM uint16_t CH2COMCTL : 3;           /*!< [6..4] Channel 2 compare output control */
        __IOM uint16_t CH2COMCEN : 1;           /*!< [7..7] Channel 2 output compare clear enable */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3COMFEN : 1;           /*!< [10..10] Channel 3 output compare fast enable */
        __IOM uint16_t CH3COMSEN : 1;           /*!< [11..11] Channel 3 output compare shadow enable */
        __IOM uint16_t CH3COMCTL : 3;           /*!< [14..12] Channel 3 compare output control */
        __IOM uint16_t CH3COMCEN : 1;           /*!< [15..15] Channel 3 output compare clear enable */
      } CHCTL1_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL1_Input;              /*!< (@ 0x0000001C) Channel control register 1 (input mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 mode selection */
        __IOM uint16_t CH2CAPPSC : 2;           /*!< [3..2] Channel 2 input capture prescaler */
        __IOM uint16_t CH2CAPFLT : 4;           /*!< [7..4] Channel 2 input capture filter control */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3CAPPSC : 2;           /*!< [11..10] Channel 3 input capture prescaler */
        __IOM uint16_t CH3CAPFLT : 4;           /*!< [15..12] Channel 3 input capture filter control */
      } CHCTL1_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
      __IOM uint16_t CH1EN      : 1;            /*!< [4..4] Channel 1 capture/compare function enable */
      __IOM uint16_t CH1P       : 1;            /*!< [5..5] Channel 1 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH1NP      : 1;            /*!< [7..7] Channel 1 complementary output polarity */
      __IOM uint16_t CH2EN      : 1;            /*!< [8..8] Channel 2 capture/compare function enable */
      __IOM uint16_t CH2P       : 1;            /*!< [9..9] Channel 2 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH2NP      : 1;            /*!< [11..11] Channel 2 complementary output polarity */
      __IOM uint16_t CH3EN      : 1;            /*!< [12..12] Channel 3 capture/compare function enable */
      __IOM uint16_t CH3P       : 1;            /*!< [13..13] Channel 3 capture/compare function polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint32_t CNT        : 32;           /*!< [31..0] counter value */
    } CNT_b;
  } ;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint32_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint32_t CARL       : 32;           /*!< [31..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint32_t CH0VAL     : 32;           /*!< [31..0] Capture or compare value of channel 0 */
    } CH0CV_b;
  } ;
  
  union {
    __IOM uint32_t CH1CV;                       /*!< (@ 0x00000038) Channel 1 capture/compare value register */
    
    struct {
      __IOM uint32_t CH1VAL     : 32;           /*!< [31..0] Capture or compare value of channel1 */
    } CH1CV_b;
  } ;
  
  union {
    __IOM uint32_t CH2CV;                       /*!< (@ 0x0000003C) Channel 2 capture/compare value register */
    
    struct {
      __IOM uint32_t CH2VAL     : 32;           /*!< [31..0] Capture or compare value of channel 2 */
    } CH2CV_b;
  } ;
  
  union {
    __IOM uint32_t CH3CV;                       /*!< (@ 0x00000040) Channel 3 capture/compare value register */
    
    struct {
      __IOM uint32_t CH3VAL     : 32;           /*!< [31..0] Capture or compare value of channel 3 */
    } CH3CV_b;
  } ;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint16_t DMACFG;                      /*!< (@ 0x00000048) DMA configuration register */
    
    struct {
      __IOM uint16_t DMATA      : 5;            /*!< [4..0] DMA transfer access start address */
      __IM  uint16_t            : 3;
      __IOM uint16_t DMATC      : 5;            /*!< [12..8] DMA transfer count */
    } DMACFG_b;
  } ;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint32_t DMATB;                       /*!< (@ 0x0000004C) DMA transfer buffer register */
    
    struct {
      __IOM uint32_t DMATB      : 16;           /*!< [15..0] DMA transfer buffer */
    } DMATB_b;
  } ;
  
  union {
    __IOM uint16_t IRMP;                        /*!< (@ 0x00000050) Input remap register */
    
    struct {
      __IM  uint16_t            : 6;
      __IOM uint16_t CI3_RMP    : 2;            /*!< [7..6] Channel 3 input remap */
      __IM  uint16_t            : 2;
      __IOM uint16_t ITI1_RMP   : 2;            /*!< [11..10] Internal trigger input1 remap */
    } IRMP_b;
  } ;
  __IM  uint16_t  RESERVED13;
  __IM  uint32_t  RESERVED14[42];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) Configuration */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
  __IM  uint16_t  RESERVED15;
} TIMER3_Type;                                  /*!< Size = 256 (0x100) */



/* =========================================================================================================================== */
/* ================                                          TIMER4                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER4)
  */

typedef struct {                                /*!< (@ 0x40000C00) TIMER4 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IOM uint16_t DIR        : 1;            /*!< [4..4] Direction */
      __IOM uint16_t CAM        : 2;            /*!< [6..5] Counter aligns mode selection */
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IM  uint16_t            : 3;
      __IOM uint16_t DMAS       : 1;            /*!< [3..3] DMA request source selection */
      __IOM uint16_t MMC        : 3;            /*!< [6..4] Master mode control */
      __IOM uint16_t TI0S       : 1;            /*!< [7..7] Channel 0 trigger input selection */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SMCFG;                       /*!< (@ 0x00000008) slave mode control register */
    
    struct {
      __IOM uint16_t SMC        : 3;            /*!< [2..0] Slave mode control */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGS       : 3;            /*!< [6..4] Trigger selection */
      __IOM uint16_t MSM        : 1;            /*!< [7..7] Master-slave mode */
      __IOM uint16_t ETFC       : 4;            /*!< [11..8] External trigger filter control */
      __IOM uint16_t ETPSC      : 2;            /*!< [13..12] External trigger prescaler */
      __IOM uint16_t SMC1       : 1;            /*!< [14..14] Part of SMC for enable External clock mode1 */
      __IOM uint16_t ETP        : 1;            /*!< [15..15] External trigger polarity */
    } SMCFG_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
      __IOM uint16_t CH1IE      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt enable */
      __IOM uint16_t CH2IE      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IE      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGIE      : 1;            /*!< [6..6] Trigger interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t UPDEN      : 1;            /*!< [8..8] Update DMA request enable */
      __IOM uint16_t CH0DEN     : 1;            /*!< [9..9] Channel 0 capture/compare DMA request enable */
      __IOM uint16_t CH1DEN     : 1;            /*!< [10..10] Channel 1 capture/compare DMA request enable */
      __IOM uint16_t CH2DEN     : 1;            /*!< [11..11] Channel 2 capture/compare DMA request enable */
      __IOM uint16_t CH3DEN     : 1;            /*!< [12..12] Channel 3 capture/compare DMA request enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGDEN     : 1;            /*!< [14..14] Trigger DMA request enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IOM uint16_t CH1IF      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt flag */
      __IOM uint16_t CH2IF      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IF      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGIF      : 1;            /*!< [6..6] Trigger interrupt flag */
      __IM  uint16_t            : 2;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
      __IOM uint16_t CH1OF      : 1;            /*!< [10..10] Channel 1 over capture flag */
      __IOM uint16_t CH2OF      : 1;            /*!< [11..11] Channel 2 over capture flag */
      __IOM uint16_t CH3OF      : 1;            /*!< [12..12] Channel 3 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
      __OM  uint16_t CH1G       : 1;            /*!< [2..2] Channel 1 capture or compare event generation */
      __OM  uint16_t CH2G       : 1;            /*!< [3..3] Channel 2 capture or compare event generation */
      __OM  uint16_t CH3G       : 1;            /*!< [4..4] Channel 3 capture or compare event generation */
      __IM  uint16_t            : 1;
      __OM  uint16_t TRGG       : 1;            /*!< [6..6] Trigger event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
        __IOM uint16_t CH0COMCEN : 1;           /*!< [7..7] Channel 0 output compare clear enable */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1COMFEN : 1;           /*!< [10..10] Channel 1 output compare fast enable */
        __IOM uint16_t CH1COMSEN : 1;           /*!< [11..11] Channel 1 output compare shadow enable */
        __IOM uint16_t CH1COMCTL : 3;           /*!< [14..12] Channel 1 compare output control */
        __IOM uint16_t CH1COMCEN : 1;           /*!< [15..15] Channel 1 output compare clear enable */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1CAPPSC : 2;           /*!< [11..10] Channel 1 input capture prescaler */
        __IOM uint16_t CH1CAPFLT : 4;           /*!< [15..12] Channel 1 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED6;
  
  union {
    union {
      __IOM uint16_t CHCTL1_Output;             /*!< (@ 0x0000001C) Channel control register 1 (output mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 I/O mode selection */
        __IOM uint16_t CH2COMFEN : 1;           /*!< [2..2] Channel 2 output compare fast enable */
        __IOM uint16_t CH2COMSEN : 1;           /*!< [3..3] Channel 2 compare output shadow enable */
        __IOM uint16_t CH2COMCTL : 3;           /*!< [6..4] Channel 2 compare output control */
        __IOM uint16_t CH2COMCEN : 1;           /*!< [7..7] Channel 2 output compare clear enable */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3COMFEN : 1;           /*!< [10..10] Channel 3 output compare fast enable */
        __IOM uint16_t CH3COMSEN : 1;           /*!< [11..11] Channel 3 output compare shadow enable */
        __IOM uint16_t CH3COMCTL : 3;           /*!< [14..12] Channel 3 compare output control */
        __IOM uint16_t CH3COMCEN : 1;           /*!< [15..15] Channel 3 output compare clear enable */
      } CHCTL1_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL1_Input;              /*!< (@ 0x0000001C) Channel control register 1 (input mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 mode selection */
        __IOM uint16_t CH2CAPPSC : 2;           /*!< [3..2] Channel 2 input capture prescaler */
        __IOM uint16_t CH2CAPFLT : 4;           /*!< [7..4] Channel 2 input capture filter control */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3CAPPSC : 2;           /*!< [11..10] Channel 3 input capture prescaler */
        __IOM uint16_t CH3CAPFLT : 4;           /*!< [15..12] Channel 3 input capture filter control */
      } CHCTL1_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
      __IOM uint16_t CH1EN      : 1;            /*!< [4..4] Channel 1 capture/compare function enable */
      __IOM uint16_t CH1P       : 1;            /*!< [5..5] Channel 1 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH1NP      : 1;            /*!< [7..7] Channel 1 complementary output polarity */
      __IOM uint16_t CH2EN      : 1;            /*!< [8..8] Channel 2 capture/compare function enable */
      __IOM uint16_t CH2P       : 1;            /*!< [9..9] Channel 2 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH2NP      : 1;            /*!< [11..11] Channel 2 complementary output polarity */
      __IOM uint16_t CH3EN      : 1;            /*!< [12..12] Channel 3 capture/compare function enable */
      __IOM uint16_t CH3P       : 1;            /*!< [13..13] Channel 3 capture/compare function polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint32_t CNT        : 32;           /*!< [31..0] counter value */
    } CNT_b;
  } ;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint32_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint32_t CARL       : 32;           /*!< [31..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint32_t CH0VAL     : 32;           /*!< [31..0] Capture or compare value of channel 0 */
    } CH0CV_b;
  } ;
  
  union {
    __IOM uint32_t CH1CV;                       /*!< (@ 0x00000038) Channel 1 capture/compare value register */
    
    struct {
      __IOM uint32_t CH1VAL     : 32;           /*!< [31..0] Capture or compare value of channel1 */
    } CH1CV_b;
  } ;
  
  union {
    __IOM uint32_t CH2CV;                       /*!< (@ 0x0000003C) Channel 2 capture/compare value register */
    
    struct {
      __IOM uint32_t CH2VAL     : 32;           /*!< [31..0] Capture or compare value of channel 2 */
    } CH2CV_b;
  } ;
  
  union {
    __IOM uint32_t CH3CV;                       /*!< (@ 0x00000040) Channel 3 capture/compare value register */
    
    struct {
      __IOM uint32_t CH3VAL     : 32;           /*!< [31..0] Capture or compare value of channel 3 */
    } CH3CV_b;
  } ;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint16_t DMACFG;                      /*!< (@ 0x00000048) DMA configuration register */
    
    struct {
      __IOM uint16_t DMATA      : 5;            /*!< [4..0] DMA transfer access start address */
      __IM  uint16_t            : 3;
      __IOM uint16_t DMATC      : 5;            /*!< [12..8] DMA transfer count */
    } DMACFG_b;
  } ;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint32_t DMATB;                       /*!< (@ 0x0000004C) DMA transfer buffer register */
    
    struct {
      __IOM uint32_t DMATB      : 16;           /*!< [15..0] DMA transfer buffer */
    } DMATB_b;
  } ;
  
  union {
    __IOM uint16_t IRMP;                        /*!< (@ 0x00000050) Input remap register */
    
    struct {
      __IM  uint16_t            : 6;
      __IOM uint16_t CI3_RMP    : 2;            /*!< [7..6] Channel 3 input remap */
      __IM  uint16_t            : 2;
      __IOM uint16_t ITI1_RMP   : 2;            /*!< [11..10] Internal trigger input1 remap */
    } IRMP_b;
  } ;
  __IM  uint16_t  RESERVED13;
  __IM  uint32_t  RESERVED14[42];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) Configuration */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
  __IM  uint16_t  RESERVED15;
} TIMER4_Type;                                  /*!< Size = 256 (0x100) */



/* =========================================================================================================================== */
/* ================                                          TIMER5                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Basic-timers (TIMER5)
  */

typedef struct {                                /*!< (@ 0x40001000) TIMER5 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IM  uint16_t            : 3;
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IM  uint16_t            : 4;
      __IOM uint16_t MMC        : 3;            /*!< [6..4] Master mode control */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1[3];
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IM  uint16_t            : 7;
      __IOM uint16_t UPDEN      : 1;            /*!< [8..8] Update DMA request enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) Interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED4[7];
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] Low counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint16_t CAR        : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
} TIMER5_Type;                                  /*!< Size = 46 (0x2e) */



/* =========================================================================================================================== */
/* ================                                          TIMER6                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Basic-timers (TIMER6)
  */

typedef struct {                                /*!< (@ 0x40001400) TIMER6 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IM  uint16_t            : 3;
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IM  uint16_t            : 4;
      __IOM uint16_t MMC        : 3;            /*!< [6..4] Master mode control */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1[3];
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IM  uint16_t            : 7;
      __IOM uint16_t UPDEN      : 1;            /*!< [8..8] Update DMA request enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) Interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED4[7];
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] Low counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint16_t CAR        : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
} TIMER6_Type;                                  /*!< Size = 46 (0x2e) */



/* =========================================================================================================================== */
/* ================                                          TIMER7                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Advanced-timers (TIMER7)
  */

typedef struct {                                /*!< (@ 0x40010400) TIMER7 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IOM uint16_t DIR        : 1;            /*!< [4..4] Direction */
      __IOM uint16_t CAM        : 2;            /*!< [6..5] Counter aligns mode selection */
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t CTL1;                        /*!< (@ 0x00000004) control register 1 */
    
    struct {
      __IOM uint16_t CCSE       : 1;            /*!< [0..0] Commutation control shadow enable */
      __IM  uint16_t            : 1;
      __IOM uint16_t CCUC       : 1;            /*!< [2..2] Commutation control shadow register update control */
      __IOM uint16_t DMAS       : 1;            /*!< [3..3] DMA request source selection */
      __IOM uint16_t MMC        : 3;            /*!< [6..4] Master mode control */
      __IOM uint16_t TI0S       : 1;            /*!< [7..7] Channel 0 trigger input selection */
      __IOM uint16_t ISO0       : 1;            /*!< [8..8] Idle state of channel 0 output */
      __IOM uint16_t ISO0N      : 1;            /*!< [9..9] Idle state of channel 0 complementary output */
      __IOM uint16_t ISO1       : 1;            /*!< [10..10] Idle state of channel 1 output */
      __IOM uint16_t ISO1N      : 1;            /*!< [11..11] Idle state of channel 1 complementary output */
      __IOM uint16_t ISO2       : 1;            /*!< [12..12] Idle state of channel 2 output */
      __IOM uint16_t ISO2N      : 1;            /*!< [13..13] Idle state of channel 2 complementary output */
      __IOM uint16_t ISO3       : 1;            /*!< [14..14] Idle state of channel 3 output */
    } CTL1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SMCFG;                       /*!< (@ 0x00000008) slave mode configuration register */
    
    struct {
      __IOM uint16_t SMC        : 3;            /*!< [2..0] Slave mode selection */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGS       : 3;            /*!< [6..4] Trigger selection */
      __IOM uint16_t MSM        : 1;            /*!< [7..7] Master/Slave mode */
      __IOM uint16_t ETFC       : 4;            /*!< [11..8] External trigger filter control */
      __IOM uint16_t ETPSC      : 2;            /*!< [13..12] External trigger prescaler */
      __IOM uint16_t SCM1       : 1;            /*!< [14..14] Part of SMC for enable External clock mode1 */
      __IOM uint16_t ETP        : 1;            /*!< [15..15] External trigger polarity */
    } SMCFG_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
      __IOM uint16_t CH1IE      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt enable */
      __IOM uint16_t CH2IE      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt enable */
      __IOM uint16_t CH3IE      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt enable */
      __IOM uint16_t CMTIE      : 1;            /*!< [5..5] commutation interrupt enable */
      __IOM uint16_t TRGIE      : 1;            /*!< [6..6] Trigger interrupt enable */
      __IOM uint16_t BRKIE      : 1;            /*!< [7..7] Break interrupt enable */
      __IOM uint16_t UPDEN      : 1;            /*!< [8..8] Update DMA request enable */
      __IOM uint16_t CH0DEN     : 1;            /*!< [9..9] Channel 0 capture/compare DMA request enable */
      __IOM uint16_t CH1DEN     : 1;            /*!< [10..10] Channel 1 capture/compare DMA request enable */
      __IOM uint16_t CH2DEN     : 1;            /*!< [11..11] Channel 2 capture/compare DMA request enable */
      __IOM uint16_t CH3DEN     : 1;            /*!< [12..12] Channel 3 capture/compare DMA request enable */
      __IOM uint16_t CMTDEN     : 1;            /*!< [13..13] Commutation DMA request enable */
      __IOM uint16_t TRGDEN     : 1;            /*!< [14..14] Trigger DMA request enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) Interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IOM uint16_t CH1IF      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt flag */
      __IOM uint16_t CH2IF      : 1;            /*!< [3..3] Channel 2 capture/compare interrupt flag */
      __IOM uint16_t CH3IF      : 1;            /*!< [4..4] Channel 3 capture/compare interrupt flag */
      __IOM uint16_t CMTIF      : 1;            /*!< [5..5] Channel commutation interrupt flag */
      __IOM uint16_t TRGIF      : 1;            /*!< [6..6] Trigger interrupt flag */
      __IOM uint16_t BRKIF      : 1;            /*!< [7..7] Break interrupt flag */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
      __IOM uint16_t CH1OF      : 1;            /*!< [10..10] Channel 1 over capture flag */
      __IOM uint16_t CH2OF      : 1;            /*!< [11..11] Channel 2 over capture flag */
      __IOM uint16_t CH3OF      : 1;            /*!< [12..12] Channel 3 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) Software event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update event generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
      __OM  uint16_t CH1G       : 1;            /*!< [2..2] Channel 1 capture or compare event generation */
      __OM  uint16_t CH2G       : 1;            /*!< [3..3] Channel 2 capture or compare event generation */
      __OM  uint16_t CH3G       : 1;            /*!< [4..4] Channel 3 capture or compare event generation */
      __OM  uint16_t CMTG       : 1;            /*!< [5..5] Channel commutation event generation */
      __OM  uint16_t TRGG       : 1;            /*!< [6..6] Trigger event generation */
      __OM  uint16_t BRKG       : 1;            /*!< [7..7] Break event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
        __IOM uint16_t CH0COMCEN : 1;           /*!< [7..7] Channel 0 output compare clear enable */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1COMFEN : 1;           /*!< [10..10] Channel 1 output compare fast enable */
        __IOM uint16_t CH1COMSEN : 1;           /*!< [11..11] Channel 1 output compare shadow enable */
        __IOM uint16_t CH1COMCTL : 3;           /*!< [14..12] Channel 1 compare output control */
        __IOM uint16_t CH1COMCEN : 1;           /*!< [15..15] Channel 1 output compare clear enable */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1CAPPSC : 2;           /*!< [11..10] Channel 1 input capture prescaler */
        __IOM uint16_t CH1CAPFLT : 4;           /*!< [15..12] Channel 1 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED6;
  
  union {
    union {
      __IOM uint16_t CHCTL1_Output;             /*!< (@ 0x0000001C) Channel control register 1 (output mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 I/O mode selection */
        __IOM uint16_t CH2COMFEN : 1;           /*!< [2..2] Channel 2 output compare fast enable */
        __IOM uint16_t CH2COMSEN : 1;           /*!< [3..3] Channel 2 compare output shadow enable */
        __IOM uint16_t CH2COMCTL : 3;           /*!< [6..4] Channel 2 compare output control */
        __IOM uint16_t CH2COMCEN : 1;           /*!< [7..7] Channel 2 output compare clear enable */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3COMFEN : 1;           /*!< [10..10] Channel 3 output compare fast enable */
        __IOM uint16_t CH3COMSEN : 1;           /*!< [11..11] Channel 3 output compare shadow enable */
        __IOM uint16_t CH3COMCTL : 3;           /*!< [14..12] Channel 3 compare output control */
        __IOM uint16_t CH3COMCEN : 1;           /*!< [15..15] Channel 3 output compare clear enable */
      } CHCTL1_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL1_Input;              /*!< (@ 0x0000001C) Channel control register 1 (input mode) */
      
      struct {
        __IOM uint16_t CH2MS    : 2;            /*!< [1..0] Channel 2 mode selection */
        __IOM uint16_t CH2CAPPSC : 2;           /*!< [3..2] Channel 2 input capture prescaler */
        __IOM uint16_t CH2CAPFLT : 4;           /*!< [7..4] Channel 2 input capture filter control */
        __IOM uint16_t CH3MS    : 2;            /*!< [9..8] Channel 3 mode selection */
        __IOM uint16_t CH3CAPPSC : 2;           /*!< [11..10] Channel 3 input capture prescaler */
        __IOM uint16_t CH3CAPFLT : 4;           /*!< [15..12] Channel 3 input capture filter control */
      } CHCTL1_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare function polarity */
      __IOM uint16_t CH0NEN     : 1;            /*!< [2..2] Channel 0 complementary output enable */
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
      __IOM uint16_t CH1EN      : 1;            /*!< [4..4] Channel 1 capture/compare function enable */
      __IOM uint16_t CH1P       : 1;            /*!< [5..5] Channel 1 capture/compare function polarity */
      __IOM uint16_t CH1NEN     : 1;            /*!< [6..6] Channel 1 complementary output enable */
      __IOM uint16_t CH1NP      : 1;            /*!< [7..7] Channel 1 complementary output polarity */
      __IOM uint16_t CH2EN      : 1;            /*!< [8..8] Channel 2 capture/compare function enable */
      __IOM uint16_t CH2P       : 1;            /*!< [9..9] Channel 2 capture/compare function polarity */
      __IOM uint16_t CH2NEN     : 1;            /*!< [10..10] Channel 2 complementary output enable */
      __IOM uint16_t CH2NP      : 1;            /*!< [11..11] Channel 2 complementary output polarity */
      __IOM uint16_t CH3EN      : 1;            /*!< [12..12] Channel 3 capture/compare function enable */
      __IOM uint16_t CH3P       : 1;            /*!< [13..13] Channel 3 capture/compare function polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) counter */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] current counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) prescaler */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED10;
  
  union {
    __IOM uint16_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint16_t CAR        : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint16_t  RESERVED11;
  
  union {
    __IOM uint16_t CREP;                        /*!< (@ 0x00000030) Counter repetition register */
    
    struct {
      __IOM uint16_t CREP       : 8;            /*!< [7..0] Counter repetition value */
    } CREP_b;
  } ;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint16_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint16_t CH0VAL     : 16;           /*!< [15..0] Capture or compare value of channel0 */
    } CH0CV_b;
  } ;
  __IM  uint16_t  RESERVED13;
  
  union {
    __IOM uint16_t CH1CV;                       /*!< (@ 0x00000038) Channel 1 capture/compare value register */
    
    struct {
      __IOM uint16_t CH1VAL     : 16;           /*!< [15..0] Capture or compare value of channel1 */
    } CH1CV_b;
  } ;
  __IM  uint16_t  RESERVED14;
  
  union {
    __IOM uint16_t CH2CV;                       /*!< (@ 0x0000003C) Channel 2 capture/compare value register */
    
    struct {
      __IOM uint16_t CH2VAL     : 16;           /*!< [15..0] Capture or compare value of channel 2 */
    } CH2CV_b;
  } ;
  __IM  uint16_t  RESERVED15;
  
  union {
    __IOM uint16_t CH3CV;                       /*!< (@ 0x00000040) Channel 3 capture/compare value register */
    
    struct {
      __IOM uint16_t CH3VAL     : 16;           /*!< [15..0] Capture or compare value of channel 3 */
    } CH3CV_b;
  } ;
  __IM  uint16_t  RESERVED16;
  
  union {
    __IOM uint16_t CCHP;                        /*!< (@ 0x00000044) channel complementary protection register */
    
    struct {
      __IOM uint16_t DTCFG      : 8;            /*!< [7..0] Dead time configure */
      __IOM uint16_t PROT       : 2;            /*!< [9..8] Complementary register protect control */
      __IOM uint16_t IOS        : 1;            /*!< [10..10] Idle mode off-state configure */
      __IOM uint16_t ROS        : 1;            /*!< [11..11] Run mode off-state configure */
      __IOM uint16_t BRKEN      : 1;            /*!< [12..12] Break enable */
      __IOM uint16_t BRKP       : 1;            /*!< [13..13] Break polarity */
      __IOM uint16_t OAEN       : 1;            /*!< [14..14] Output automatic enable */
      __IOM uint16_t POEN       : 1;            /*!< [15..15] Primary output enable */
    } CCHP_b;
  } ;
  __IM  uint16_t  RESERVED17;
  
  union {
    __IOM uint16_t DMACFG;                      /*!< (@ 0x00000048) DMA configuration register */
    
    struct {
      __IOM uint16_t DMATA      : 5;            /*!< [4..0] DMA transfer access start address */
      __IM  uint16_t            : 3;
      __IOM uint16_t DMATC      : 5;            /*!< [12..8] DMA transfer count */
    } DMACFG_b;
  } ;
  __IM  uint16_t  RESERVED18;
  
  union {
    __IOM uint16_t DMATB;                       /*!< (@ 0x0000004C) DMA transfer buffer register */
    
    struct {
      __IOM uint16_t DMATB      : 16;           /*!< [15..0] DMA transfer buffer */
    } DMATB_b;
  } ;
  __IM  uint16_t  RESERVED19[87];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) Configuration register */
    
    struct {
      __IOM uint16_t OUTSEL     : 1;            /*!< [0..0] The output value selection */
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
} TIMER7_Type;                                  /*!< Size = 254 (0xfe) */



/* =========================================================================================================================== */
/* ================                                          TIMER8                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER8)
  */

typedef struct {                                /*!< (@ 0x40014000) TIMER8 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IM  uint16_t            : 3;
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint16_t SMCFG;                       /*!< (@ 0x00000008) slave mode configuration register */
    
    struct {
      __IOM uint16_t SMC        : 3;            /*!< [2..0] Slave mode control */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGS       : 3;            /*!< [6..4] Trigger selection */
      __IOM uint16_t MSM        : 1;            /*!< [7..7] Master-slave mode */
    } SMCFG_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA and interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
      __IOM uint16_t CH1IE      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt enable */
      __IM  uint16_t            : 3;
      __IOM uint16_t TRGIE      : 1;            /*!< [6..6] Trigger interrupt enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IOM uint16_t CH1IF      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt flag */
      __IM  uint16_t            : 3;
      __IOM uint16_t TRGIF      : 1;            /*!< [6..6] Trigger interrupt flag */
      __IM  uint16_t            : 2;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
      __IOM uint16_t CH1OF      : 1;            /*!< [10..10] Channel 1 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
      __OM  uint16_t CH1G       : 1;            /*!< [2..2] Channel 1 capture or compare event generation */
      __IM  uint16_t            : 3;
      __OM  uint16_t TRGG       : 1;            /*!< [6..6] Trigger event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
        __IM  uint16_t          : 1;
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1COMFEN : 1;           /*!< [10..10] Channel 1 output compare fast enable */
        __IOM uint16_t CH1COMSEN : 1;           /*!< [11..11] Channel 1 output compare shadow enable */
        __IOM uint16_t CH1COMCTL : 3;           /*!< [14..12] Channel 1 compare output control */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1CAPPSC : 2;           /*!< [11..10] Channel 1 input capture prescaler */
        __IOM uint16_t CH1CAPFLT : 4;           /*!< [15..12] Channel 1 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED6;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
      __IOM uint16_t CH1EN      : 1;            /*!< [4..4] Channel 1 capture/compare function enable */
      __IOM uint16_t CH1P       : 1;            /*!< [5..5] Channel 1 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH1NP      : 1;            /*!< [7..7] Channel 1 complementary output polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] current counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED10;
  
  union {
    __IOM uint32_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint32_t CARL       : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint16_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint16_t CH0VAL     : 16;           /*!< [15..0] Capture or compare value of channel0 */
    } CH0CV_b;
  } ;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint16_t CH1CV;                       /*!< (@ 0x00000038) Channel 1 capture/compare value register */
    
    struct {
      __IOM uint16_t CH1VAL     : 16;           /*!< [15..0] Capture or compare value of channel1 */
    } CH1CV_b;
  } ;
  __IM  uint16_t  RESERVED13;
  __IM  uint32_t  RESERVED14[48];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) configuration register */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
  __IM  uint16_t  RESERVED15;
} TIMER8_Type;                                  /*!< Size = 256 (0x100) */



/* =========================================================================================================================== */
/* ================                                          TIMER9                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER9)
  */

typedef struct {                                /*!< (@ 0x40014400) TIMER9 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 1 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IM  uint16_t            : 4;
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED[5];
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IM  uint16_t            : 7;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 ( (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED4[3];
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] current counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint16_t CARL       : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint16_t  RESERVED8[3];
  
  union {
    __IOM uint16_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint16_t CH0VAL     : 16;           /*!< [15..0] Capture or compare value of channel 0 */
    } CH0CV_b;
  } ;
  __IM  uint16_t  RESERVED9[13];
  
  union {
    __IOM uint16_t IRMP;                        /*!< (@ 0x00000050) channel input remap register */
    
    struct {
      __IM  uint16_t            : 10;
      __IOM uint16_t ITI1_RMP   : 2;            /*!< [11..10] Internal trigger input1 remap */
    } IRMP_b;
  } ;
  __IM  uint16_t  RESERVED10[85];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) configuration register */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
} TIMER9_Type;                                  /*!< Size = 254 (0xfe) */



/* =========================================================================================================================== */
/* ================                                          TIMER10                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER10)
  */

typedef struct {                                /*!< (@ 0x40014800) TIMER10 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 1 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IM  uint16_t            : 4;
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED[5];
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IM  uint16_t            : 7;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 ( (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED4[3];
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] current counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint16_t CARL       : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint16_t  RESERVED8[3];
  
  union {
    __IOM uint16_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint16_t CH0VAL     : 16;           /*!< [15..0] Capture or compare value of channel 0 */
    } CH0CV_b;
  } ;
  __IM  uint16_t  RESERVED9[13];
  
  union {
    __IOM uint16_t IRMP;                        /*!< (@ 0x00000050) channel input remap register */
    
    struct {
      __IM  uint16_t            : 10;
      __IOM uint16_t ITI1_RMP   : 2;            /*!< [11..10] Internal trigger input1 remap */
    } IRMP_b;
  } ;
  __IM  uint16_t  RESERVED10[85];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) configuration register */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
} TIMER10_Type;                                 /*!< Size = 254 (0xfe) */



/* =========================================================================================================================== */
/* ================                                          TIMER11                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER11)
  */

typedef struct {                                /*!< (@ 0x40001800) TIMER11 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 0 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IOM uint16_t SPM        : 1;            /*!< [3..3] Single pulse mode */
      __IM  uint16_t            : 3;
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint16_t SMCFG;                       /*!< (@ 0x00000008) slave mode configuration register */
    
    struct {
      __IOM uint16_t SMC        : 3;            /*!< [2..0] Slave mode control */
      __IM  uint16_t            : 1;
      __IOM uint16_t TRGS       : 3;            /*!< [6..4] Trigger selection */
      __IOM uint16_t MSM        : 1;            /*!< [7..7] Master-slave mode */
    } SMCFG_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA and interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
      __IOM uint16_t CH1IE      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt enable */
      __IM  uint16_t            : 3;
      __IOM uint16_t TRGIE      : 1;            /*!< [6..6] Trigger interrupt enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IOM uint16_t CH1IF      : 1;            /*!< [2..2] Channel 1 capture/compare interrupt flag */
      __IM  uint16_t            : 3;
      __IOM uint16_t TRGIF      : 1;            /*!< [6..6] Trigger interrupt flag */
      __IM  uint16_t            : 2;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
      __IOM uint16_t CH1OF      : 1;            /*!< [10..10] Channel 1 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
      __OM  uint16_t CH1G       : 1;            /*!< [2..2] Channel 1 capture or compare event generation */
      __IM  uint16_t            : 3;
      __OM  uint16_t TRGG       : 1;            /*!< [6..6] Trigger event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
        __IM  uint16_t          : 1;
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1COMFEN : 1;           /*!< [10..10] Channel 1 output compare fast enable */
        __IOM uint16_t CH1COMSEN : 1;           /*!< [11..11] Channel 1 output compare shadow enable */
        __IOM uint16_t CH1COMCTL : 3;           /*!< [14..12] Channel 1 compare output control */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
        __IOM uint16_t CH1MS    : 2;            /*!< [9..8] Channel 1 mode selection */
        __IOM uint16_t CH1CAPPSC : 2;           /*!< [11..10] Channel 1 input capture prescaler */
        __IOM uint16_t CH1CAPFLT : 4;           /*!< [15..12] Channel 1 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED6;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
      __IOM uint16_t CH1EN      : 1;            /*!< [4..4] Channel 1 capture/compare function enable */
      __IOM uint16_t CH1P       : 1;            /*!< [5..5] Channel 1 capture/compare function polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH1NP      : 1;            /*!< [7..7] Channel 1 complementary output polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] current counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED10;
  
  union {
    __IOM uint32_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint32_t CARL       : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint16_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint16_t CH0VAL     : 16;           /*!< [15..0] Capture or compare value of channel0 */
    } CH0CV_b;
  } ;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint16_t CH1CV;                       /*!< (@ 0x00000038) Channel 1 capture/compare value register */
    
    struct {
      __IOM uint16_t CH1VAL     : 16;           /*!< [15..0] Capture or compare value of channel1 */
    } CH1CV_b;
  } ;
  __IM  uint16_t  RESERVED13;
  __IM  uint32_t  RESERVED14[48];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) configuration register */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
  __IM  uint16_t  RESERVED15;
} TIMER11_Type;                                 /*!< Size = 256 (0x100) */



/* =========================================================================================================================== */
/* ================                                          TIMER12                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER12)
  */

typedef struct {                                /*!< (@ 0x40001C00) TIMER12 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 1 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IM  uint16_t            : 4;
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED[5];
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IM  uint16_t            : 7;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 ( (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED4[3];
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] current counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint16_t CARL       : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint16_t  RESERVED8[3];
  
  union {
    __IOM uint16_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint16_t CH0VAL     : 16;           /*!< [15..0] Capture or compare value of channel 0 */
    } CH0CV_b;
  } ;
  __IM  uint16_t  RESERVED9[13];
  
  union {
    __IOM uint16_t IRMP;                        /*!< (@ 0x00000050) channel input remap register */
    
    struct {
      __IM  uint16_t            : 10;
      __IOM uint16_t ITI1_RMP   : 2;            /*!< [11..10] Internal trigger input1 remap */
    } IRMP_b;
  } ;
  __IM  uint16_t  RESERVED10[85];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) configuration register */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
} TIMER12_Type;                                 /*!< Size = 254 (0xfe) */



/* =========================================================================================================================== */
/* ================                                          TIMER13                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIMER13)
  */

typedef struct {                                /*!< (@ 0x40002000) TIMER13 Structure */
  
  union {
    __IOM uint16_t CTL0;                        /*!< (@ 0x00000000) control register 1 */
    
    struct {
      __IOM uint16_t CEN        : 1;            /*!< [0..0] Counter enable */
      __IOM uint16_t UPDIS      : 1;            /*!< [1..1] Update disable */
      __IOM uint16_t UPS        : 1;            /*!< [2..2] Update source */
      __IM  uint16_t            : 4;
      __IOM uint16_t ARSE       : 1;            /*!< [7..7] Auto-reload shadow enable */
      __IOM uint16_t CKDIV      : 2;            /*!< [9..8] Clock division */
    } CTL0_b;
  } ;
  __IM  uint16_t  RESERVED[5];
  
  union {
    __IOM uint16_t DMAINTEN;                    /*!< (@ 0x0000000C) DMA/Interrupt enable register */
    
    struct {
      __IOM uint16_t UPIE       : 1;            /*!< [0..0] Update interrupt enable */
      __IOM uint16_t CH0IE      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt enable */
    } DMAINTEN_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t INTF;                        /*!< (@ 0x00000010) interrupt flag register */
    
    struct {
      __IOM uint16_t UPIF       : 1;            /*!< [0..0] Update interrupt flag */
      __IOM uint16_t CH0IF      : 1;            /*!< [1..1] Channel 0 capture/compare interrupt flag */
      __IM  uint16_t            : 7;
      __IOM uint16_t CH0OF      : 1;            /*!< [9..9] Channel 0 over capture flag */
    } INTF_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __OM  uint16_t SWEVG;                       /*!< (@ 0x00000014) event generation register */
    
    struct {
      __OM  uint16_t UPG        : 1;            /*!< [0..0] Update generation */
      __OM  uint16_t CH0G       : 1;            /*!< [1..1] Channel 0 capture or compare event generation */
    } SWEVG_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    union {
      __IOM uint16_t CHCTL0_Output;             /*!< (@ 0x00000018) Channel control register 0 (output mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 I/O mode selection */
        __IOM uint16_t CH0COMFEN : 1;           /*!< [2..2] Channel 0 output compare fast enable */
        __IOM uint16_t CH0COMSEN : 1;           /*!< [3..3] Channel 0 compare output shadow enable */
        __IOM uint16_t CH0COMCTL : 3;           /*!< [6..4] Channel 0 compare output control */
      } CHCTL0_Output_b;
    } ;
    
    union {
      __IOM uint16_t CHCTL0_Input;              /*!< (@ 0x00000018) Channel control register 0 ( (input mode) */
      
      struct {
        __IOM uint16_t CH0MS    : 2;            /*!< [1..0] Channel 0 mode selection */
        __IOM uint16_t CH0CAPPSC : 2;           /*!< [3..2] Channel 0 input capture prescaler */
        __IOM uint16_t CH0CAPFLT : 4;           /*!< [7..4] Channel 0 input capture filter control */
      } CHCTL0_Input_b;
    } ;
  };
  __IM  uint16_t  RESERVED4[3];
  
  union {
    __IOM uint16_t CHCTL2;                      /*!< (@ 0x00000020) Channel control register 2 */
    
    struct {
      __IOM uint16_t CH0EN      : 1;            /*!< [0..0] Channel 0 capture/compare function enable */
      __IOM uint16_t CH0P       : 1;            /*!< [1..1] Channel 0 capture/compare polarity */
      __IM  uint16_t            : 1;
      __IOM uint16_t CH0NP      : 1;            /*!< [3..3] Channel 0 complementary output polarity */
    } CHCTL2_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t CNT;                         /*!< (@ 0x00000024) Counter register */
    
    struct {
      __IOM uint16_t CNT        : 16;           /*!< [15..0] current counter value */
    } CNT_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t PSC;                         /*!< (@ 0x00000028) Prescaler register */
    
    struct {
      __IOM uint16_t PSC        : 16;           /*!< [15..0] Prescaler value of the counter clock */
    } PSC_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t CAR;                         /*!< (@ 0x0000002C) Counter auto reload register */
    
    struct {
      __IOM uint16_t CARL       : 16;           /*!< [15..0] Counter auto reload value */
    } CAR_b;
  } ;
  __IM  uint16_t  RESERVED8[3];
  
  union {
    __IOM uint16_t CH0CV;                       /*!< (@ 0x00000034) Channel 0 capture/compare value register */
    
    struct {
      __IOM uint16_t CH0VAL     : 16;           /*!< [15..0] Capture or compare value of channel 0 */
    } CH0CV_b;
  } ;
  __IM  uint16_t  RESERVED9[13];
  
  union {
    __IOM uint16_t IRMP;                        /*!< (@ 0x00000050) channel input remap register */
    
    struct {
      __IM  uint16_t            : 10;
      __IOM uint16_t ITI1_RMP   : 2;            /*!< [11..10] Internal trigger input1 remap */
    } IRMP_b;
  } ;
  __IM  uint16_t  RESERVED10[85];
  
  union {
    __IOM uint16_t CFG;                         /*!< (@ 0x000000FC) configuration register */
    
    struct {
      __IM  uint16_t            : 1;
      __IOM uint16_t CHVSEL     : 1;            /*!< [1..1] Write CHxVAL register selection */
    } CFG_b;
  } ;
} TIMER13_Type;                                 /*!< Size = 254 (0xfe) */



/* =========================================================================================================================== */
/* ================                                            TLI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief TFT-LCD interface (TLI)
  */

typedef struct {                                /*!< (@ 0x40016800) TLI Structure */
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t SPSZ;                        /*!< (@ 0x00000008) Synchronous pulse size register */
    
    struct {
      __IOM uint32_t VPSZ       : 12;           /*!< [11..0] size of vertical synchronous pluse */
      __IM  uint32_t            : 4;
      __IOM uint32_t HPSZ       : 12;           /*!< [27..16] size of horizontal synchronous pluse */
    } SPSZ_b;
  } ;
  
  union {
    __IOM uint32_t BPSZ;                        /*!< (@ 0x0000000C) Back-porch size register */
    
    struct {
      __IOM uint32_t VBPSZ      : 12;           /*!< [11..0] Size of the vertical back porch plus synchronous pulse */
      __IM  uint32_t            : 4;
      __IOM uint32_t HBPSZ      : 12;           /*!< [27..16] Size of the horizontal back porch plus synchronous pulse */
    } BPSZ_b;
  } ;
  
  union {
    __IOM uint32_t ASZ;                         /*!< (@ 0x00000010) Active size register */
    
    struct {
      __IOM uint32_t VASZ       : 12;           /*!< [11..0] Size of the vertical active area width plus back porch and synchronous pulse */
      __IM  uint32_t            : 4;
      __IOM uint32_t HASZ       : 12;           /*!< [27..16] Size of the horizontal active area width plus back porch and synchronous pulse */
    } ASZ_b;
  } ;
  
  union {
    __IOM uint32_t TSZ;                         /*!< (@ 0x00000014) Total size register */
    
    struct {
      __IOM uint32_t VTSZ       : 12;           /*!< [11..0] Vertical total size of the display */
      __IM  uint32_t            : 4;
      __IOM uint32_t HTSZ       : 12;           /*!< [27..16] Horizontal total size of the display */
    } TSZ_b;
  } ;
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000018) Control register */
    
    struct {
      __IOM uint32_t TLIEN      : 1;            /*!< [0..0] TLI enable bit */
      __IM  uint32_t            : 3;
      __IOM uint32_t BDB        : 3;            /*!< [6..4] Blue channel Dither Bits Number */
      __IM  uint32_t            : 1;
      __IOM uint32_t GDB        : 3;            /*!< [10..8] Green channel Dither Bits Number */
      __IM  uint32_t            : 1;
      __IOM uint32_t RDB        : 3;            /*!< [14..12] Red channel Dither Bits Number */
      __IM  uint32_t            : 1;
      __IOM uint32_t DFEN       : 1;            /*!< [16..16] Dither Function Enable */
      __IM  uint32_t            : 11;
      __IOM uint32_t CLKPS      : 1;            /*!< [28..28] Pixel Clock Polarity Selection */
      __IOM uint32_t DEPS       : 1;            /*!< [29..29] Data Enable Polarity Selection */
      __IOM uint32_t VPPS       : 1;            /*!< [30..30] Vertical Pulse Polarity Selection */
      __IOM uint32_t HPPS       : 1;            /*!< [31..31] Horizontal Pulse Polarity Selection */
    } CTL_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t RL;                          /*!< (@ 0x00000024) Reload layer register */
    
    struct {
      __IOM uint32_t RQR        : 1;            /*!< [0..0] Request Reload */
      __IOM uint32_t FBR        : 1;            /*!< [1..1] Frame Blank Reload */
    } RL_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t BGC;                         /*!< (@ 0x0000002C) Background color register */
    
    struct {
      __IOM uint32_t BVB        : 8;            /*!< [7..0] Background value blue */
      __IOM uint32_t BVG        : 8;            /*!< [15..8] Background value green */
      __IOM uint32_t BVR        : 8;            /*!< [23..16] Background value red */
    } BGC_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000034) Interrupt enable register */
    
    struct {
      __IOM uint32_t LMIE       : 1;            /*!< [0..0] Line Mark Interrupt Enable */
      __IOM uint32_t FEIE       : 1;            /*!< [1..1] FIFO Error Interrupt Enable */
      __IOM uint32_t TEIE       : 1;            /*!< [2..2] Transaction Error Interrupt Enable */
      __IOM uint32_t LCRIE      : 1;            /*!< [3..3] Layer Configuration Reloaded Interrupt Enable */
    } INTEN_b;
  } ;
  
  union {
    __IM  uint32_t INTF;                        /*!< (@ 0x00000038) Interrupt flag register */
    
    struct {
      __IM  uint32_t LMF        : 1;            /*!< [0..0] Line Mark Flag */
      __IM  uint32_t FEF        : 1;            /*!< [1..1] FIFO Error Flag */
      __IM  uint32_t TEF        : 1;            /*!< [2..2] Transaction Error Flag */
      __IM  uint32_t LCRF       : 1;            /*!< [3..3] Layer Configuration Reloaded Flag */
    } INTF_b;
  } ;
  
  union {
    __OM  uint32_t INTC;                        /*!< (@ 0x0000003C) Interrupt flag clear register */
    
    struct {
      __OM  uint32_t LMC        : 1;            /*!< [0..0] Line Mark Flag Clear */
      __OM  uint32_t FEC        : 1;            /*!< [1..1] FIFO Error Flag Clear */
      __OM  uint32_t TEC        : 1;            /*!< [2..2] Transaction Error Flag Clear */
      __OM  uint32_t LCRC       : 1;            /*!< [3..3] Layer Configuration Reloaded Flag Clear */
    } INTC_b;
  } ;
  
  union {
    __IOM uint32_t LM;                          /*!< (@ 0x00000040) Line mark register */
    
    struct {
      __IOM uint32_t LM         : 11;           /*!< [10..0] Line Mark value */
    } LM_b;
  } ;
  
  union {
    __IM  uint32_t CPPOS;                       /*!< (@ 0x00000044) Current pixel position register */
    
    struct {
      __IM  uint32_t VPOS       : 16;           /*!< [15..0] Vertical position */
      __IM  uint32_t HPOS       : 16;           /*!< [31..16] Horizontal position */
    } CPPOS_b;
  } ;
  
  union {
    __IM  uint32_t STAT;                        /*!< (@ 0x00000048) Status register */
    
    struct {
      __IM  uint32_t VDE        : 1;            /*!< [0..0] Current VDE status */
      __IM  uint32_t HDE        : 1;            /*!< [1..1] Current HDE status */
      __IM  uint32_t VS         : 1;            /*!< [2..2] Current VS staus of the TLI */
      __IM  uint32_t HS         : 1;            /*!< [3..3] Current HS staus of the TLI */
    } STAT_b;
  } ;
  __IM  uint32_t  RESERVED4[14];
  
  union {
    __IOM uint32_t L0CTL;                       /*!< (@ 0x00000084) Layer 0 control register */
    
    struct {
      __IOM uint32_t LEN        : 1;            /*!< [0..0] Layer enable */
      __IOM uint32_t CKEYEN     : 1;            /*!< [1..1] Color keying enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t LUTEN      : 1;            /*!< [4..4] LUT enable */
    } L0CTL_b;
  } ;
  
  union {
    __IOM uint32_t L0HPOS;                      /*!< (@ 0x00000088) Layer 0 horizontal position parameters register */
    
    struct {
      __IOM uint32_t WLP        : 12;           /*!< [11..0] Window left position */
      __IM  uint32_t            : 4;
      __IOM uint32_t WRP        : 12;           /*!< [27..16] Window right position */
    } L0HPOS_b;
  } ;
  
  union {
    __IOM uint32_t L0VPOS;                      /*!< (@ 0x0000008C) Layer 0 vertical position parameters register */
    
    struct {
      __IOM uint32_t WTP        : 12;           /*!< [11..0] Window top position */
      __IM  uint32_t            : 4;
      __IOM uint32_t WBP        : 12;           /*!< [27..16] Window bottom position */
    } L0VPOS_b;
  } ;
  
  union {
    __IOM uint32_t L0CKEY;                      /*!< (@ 0x00000090) Layer 0 color key register */
    
    struct {
      __IOM uint32_t CKEYB      : 8;            /*!< [7..0] Color Key Blue */
      __IOM uint32_t CKEYG      : 8;            /*!< [15..8] Color Key Green */
      __IOM uint32_t CKEYR      : 8;            /*!< [23..16] Color Key Red */
    } L0CKEY_b;
  } ;
  
  union {
    __IOM uint32_t L0PPF;                       /*!< (@ 0x00000094) Layer 0 packeted pixel format register */
    
    struct {
      __IOM uint32_t PPF        : 3;            /*!< [2..0] Packeted Pixel Format */
    } L0PPF_b;
  } ;
  
  union {
    __IOM uint32_t L0SA;                        /*!< (@ 0x00000098) Layer 0 specified alpha register */
    
    struct {
      __IOM uint32_t SA         : 8;            /*!< [7..0] Specified alpha */
    } L0SA_b;
  } ;
  
  union {
    __IOM uint32_t L0DC;                        /*!< (@ 0x0000009C) Layer 0 default color register */
    
    struct {
      __IOM uint32_t DCB        : 8;            /*!< [7..0] The default color blue */
      __IOM uint32_t DCG        : 8;            /*!< [15..8] The default color green */
      __IOM uint32_t DCR        : 8;            /*!< [23..16] The default color red */
      __IOM uint32_t DCA        : 8;            /*!< [31..24] The default color ALPHA */
    } L0DC_b;
  } ;
  
  union {
    __IOM uint32_t L0BLEND;                     /*!< (@ 0x000000A0) Layer 0 blending register */
    
    struct {
      __IOM uint32_t ACF2       : 3;            /*!< [2..0] Alpha Calculation Factor 2 of Blending Method */
      __IM  uint32_t            : 5;
      __IOM uint32_t ACF1       : 3;            /*!< [10..8] Alpha Calculation Factor 1 of Blending Method */
    } L0BLEND_b;
  } ;
  __IM  uint32_t  RESERVED5[2];
  
  union {
    __IOM uint32_t L0FBADDR;                    /*!< (@ 0x000000AC) Layer 0 frame base address register */
    
    struct {
      __IOM uint32_t FBADD      : 32;           /*!< [31..0] Frame Buffer base Address */
    } L0FBADDR_b;
  } ;
  
  union {
    __IOM uint32_t L0FLLEN;                     /*!< (@ 0x000000B0) Layer 0 frame line length register */
    
    struct {
      __IOM uint32_t FLL        : 14;           /*!< [13..0] Frame Line Length */
      __IM  uint32_t            : 2;
      __IOM uint32_t STDOFF     : 14;           /*!< [29..16] Frame Buffer Stride Offset */
    } L0FLLEN_b;
  } ;
  
  union {
    __IOM uint32_t L0FTLN;                      /*!< (@ 0x000000B4) Layer 0 frame total line number register */
    
    struct {
      __IOM uint32_t FTLN       : 11;           /*!< [10..0] Frame Total Line Number */
    } L0FTLN_b;
  } ;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t L0LUT;                       /*!< (@ 0x000000C4) Layer 0 look up table register */
    
    struct {
      __IOM uint32_t TB         : 8;            /*!< [7..0] Blue channel of a LUT entry */
      __IOM uint32_t TG         : 8;            /*!< [15..8] Green channel of a LUT entry */
      __IOM uint32_t TR         : 8;            /*!< [23..16] Red Channel of a LUT entry */
      __IOM uint32_t TADD       : 8;            /*!< [31..24] Look Up Table Write Address */
    } L0LUT_b;
  } ;
  __IM  uint32_t  RESERVED7[15];
  
  union {
    __IOM uint32_t L1CTL;                       /*!< (@ 0x00000104) Layer 1 control register */
    
    struct {
      __IOM uint32_t LEN        : 1;            /*!< [0..0] Layer enable */
      __IOM uint32_t CKEYEN     : 1;            /*!< [1..1] Color keying enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t LUTEN      : 1;            /*!< [4..4] LUT enable */
    } L1CTL_b;
  } ;
  
  union {
    __IOM uint32_t L1HPOS;                      /*!< (@ 0x00000108) Layer 1 horizontal position parameters register */
    
    struct {
      __IOM uint32_t WLP        : 12;           /*!< [11..0] Window left position */
      __IM  uint32_t            : 4;
      __IOM uint32_t WRP        : 12;           /*!< [27..16] Window right position */
    } L1HPOS_b;
  } ;
  
  union {
    __IOM uint32_t L1VPOS;                      /*!< (@ 0x0000010C) Layer 1 vertical position parameters register */
    
    struct {
      __IOM uint32_t WTP        : 12;           /*!< [11..0] Window top position */
      __IM  uint32_t            : 4;
      __IOM uint32_t WBP        : 12;           /*!< [27..16] Window bottom position */
    } L1VPOS_b;
  } ;
  
  union {
    __IOM uint32_t L1CKEY;                      /*!< (@ 0x00000110) Layer 1 color key register */
    
    struct {
      __IOM uint32_t CKEYB      : 8;            /*!< [7..0] Color Key Blue */
      __IOM uint32_t CKEYG      : 8;            /*!< [15..8] Color Key Green */
      __IOM uint32_t CKEYR      : 8;            /*!< [23..16] Color Key Red */
    } L1CKEY_b;
  } ;
  
  union {
    __IOM uint32_t L1PPF;                       /*!< (@ 0x00000114) Layer 1 packeted pixel format register */
    
    struct {
      __IOM uint32_t PPF        : 3;            /*!< [2..0] Packeted Pixel Format */
    } L1PPF_b;
  } ;
  
  union {
    __IOM uint32_t L1SA;                        /*!< (@ 0x00000118) Layer 1 specified alpha register */
    
    struct {
      __IOM uint32_t SA         : 8;            /*!< [7..0] Specified alpha */
    } L1SA_b;
  } ;
  
  union {
    __IOM uint32_t L1DC;                        /*!< (@ 0x0000011C) Layer 1 default color register */
    
    struct {
      __IOM uint32_t DCB        : 8;            /*!< [7..0] The default color blue */
      __IOM uint32_t DCG        : 8;            /*!< [15..8] The default color green */
      __IOM uint32_t DCR        : 8;            /*!< [23..16] The default color red */
      __IOM uint32_t DCA        : 8;            /*!< [31..24] The default color ALPHA */
    } L1DC_b;
  } ;
  
  union {
    __IOM uint32_t L1BLEND;                     /*!< (@ 0x00000120) Layer 1 blending register */
    
    struct {
      __IOM uint32_t ACF2       : 3;            /*!< [2..0] Alpha Calculation Factor 2 of Blending Method */
      __IM  uint32_t            : 5;
      __IOM uint32_t ACF1       : 3;            /*!< [10..8] Alpha Calculation Factor 1 of Blending Method */
    } L1BLEND_b;
  } ;
  __IM  uint32_t  RESERVED8[2];
  
  union {
    __IOM uint32_t L1FBADDR;                    /*!< (@ 0x0000012C) Layer 1 frame base address register */
    
    struct {
      __IOM uint32_t FBADD      : 32;           /*!< [31..0] Frame Buffer base Address */
    } L1FBADDR_b;
  } ;
  
  union {
    __IOM uint32_t L1FLLEN;                     /*!< (@ 0x00000130) Layer 1 frame line length register */
    
    struct {
      __IOM uint32_t FLL        : 14;           /*!< [13..0] Frame Line Length */
      __IM  uint32_t            : 2;
      __IOM uint32_t STDOFF     : 14;           /*!< [29..16] Frame Buffer Stride Offset */
    } L1FLLEN_b;
  } ;
  
  union {
    __IOM uint32_t L1FTLN;                      /*!< (@ 0x00000134) Layer 1 frame total line number register */
    
    struct {
      __IOM uint32_t FTLN       : 11;           /*!< [10..0] Frame Total Line Number */
    } L1FTLN_b;
  } ;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t L1LUT;                       /*!< (@ 0x00000144) Layer 1 look up table register */
    
    struct {
      __IOM uint32_t TB         : 8;            /*!< [7..0] Blue channel of a LUT entry */
      __IOM uint32_t TG         : 8;            /*!< [15..8] Green channel of a LUT entry */
      __IOM uint32_t TR         : 8;            /*!< [23..16] Red channel of a LUT entry */
      __IOM uint32_t TADD       : 8;            /*!< [31..24] Look Up Table Write Address */
    } L1LUT_b;
  } ;
} TLI_Type;                                     /*!< Size = 328 (0x148) */



/* =========================================================================================================================== */
/* ================                                           TRNG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Ture random number generator (TRNG)
  */

typedef struct {                                /*!< (@ 0x50060800) TRNG Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) Control register */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t TRNGEN     : 1;            /*!< [2..2] TRNG enable bit */
      __IOM uint32_t IE         : 1;            /*!< [3..3] Interrupt bit */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000004) Status register */
    
    struct {
      __IM  uint32_t DRDY       : 1;            /*!< [0..0] Random data ready status bit */
      __IM  uint32_t CECS       : 1;            /*!< [1..1] Clock error current status */
      __IM  uint32_t SECS       : 1;            /*!< [2..2] Seed error current status */
      __IM  uint32_t            : 2;
      __IOM uint32_t CEIF       : 1;            /*!< [5..5] Clock error interrupt flag */
      __IOM uint32_t SEIF       : 1;            /*!< [6..6] Seed error interrupt flag */
    } STAT_b;
  } ;
  
  union {
    __IM  uint32_t DATA;                        /*!< (@ 0x00000008) data register */
    
    struct {
      __IM  uint32_t TRNDATA    : 32;           /*!< [31..0] 32-bit random data */
    } DATA_b;
  } ;
} TRNG_Type;                                    /*!< Size = 12 (0xc) */



/* =========================================================================================================================== */
/* ================                                          USART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver
      transmitter (USART0)
  */

typedef struct {                                /*!< (@ 0x40011000) USART0 Structure */
  
  union {
    __IM  uint32_t STAT0;                       /*!< (@ 0x00000000) Status register 0 */
    
    struct {
      __IM  uint32_t PERR       : 1;            /*!< [0..0] Parity error flag */
      __IM  uint32_t FERR       : 1;            /*!< [1..1] Frame error flag */
      __IM  uint32_t NERR       : 1;            /*!< [2..2] Noise error flag */
      __IM  uint32_t ORERR      : 1;            /*!< [3..3] Overrun error */
      __IM  uint32_t IDLEF      : 1;            /*!< [4..4] IDLE frame detected flag */
      __IM  uint32_t RBNE       : 1;            /*!< [5..5] Read data buffer not empty */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transmission complete */
      __IM  uint32_t TBE        : 1;            /*!< [7..7] Transmit data buffer empty */
      __IM  uint32_t LBDF       : 1;            /*!< [8..8] LIN break detection flag */
      __IM  uint32_t CTSF       : 1;            /*!< [9..9] CTS change flag */
    } STAT0_b;
  } ;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000004) Data register */
    
    struct {
      __IOM uint32_t DATA       : 9;            /*!< [8..0] Transmit or read data value */
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t BAUD;                        /*!< (@ 0x00000008) Baud rate register */
    
    struct {
      __IOM uint32_t FRADIV     : 4;            /*!< [3..0] Fraction part of baud-rate divider */
      __IOM uint32_t INTDIV     : 12;           /*!< [15..4] Integer part of baud-rate divider */
    } BAUD_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x0000000C) Control register 0 */
    
    struct {
      __IOM uint32_t SBKCMD     : 1;            /*!< [0..0] Send break command */
      __IOM uint32_t RWU        : 1;            /*!< [1..1] Receiver wakeup from mute mode */
      __IOM uint32_t REN        : 1;            /*!< [2..2] Receiver enable */
      __IOM uint32_t TEN        : 1;            /*!< [3..3] Transmitter enable */
      __IOM uint32_t IDLEIE     : 1;            /*!< [4..4] IDLE line detected interrupt enable */
      __IOM uint32_t RBNEIE     : 1;            /*!< [5..5] Read data buffer not empty interrupt and overrun error interrupt enable */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable */
      __IOM uint32_t TBEIE      : 1;            /*!< [7..7] Transmitter buffer empty interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [8..8] Parity error interrupt enable */
      __IOM uint32_t PM         : 1;            /*!< [9..9] Parity mode */
      __IOM uint32_t PCEN       : 1;            /*!< [10..10] Parity check function enable */
      __IOM uint32_t WM         : 1;            /*!< [11..11] Wakeup method in mute mode */
      __IOM uint32_t WL         : 1;            /*!< [12..12] Word length */
      __IOM uint32_t UEN        : 1;            /*!< [13..13] USART enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t OVSMOD     : 1;            /*!< [15..15] Oversampling mode */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000010) Control register 1 */
    
    struct {
      __IOM uint32_t ADDR       : 4;            /*!< [3..0] Address of the USART */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBLEN      : 1;            /*!< [5..5] LIN break frame length */
      __IOM uint32_t LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CLEN       : 1;            /*!< [8..8] CK Length */
      __IOM uint32_t CPH        : 1;            /*!< [9..9] Clock phase */
      __IOM uint32_t CPL        : 1;            /*!< [10..10] Clock polarity */
      __IOM uint32_t CKEN       : 1;            /*!< [11..11] CK pin enable */
      __IOM uint32_t STB        : 2;            /*!< [13..12] STOP bits length */
      __IOM uint32_t LMEN       : 1;            /*!< [14..14] LIN mode enable */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t CTL2;                        /*!< (@ 0x00000014) Control register 2 */
    
    struct {
      __IOM uint32_t ERRIE      : 1;            /*!< [0..0] Error interrupt enable */
      __IOM uint32_t IREN       : 1;            /*!< [1..1] IrDA mode enable */
      __IOM uint32_t IRLP       : 1;            /*!< [2..2] IrDA low-power */
      __IOM uint32_t HDEN       : 1;            /*!< [3..3] Half-duplex selection */
      __IOM uint32_t NKEN       : 1;            /*!< [4..4] Smartcard NACK enable */
      __IOM uint32_t SCEN       : 1;            /*!< [5..5] Smartcard mode enable */
      __IOM uint32_t DENR       : 1;            /*!< [6..6] DMA request enable for reception */
      __IOM uint32_t DENT       : 1;            /*!< [7..7] DMA request enable for transmission */
      __IOM uint32_t RTSEN      : 1;            /*!< [8..8] RTS enable */
      __IOM uint32_t CTSEN      : 1;            /*!< [9..9] CTS enable */
      __IOM uint32_t CTSIE      : 1;            /*!< [10..10] CTS interrupt enable */
      __IOM uint32_t OSB        : 1;            /*!< [11..11] One sample bit method enable */
    } CTL2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t GP;                          /*!< (@ 0x0000001C) Guard time and prescaler register */
    
    struct {
      __IOM uint32_t PSC        : 8;            /*!< [7..0] Prescaler value */
      __IOM uint32_t GUAT       : 8;            /*!< [15..8] Guard time value in Smartcard mode */
    } GP_b;
  } ;
  __IM  uint32_t  RESERVED1[24];
  
  union {
    __IOM uint32_t CTL3;                        /*!< (@ 0x00000080) Control register 3 */
    
    struct {
      __IOM uint32_t RTEN       : 1;            /*!< [0..0] Receiver timeout enable */
      __IOM uint32_t SCRTNUM    : 3;            /*!< [3..1] Smartcard auto-retry number */
      __IOM uint32_t RTIE       : 1;            /*!< [4..4] Interrupt enable bit of receive timeout event */
      __IOM uint32_t EBIE       : 1;            /*!< [5..5] Interrupt enable bit of end of block event */
      __IM  uint32_t            : 2;
      __IOM uint32_t RINV       : 1;            /*!< [8..8] RX pin level inversion */
      __IOM uint32_t TINV       : 1;            /*!< [9..9] TX pin level inversion */
      __IOM uint32_t DINV       : 1;            /*!< [10..10] Data bit level inversion */
      __IOM uint32_t MSBF       : 1;            /*!< [11..11] Most significant bit first */
    } CTL3_b;
  } ;
  
  union {
    __IOM uint32_t RT;                          /*!< (@ 0x00000084) Receiver timeout register */
    
    struct {
      __IOM uint32_t RT         : 24;           /*!< [23..0] Receiver timeout threshold */
      __IOM uint32_t BL         : 8;            /*!< [31..24] Block Length */
    } RT_b;
  } ;
  
  union {
    __IOM uint32_t STAT1;                       /*!< (@ 0x00000088) Status register 1 */
    
    struct {
      __IM  uint32_t            : 11;
      __OM  uint32_t RTF        : 1;            /*!< [11..11] Receiver timeout flag */
      __OM  uint32_t EBF        : 1;            /*!< [12..12] End of block flag */
      __IM  uint32_t            : 3;
      __IM  uint32_t BSY        : 1;            /*!< [16..16] Busy flag */
    } STAT1_b;
  } ;
  __IM  uint32_t  RESERVED2[13];
  
  union {
    __IOM uint32_t CHC;                         /*!< (@ 0x000000C0) Coherence control register */
    
    struct {
      __IOM uint32_t HCM        : 1;            /*!< [0..0] Hardware flow control coherence mode */
      __IOM uint32_t PCM        : 1;            /*!< [1..1] Parity check coherence mode */
      __IOM uint32_t BCM        : 1;            /*!< [2..2] Break frame coherence mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t EPERR      : 1;            /*!< [8..8] Early parity error flag */
    } CHC_b;
  } ;
} USART0_Type;                                  /*!< Size = 196 (0xc4) */



/* =========================================================================================================================== */
/* ================                                          USART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver
      transmitter (USART1)
  */

typedef struct {                                /*!< (@ 0x40004400) USART1 Structure */
  
  union {
    __IM  uint32_t STAT0;                       /*!< (@ 0x00000000) Status register 0 */
    
    struct {
      __IM  uint32_t PERR       : 1;            /*!< [0..0] Parity error flag */
      __IM  uint32_t FERR       : 1;            /*!< [1..1] Frame error flag */
      __IM  uint32_t NERR       : 1;            /*!< [2..2] Noise error flag */
      __IM  uint32_t ORERR      : 1;            /*!< [3..3] Overrun error */
      __IM  uint32_t IDLEF      : 1;            /*!< [4..4] IDLE frame detected flag */
      __IM  uint32_t RBNE       : 1;            /*!< [5..5] Read data buffer not empty */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transmission complete */
      __IM  uint32_t TBE        : 1;            /*!< [7..7] Transmit data buffer empty */
      __IM  uint32_t LBDF       : 1;            /*!< [8..8] LIN break detection flag */
      __IM  uint32_t CTSF       : 1;            /*!< [9..9] CTS change flag */
    } STAT0_b;
  } ;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000004) Data register */
    
    struct {
      __IOM uint32_t DATA       : 9;            /*!< [8..0] Transmit or read data value */
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t BAUD;                        /*!< (@ 0x00000008) Baud rate register */
    
    struct {
      __IOM uint32_t FRADIV     : 4;            /*!< [3..0] Fraction part of baud-rate divider */
      __IOM uint32_t INTDIV     : 12;           /*!< [15..4] Integer part of baud-rate divider */
    } BAUD_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x0000000C) Control register 0 */
    
    struct {
      __IOM uint32_t SBKCMD     : 1;            /*!< [0..0] Send break command */
      __IOM uint32_t RWU        : 1;            /*!< [1..1] Receiver wakeup from mute mode */
      __IOM uint32_t REN        : 1;            /*!< [2..2] Receiver enable */
      __IOM uint32_t TEN        : 1;            /*!< [3..3] Transmitter enable */
      __IOM uint32_t IDLEIE     : 1;            /*!< [4..4] IDLE line detected interrupt enable */
      __IOM uint32_t RBNEIE     : 1;            /*!< [5..5] Read data buffer not empty interrupt and overrun error interrupt enable */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable */
      __IOM uint32_t TBEIE      : 1;            /*!< [7..7] Transmitter buffer empty interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [8..8] Parity error interrupt enable */
      __IOM uint32_t PM         : 1;            /*!< [9..9] Parity mode */
      __IOM uint32_t PCEN       : 1;            /*!< [10..10] Parity check function enable */
      __IOM uint32_t WM         : 1;            /*!< [11..11] Wakeup method in mute mode */
      __IOM uint32_t WL         : 1;            /*!< [12..12] Word length */
      __IOM uint32_t UEN        : 1;            /*!< [13..13] USART enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t OVSMOD     : 1;            /*!< [15..15] Oversampling mode */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000010) Control register 1 */
    
    struct {
      __IOM uint32_t ADDR       : 4;            /*!< [3..0] Address of the USART */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBLEN      : 1;            /*!< [5..5] LIN break frame length */
      __IOM uint32_t LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CLEN       : 1;            /*!< [8..8] CK Length */
      __IOM uint32_t CPH        : 1;            /*!< [9..9] Clock phase */
      __IOM uint32_t CPL        : 1;            /*!< [10..10] Clock polarity */
      __IOM uint32_t CKEN       : 1;            /*!< [11..11] CK pin enable */
      __IOM uint32_t STB        : 2;            /*!< [13..12] STOP bits length */
      __IOM uint32_t LMEN       : 1;            /*!< [14..14] LIN mode enable */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t CTL2;                        /*!< (@ 0x00000014) Control register 2 */
    
    struct {
      __IOM uint32_t ERRIE      : 1;            /*!< [0..0] Error interrupt enable */
      __IOM uint32_t IREN       : 1;            /*!< [1..1] IrDA mode enable */
      __IOM uint32_t IRLP       : 1;            /*!< [2..2] IrDA low-power */
      __IOM uint32_t HDEN       : 1;            /*!< [3..3] Half-duplex selection */
      __IOM uint32_t NKEN       : 1;            /*!< [4..4] Smartcard NACK enable */
      __IOM uint32_t SCEN       : 1;            /*!< [5..5] Smartcard mode enable */
      __IOM uint32_t DENR       : 1;            /*!< [6..6] DMA request enable for reception */
      __IOM uint32_t DENT       : 1;            /*!< [7..7] DMA request enable for transmission */
      __IOM uint32_t RTSEN      : 1;            /*!< [8..8] RTS enable */
      __IOM uint32_t CTSEN      : 1;            /*!< [9..9] CTS enable */
      __IOM uint32_t CTSIE      : 1;            /*!< [10..10] CTS interrupt enable */
      __IOM uint32_t OSB        : 1;            /*!< [11..11] One sample bit method enable */
    } CTL2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t GP;                          /*!< (@ 0x0000001C) Guard time and prescaler register */
    
    struct {
      __IOM uint32_t PSC        : 8;            /*!< [7..0] Prescaler value */
      __IOM uint32_t GUAT       : 8;            /*!< [15..8] Guard time value in Smartcard mode */
    } GP_b;
  } ;
  __IM  uint32_t  RESERVED1[24];
  
  union {
    __IOM uint32_t CTL3;                        /*!< (@ 0x00000080) Control register 3 */
    
    struct {
      __IOM uint32_t RTEN       : 1;            /*!< [0..0] Receiver timeout enable */
      __IOM uint32_t SCRTNUM    : 3;            /*!< [3..1] Smartcard auto-retry number */
      __IOM uint32_t RTIE       : 1;            /*!< [4..4] Interrupt enable bit of receive timeout event */
      __IOM uint32_t EBIE       : 1;            /*!< [5..5] Interrupt enable bit of end of block event */
      __IM  uint32_t            : 2;
      __IOM uint32_t RINV       : 1;            /*!< [8..8] RX pin level inversion */
      __IOM uint32_t TINV       : 1;            /*!< [9..9] TX pin level inversion */
      __IOM uint32_t DINV       : 1;            /*!< [10..10] Data bit level inversion */
      __IOM uint32_t MSBF       : 1;            /*!< [11..11] Most significant bit first */
    } CTL3_b;
  } ;
  
  union {
    __IOM uint32_t RT;                          /*!< (@ 0x00000084) Receiver timeout register */
    
    struct {
      __IOM uint32_t RT         : 24;           /*!< [23..0] Receiver timeout threshold */
      __IOM uint32_t BL         : 8;            /*!< [31..24] Block Length */
    } RT_b;
  } ;
  
  union {
    __IOM uint32_t STAT1;                       /*!< (@ 0x00000088) Status register 1 */
    
    struct {
      __IM  uint32_t            : 11;
      __OM  uint32_t RTF        : 1;            /*!< [11..11] Receiver timeout flag */
      __OM  uint32_t EBF        : 1;            /*!< [12..12] End of block flag */
      __IM  uint32_t            : 3;
      __IM  uint32_t BSY        : 1;            /*!< [16..16] Busy flag */
    } STAT1_b;
  } ;
  __IM  uint32_t  RESERVED2[13];
  
  union {
    __IOM uint32_t CHC;                         /*!< (@ 0x000000C0) Coherence control register */
    
    struct {
      __IOM uint32_t HCM        : 1;            /*!< [0..0] Hardware flow control coherence mode */
      __IOM uint32_t PCM        : 1;            /*!< [1..1] Parity check coherence mode */
      __IOM uint32_t BCM        : 1;            /*!< [2..2] Break frame coherence mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t EPERR      : 1;            /*!< [8..8] Early parity error flag */
    } CHC_b;
  } ;
} USART1_Type;                                  /*!< Size = 196 (0xc4) */



/* =========================================================================================================================== */
/* ================                                          USART2                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver
      transmitter (USART2)
  */

typedef struct {                                /*!< (@ 0x40004800) USART2 Structure */
  
  union {
    __IM  uint32_t STAT0;                       /*!< (@ 0x00000000) Status register 0 */
    
    struct {
      __IM  uint32_t PERR       : 1;            /*!< [0..0] Parity error flag */
      __IM  uint32_t FERR       : 1;            /*!< [1..1] Frame error flag */
      __IM  uint32_t NERR       : 1;            /*!< [2..2] Noise error flag */
      __IM  uint32_t ORERR      : 1;            /*!< [3..3] Overrun error */
      __IM  uint32_t IDLEF      : 1;            /*!< [4..4] IDLE frame detected flag */
      __IM  uint32_t RBNE       : 1;            /*!< [5..5] Read data buffer not empty */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transmission complete */
      __IM  uint32_t TBE        : 1;            /*!< [7..7] Transmit data buffer empty */
      __IM  uint32_t LBDF       : 1;            /*!< [8..8] LIN break detection flag */
      __IM  uint32_t CTSF       : 1;            /*!< [9..9] CTS change flag */
    } STAT0_b;
  } ;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000004) Data register */
    
    struct {
      __IOM uint32_t DATA       : 9;            /*!< [8..0] Transmit or read data value */
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t BAUD;                        /*!< (@ 0x00000008) Baud rate register */
    
    struct {
      __IOM uint32_t FRADIV     : 4;            /*!< [3..0] Fraction part of baud-rate divider */
      __IOM uint32_t INTDIV     : 12;           /*!< [15..4] Integer part of baud-rate divider */
    } BAUD_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x0000000C) Control register 0 */
    
    struct {
      __IOM uint32_t SBKCMD     : 1;            /*!< [0..0] Send break command */
      __IOM uint32_t RWU        : 1;            /*!< [1..1] Receiver wakeup from mute mode */
      __IOM uint32_t REN        : 1;            /*!< [2..2] Receiver enable */
      __IOM uint32_t TEN        : 1;            /*!< [3..3] Transmitter enable */
      __IOM uint32_t IDLEIE     : 1;            /*!< [4..4] IDLE line detected interrupt enable */
      __IOM uint32_t RBNEIE     : 1;            /*!< [5..5] Read data buffer not empty interrupt and overrun error interrupt enable */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable */
      __IOM uint32_t TBEIE      : 1;            /*!< [7..7] Transmitter buffer empty interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [8..8] Parity error interrupt enable */
      __IOM uint32_t PM         : 1;            /*!< [9..9] Parity mode */
      __IOM uint32_t PCEN       : 1;            /*!< [10..10] Parity check function enable */
      __IOM uint32_t WM         : 1;            /*!< [11..11] Wakeup method in mute mode */
      __IOM uint32_t WL         : 1;            /*!< [12..12] Word length */
      __IOM uint32_t UEN        : 1;            /*!< [13..13] USART enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t OVSMOD     : 1;            /*!< [15..15] Oversampling mode */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000010) Control register 1 */
    
    struct {
      __IOM uint32_t ADDR       : 4;            /*!< [3..0] Address of the USART */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBLEN      : 1;            /*!< [5..5] LIN break frame length */
      __IOM uint32_t LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CLEN       : 1;            /*!< [8..8] CK Length */
      __IOM uint32_t CPH        : 1;            /*!< [9..9] Clock phase */
      __IOM uint32_t CPL        : 1;            /*!< [10..10] Clock polarity */
      __IOM uint32_t CKEN       : 1;            /*!< [11..11] CK pin enable */
      __IOM uint32_t STB        : 2;            /*!< [13..12] STOP bits length */
      __IOM uint32_t LMEN       : 1;            /*!< [14..14] LIN mode enable */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t CTL2;                        /*!< (@ 0x00000014) Control register 2 */
    
    struct {
      __IOM uint32_t ERRIE      : 1;            /*!< [0..0] Error interrupt enable */
      __IOM uint32_t IREN       : 1;            /*!< [1..1] IrDA mode enable */
      __IOM uint32_t IRLP       : 1;            /*!< [2..2] IrDA low-power */
      __IOM uint32_t HDEN       : 1;            /*!< [3..3] Half-duplex selection */
      __IOM uint32_t NKEN       : 1;            /*!< [4..4] Smartcard NACK enable */
      __IOM uint32_t SCEN       : 1;            /*!< [5..5] Smartcard mode enable */
      __IOM uint32_t DENR       : 1;            /*!< [6..6] DMA request enable for reception */
      __IOM uint32_t DENT       : 1;            /*!< [7..7] DMA request enable for transmission */
      __IOM uint32_t RTSEN      : 1;            /*!< [8..8] RTS enable */
      __IOM uint32_t CTSEN      : 1;            /*!< [9..9] CTS enable */
      __IOM uint32_t CTSIE      : 1;            /*!< [10..10] CTS interrupt enable */
      __IOM uint32_t OSB        : 1;            /*!< [11..11] One sample bit method enable */
    } CTL2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t GP;                          /*!< (@ 0x0000001C) Guard time and prescaler register */
    
    struct {
      __IOM uint32_t PSC        : 8;            /*!< [7..0] Prescaler value */
      __IOM uint32_t GUAT       : 8;            /*!< [15..8] Guard time value in Smartcard mode */
    } GP_b;
  } ;
  __IM  uint32_t  RESERVED1[24];
  
  union {
    __IOM uint32_t CTL3;                        /*!< (@ 0x00000080) Control register 3 */
    
    struct {
      __IOM uint32_t RTEN       : 1;            /*!< [0..0] Receiver timeout enable */
      __IOM uint32_t SCRTNUM    : 3;            /*!< [3..1] Smartcard auto-retry number */
      __IOM uint32_t RTIE       : 1;            /*!< [4..4] Interrupt enable bit of receive timeout event */
      __IOM uint32_t EBIE       : 1;            /*!< [5..5] Interrupt enable bit of end of block event */
      __IM  uint32_t            : 2;
      __IOM uint32_t RINV       : 1;            /*!< [8..8] RX pin level inversion */
      __IOM uint32_t TINV       : 1;            /*!< [9..9] TX pin level inversion */
      __IOM uint32_t DINV       : 1;            /*!< [10..10] Data bit level inversion */
      __IOM uint32_t MSBF       : 1;            /*!< [11..11] Most significant bit first */
    } CTL3_b;
  } ;
  
  union {
    __IOM uint32_t RT;                          /*!< (@ 0x00000084) Receiver timeout register */
    
    struct {
      __IOM uint32_t RT         : 24;           /*!< [23..0] Receiver timeout threshold */
      __IOM uint32_t BL         : 8;            /*!< [31..24] Block Length */
    } RT_b;
  } ;
  
  union {
    __IOM uint32_t STAT1;                       /*!< (@ 0x00000088) Status register 1 */
    
    struct {
      __IM  uint32_t            : 11;
      __OM  uint32_t RTF        : 1;            /*!< [11..11] Receiver timeout flag */
      __OM  uint32_t EBF        : 1;            /*!< [12..12] End of block flag */
      __IM  uint32_t            : 3;
      __IM  uint32_t BSY        : 1;            /*!< [16..16] Busy flag */
    } STAT1_b;
  } ;
  __IM  uint32_t  RESERVED2[13];
  
  union {
    __IOM uint32_t CHC;                         /*!< (@ 0x000000C0) Coherence control register */
    
    struct {
      __IOM uint32_t HCM        : 1;            /*!< [0..0] Hardware flow control coherence mode */
      __IOM uint32_t PCM        : 1;            /*!< [1..1] Parity check coherence mode */
      __IOM uint32_t BCM        : 1;            /*!< [2..2] Break frame coherence mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t EPERR      : 1;            /*!< [8..8] Early parity error flag */
    } CHC_b;
  } ;
} USART2_Type;                                  /*!< Size = 196 (0xc4) */



/* =========================================================================================================================== */
/* ================                                          USART5                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver
      transmitter (USART5)
  */

typedef struct {                                /*!< (@ 0x40011400) USART5 Structure */
  
  union {
    __IM  uint32_t STAT0;                       /*!< (@ 0x00000000) Status register 0 */
    
    struct {
      __IM  uint32_t PERR       : 1;            /*!< [0..0] Parity error flag */
      __IM  uint32_t FERR       : 1;            /*!< [1..1] Frame error flag */
      __IM  uint32_t NERR       : 1;            /*!< [2..2] Noise error flag */
      __IM  uint32_t ORERR      : 1;            /*!< [3..3] Overrun error */
      __IM  uint32_t IDLEF      : 1;            /*!< [4..4] IDLE frame detected flag */
      __IM  uint32_t RBNE       : 1;            /*!< [5..5] Read data buffer not empty */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transmission complete */
      __IM  uint32_t TBE        : 1;            /*!< [7..7] Transmit data buffer empty */
      __IM  uint32_t LBDF       : 1;            /*!< [8..8] LIN break detection flag */
      __IM  uint32_t CTSF       : 1;            /*!< [9..9] CTS change flag */
    } STAT0_b;
  } ;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000004) Data register */
    
    struct {
      __IOM uint32_t DATA       : 9;            /*!< [8..0] Transmit or read data value */
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t BAUD;                        /*!< (@ 0x00000008) Baud rate register */
    
    struct {
      __IOM uint32_t FRADIV     : 4;            /*!< [3..0] Fraction part of baud-rate divider */
      __IOM uint32_t INTDIV     : 12;           /*!< [15..4] Integer part of baud-rate divider */
    } BAUD_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x0000000C) Control register 0 */
    
    struct {
      __IOM uint32_t SBKCMD     : 1;            /*!< [0..0] Send break command */
      __IOM uint32_t RWU        : 1;            /*!< [1..1] Receiver wakeup from mute mode */
      __IOM uint32_t REN        : 1;            /*!< [2..2] Receiver enable */
      __IOM uint32_t TEN        : 1;            /*!< [3..3] Transmitter enable */
      __IOM uint32_t IDLEIE     : 1;            /*!< [4..4] IDLE line detected interrupt enable */
      __IOM uint32_t RBNEIE     : 1;            /*!< [5..5] Read data buffer not empty interrupt and overrun error interrupt enable */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable */
      __IOM uint32_t TBEIE      : 1;            /*!< [7..7] Transmitter buffer empty interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [8..8] Parity error interrupt enable */
      __IOM uint32_t PM         : 1;            /*!< [9..9] Parity mode */
      __IOM uint32_t PCEN       : 1;            /*!< [10..10] Parity check function enable */
      __IOM uint32_t WM         : 1;            /*!< [11..11] Wakeup method in mute mode */
      __IOM uint32_t WL         : 1;            /*!< [12..12] Word length */
      __IOM uint32_t UEN        : 1;            /*!< [13..13] USART enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t OVSMOD     : 1;            /*!< [15..15] Oversampling mode */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000010) Control register 1 */
    
    struct {
      __IOM uint32_t ADDR       : 4;            /*!< [3..0] Address of the USART */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBLEN      : 1;            /*!< [5..5] LIN break frame length */
      __IOM uint32_t LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CLEN       : 1;            /*!< [8..8] CK Length */
      __IOM uint32_t CPH        : 1;            /*!< [9..9] Clock phase */
      __IOM uint32_t CPL        : 1;            /*!< [10..10] Clock polarity */
      __IOM uint32_t CKEN       : 1;            /*!< [11..11] CK pin enable */
      __IOM uint32_t STB        : 2;            /*!< [13..12] STOP bits length */
      __IOM uint32_t LMEN       : 1;            /*!< [14..14] LIN mode enable */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t CTL2;                        /*!< (@ 0x00000014) Control register 2 */
    
    struct {
      __IOM uint32_t ERRIE      : 1;            /*!< [0..0] Error interrupt enable */
      __IOM uint32_t IREN       : 1;            /*!< [1..1] IrDA mode enable */
      __IOM uint32_t IRLP       : 1;            /*!< [2..2] IrDA low-power */
      __IOM uint32_t HDEN       : 1;            /*!< [3..3] Half-duplex selection */
      __IOM uint32_t NKEN       : 1;            /*!< [4..4] Smartcard NACK enable */
      __IOM uint32_t SCEN       : 1;            /*!< [5..5] Smartcard mode enable */
      __IOM uint32_t DENR       : 1;            /*!< [6..6] DMA request enable for reception */
      __IOM uint32_t DENT       : 1;            /*!< [7..7] DMA request enable for transmission */
      __IOM uint32_t RTSEN      : 1;            /*!< [8..8] RTS enable */
      __IOM uint32_t CTSEN      : 1;            /*!< [9..9] CTS enable */
      __IOM uint32_t CTSIE      : 1;            /*!< [10..10] CTS interrupt enable */
      __IOM uint32_t OSB        : 1;            /*!< [11..11] One sample bit method enable */
    } CTL2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t GP;                          /*!< (@ 0x0000001C) Guard time and prescaler register */
    
    struct {
      __IOM uint32_t PSC        : 8;            /*!< [7..0] Prescaler value */
      __IOM uint32_t GUAT       : 8;            /*!< [15..8] Guard time value in Smartcard mode */
    } GP_b;
  } ;
  __IM  uint32_t  RESERVED1[24];
  
  union {
    __IOM uint32_t CTL3;                        /*!< (@ 0x00000080) Control register 3 */
    
    struct {
      __IOM uint32_t RTEN       : 1;            /*!< [0..0] Receiver timeout enable */
      __IOM uint32_t SCRTNUM    : 3;            /*!< [3..1] Smartcard auto-retry number */
      __IOM uint32_t RTIE       : 1;            /*!< [4..4] Interrupt enable bit of receive timeout event */
      __IOM uint32_t EBIE       : 1;            /*!< [5..5] Interrupt enable bit of end of block event */
      __IM  uint32_t            : 2;
      __IOM uint32_t RINV       : 1;            /*!< [8..8] RX pin level inversion */
      __IOM uint32_t TINV       : 1;            /*!< [9..9] TX pin level inversion */
      __IOM uint32_t DINV       : 1;            /*!< [10..10] Data bit level inversion */
      __IOM uint32_t MSBF       : 1;            /*!< [11..11] Most significant bit first */
    } CTL3_b;
  } ;
  
  union {
    __IOM uint32_t RT;                          /*!< (@ 0x00000084) Receiver timeout register */
    
    struct {
      __IOM uint32_t RT         : 24;           /*!< [23..0] Receiver timeout threshold */
      __IOM uint32_t BL         : 8;            /*!< [31..24] Block Length */
    } RT_b;
  } ;
  
  union {
    __IOM uint32_t STAT1;                       /*!< (@ 0x00000088) Status register 1 */
    
    struct {
      __IM  uint32_t            : 11;
      __OM  uint32_t RTF        : 1;            /*!< [11..11] Receiver timeout flag */
      __OM  uint32_t EBF        : 1;            /*!< [12..12] End of block flag */
      __IM  uint32_t            : 3;
      __IM  uint32_t BSY        : 1;            /*!< [16..16] Busy flag */
    } STAT1_b;
  } ;
  __IM  uint32_t  RESERVED2[13];
  
  union {
    __IOM uint32_t CHC;                         /*!< (@ 0x000000C0) Coherence control register */
    
    struct {
      __IOM uint32_t HCM        : 1;            /*!< [0..0] Hardware flow control coherence mode */
      __IOM uint32_t PCM        : 1;            /*!< [1..1] Parity check coherence mode */
      __IOM uint32_t BCM        : 1;            /*!< [2..2] Break frame coherence mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t EPERR      : 1;            /*!< [8..8] Early parity error flag */
    } CHC_b;
  } ;
} USART5_Type;                                  /*!< Size = 196 (0xc4) */



/* =========================================================================================================================== */
/* ================                                           UART3                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal  asynchronous receiver
      transmitter (UART3)
  */

typedef struct {                                /*!< (@ 0x40004C00) UART3 Structure */
  
  union {
    __IM  uint32_t STAT0;                       /*!< (@ 0x00000000) Status register 0 */
    
    struct {
      __IM  uint32_t PERR       : 1;            /*!< [0..0] Parity error flag */
      __IM  uint32_t FERR       : 1;            /*!< [1..1] Frame error flag */
      __IM  uint32_t NERR       : 1;            /*!< [2..2] Noise error flag */
      __IM  uint32_t ORERR      : 1;            /*!< [3..3] Overrun error */
      __IM  uint32_t IDLEF      : 1;            /*!< [4..4] IDLE frame detected flag */
      __IM  uint32_t RBNE       : 1;            /*!< [5..5] Read data buffer not empty */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transmission complete */
      __IM  uint32_t TBE        : 1;            /*!< [7..7] Transmit data buffer empty */
      __IM  uint32_t LBDF       : 1;            /*!< [8..8] LIN break detection flag */
      __IM  uint32_t CTSF       : 1;            /*!< [9..9] CTS change flag */
    } STAT0_b;
  } ;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000004) Data register */
    
    struct {
      __IOM uint32_t DATA       : 9;            /*!< [8..0] Transmit or read data value */
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t BAUD;                        /*!< (@ 0x00000008) Baud rate register */
    
    struct {
      __IOM uint32_t FRADIV     : 4;            /*!< [3..0] Fraction part of baud-rate divider */
      __IOM uint32_t INTDIV     : 12;           /*!< [15..4] Integer part of baud-rate divider */
    } BAUD_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x0000000C) Control register 0 */
    
    struct {
      __IOM uint32_t SBKCMD     : 1;            /*!< [0..0] Send break command */
      __IOM uint32_t RWU        : 1;            /*!< [1..1] Receiver wakeup from mute mode */
      __IOM uint32_t REN        : 1;            /*!< [2..2] Receiver enable */
      __IOM uint32_t TEN        : 1;            /*!< [3..3] Transmitter enable */
      __IOM uint32_t IDLEIE     : 1;            /*!< [4..4] IDLE line detected interrupt enable */
      __IOM uint32_t RBNEIE     : 1;            /*!< [5..5] Read data buffer not empty interrupt and overrun error interrupt enable */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable */
      __IOM uint32_t TBEIE      : 1;            /*!< [7..7] Transmitter buffer empty interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [8..8] Parity error interrupt enable */
      __IOM uint32_t PM         : 1;            /*!< [9..9] Parity mode */
      __IOM uint32_t PCEN       : 1;            /*!< [10..10] Parity check function enable */
      __IOM uint32_t WM         : 1;            /*!< [11..11] Wakeup method in mute mode */
      __IOM uint32_t WL         : 1;            /*!< [12..12] Word length */
      __IOM uint32_t UEN        : 1;            /*!< [13..13] USART enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t OVSMOD     : 1;            /*!< [15..15] Oversampling mode */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000010) Control register 1 */
    
    struct {
      __IOM uint32_t ADDR       : 4;            /*!< [3..0] Address of the USART */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBLEN      : 1;            /*!< [5..5] LIN break frame length */
      __IOM uint32_t LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CLEN       : 1;            /*!< [8..8] CK Length */
      __IOM uint32_t CPH        : 1;            /*!< [9..9] Clock phase */
      __IOM uint32_t CPL        : 1;            /*!< [10..10] Clock polarity */
      __IOM uint32_t CKEN       : 1;            /*!< [11..11] CK pin enable */
      __IOM uint32_t STB        : 2;            /*!< [13..12] STOP bits length */
      __IOM uint32_t LMEN       : 1;            /*!< [14..14] LIN mode enable */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t CTL2;                        /*!< (@ 0x00000014) Control register 2 */
    
    struct {
      __IOM uint32_t ERRIE      : 1;            /*!< [0..0] Error interrupt enable */
      __IOM uint32_t IREN       : 1;            /*!< [1..1] IrDA mode enable */
      __IOM uint32_t IRLP       : 1;            /*!< [2..2] IrDA low-power */
      __IOM uint32_t HDEN       : 1;            /*!< [3..3] Half-duplex selection */
      __IOM uint32_t NKEN       : 1;            /*!< [4..4] Smartcard NACK enable */
      __IOM uint32_t SCEN       : 1;            /*!< [5..5] Smartcard mode enable */
      __IOM uint32_t DENR       : 1;            /*!< [6..6] DMA request enable for reception */
      __IOM uint32_t DENT       : 1;            /*!< [7..7] DMA request enable for transmission */
      __IOM uint32_t RTSEN      : 1;            /*!< [8..8] RTS enable */
      __IOM uint32_t CTSEN      : 1;            /*!< [9..9] CTS enable */
      __IOM uint32_t CTSIE      : 1;            /*!< [10..10] CTS interrupt enable */
      __IOM uint32_t OSB        : 1;            /*!< [11..11] One sample bit method enable */
    } CTL2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t GP;                          /*!< (@ 0x0000001C) Guard time and prescaler register */
    
    struct {
      __IOM uint32_t PSC        : 8;            /*!< [7..0] Prescaler value */
      __IOM uint32_t GUAT       : 8;            /*!< [15..8] Guard time value in Smartcard mode */
    } GP_b;
  } ;
  __IM  uint32_t  RESERVED1[40];
  
  union {
    __IOM uint32_t CHC;                         /*!< (@ 0x000000C0) Coherence control register */
    
    struct {
      __IOM uint32_t HCM        : 1;            /*!< [0..0] Hardware flow control coherence mode */
      __IOM uint32_t PCM        : 1;            /*!< [1..1] Parity check coherence mode */
      __IOM uint32_t BCM        : 1;            /*!< [2..2] Break frame coherence mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t EPERR      : 1;            /*!< [8..8] Early parity error flag */
    } CHC_b;
  } ;
} UART3_Type;                                   /*!< Size = 196 (0xc4) */



/* =========================================================================================================================== */
/* ================                                           UART4                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal  asynchronous receiver
      transmitter (UART4)
  */

typedef struct {                                /*!< (@ 0x40005000) UART4 Structure */
  
  union {
    __IM  uint32_t STAT0;                       /*!< (@ 0x00000000) Status register 0 */
    
    struct {
      __IM  uint32_t PERR       : 1;            /*!< [0..0] Parity error flag */
      __IM  uint32_t FERR       : 1;            /*!< [1..1] Frame error flag */
      __IM  uint32_t NERR       : 1;            /*!< [2..2] Noise error flag */
      __IM  uint32_t ORERR      : 1;            /*!< [3..3] Overrun error */
      __IM  uint32_t IDLEF      : 1;            /*!< [4..4] IDLE frame detected flag */
      __IM  uint32_t RBNE       : 1;            /*!< [5..5] Read data buffer not empty */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transmission complete */
      __IM  uint32_t TBE        : 1;            /*!< [7..7] Transmit data buffer empty */
      __IM  uint32_t LBDF       : 1;            /*!< [8..8] LIN break detection flag */
      __IM  uint32_t CTSF       : 1;            /*!< [9..9] CTS change flag */
    } STAT0_b;
  } ;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000004) Data register */
    
    struct {
      __IOM uint32_t DATA       : 9;            /*!< [8..0] Transmit or read data value */
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t BAUD;                        /*!< (@ 0x00000008) Baud rate register */
    
    struct {
      __IOM uint32_t FRADIV     : 4;            /*!< [3..0] Fraction part of baud-rate divider */
      __IOM uint32_t INTDIV     : 12;           /*!< [15..4] Integer part of baud-rate divider */
    } BAUD_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x0000000C) Control register 0 */
    
    struct {
      __IOM uint32_t SBKCMD     : 1;            /*!< [0..0] Send break command */
      __IOM uint32_t RWU        : 1;            /*!< [1..1] Receiver wakeup from mute mode */
      __IOM uint32_t REN        : 1;            /*!< [2..2] Receiver enable */
      __IOM uint32_t TEN        : 1;            /*!< [3..3] Transmitter enable */
      __IOM uint32_t IDLEIE     : 1;            /*!< [4..4] IDLE line detected interrupt enable */
      __IOM uint32_t RBNEIE     : 1;            /*!< [5..5] Read data buffer not empty interrupt and overrun error interrupt enable */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable */
      __IOM uint32_t TBEIE      : 1;            /*!< [7..7] Transmitter buffer empty interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [8..8] Parity error interrupt enable */
      __IOM uint32_t PM         : 1;            /*!< [9..9] Parity mode */
      __IOM uint32_t PCEN       : 1;            /*!< [10..10] Parity check function enable */
      __IOM uint32_t WM         : 1;            /*!< [11..11] Wakeup method in mute mode */
      __IOM uint32_t WL         : 1;            /*!< [12..12] Word length */
      __IOM uint32_t UEN        : 1;            /*!< [13..13] USART enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t OVSMOD     : 1;            /*!< [15..15] Oversampling mode */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000010) Control register 1 */
    
    struct {
      __IOM uint32_t ADDR       : 4;            /*!< [3..0] Address of the USART */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBLEN      : 1;            /*!< [5..5] LIN break frame length */
      __IOM uint32_t LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CLEN       : 1;            /*!< [8..8] CK Length */
      __IOM uint32_t CPH        : 1;            /*!< [9..9] Clock phase */
      __IOM uint32_t CPL        : 1;            /*!< [10..10] Clock polarity */
      __IOM uint32_t CKEN       : 1;            /*!< [11..11] CK pin enable */
      __IOM uint32_t STB        : 2;            /*!< [13..12] STOP bits length */
      __IOM uint32_t LMEN       : 1;            /*!< [14..14] LIN mode enable */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t CTL2;                        /*!< (@ 0x00000014) Control register 2 */
    
    struct {
      __IOM uint32_t ERRIE      : 1;            /*!< [0..0] Error interrupt enable */
      __IOM uint32_t IREN       : 1;            /*!< [1..1] IrDA mode enable */
      __IOM uint32_t IRLP       : 1;            /*!< [2..2] IrDA low-power */
      __IOM uint32_t HDEN       : 1;            /*!< [3..3] Half-duplex selection */
      __IOM uint32_t NKEN       : 1;            /*!< [4..4] Smartcard NACK enable */
      __IOM uint32_t SCEN       : 1;            /*!< [5..5] Smartcard mode enable */
      __IOM uint32_t DENR       : 1;            /*!< [6..6] DMA request enable for reception */
      __IOM uint32_t DENT       : 1;            /*!< [7..7] DMA request enable for transmission */
      __IOM uint32_t RTSEN      : 1;            /*!< [8..8] RTS enable */
      __IOM uint32_t CTSEN      : 1;            /*!< [9..9] CTS enable */
      __IOM uint32_t CTSIE      : 1;            /*!< [10..10] CTS interrupt enable */
      __IOM uint32_t OSB        : 1;            /*!< [11..11] One sample bit method enable */
    } CTL2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t GP;                          /*!< (@ 0x0000001C) Guard time and prescaler register */
    
    struct {
      __IOM uint32_t PSC        : 8;            /*!< [7..0] Prescaler value */
      __IOM uint32_t GUAT       : 8;            /*!< [15..8] Guard time value in Smartcard mode */
    } GP_b;
  } ;
  __IM  uint32_t  RESERVED1[40];
  
  union {
    __IOM uint32_t CHC;                         /*!< (@ 0x000000C0) Coherence control register */
    
    struct {
      __IOM uint32_t HCM        : 1;            /*!< [0..0] Hardware flow control coherence mode */
      __IOM uint32_t PCM        : 1;            /*!< [1..1] Parity check coherence mode */
      __IOM uint32_t BCM        : 1;            /*!< [2..2] Break frame coherence mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t EPERR      : 1;            /*!< [8..8] Early parity error flag */
    } CHC_b;
  } ;
} UART4_Type;                                   /*!< Size = 196 (0xc4) */



/* =========================================================================================================================== */
/* ================                                           UART6                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal  asynchronous receiver
      transmitter (UART6)
  */

typedef struct {                                /*!< (@ 0x40007800) UART6 Structure */
  
  union {
    __IM  uint32_t STAT0;                       /*!< (@ 0x00000000) Status register 0 */
    
    struct {
      __IM  uint32_t PERR       : 1;            /*!< [0..0] Parity error flag */
      __IM  uint32_t FERR       : 1;            /*!< [1..1] Frame error flag */
      __IM  uint32_t NERR       : 1;            /*!< [2..2] Noise error flag */
      __IM  uint32_t ORERR      : 1;            /*!< [3..3] Overrun error */
      __IM  uint32_t IDLEF      : 1;            /*!< [4..4] IDLE frame detected flag */
      __IM  uint32_t RBNE       : 1;            /*!< [5..5] Read data buffer not empty */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transmission complete */
      __IM  uint32_t TBE        : 1;            /*!< [7..7] Transmit data buffer empty */
      __IM  uint32_t LBDF       : 1;            /*!< [8..8] LIN break detection flag */
      __IM  uint32_t CTSF       : 1;            /*!< [9..9] CTS change flag */
    } STAT0_b;
  } ;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000004) Data register */
    
    struct {
      __IOM uint32_t DATA       : 9;            /*!< [8..0] Transmit or read data value */
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t BAUD;                        /*!< (@ 0x00000008) Baud rate register */
    
    struct {
      __IOM uint32_t FRADIV     : 4;            /*!< [3..0] Fraction part of baud-rate divider */
      __IOM uint32_t INTDIV     : 12;           /*!< [15..4] Integer part of baud-rate divider */
    } BAUD_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x0000000C) Control register 0 */
    
    struct {
      __IOM uint32_t SBKCMD     : 1;            /*!< [0..0] Send break command */
      __IOM uint32_t RWU        : 1;            /*!< [1..1] Receiver wakeup from mute mode */
      __IOM uint32_t REN        : 1;            /*!< [2..2] Receiver enable */
      __IOM uint32_t TEN        : 1;            /*!< [3..3] Transmitter enable */
      __IOM uint32_t IDLEIE     : 1;            /*!< [4..4] IDLE line detected interrupt enable */
      __IOM uint32_t RBNEIE     : 1;            /*!< [5..5] Read data buffer not empty interrupt and overrun error interrupt enable */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable */
      __IOM uint32_t TBEIE      : 1;            /*!< [7..7] Transmitter buffer empty interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [8..8] Parity error interrupt enable */
      __IOM uint32_t PM         : 1;            /*!< [9..9] Parity mode */
      __IOM uint32_t PCEN       : 1;            /*!< [10..10] Parity check function enable */
      __IOM uint32_t WM         : 1;            /*!< [11..11] Wakeup method in mute mode */
      __IOM uint32_t WL         : 1;            /*!< [12..12] Word length */
      __IOM uint32_t UEN        : 1;            /*!< [13..13] USART enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t OVSMOD     : 1;            /*!< [15..15] Oversampling mode */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000010) Control register 1 */
    
    struct {
      __IOM uint32_t ADDR       : 4;            /*!< [3..0] Address of the USART */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBLEN      : 1;            /*!< [5..5] LIN break frame length */
      __IOM uint32_t LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CLEN       : 1;            /*!< [8..8] CK Length */
      __IOM uint32_t CPH        : 1;            /*!< [9..9] Clock phase */
      __IOM uint32_t CPL        : 1;            /*!< [10..10] Clock polarity */
      __IOM uint32_t CKEN       : 1;            /*!< [11..11] CK pin enable */
      __IOM uint32_t STB        : 2;            /*!< [13..12] STOP bits length */
      __IOM uint32_t LMEN       : 1;            /*!< [14..14] LIN mode enable */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t CTL2;                        /*!< (@ 0x00000014) Control register 2 */
    
    struct {
      __IOM uint32_t ERRIE      : 1;            /*!< [0..0] Error interrupt enable */
      __IOM uint32_t IREN       : 1;            /*!< [1..1] IrDA mode enable */
      __IOM uint32_t IRLP       : 1;            /*!< [2..2] IrDA low-power */
      __IOM uint32_t HDEN       : 1;            /*!< [3..3] Half-duplex selection */
      __IOM uint32_t NKEN       : 1;            /*!< [4..4] Smartcard NACK enable */
      __IOM uint32_t SCEN       : 1;            /*!< [5..5] Smartcard mode enable */
      __IOM uint32_t DENR       : 1;            /*!< [6..6] DMA request enable for reception */
      __IOM uint32_t DENT       : 1;            /*!< [7..7] DMA request enable for transmission */
      __IOM uint32_t RTSEN      : 1;            /*!< [8..8] RTS enable */
      __IOM uint32_t CTSEN      : 1;            /*!< [9..9] CTS enable */
      __IOM uint32_t CTSIE      : 1;            /*!< [10..10] CTS interrupt enable */
      __IOM uint32_t OSB        : 1;            /*!< [11..11] One sample bit method enable */
    } CTL2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t GP;                          /*!< (@ 0x0000001C) Guard time and prescaler register */
    
    struct {
      __IOM uint32_t PSC        : 8;            /*!< [7..0] Prescaler value */
      __IOM uint32_t GUAT       : 8;            /*!< [15..8] Guard time value in Smartcard mode */
    } GP_b;
  } ;
  __IM  uint32_t  RESERVED1[40];
  
  union {
    __IOM uint32_t CHC;                         /*!< (@ 0x000000C0) Coherence control register */
    
    struct {
      __IOM uint32_t HCM        : 1;            /*!< [0..0] Hardware flow control coherence mode */
      __IOM uint32_t PCM        : 1;            /*!< [1..1] Parity check coherence mode */
      __IOM uint32_t BCM        : 1;            /*!< [2..2] Break frame coherence mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t EPERR      : 1;            /*!< [8..8] Early parity error flag */
    } CHC_b;
  } ;
} UART6_Type;                                   /*!< Size = 196 (0xc4) */



/* =========================================================================================================================== */
/* ================                                           UART7                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal  asynchronous receiver
      transmitter (UART7)
  */

typedef struct {                                /*!< (@ 0x40007C00) UART7 Structure */
  
  union {
    __IM  uint32_t STAT0;                       /*!< (@ 0x00000000) Status register 0 */
    
    struct {
      __IM  uint32_t PERR       : 1;            /*!< [0..0] Parity error flag */
      __IM  uint32_t FERR       : 1;            /*!< [1..1] Frame error flag */
      __IM  uint32_t NERR       : 1;            /*!< [2..2] Noise error flag */
      __IM  uint32_t ORERR      : 1;            /*!< [3..3] Overrun error */
      __IM  uint32_t IDLEF      : 1;            /*!< [4..4] IDLE frame detected flag */
      __IM  uint32_t RBNE       : 1;            /*!< [5..5] Read data buffer not empty */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transmission complete */
      __IM  uint32_t TBE        : 1;            /*!< [7..7] Transmit data buffer empty */
      __IM  uint32_t LBDF       : 1;            /*!< [8..8] LIN break detection flag */
      __IM  uint32_t CTSF       : 1;            /*!< [9..9] CTS change flag */
    } STAT0_b;
  } ;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000004) Data register */
    
    struct {
      __IOM uint32_t DATA       : 9;            /*!< [8..0] Transmit or read data value */
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t BAUD;                        /*!< (@ 0x00000008) Baud rate register */
    
    struct {
      __IOM uint32_t FRADIV     : 4;            /*!< [3..0] Fraction part of baud-rate divider */
      __IOM uint32_t INTDIV     : 12;           /*!< [15..4] Integer part of baud-rate divider */
    } BAUD_b;
  } ;
  
  union {
    __IOM uint32_t CTL0;                        /*!< (@ 0x0000000C) Control register 0 */
    
    struct {
      __IOM uint32_t SBKCMD     : 1;            /*!< [0..0] Send break command */
      __IOM uint32_t RWU        : 1;            /*!< [1..1] Receiver wakeup from mute mode */
      __IOM uint32_t REN        : 1;            /*!< [2..2] Receiver enable */
      __IOM uint32_t TEN        : 1;            /*!< [3..3] Transmitter enable */
      __IOM uint32_t IDLEIE     : 1;            /*!< [4..4] IDLE line detected interrupt enable */
      __IOM uint32_t RBNEIE     : 1;            /*!< [5..5] Read data buffer not empty interrupt and overrun error interrupt enable */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable */
      __IOM uint32_t TBEIE      : 1;            /*!< [7..7] Transmitter buffer empty interrupt enable */
      __IOM uint32_t PERRIE     : 1;            /*!< [8..8] Parity error interrupt enable */
      __IOM uint32_t PM         : 1;            /*!< [9..9] Parity mode */
      __IOM uint32_t PCEN       : 1;            /*!< [10..10] Parity check function enable */
      __IOM uint32_t WM         : 1;            /*!< [11..11] Wakeup method in mute mode */
      __IOM uint32_t WL         : 1;            /*!< [12..12] Word length */
      __IOM uint32_t UEN        : 1;            /*!< [13..13] USART enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t OVSMOD     : 1;            /*!< [15..15] Oversampling mode */
    } CTL0_b;
  } ;
  
  union {
    __IOM uint32_t CTL1;                        /*!< (@ 0x00000010) Control register 1 */
    
    struct {
      __IOM uint32_t ADDR       : 4;            /*!< [3..0] Address of the USART */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBLEN      : 1;            /*!< [5..5] LIN break frame length */
      __IOM uint32_t LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CLEN       : 1;            /*!< [8..8] CK Length */
      __IOM uint32_t CPH        : 1;            /*!< [9..9] Clock phase */
      __IOM uint32_t CPL        : 1;            /*!< [10..10] Clock polarity */
      __IOM uint32_t CKEN       : 1;            /*!< [11..11] CK pin enable */
      __IOM uint32_t STB        : 2;            /*!< [13..12] STOP bits length */
      __IOM uint32_t LMEN       : 1;            /*!< [14..14] LIN mode enable */
    } CTL1_b;
  } ;
  
  union {
    __IOM uint32_t CTL2;                        /*!< (@ 0x00000014) Control register 2 */
    
    struct {
      __IOM uint32_t ERRIE      : 1;            /*!< [0..0] Error interrupt enable */
      __IOM uint32_t IREN       : 1;            /*!< [1..1] IrDA mode enable */
      __IOM uint32_t IRLP       : 1;            /*!< [2..2] IrDA low-power */
      __IOM uint32_t HDEN       : 1;            /*!< [3..3] Half-duplex selection */
      __IOM uint32_t NKEN       : 1;            /*!< [4..4] Smartcard NACK enable */
      __IOM uint32_t SCEN       : 1;            /*!< [5..5] Smartcard mode enable */
      __IOM uint32_t DENR       : 1;            /*!< [6..6] DMA request enable for reception */
      __IOM uint32_t DENT       : 1;            /*!< [7..7] DMA request enable for transmission */
      __IOM uint32_t RTSEN      : 1;            /*!< [8..8] RTS enable */
      __IOM uint32_t CTSEN      : 1;            /*!< [9..9] CTS enable */
      __IOM uint32_t CTSIE      : 1;            /*!< [10..10] CTS interrupt enable */
      __IOM uint32_t OSB        : 1;            /*!< [11..11] One sample bit method enable */
    } CTL2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t GP;                          /*!< (@ 0x0000001C) Guard time and prescaler register */
    
    struct {
      __IOM uint32_t PSC        : 8;            /*!< [7..0] Prescaler value */
      __IOM uint32_t GUAT       : 8;            /*!< [15..8] Guard time value in Smartcard mode */
    } GP_b;
  } ;
  __IM  uint32_t  RESERVED1[40];
  
  union {
    __IOM uint32_t CHC;                         /*!< (@ 0x000000C0) Coherence control register */
    
    struct {
      __IOM uint32_t HCM        : 1;            /*!< [0..0] Hardware flow control coherence mode */
      __IOM uint32_t PCM        : 1;            /*!< [1..1] Parity check coherence mode */
      __IOM uint32_t BCM        : 1;            /*!< [2..2] Break frame coherence mode */
      __IM  uint32_t            : 5;
      __IOM uint32_t EPERR      : 1;            /*!< [8..8] Early parity error flag */
    } CHC_b;
  } ;
} UART7_Type;                                   /*!< Size = 196 (0xc4) */



/* =========================================================================================================================== */
/* ================                                         FS_GLOBAL                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief USB full speed global registers (FS_GLOBAL)
  */

typedef struct {                                /*!< (@ 0x50000000) FS_GLOBAL Structure */
  
  union {
    __IOM uint32_t GOTGCS;                      /*!< (@ 0x00000000) Global OTG control and status register (USBFS_GOTGCS) */
    
    struct {
      __IM  uint32_t SRPS       : 1;            /*!< [0..0] SRP success */
      __IOM uint32_t SRPREQ     : 1;            /*!< [1..1] SRP request */
      __IM  uint32_t            : 6;
      __IM  uint32_t HNPS       : 1;            /*!< [8..8] Host success */
      __IOM uint32_t HNPREQ     : 1;            /*!< [9..9] HNP request */
      __IOM uint32_t HHNPEN     : 1;            /*!< [10..10] Host HNP enable */
      __IOM uint32_t DHNPEN     : 1;            /*!< [11..11] Device HNP enabled */
      __IM  uint32_t            : 4;
      __IM  uint32_t IDPS       : 1;            /*!< [16..16] ID pin status */
      __IM  uint32_t DI         : 1;            /*!< [17..17] Debounce interval */
      __IM  uint32_t ASV        : 1;            /*!< [18..18] A-session valid */
      __IM  uint32_t BSV        : 1;            /*!< [19..19] B-session valid */
    } GOTGCS_b;
  } ;
  
  union {
    __IOM uint32_t GOTGINTF;                    /*!< (@ 0x00000004) Global OTG interrupt flag register (OTG_FS_GOTGINTF) */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t SESEND     : 1;            /*!< [2..2] Session end */
      __IM  uint32_t            : 5;
      __IOM uint32_t SRPEND     : 1;            /*!< [8..8] Session request success status change */
      __IOM uint32_t HNPEND     : 1;            /*!< [9..9] HNP end */
      __IM  uint32_t            : 7;
      __IOM uint32_t HNPDET     : 1;            /*!< [17..17] Host negotiation request detected */
      __IOM uint32_t ADTO       : 1;            /*!< [18..18] A-device timeout */
      __IOM uint32_t DF         : 1;            /*!< [19..19] Debounce finish */
    } GOTGINTF_b;
  } ;
  
  union {
    __IOM uint32_t GAHBCS;                      /*!< (@ 0x00000008) Global AHB control and status register (USBFS_GAHBCS) */
    
    struct {
      __IOM uint32_t GINTEN     : 1;            /*!< [0..0] Global interrupt enable */
      __IM  uint32_t            : 6;
      __IOM uint32_t TXFTH      : 1;            /*!< [7..7] Tx FIFO threshold */
      __IOM uint32_t PTXFTH     : 1;            /*!< [8..8] Periodic Tx FIFO threshold */
    } GAHBCS_b;
  } ;
  
  union {
    __IOM uint32_t GUSBCS;                      /*!< (@ 0x0000000C) Global USB control and status register (OTG_FS_GUSBCSR) */
    
    struct {
      __IOM uint32_t TOC        : 3;            /*!< [2..0] Timeout calibration */
      __IM  uint32_t            : 5;
      __IOM uint32_t SRPCEN     : 1;            /*!< [8..8] SRP capability enable */
      __IOM uint32_t HNPCEN     : 1;            /*!< [9..9] HNP capability enable */
      __IOM uint32_t UTT        : 4;            /*!< [13..10] USB turnaround time */
      __IM  uint32_t            : 15;
      __IOM uint32_t FHM        : 1;            /*!< [29..29] Force host mode */
      __IOM uint32_t FDM        : 1;            /*!< [30..30] Force device mode */
    } GUSBCS_b;
  } ;
  
  union {
    __IOM uint32_t GRSTCTL;                     /*!< (@ 0x00000010) Global reset control register (USBFS_GRSTCTL) */
    
    struct {
      __IOM uint32_t CSRST      : 1;            /*!< [0..0] Core soft reset */
      __IOM uint32_t HCSRST     : 1;            /*!< [1..1] HCLK soft reset */
      __IOM uint32_t HFCRST     : 1;            /*!< [2..2] Host frame counter reset */
      __IM  uint32_t            : 1;
      __IOM uint32_t RXFF       : 1;            /*!< [4..4] RxFIFO flush */
      __IOM uint32_t TXFF       : 1;            /*!< [5..5] TxFIFO flush */
      __IOM uint32_t TXFNUM     : 5;            /*!< [10..6] TxFIFO number */
    } GRSTCTL_b;
  } ;
  
  union {
    __IOM uint32_t GINTF;                       /*!< (@ 0x00000014) Global interrupt flag register (USBFS_GINTF) */
    
    struct {
      __IM  uint32_t COPM       : 1;            /*!< [0..0] Current operation mode */
      __IOM uint32_t MFIF       : 1;            /*!< [1..1] Mode fault interrupt flag */
      __IM  uint32_t OTGIF      : 1;            /*!< [2..2] OTG interrupt flag */
      __IOM uint32_t SOF        : 1;            /*!< [3..3] Start of frame */
      __IM  uint32_t RXFNEIF    : 1;            /*!< [4..4] RxFIFO non-empty interrupt flag */
      __IM  uint32_t NPTXFEIF   : 1;            /*!< [5..5] Non-periodic TxFIFO empty interrupt flag */
      __IM  uint32_t GNPINAK    : 1;            /*!< [6..6] Global Non-Periodic IN NAK effective */
      __IM  uint32_t GONAK      : 1;            /*!< [7..7] Global OUT NAK effective */
      __IM  uint32_t            : 2;
      __IOM uint32_t ESP        : 1;            /*!< [10..10] Early suspend */
      __IOM uint32_t SP         : 1;            /*!< [11..11] USB suspend */
      __IOM uint32_t RST        : 1;            /*!< [12..12] USB reset */
      __IOM uint32_t ENUMF      : 1;            /*!< [13..13] Enumeration finished */
      __IOM uint32_t ISOOPDIF   : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt */
      __IOM uint32_t EOPFIF     : 1;            /*!< [15..15] End of periodic frame interrupt flag */
      __IM  uint32_t            : 2;
      __IM  uint32_t IEPIF      : 1;            /*!< [18..18] IN endpoint interrupt flag */
      __IM  uint32_t OEPIF      : 1;            /*!< [19..19] OUT endpoint interrupt flag */
      __IOM uint32_t ISOINCIF   : 1;            /*!< [20..20] Isochronous IN transfer Not Complete Interrupt Flag */
      __IOM uint32_t PXNCIF_ISOONCIF : 1;       /*!< [21..21] periodic transfer not complete interrupt flag(Host mode)/isochronous OUT transfer not complete interrupt flag(Device mode) */
      __IM  uint32_t            : 2;
      __IM  uint32_t HPIF       : 1;            /*!< [24..24] Host port interrupt flag */
      __IM  uint32_t HCIF       : 1;            /*!< [25..25] Host channels interrupt flag */
      __IM  uint32_t PTXFEIF    : 1;            /*!< [26..26] Periodic TxFIFO empty interrupt flag */
      __IM  uint32_t            : 1;
      __IOM uint32_t IDPSC      : 1;            /*!< [28..28] ID pin status change */
      __IOM uint32_t DISCIF     : 1;            /*!< [29..29] Disconnect interrupt flag */
      __IOM uint32_t SESIF      : 1;            /*!< [30..30] Session interrupt flag */
      __IOM uint32_t WKUPIF     : 1;            /*!< [31..31] Wakeup interrupt flag */
    } GINTF_b;
  } ;
  
  union {
    __IOM uint32_t GINTEN;                      /*!< (@ 0x00000018) Global interrupt enable register (USBFS_GINTEN) */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t MFIE       : 1;            /*!< [1..1] Mode fault interrupt enable */
      __IOM uint32_t OTGIE      : 1;            /*!< [2..2] OTG interrupt enable */
      __IOM uint32_t SOFIE      : 1;            /*!< [3..3] Start of frame interrupt enable */
      __IOM uint32_t RXFNEIE    : 1;            /*!< [4..4] Receive FIFO non-empty interrupt enable */
      __IOM uint32_t NPTXFEIE   : 1;            /*!< [5..5] Non-periodic TxFIFO empty interrupt enable */
      __IOM uint32_t GNPINAKIE  : 1;            /*!< [6..6] Global non-periodic IN NAK effective interrupt enable */
      __IOM uint32_t GONAKIE    : 1;            /*!< [7..7] Global OUT NAK effective interrupt enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t ESPIE      : 1;            /*!< [10..10] Early suspend interrupt enable */
      __IOM uint32_t SPIE       : 1;            /*!< [11..11] USB suspend interrupt enable */
      __IOM uint32_t RSTIE      : 1;            /*!< [12..12] USB reset interrupt enable */
      __IOM uint32_t ENUMFIE    : 1;            /*!< [13..13] Enumeration finish interrupt enable */
      __IOM uint32_t ISOOPDIE   : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt enable */
      __IOM uint32_t EOPFIE     : 1;            /*!< [15..15] End of periodic frame interrupt enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t IEPIE      : 1;            /*!< [18..18] IN endpoints interrupt enable */
      __IOM uint32_t OEPIE      : 1;            /*!< [19..19] OUT endpoints interrupt enable */
      __IOM uint32_t ISOINCIE   : 1;            /*!< [20..20] isochronous IN transfer not complete interrupt enable */
      __IOM uint32_t PXNCIE_ISOONCIE : 1;       /*!< [21..21] periodic transfer not compelete Interrupt enable(Host mode)/isochronous OUT transfer not complete interrupt enable(Device mode) */
      __IM  uint32_t            : 2;
      __IM  uint32_t HPIE       : 1;            /*!< [24..24] Host port interrupt enable */
      __IOM uint32_t HCIE       : 1;            /*!< [25..25] Host channels interrupt enable */
      __IOM uint32_t PTXFEIE    : 1;            /*!< [26..26] Periodic TxFIFO empty interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t IDPSCIE    : 1;            /*!< [28..28] ID pin status change interrupt enable */
      __IOM uint32_t DISCIE     : 1;            /*!< [29..29] Disconnect interrupt enable */
      __IOM uint32_t SESIE      : 1;            /*!< [30..30] Session interrupt enable */
      __IOM uint32_t WKUPIE     : 1;            /*!< [31..31] Wakeup interrupt enable */
    } GINTEN_b;
  } ;
  
  union {
    union {
      __IM  uint32_t GRSTATR_Device;            /*!< (@ 0x0000001C) Global Receive status read(Device mode) */
      
      struct {
        __IM  uint32_t EPNUM    : 4;            /*!< [3..0] Endpoint number */
        __IM  uint32_t BCOUNT   : 11;           /*!< [14..4] Byte count */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID */
        __IM  uint32_t RPCKST   : 4;            /*!< [20..17] Recieve packet status */
      } GRSTATR_Device_b;
    } ;
    
    union {
      __IM  uint32_t GRSTATR_Host;              /*!< (@ 0x0000001C) Global Receive status read(Host mode) */
      
      struct {
        __IM  uint32_t CNUM     : 4;            /*!< [3..0] Channel number */
        __IM  uint32_t BCOUNT   : 11;           /*!< [14..4] Byte count */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID */
        __IM  uint32_t RPCKST   : 4;            /*!< [20..17] Reivece packet status */
      } GRSTATR_Host_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t GRSTATP_Device;            /*!< (@ 0x00000020) Global Receive status pop(Device mode) */
      
      struct {
        __IM  uint32_t EPNUM    : 4;            /*!< [3..0] Endpoint number */
        __IM  uint32_t BCOUNT   : 11;           /*!< [14..4] Byte count */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID */
        __IM  uint32_t RPCKST   : 4;            /*!< [20..17] Recieve packet status */
      } GRSTATP_Device_b;
    } ;
    
    union {
      __IM  uint32_t GRSTATP_Host;              /*!< (@ 0x00000020) Global Receive status pop(Host mode) */
      
      struct {
        __IM  uint32_t CNUM     : 4;            /*!< [3..0] Channel number */
        __IM  uint32_t BCOUNT   : 11;           /*!< [14..4] Byte count */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID */
        __IM  uint32_t RPCKST   : 4;            /*!< [20..17] Reivece packet status */
      } GRSTATP_Host_b;
    } ;
  };
  
  union {
    __IOM uint32_t GRFLEN;                      /*!< (@ 0x00000024) Global Receive FIFO size register (USBFS_GRFLEN) */
    
    struct {
      __IOM uint32_t RXFD       : 16;           /*!< [15..0] Rx FIFO depth */
    } GRFLEN_b;
  } ;
  
  union {
    union {
      __IOM uint32_t HNPTFLEN;                  /*!< (@ 0x00000028) Host non-periodic transmit FIFO length register (Host mode) */
      
      struct {
        __IOM uint32_t HNPTXRSAR : 16;          /*!< [15..0] host non-periodic transmit Tx RAM start address */
        __IOM uint32_t HNPTXFD  : 16;           /*!< [31..16] host non-periodic TxFIFO depth */
      } HNPTFLEN_b;
    } ;
    
    union {
      __IOM uint32_t DIEP0TFLEN;                /*!< (@ 0x00000028) Device IN endpoint 0 transmit FIFO length (Device mode) */
      
      struct {
        __IOM uint32_t IEP0TXFD : 16;           /*!< [15..0] in endpoint 0 Tx FIFO depth */
        __IOM uint32_t IEP0TXRSAR : 16;         /*!< [31..16] in endpoint 0 Tx RAM start address */
      } DIEP0TFLEN_b;
    } ;
  };
  
  union {
    __IM  uint32_t HNPTFQSTAT;                  /*!< (@ 0x0000002C) Host non-periodic transmit FIFO/queue status register (HNPTFQSTAT) */
    
    struct {
      __IM  uint32_t NPTXFS     : 16;           /*!< [15..0] Non-periodic TxFIFO space */
      __IM  uint32_t NPTXRQS    : 8;            /*!< [23..16] Non-periodic transmit request queue space */
      __IM  uint32_t NPTXRQTOP  : 7;            /*!< [30..24] Top of the non-periodic transmit request queue */
    } HNPTFQSTAT_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t GCCFG;                       /*!< (@ 0x00000038) Global core configuration register (USBFS_GCCFG) */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t PWRON      : 1;            /*!< [16..16] Power on */
      __IM  uint32_t            : 1;
      __IOM uint32_t VBUSACEN   : 1;            /*!< [18..18] The VBUS A-device Comparer enable */
      __IOM uint32_t VBUSBCEN   : 1;            /*!< [19..19] The VBUS B-device Comparer enable */
      __IOM uint32_t SOFOEN     : 1;            /*!< [20..20] SOF output enable */
      __IOM uint32_t VBUSIG     : 1;            /*!< [21..21] VBUS ignored */
    } GCCFG_b;
  } ;
  
  union {
    __IOM uint32_t CID;                         /*!< (@ 0x0000003C) core ID register */
    
    struct {
      __IOM uint32_t CID        : 32;           /*!< [31..0] Core ID */
    } CID_b;
  } ;
  __IM  uint32_t  RESERVED1[48];
  
  union {
    __IOM uint32_t HPTFLEN;                     /*!< (@ 0x00000100) Host periodic transmit FIFO length register (HPTFLEN) */
    
    struct {
      __IOM uint32_t HPTXFSAR   : 16;           /*!< [15..0] Host periodic TxFIFO start address */
      __IOM uint32_t HPTXFD     : 16;           /*!< [31..16] Host periodic TxFIFO depth */
    } HPTFLEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP1TFLEN;                  /*!< (@ 0x00000104) device IN endpoint transmit FIFO size register (DIEP1TFLEN) */
    
    struct {
      __IOM uint32_t IEPTXRSAR  : 16;           /*!< [15..0] IN endpoint FIFO transmit RAM start address */
      __IOM uint32_t IEPTXFD    : 16;           /*!< [31..16] IN endpoint TxFIFO depth */
    } DIEP1TFLEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP2TFLEN;                  /*!< (@ 0x00000108) device IN endpoint transmit FIFO size register (DIEP2TFLEN) */
    
    struct {
      __IOM uint32_t IEPTXRSAR  : 16;           /*!< [15..0] IN endpoint FIFO transmit RAM start address */
      __IOM uint32_t IEPTXFD    : 16;           /*!< [31..16] IN endpoint TxFIFO depth */
    } DIEP2TFLEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP3TFLEN;                  /*!< (@ 0x0000010C) device IN endpoint transmit FIFO size register (FS_DIEP3TXFLEN) */
    
    struct {
      __IOM uint32_t IEPTXRSAR  : 16;           /*!< [15..0] IN endpoint FIFO4 transmit RAM start address */
      __IOM uint32_t IEPTXFD    : 16;           /*!< [31..16] IN endpoint TxFIFO depth */
    } DIEP3TFLEN_b;
  } ;
} FS_GLOBAL_Type;                               /*!< Size = 272 (0x110) */



/* =========================================================================================================================== */
/* ================                                          FS_HOST                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed host (FS_HOST)
  */

typedef struct {                                /*!< (@ 0x50000400) FS_HOST Structure */
  
  union {
    __IOM uint32_t HCTL;                        /*!< (@ 0x00000000) host configuration register (HCTL) */
    
    struct {
      __IOM uint32_t CLKSEL     : 2;            /*!< [1..0] clock select for USB clock */
    } HCTL_b;
  } ;
  
  union {
    __IOM uint32_t HFT;                         /*!< (@ 0x00000004) Host frame interval register */
    
    struct {
      __IOM uint32_t FRI        : 16;           /*!< [15..0] Frame interval */
    } HFT_b;
  } ;
  
  union {
    __IM  uint32_t HFINFR;                      /*!< (@ 0x00000008) OTG_FS host frame number/frame time remaining register (HFINFR) */
    
    struct {
      __IM  uint32_t FRNUM      : 16;           /*!< [15..0] Frame number */
      __IM  uint32_t FRT        : 16;           /*!< [31..16] Frame remaining time */
    } HFINFR_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t HPTFQSTAT;                   /*!< (@ 0x00000010) Host periodic transmit FIFO/queue status register (HPTFQSTAT) */
    
    struct {
      __IM  uint32_t PTXFS      : 16;           /*!< [15..0] Periodic transmit data FIFO space available */
      __IM  uint32_t PTXREQS    : 8;            /*!< [23..16] Periodic transmit request queue space available */
      __IM  uint32_t PTXREQT    : 8;            /*!< [31..24] Top of the periodic transmit request queue */
    } HPTFQSTAT_b;
  } ;
  
  union {
    __IM  uint32_t HACHINT;                     /*!< (@ 0x00000014) Host all channels interrupt register */
    
    struct {
      __IM  uint32_t HACHINT    : 8;            /*!< [7..0] Host all channel interrupts */
    } HACHINT_b;
  } ;
  
  union {
    __IOM uint32_t HACHINTEN;                   /*!< (@ 0x00000018) host all channels interrupt mask register */
    
    struct {
      __IOM uint32_t CINTEN     : 8;            /*!< [7..0] Channel interrupt enable */
    } HACHINTEN_b;
  } ;
  __IM  uint32_t  RESERVED1[9];
  
  union {
    __IOM uint32_t HPCS;                        /*!< (@ 0x00000040) Host port control and status register (USBFS_HPCS) */
    
    struct {
      __IM  uint32_t PCST       : 1;            /*!< [0..0] Port connect status */
      __IOM uint32_t PCD        : 1;            /*!< [1..1] Port connect detected */
      __IOM uint32_t PE         : 1;            /*!< [2..2] Port enable */
      __IOM uint32_t PEDC       : 1;            /*!< [3..3] Port enable/disable change */
      __IM  uint32_t            : 2;
      __IOM uint32_t PREM       : 1;            /*!< [6..6] Port resume */
      __IOM uint32_t PSP        : 1;            /*!< [7..7] Port suspend */
      __IOM uint32_t PRST       : 1;            /*!< [8..8] Port reset */
      __IM  uint32_t            : 1;
      __IM  uint32_t PLST       : 2;            /*!< [11..10] Port line status */
      __IOM uint32_t PP         : 1;            /*!< [12..12] Port power */
      __IM  uint32_t            : 4;
      __IM  uint32_t PS         : 2;            /*!< [18..17] Port speed */
    } HPCS_b;
  } ;
  __IM  uint32_t  RESERVED2[47];
  
  union {
    __IOM uint32_t HCH0CTL;                     /*!< (@ 0x00000100) host channel-0 characteristics register (HCH0CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 2;
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH0CTL_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t HCH0INTF;                    /*!< (@ 0x00000108) host channel-0 interrupt register (USBFS_HCHxINTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH0INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH0INTEN;                   /*!< (@ 0x0000010C) host channel-0 interrupt enable register (HCH0INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH0INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH0LEN;                     /*!< (@ 0x00000110) host channel-0 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
    } HCH0LEN_b;
  } ;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t HCH1CTL;                     /*!< (@ 0x00000120) host channel-1 characteristics register (HCH1CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 2;
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH1CTL_b;
  } ;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t HCH1INTF;                    /*!< (@ 0x00000128) host channel-1 interrupt register (HCH1INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH1INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH1INTEN;                   /*!< (@ 0x0000012C) host channel-1 interrupt enable register (HCH1INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH1INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH1LEN;                     /*!< (@ 0x00000130) host channel-1 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
    } HCH1LEN_b;
  } ;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t HCH2CTL;                     /*!< (@ 0x00000140) host channel-2 characteristics register (HCH2CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 2;
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH2CTL_b;
  } ;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint32_t HCH2INTF;                    /*!< (@ 0x00000148) host channel-2 interrupt register (HCH2INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH2INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH2INTEN;                   /*!< (@ 0x0000014C) host channel-2 interrupt enable register (HCH2INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH2INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH2LEN;                     /*!< (@ 0x00000150) host channel-2 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
    } HCH2LEN_b;
  } ;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t HCH3CTL;                     /*!< (@ 0x00000160) host channel-3 characteristics register (HCH3CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 2;
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH3CTL_b;
  } ;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t HCH3INTF;                    /*!< (@ 0x00000168) host channel-3 interrupt register (HCH3INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH3INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH3INTEN;                   /*!< (@ 0x0000016C) host channel-3 interrupt enable register (HCH3INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH3INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH3LEN;                     /*!< (@ 0x00000170) host channel-3 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
    } HCH3LEN_b;
  } ;
  __IM  uint32_t  RESERVED10[3];
  
  union {
    __IOM uint32_t HCH4CTL;                     /*!< (@ 0x00000180) host channel-4 characteristics register (HCH4CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 2;
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH4CTL_b;
  } ;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint32_t HCH4INTF;                    /*!< (@ 0x00000188) host channel-4 interrupt register (HCH4INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH4INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH4INTEN;                   /*!< (@ 0x0000018C) host channel-4 interrupt enable register (HCH4INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH4INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH4LEN;                     /*!< (@ 0x00000190) host channel-4 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
    } HCH4LEN_b;
  } ;
  __IM  uint32_t  RESERVED12[3];
  
  union {
    __IOM uint32_t HCH5CTL;                     /*!< (@ 0x000001A0) host channel-5 characteristics register (HCH5CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 2;
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH5CTL_b;
  } ;
  __IM  uint32_t  RESERVED13;
  
  union {
    __IOM uint32_t HCH5INTF;                    /*!< (@ 0x000001A8) host channel-5 interrupt register (HCH5INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH5INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH5INTEN;                   /*!< (@ 0x000001AC) host channel-5 interrupt enable register (HCH5INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH5INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH5LEN;                     /*!< (@ 0x000001B0) host channel-5 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
    } HCH5LEN_b;
  } ;
  __IM  uint32_t  RESERVED14[3];
  
  union {
    __IOM uint32_t HCH6CTL;                     /*!< (@ 0x000001C0) host channel-6 characteristics register (HCH6CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 2;
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH6CTL_b;
  } ;
  __IM  uint32_t  RESERVED15;
  
  union {
    __IOM uint32_t HCH6INTF;                    /*!< (@ 0x000001C8) host channel-6 interrupt register (HCH6INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH6INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH6INTEN;                   /*!< (@ 0x000001CC) host channel-6 interrupt enable register (HCH6INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH6INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH6LEN;                     /*!< (@ 0x000001D0) host channel-6 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
    } HCH6LEN_b;
  } ;
  __IM  uint32_t  RESERVED16[3];
  
  union {
    __IOM uint32_t HCH7CTL;                     /*!< (@ 0x000001E0) host channel-7 characteristics register (HCH7CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 2;
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH7CTL_b;
  } ;
  __IM  uint32_t  RESERVED17;
  
  union {
    __IOM uint32_t HCH7INTF;                    /*!< (@ 0x000001E8) host channel-7 interrupt register (HCH7INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH7INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH7INTEN;                   /*!< (@ 0x000001EC) host channel-7 interrupt enable register (HCH7INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH7INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH7LEN;                     /*!< (@ 0x000001F0) host channel-7 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
    } HCH7LEN_b;
  } ;
} FS_HOST_Type;                                 /*!< Size = 500 (0x1f4) */



/* =========================================================================================================================== */
/* ================                                         FS_DEVICE                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed device (FS_DEVICE)
  */

typedef struct {                                /*!< (@ 0x50000800) FS_DEVICE Structure */
  
  union {
    __IOM uint32_t DCFG;                        /*!< (@ 0x00000000) device configuration register (DCFG) */
    
    struct {
      __IOM uint32_t DS         : 2;            /*!< [1..0] Device speed */
      __IOM uint32_t NZLSOH     : 1;            /*!< [2..2] Non-zero-length status OUT handshake */
      __IM  uint32_t            : 1;
      __IOM uint32_t DAR        : 7;            /*!< [10..4] Device address */
      __IOM uint32_t EOPFT      : 2;            /*!< [12..11] end of periodic frame time */
    } DCFG_b;
  } ;
  
  union {
    __IOM uint32_t DCTL;                        /*!< (@ 0x00000004) device control register (DCTL) */
    
    struct {
      __IOM uint32_t RWKUP      : 1;            /*!< [0..0] Remote wakeup */
      __IOM uint32_t SD         : 1;            /*!< [1..1] Soft disconnect */
      __IM  uint32_t GINS       : 1;            /*!< [2..2] Global IN NAK status */
      __IM  uint32_t GONS       : 1;            /*!< [3..3] Global OUT NAK status */
      __IM  uint32_t            : 3;
      __OM  uint32_t SGINAK     : 1;            /*!< [7..7] Set global IN NAK */
      __OM  uint32_t CGINAK     : 1;            /*!< [8..8] Clear global IN NAK */
      __OM  uint32_t SGONAK     : 1;            /*!< [9..9] Set global OUT NAK */
      __OM  uint32_t CGONAK     : 1;            /*!< [10..10] Clear global OUT NAK */
      __IOM uint32_t POIF       : 1;            /*!< [11..11] Power-on initialization flag */
    } DCTL_b;
  } ;
  
  union {
    __IM  uint32_t DSTAT;                       /*!< (@ 0x00000008) device status register (DSTAT) */
    
    struct {
      __IM  uint32_t SPST       : 1;            /*!< [0..0] Suspend status */
      __IM  uint32_t ES         : 2;            /*!< [2..1] Enumerated speed */
      __IM  uint32_t            : 5;
      __IM  uint32_t FNRSOF     : 14;           /*!< [21..8] Frame number of the received SOF */
    } DSTAT_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DIEPINTEN;                   /*!< (@ 0x00000010) device IN endpoint common interrupt mask register (DIEPINTEN) */
    
    struct {
      __IOM uint32_t TFEN       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t EPDISEN    : 1;            /*!< [1..1] Endpoint disabled interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITOEN     : 1;            /*!< [3..3] Control IN timeout condition interrupt enable (Non-isochronous endpoints) */
      __IOM uint32_t EPTXFUDEN  : 1;            /*!< [4..4] Endpoint Tx FIFO underrun interrupt enable bit */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNEEN    : 1;            /*!< [6..6] IN endpoint NAK effective interrupt enable */
      __IOM uint32_t TXFEEN     : 1;            /*!< [7..7] Trabsmit FIFO empty interrupt enable */
    } DIEPINTEN_b;
  } ;
  
  union {
    __IOM uint32_t DOEPINTEN;                   /*!< (@ 0x00000014) device OUT endpoint common interrupt enable register (DOEPINTEN) */
    
    struct {
      __IOM uint32_t TFEN       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t EPDISEN    : 1;            /*!< [1..1] Endpoint disabled interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPFEN     : 1;            /*!< [3..3] SETUP phase finished interrupt enable */
      __IOM uint32_t EPRXFOVREN : 1;            /*!< [4..4] Endpoint Rx FIFO overrun interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTPEN   : 1;            /*!< [6..6] Back-to-back SETUP packets interrupt enable */
    } DOEPINTEN_b;
  } ;
  
  union {
    __IM  uint32_t DAEPINT;                     /*!< (@ 0x00000018) device all endpoints interrupt register (DAEPINT) */
    
    struct {
      __IM  uint32_t IEPITB     : 4;            /*!< [3..0] Device all IN endpoint interrupt bits */
      __IM  uint32_t            : 12;
      __IM  uint32_t OEPITB     : 4;            /*!< [19..16] Device all OUT endpoint interrupt bits */
    } DAEPINT_b;
  } ;
  
  union {
    __IOM uint32_t DAEPINTEN;                   /*!< (@ 0x0000001C) Device all endpoints interrupt enable register (DAEPINTEN) */
    
    struct {
      __IOM uint32_t IEPIE      : 4;            /*!< [3..0] IN EP interrupt interrupt enable bits */
      __IM  uint32_t            : 12;
      __IOM uint32_t OEPIE      : 4;            /*!< [19..16] OUT endpoint interrupt enable bits */
    } DAEPINTEN_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t DVBUSDT;                     /*!< (@ 0x00000028) device VBUS discharge time register */
    
    struct {
      __IOM uint32_t DVBUSDT    : 16;           /*!< [15..0] Device VBUS discharge time */
    } DVBUSDT_b;
  } ;
  
  union {
    __IOM uint32_t DVBUSPT;                     /*!< (@ 0x0000002C) device VBUS pulsing time register */
    
    struct {
      __IOM uint32_t DVBUSPT    : 12;           /*!< [11..0] Device VBUS pulsing time */
    } DVBUSPT_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t DIEPFEINTEN;                 /*!< (@ 0x00000034) device IN endpoint FIFO empty interrupt enable register */
    
    struct {
      __IOM uint32_t IEPTXFEIE  : 4;            /*!< [3..0] IN EP Tx FIFO empty interrupt enable bits */
    } DIEPFEINTEN_b;
  } ;
  __IM  uint32_t  RESERVED3[50];
  
  union {
    __IOM uint32_t DIEP0CTL;                    /*!< (@ 0x00000100) device IN endpoint 0 control register (DIEP0CTL) */
    
    struct {
      __IOM uint32_t MPL        : 2;            /*!< [1..0] Maximum packet length */
      __IM  uint32_t            : 13;
      __IM  uint32_t EPACT      : 1;            /*!< [15..15] endpoint active */
      __IM  uint32_t            : 1;
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IM  uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] TxFIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __IM  uint32_t            : 2;
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP0CTL_b;
  } ;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t DIEP0INTF;                   /*!< (@ 0x00000108) device endpoint-0 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
    } DIEP0INTF_b;
  } ;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t DIEP0LEN;                    /*!< (@ 0x00000110) device IN endpoint-0 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 7;            /*!< [6..0] Transfer length */
      __IM  uint32_t            : 12;
      __IOM uint32_t PCNT       : 2;            /*!< [20..19] Packet count */
    } DIEP0LEN_b;
  } ;
  __IM  uint32_t  RESERVED6;
  
  union {
    __IM  uint32_t DIEP0TFSTAT;                 /*!< (@ 0x00000118) device IN endpoint 0 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space remaining */
    } DIEP0TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint32_t DIEP1CTL;                    /*!< (@ 0x00000120) device in endpoint-1 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] Tx FIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVNFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] Set DATA1 PID/Set odd frame */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP1CTL_b;
  } ;
  __IM  uint32_t  RESERVED8;
  
  union {
    __IOM uint32_t DIEP1INTF;                   /*!< (@ 0x00000128) device endpoint-1 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
    } DIEP1INTF_b;
  } ;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t DIEP1LEN;                    /*!< (@ 0x00000130) device IN endpoint-1 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
    } DIEP1LEN_b;
  } ;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IM  uint32_t DIEP1TFSTAT;                 /*!< (@ 0x00000138) device IN endpoint 1 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space remaining */
    } DIEP1TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint32_t DIEP2CTL;                    /*!< (@ 0x00000140) device endpoint-2 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] Tx FIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVNFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] Set DATA1 PID/Set odd frame */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP2CTL_b;
  } ;
  __IM  uint32_t  RESERVED12;
  
  union {
    __IOM uint32_t DIEP2INTF;                   /*!< (@ 0x00000148) device endpoint-2 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
    } DIEP2INTF_b;
  } ;
  __IM  uint32_t  RESERVED13;
  
  union {
    __IOM uint32_t DIEP2LEN;                    /*!< (@ 0x00000150) device IN endpoint-2 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
    } DIEP2LEN_b;
  } ;
  __IM  uint32_t  RESERVED14;
  
  union {
    __IM  uint32_t DIEP2TFSTAT;                 /*!< (@ 0x00000158) device IN endpoint 2 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space remaining */
    } DIEP2TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED15;
  
  union {
    __IOM uint32_t DIEP3CTL;                    /*!< (@ 0x00000160) device endpoint-3 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] Tx FIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVNFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] Set DATA1 PID/Set odd frame */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP3CTL_b;
  } ;
  __IM  uint32_t  RESERVED16;
  
  union {
    __IOM uint32_t DIEP3INTF;                   /*!< (@ 0x00000168) device endpoint-3 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
    } DIEP3INTF_b;
  } ;
  __IM  uint32_t  RESERVED17;
  
  union {
    __IOM uint32_t DIEP3LEN;                    /*!< (@ 0x00000170) device IN endpoint-3 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
    } DIEP3LEN_b;
  } ;
  __IM  uint32_t  RESERVED18;
  
  union {
    __IM  uint32_t DIEP3TFSTAT;                 /*!< (@ 0x00000178) device IN endpoint 3 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space remaining */
    } DIEP3TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED19[97];
  
  union {
    __IOM uint32_t DOEP0CTL;                    /*!< (@ 0x00000300) device endpoint-0 control register */
    
    struct {
      __IM  uint32_t MPL        : 2;            /*!< [1..0] Maximum packet length */
      __IM  uint32_t            : 13;
      __IM  uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t            : 1;
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IM  uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __IM  uint32_t            : 2;
      __IM  uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __OM  uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP0CTL_b;
  } ;
  __IM  uint32_t  RESERVED20;
  
  union {
    __IOM uint32_t DOEP0INTF;                   /*!< (@ 0x00000308) device out endpoint-0 interrupt flag register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
    } DOEP0INTF_b;
  } ;
  __IM  uint32_t  RESERVED21;
  
  union {
    __IOM uint32_t DOEP0LEN;                    /*!< (@ 0x00000310) device OUT endpoint-0 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 7;            /*!< [6..0] Transfer length */
      __IM  uint32_t            : 12;
      __IOM uint32_t PCNT       : 1;            /*!< [19..19] Packet count */
      __IM  uint32_t            : 9;
      __IOM uint32_t STPCNT     : 2;            /*!< [30..29] SETUP packet count */
    } DOEP0LEN_b;
  } ;
  __IM  uint32_t  RESERVED22[3];
  
  union {
    __IOM uint32_t DOEP1CTL;                    /*!< (@ 0x00000320) device endpoint-1 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVENFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] SD1PID/SODDFRM */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP1CTL_b;
  } ;
  __IM  uint32_t  RESERVED23;
  
  union {
    __IOM uint32_t DOEP1INTF;                   /*!< (@ 0x00000328) device out endpoint-1 interrupt flag register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
    } DOEP1INTF_b;
  } ;
  __IM  uint32_t  RESERVED24;
  
  union {
    __IOM uint32_t DOEP1LEN;                    /*!< (@ 0x00000330) device OUT endpoint-1 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t STPCNT_RXDPID : 2;         /*!< [30..29] SETUP packet count/Received data PID */
    } DOEP1LEN_b;
  } ;
  __IM  uint32_t  RESERVED25[3];
  
  union {
    __IOM uint32_t DOEP2CTL;                    /*!< (@ 0x00000340) device endpoint-2 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVENFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] SD1PID/SODDFRM */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP2CTL_b;
  } ;
  __IM  uint32_t  RESERVED26;
  
  union {
    __IOM uint32_t DOEP2INTF;                   /*!< (@ 0x00000348) device out endpoint-2 interrupt flag register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
    } DOEP2INTF_b;
  } ;
  __IM  uint32_t  RESERVED27;
  
  union {
    __IOM uint32_t DOEP2LEN;                    /*!< (@ 0x00000350) device OUT endpoint-2 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t STPCNT_RXDPID : 2;         /*!< [30..29] SETUP packet count/Received data PID */
    } DOEP2LEN_b;
  } ;
  __IM  uint32_t  RESERVED28[3];
  
  union {
    __IOM uint32_t DOEP3CTL;                    /*!< (@ 0x00000360) device endpoint-3 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVENFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] SD1PID/SODDFRM */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP3CTL_b;
  } ;
  __IM  uint32_t  RESERVED29;
  
  union {
    __IOM uint32_t DOEP3INTF;                   /*!< (@ 0x00000368) device out endpoint-3 interrupt flag register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
    } DOEP3INTF_b;
  } ;
  __IM  uint32_t  RESERVED30;
  
  union {
    __IOM uint32_t DOEP3LEN;                    /*!< (@ 0x00000370) device OUT endpoint-3 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t STPCNT_RXDPID : 2;         /*!< [30..29] SETUP packet count/Received data PID */
    } DOEP3LEN_b;
  } ;
} FS_DEVICE_Type;                               /*!< Size = 884 (0x374) */



/* =========================================================================================================================== */
/* ================                                         FS_PWRCLK                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (FS_PWRCLK)
  */

typedef struct {                                /*!< (@ 0x50000E00) FS_PWRCLK Structure */
  
  union {
    __IOM uint32_t PWRCLKCTL;                   /*!< (@ 0x00000000) power and clock gating control register (PWRCLKCTL) */
    
    struct {
      __IOM uint32_t SUCLK      : 1;            /*!< [0..0] Stop the USB clock */
      __IOM uint32_t SHCLK      : 1;            /*!< [1..1] Stop HCLK */
    } PWRCLKCTL_b;
  } ;
} FS_PWRCLK_Type;                               /*!< Size = 4 (0x4) */



/* =========================================================================================================================== */
/* ================                                         HS_GLOBAL                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief USB high speed global registers (HS_GLOBAL)
  */

typedef struct {                                /*!< (@ 0x40040000) HS_GLOBAL Structure */
  
  union {
    __IOM uint32_t GOTGCS;                      /*!< (@ 0x00000000) control and status register (GOTGCS) */
    
    struct {
      __IM  uint32_t SRPS       : 1;            /*!< [0..0] Session request success */
      __IOM uint32_t SRPREQ     : 1;            /*!< [1..1] SRP request */
      __IM  uint32_t            : 6;
      __IM  uint32_t HNPS       : 1;            /*!< [8..8] Host negotiation success */
      __IOM uint32_t HNPREQ     : 1;            /*!< [9..9] HNP request */
      __IOM uint32_t HHNPEN     : 1;            /*!< [10..10] Host HNP enable */
      __IOM uint32_t DHNPEN     : 1;            /*!< [11..11] Device HNP enabled */
      __IM  uint32_t            : 4;
      __IM  uint32_t CIDPS      : 1;            /*!< [16..16] ID pin status */
      __IM  uint32_t DI         : 1;            /*!< [17..17] Debounce interval of a detected connection */
      __IM  uint32_t ASV        : 1;            /*!< [18..18] A-session valid */
      __IM  uint32_t BSV        : 1;            /*!< [19..19] B-session valid */
    } GOTGCS_b;
  } ;
  
  union {
    __IOM uint32_t GOTGINTF;                    /*!< (@ 0x00000004) Global OTG interrupt register (GOTGINTF) */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t SESEND     : 1;            /*!< [2..2] Session end */
      __IM  uint32_t            : 5;
      __IOM uint32_t SRPEND     : 1;            /*!< [8..8] SRPEND */
      __IOM uint32_t HNPEND     : 1;            /*!< [9..9] HNP end */
      __IM  uint32_t            : 7;
      __IOM uint32_t HNPDET     : 1;            /*!< [17..17] Host negotiation detected */
      __IOM uint32_t ADTO       : 1;            /*!< [18..18] A-device timeout */
      __IOM uint32_t DF         : 1;            /*!< [19..19] Debounce finish */
    } GOTGINTF_b;
  } ;
  
  union {
    __IOM uint32_t GAHBCS;                      /*!< (@ 0x00000008) Global AHB configuration register (GAHBCS) */
    
    struct {
      __IOM uint32_t GINTEN     : 1;            /*!< [0..0] Global interrupt enable */
      __IOM uint32_t BURST      : 4;            /*!< [4..1] AHB burst type used by DMA */
      __IOM uint32_t DMAEN      : 1;            /*!< [5..5] DMA function enalbed */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXFTH      : 1;            /*!< [7..7] TxFIFO threshold */
      __IOM uint32_t PTXFTH     : 1;            /*!< [8..8] Periodic TxFIFO empty level */
    } GAHBCS_b;
  } ;
  
  union {
    __IOM uint32_t GUSBCS;                      /*!< (@ 0x0000000C) USB configuration register (GUSBCS) */
    
    struct {
      __IOM uint32_t TOC        : 3;            /*!< [2..0] timeout calibration */
      __IM  uint32_t            : 3;
      __IOM uint32_t EMBPHY     : 1;            /*!< [6..6] Embedded PHY selected */
      __IM  uint32_t            : 1;
      __IOM uint32_t SRPCEN     : 1;            /*!< [8..8] SRP capability enable */
      __IOM uint32_t HNPCEN     : 1;            /*!< [9..9] HNP capability enable */
      __IOM uint32_t UTT        : 4;            /*!< [13..10] USB turnaround time */
      __IM  uint32_t            : 6;
      __IOM uint32_t ULPIEVD    : 1;            /*!< [20..20] ULPI external VBUS driver */
      __IOM uint32_t ULPIEOI    : 1;            /*!< [21..21] ULPI external over current indicator */
      __IM  uint32_t            : 7;
      __IOM uint32_t FHM        : 1;            /*!< [29..29] Force host mode */
      __IOM uint32_t FDM        : 1;            /*!< [30..30] Force device mode */
    } GUSBCS_b;
  } ;
  
  union {
    __IOM uint32_t GRSTCTL;                     /*!< (@ 0x00000010) Global reset register (GRSTCTL) */
    
    struct {
      __IOM uint32_t CSRST      : 1;            /*!< [0..0] Core soft reset */
      __IOM uint32_t HCSRST     : 1;            /*!< [1..1] HCLK soft reset */
      __IOM uint32_t HFCRST     : 1;            /*!< [2..2] Host frame counter reset */
      __IM  uint32_t            : 1;
      __IOM uint32_t RXFF       : 1;            /*!< [4..4] RxFIFO flush */
      __IOM uint32_t TXFF       : 1;            /*!< [5..5] TxFIFO flush */
      __IOM uint32_t TXFNUM     : 5;            /*!< [10..6] TxFIFO number */
      __IM  uint32_t            : 19;
      __IM  uint32_t DMABSY     : 1;            /*!< [30..30] DMA Busy */
      __IM  uint32_t DMAIDL     : 1;            /*!< [31..31] DMA idle state */
    } GRSTCTL_b;
  } ;
  
  union {
    __IOM uint32_t GINTF;                       /*!< (@ 0x00000014) Global interrupt flag register (GINTF) */
    
    struct {
      __IM  uint32_t COPM       : 1;            /*!< [0..0] Current mode of operation */
      __IOM uint32_t MFIF       : 1;            /*!< [1..1] Mode fault interrupt flag */
      __IM  uint32_t OTGIF      : 1;            /*!< [2..2] OTG interrupt */
      __IOM uint32_t SOF        : 1;            /*!< [3..3] Start of frame */
      __IM  uint32_t RXFNEIF    : 1;            /*!< [4..4] RxFIFO non-empty */
      __IM  uint32_t NPTXFEIF   : 1;            /*!< [5..5] Non-periodic TxFIFO empty interrupt flag */
      __IM  uint32_t GNPINAK    : 1;            /*!< [6..6] Global IN non-periodic NAK effective */
      __IM  uint32_t GONAK      : 1;            /*!< [7..7] Global OUT NAK effective */
      __IM  uint32_t            : 2;
      __IOM uint32_t ESP        : 1;            /*!< [10..10] Early suspend */
      __IOM uint32_t SP         : 1;            /*!< [11..11] USB suspend */
      __IOM uint32_t RST        : 1;            /*!< [12..12] USB reset */
      __IOM uint32_t ENUMF      : 1;            /*!< [13..13] Enumeration finished */
      __IOM uint32_t ISOOPDIF   : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt flag */
      __IOM uint32_t EOPFIF     : 1;            /*!< [15..15] End of periodic frame interrupt flag */
      __IM  uint32_t            : 2;
      __IM  uint32_t IEPIF      : 1;            /*!< [18..18] IN endpoint interrupt flag */
      __IM  uint32_t OEPIF      : 1;            /*!< [19..19] OUT endpoint interrupt flag */
      __IOM uint32_t ISOINCIF   : 1;            /*!< [20..20] Isochronous IN transfer Not Complete Interrupt Flag */
      __IOM uint32_t PXNCIF_ISOONCIF : 1;       /*!< [21..21] periodic transfer not complete interrupt flag(Host mode)/isochronous OUT transfer not complete interrupt flag(Device mode) */
      __IM  uint32_t            : 2;
      __IM  uint32_t HPIF       : 1;            /*!< [24..24] Host port interrupt flag */
      __IM  uint32_t HCIF       : 1;            /*!< [25..25] Host channels interrupt flag */
      __IM  uint32_t PTXFEIF    : 1;            /*!< [26..26] Periodic TxFIFO empty interrupt flag */
      __IM  uint32_t            : 1;
      __IOM uint32_t IDPSC      : 1;            /*!< [28..28] ID pin status change */
      __IOM uint32_t DISCIF     : 1;            /*!< [29..29] Disconnect interrupt flag */
      __IOM uint32_t SESIF      : 1;            /*!< [30..30] Session interrupt flag */
      __IOM uint32_t WKUPIF     : 1;            /*!< [31..31] wakeup interrupt flag */
    } GINTF_b;
  } ;
  
  union {
    __IOM uint32_t GINTEN;                      /*!< (@ 0x00000018) Global interrupt enable register (GINTEN) */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t MFIE       : 1;            /*!< [1..1] Mode fault interrupt enable */
      __IOM uint32_t OTGIE      : 1;            /*!< [2..2] OTG interrupt enable */
      __IOM uint32_t SOFIE      : 1;            /*!< [3..3] Start of frame interrupt enable */
      __IOM uint32_t RXFNEIE    : 1;            /*!< [4..4] Receive FIFO non-empty interrupt enable */
      __IOM uint32_t NPTXFEIE   : 1;            /*!< [5..5] Non-periodic TxFIFO empty interrupt enable */
      __IOM uint32_t GNPINAKIE  : 1;            /*!< [6..6] Global non-periodic IN NAK interrupt enable */
      __IOM uint32_t GONAKIE    : 1;            /*!< [7..7] Global OUT NAK effective interrupt enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t ESPIE      : 1;            /*!< [10..10] Early suspend interrupt enable */
      __IOM uint32_t SPIE       : 1;            /*!< [11..11] USB suspend interrupt enable */
      __IOM uint32_t RSTIE      : 1;            /*!< [12..12] USB reset interrupt enable */
      __IOM uint32_t ENUMFIE    : 1;            /*!< [13..13] Enumeration finish enable */
      __IOM uint32_t ISOOPDIE   : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt enable */
      __IOM uint32_t EOPFIE     : 1;            /*!< [15..15] End of periodic frame interrupt enable */
      __IM  uint32_t            : 2;
      __IOM uint32_t IEPIE      : 1;            /*!< [18..18] IN endpoints interrupt enable */
      __IOM uint32_t OEPIE      : 1;            /*!< [19..19] OUT endpoints interrupt enable */
      __IOM uint32_t ISOINCIE   : 1;            /*!< [20..20] isochronous IN transfer not complete interrupt enable */
      __IOM uint32_t PXNCIE_ISOONCIE : 1;       /*!< [21..21] periodic transfer not compelete Interrupt enable(Host mode)/isochronous OUT transfer not complete interrupt enable(Device mode) */
      __IM  uint32_t            : 2;
      __IM  uint32_t HPIE       : 1;            /*!< [24..24] Host port interrupt enable */
      __IOM uint32_t HCIE       : 1;            /*!< [25..25] Host channels interrupt enable */
      __IOM uint32_t PTXFEIE    : 1;            /*!< [26..26] Periodic TxFIFO empty interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t IDPSCIE    : 1;            /*!< [28..28] ID pin status change interrupt enable */
      __IOM uint32_t DISCIE     : 1;            /*!< [29..29] Disconnect interrupt enable */
      __IOM uint32_t SESIE      : 1;            /*!< [30..30] Session interrupt enable */
      __IOM uint32_t WKUPIE     : 1;            /*!< [31..31] Wakeup interrupt enable */
    } GINTEN_b;
  } ;
  
  union {
    union {
      __IM  uint32_t GRSTATR_Device;            /*!< (@ 0x0000001C) Global Receive status read(Device mode) */
      
      struct {
        __IM  uint32_t EPNUM    : 4;            /*!< [3..0] Endpoint number */
        __IM  uint32_t BCOUNT   : 11;           /*!< [14..4] Byte count */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID */
        __IM  uint32_t RPCKST   : 4;            /*!< [20..17] Recieve packet status */
      } GRSTATR_Device_b;
    } ;
    
    union {
      __IM  uint32_t GRSTATR_Host;              /*!< (@ 0x0000001C) Global Receive status debug read(Host mode) */
      
      struct {
        __IM  uint32_t CNUM     : 4;            /*!< [3..0] Channel number */
        __IM  uint32_t BCOUNT   : 11;           /*!< [14..4] Byte count */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID */
        __IM  uint32_t RPCKST   : 4;            /*!< [20..17] Reivece packet status */
      } GRSTATR_Host_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t GRSTATP_Device;            /*!< (@ 0x00000020) Global Receive status pop(Device mode) */
      
      struct {
        __IM  uint32_t EPNUM    : 4;            /*!< [3..0] Endpoint number */
        __IM  uint32_t BCOUNT   : 11;           /*!< [14..4] Byte count */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID */
        __IM  uint32_t RPCKST   : 4;            /*!< [20..17] Recieve packet status */
      } GRSTATP_Device_b;
    } ;
    
    union {
      __IM  uint32_t GRSTATP_Host;              /*!< (@ 0x00000020) Global Receive status debug pop(Host mode) */
      
      struct {
        __IM  uint32_t CNUM     : 4;            /*!< [3..0] Channel number */
        __IM  uint32_t BCOUNT   : 11;           /*!< [14..4] Byte count */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID */
        __IM  uint32_t RPCKST   : 4;            /*!< [20..17] Reivece packet status */
      } GRSTATP_Host_b;
    } ;
  };
  
  union {
    __IOM uint32_t GRFLEN;                      /*!< (@ 0x00000024) Global Receive FIFO size register (OTG_FS_GRFLEN) */
    
    struct {
      __IOM uint32_t RXFD       : 16;           /*!< [15..0] Rx FIFO depth */
    } GRFLEN_b;
  } ;
  
  union {
    union {
      __IOM uint32_t HNPTFLEN;                  /*!< (@ 0x00000028) Host non-periodic transmit FIFO size register (Host mode) */
      
      struct {
        __IOM uint32_t HNPTXRSAR : 16;          /*!< [15..0] host non-periodic transmit Tx RAM start address */
        __IOM uint32_t HNPTXFD  : 16;           /*!< [31..16] host non-periodic TxFIFO depth */
      } HNPTFLEN_b;
    } ;
    
    union {
      __IOM uint32_t DIEP0TFLEN;                /*!< (@ 0x00000028) Device IN endpoint 0 transmit FIFO length (Device mode) */
      
      struct {
        __IOM uint32_t IEP0TXFD : 16;           /*!< [15..0] in endpoint 0 Tx FIFO depth */
        __IOM uint32_t IEP0TXRSAR : 16;         /*!< [31..16] in endpoint 0 Tx RAM start address */
      } DIEP0TFLEN_b;
    } ;
  };
  
  union {
    __IM  uint32_t HNPTFQSTAT;                  /*!< (@ 0x0000002C) Host non-periodic transmit FIFO/queue status register (HNPTFQSTAT) */
    
    struct {
      __IM  uint32_t NPTXFS     : 16;           /*!< [15..0] Non-periodic TxFIFO space available */
      __IM  uint32_t NPTXRQS    : 8;            /*!< [23..16] Non-periodic transmit request queue space */
      __IM  uint32_t NPTXRQTOP  : 7;            /*!< [30..24] Top entry of the non-periodic Tx request queue */
    } HNPTFQSTAT_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t GCCFG;                       /*!< (@ 0x00000038) Global core configuration register (GCCFG) */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t PWRON      : 1;            /*!< [16..16] Power on */
      __IM  uint32_t            : 1;
      __IOM uint32_t VBUSACEN   : 1;            /*!< [18..18] The VBUS A-device Comparer enable */
      __IOM uint32_t VBUSBCEN   : 1;            /*!< [19..19] The VBUS B-device Comparer enable */
      __IOM uint32_t SOFOEN     : 1;            /*!< [20..20] SOF output enable */
      __IOM uint32_t VBUSIG     : 1;            /*!< [21..21] VBUS ignored */
    } GCCFG_b;
  } ;
  
  union {
    __IOM uint32_t CID;                         /*!< (@ 0x0000003C) core ID register */
    
    struct {
      __IOM uint32_t CID        : 32;           /*!< [31..0] Core ID */
    } CID_b;
  } ;
  __IM  uint32_t  RESERVED1[48];
  
  union {
    __IOM uint32_t HPTFLEN;                     /*!< (@ 0x00000100) Host periodic transmit FIFO size register (HPTFLEN) */
    
    struct {
      __IOM uint32_t HPTXFSAR   : 16;           /*!< [15..0] Host periodic TxFIFO start address */
      __IOM uint32_t HPTXFD     : 16;           /*!< [31..16] Host periodic TxFIFO depth */
    } HPTFLEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP1TFLEN;                  /*!< (@ 0x00000104) device IN endpoint transmit FIFO size register (DIEP1TFLEN) */
    
    struct {
      __IOM uint32_t IEPTXRSAR  : 16;           /*!< [15..0] IN endpoint FIFO transmit RAM start address */
      __IOM uint32_t IEPTXFD    : 16;           /*!< [31..16] IN endpoint TxFIFO depth */
    } DIEP1TFLEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP2TFLEN;                  /*!< (@ 0x00000108) device IN endpoint transmit FIFO size register (DIEP2TFLEN) */
    
    struct {
      __IOM uint32_t IEPTXRSAR  : 16;           /*!< [15..0] IN endpoint FIFO transmit RAM start address */
      __IOM uint32_t IEPTXFD    : 16;           /*!< [31..16] IN endpoint TxFIFO depth */
    } DIEP2TFLEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP3TFLEN;                  /*!< (@ 0x0000010C) device IN endpoint transmit FIFO size register (DIEP3TXFLEN) */
    
    struct {
      __IOM uint32_t IEPTXRSAR  : 16;           /*!< [15..0] IN endpoint FIFO transmit RAM start address */
      __IOM uint32_t IEPTXFD    : 16;           /*!< [31..16] IN endpoint TxFIFO depth */
    } DIEP3TFLEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP4TFLEN;                  /*!< (@ 0x00000110) device IN endpoint transmit FIFO size register (DIEP4TXFLEN) */
    
    struct {
      __IOM uint32_t IEPTXRSAR  : 16;           /*!< [15..0] IN endpoint FIFO transmit RAM start address */
      __IOM uint32_t IEPTXFD    : 16;           /*!< [31..16] IN endpoint TxFIFO depth */
    } DIEP4TFLEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP5TFLEN;                  /*!< (@ 0x00000114) device IN endpoint transmit FIFO size register (DIEP5TXFLEN) */
    
    struct {
      __IOM uint32_t IEPTXRSAR  : 16;           /*!< [15..0] IN endpoint FIFO4 transmit RAM start address */
      __IOM uint32_t IEPTXFD    : 16;           /*!< [31..16] IN endpoint TxFIFO depth */
    } DIEP5TFLEN_b;
  } ;
} HS_GLOBAL_Type;                               /*!< Size = 280 (0x118) */



/* =========================================================================================================================== */
/* ================                                          HS_HOST                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed host (HS_HOST)
  */

typedef struct {                                /*!< (@ 0x40040400) HS_HOST Structure */
  
  union {
    __IOM uint32_t HCTL;                        /*!< (@ 0x00000000) host control register (HCTL) */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t SPDFSLS    : 1;            /*!< [2..2] Speed limited to FS and LS */
    } HCTL_b;
  } ;
  
  union {
    __IOM uint32_t HFT;                         /*!< (@ 0x00000004) Host frame interval register */
    
    struct {
      __IOM uint32_t FRI        : 16;           /*!< [15..0] Frame interval */
    } HFT_b;
  } ;
  
  union {
    __IM  uint32_t HFINFR;                      /*!< (@ 0x00000008) host frame number/frame time remaining register (HFINFR) */
    
    struct {
      __IM  uint32_t FRNUM      : 16;           /*!< [15..0] Frame number */
      __IM  uint32_t FRT        : 16;           /*!< [31..16] Frame remaining time */
    } HFINFR_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t HPTFQSTAT;                   /*!< (@ 0x00000010) Host periodic transmit FIFO/queue status register (HPTFQSTAT) */
    
    struct {
      __IM  uint32_t PTXFS      : 16;           /*!< [15..0] Periodic transmit data FIFO space available */
      __IM  uint32_t PTXREQS    : 8;            /*!< [23..16] Periodic Tx request queue space */
      __IM  uint32_t PTXREQT    : 8;            /*!< [31..24] Top of the periodic transmit request queue */
    } HPTFQSTAT_b;
  } ;
  
  union {
    __IM  uint32_t HACHINT;                     /*!< (@ 0x00000014) Host all channels interrupt register */
    
    struct {
      __IM  uint32_t HACHINT    : 12;           /*!< [11..0] Host all channel interrupts */
    } HACHINT_b;
  } ;
  
  union {
    __IOM uint32_t HACHINTEN;                   /*!< (@ 0x00000018) host all channels interrupt mask register */
    
    struct {
      __IOM uint32_t CINTEN     : 12;           /*!< [11..0] Channel interrupt enable */
    } HACHINTEN_b;
  } ;
  __IM  uint32_t  RESERVED1[9];
  
  union {
    __IOM uint32_t HPCS;                        /*!< (@ 0x00000040) host port control and status register (HPCS) */
    
    struct {
      __IM  uint32_t PCST       : 1;            /*!< [0..0] Port connect status */
      __IOM uint32_t PCD        : 1;            /*!< [1..1] Port connect detected */
      __IOM uint32_t PE         : 1;            /*!< [2..2] Port enable */
      __IOM uint32_t PEDC       : 1;            /*!< [3..3] Port enable/disable change */
      __IM  uint32_t            : 2;
      __IOM uint32_t PREM       : 1;            /*!< [6..6] Port resume */
      __IOM uint32_t PSP        : 1;            /*!< [7..7] Port suspend */
      __IOM uint32_t PRST       : 1;            /*!< [8..8] Port reset */
      __IM  uint32_t            : 1;
      __IM  uint32_t PLST       : 2;            /*!< [11..10] Port line status */
      __IOM uint32_t PP         : 1;            /*!< [12..12] Port power */
      __IM  uint32_t            : 4;
      __IM  uint32_t PS         : 2;            /*!< [18..17] Port speed */
    } HPCS_b;
  } ;
  __IM  uint32_t  RESERVED2[47];
  
  union {
    __IOM uint32_t HCH0CTL;                     /*!< (@ 0x00000100) host channel-0 control register (HCH0CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH0CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH0STCTL;                   /*!< (@ 0x00000104) host channel-0 split transaction control register (HCH0STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH0STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH0INTF;                    /*!< (@ 0x00000108) host channel-0 interrupt flag register (HCH0INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH0INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH0INTEN;                   /*!< (@ 0x0000010C) host channel-0 interrupt enable register (HCH0INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH0INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH0LEN;                     /*!< (@ 0x00000110) host channel-0 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH0LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH0DMAADDR;                 /*!< (@ 0x00000114) host channel-0 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH0DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED3[2];
  
  union {
    __IOM uint32_t HCH1CTL;                     /*!< (@ 0x00000120) host channel-1 control register (HCH1CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH1CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH1STCTL;                   /*!< (@ 0x00000124) host channel-1 split transaction control register (HCH1STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH1STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH1INTF;                    /*!< (@ 0x00000128) host channel-1 interrupt flag register (HCH1INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH1INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH1INTEN;                   /*!< (@ 0x0000012C) host channel-1 interrupt enable register (HCH1INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH1INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH1LEN;                     /*!< (@ 0x00000130) host channel-1 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH1LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH1DMAADDR;                 /*!< (@ 0x00000134) host channel-1 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH1DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED4[2];
  
  union {
    __IOM uint32_t HCH2CTL;                     /*!< (@ 0x00000140) host channel-2 control register (HCH2CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH2CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH2STCTL;                   /*!< (@ 0x00000144) host channel-2 split transaction control register (HCH2STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH2STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH2INTF;                    /*!< (@ 0x00000148) host channel-2 interrupt flag register (HCH2INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH2INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH2INTEN;                   /*!< (@ 0x0000014C) host channel-2 interrupt enable register (HCH2INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH2INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH2LEN;                     /*!< (@ 0x00000150) host channel-2 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH2LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH2DMAADDR;                 /*!< (@ 0x00000154) host channel-2 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH2DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED5[2];
  
  union {
    __IOM uint32_t HCH3CTL;                     /*!< (@ 0x00000160) host channel-3 control register (HCH3CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH3CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH3STCTL;                   /*!< (@ 0x00000164) host channel-3 split transaction control register (HCH3STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH3STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH3INTF;                    /*!< (@ 0x00000168) host channel-3 interrupt flag register (HCH3INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH3INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH3INTEN;                   /*!< (@ 0x0000016C) host channel-3 interrupt enable register (HCH3INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH3INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH3LEN;                     /*!< (@ 0x00000170) host channel-3 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH3LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH3DMAADDR;                 /*!< (@ 0x00000174) host channel-3 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH3DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED6[2];
  
  union {
    __IOM uint32_t HCH4CTL;                     /*!< (@ 0x00000180) host channel-4 control register (HCH4CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH4CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH4STCTL;                   /*!< (@ 0x00000184) host channel-4 split transaction control register (HCH4STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH4STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH4INTF;                    /*!< (@ 0x00000188) host channel-4 interrupt flag register (HCH4INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH4INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH4INTEN;                   /*!< (@ 0x0000018C) host channel-4 interrupt enable register (HCH4INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH4INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH4LEN;                     /*!< (@ 0x00000190) host channel-4 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH4LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH4DMAADDR;                 /*!< (@ 0x00000194) host channel-4 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH4DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED7[2];
  
  union {
    __IOM uint32_t HCH5CTL;                     /*!< (@ 0x000001A0) host channel-5 control register (HCH5CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH5CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH5STCTL;                   /*!< (@ 0x000001A4) host channel-5 split transaction control register (HCH5STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH5STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH5INTF;                    /*!< (@ 0x000001A8) host channel-5 interrupt flag register (HCH5INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH5INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH5INTEN;                   /*!< (@ 0x000001AC) host channel-5 interrupt enable register (HCH5INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH5INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH5LEN;                     /*!< (@ 0x000001B0) host channel-5 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH5LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH5DMAADDR;                 /*!< (@ 0x000001B4) host channel-5 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH5DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED8[2];
  
  union {
    __IOM uint32_t HCH6CTL;                     /*!< (@ 0x000001C0) host channel-6 control register (HCH6CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH6CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH6STCTL;                   /*!< (@ 0x000001C4) host channel-6 split transaction control register (HCH6STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH6STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH6INTF;                    /*!< (@ 0x000001C8) host channel-6 interrupt flag register (HCH6INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH6INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH6INTEN;                   /*!< (@ 0x000001CC) host channel-6 interrupt enable register (HCH6INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH6INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH6LEN;                     /*!< (@ 0x000001D0) host channel-6 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH6LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH6DMAADDR;                 /*!< (@ 0x000001D4) host channel-6 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH6DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED9[2];
  
  union {
    __IOM uint32_t HCH7CTL;                     /*!< (@ 0x000001E0) host channel-7 control register (HCH7CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH7CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH7STCTL;                   /*!< (@ 0x000001E4) host channel-7 split transaction control register (HCH7STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH7STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH7INTF;                    /*!< (@ 0x000001E8) host channel-7 interrupt flag register (HCH7INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH7INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH7INTEN;                   /*!< (@ 0x000001EC) host channel-7 interrupt enable register (HCH7INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH7INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH7LEN;                     /*!< (@ 0x000001F0) host channel-7 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH7LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH7DMAADDR;                 /*!< (@ 0x000001F4) host channel-7 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH7DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED10[2];
  
  union {
    __IOM uint32_t HCH8CTL;                     /*!< (@ 0x00000200) host channel-8 control register (HCH8CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH8CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH8STCTL;                   /*!< (@ 0x00000204) host channel-8 split transaction control register (HCH8STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH8STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH8INTF;                    /*!< (@ 0x00000208) host channel-8 interrupt flag register (HCH8INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH8INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH8INTEN;                   /*!< (@ 0x0000020C) host channel-8 interrupt enable register (HCH8INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH8INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH8LEN;                     /*!< (@ 0x00000210) host channel-8 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH8LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH8DMAADDR;                 /*!< (@ 0x00000214) host channel-8 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH8DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED11[2];
  
  union {
    __IOM uint32_t HCH9CTL;                     /*!< (@ 0x00000220) host channel-9 control register (HCH9CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH9CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH9STCTL;                   /*!< (@ 0x00000224) host channel-9 split transaction control register (HCH9STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH9STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH9INTF;                    /*!< (@ 0x00000228) host channel-9 interrupt flag register (HCH9INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH9INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH9INTEN;                   /*!< (@ 0x0000022C) host channel-9 interrupt enable register (HCH9INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH9INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH9LEN;                     /*!< (@ 0x00000230) host channel-9 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH9LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH9DMAADDR;                 /*!< (@ 0x00000234) host channel-9 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH9DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED12[2];
  
  union {
    __IOM uint32_t HCH10CTL;                    /*!< (@ 0x00000240) host channel-10 control register (HCH10CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH10CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH10STCTL;                  /*!< (@ 0x00000244) host channel-10 split transaction control register (HCH10STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH10STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH10INTF;                   /*!< (@ 0x00000248) host channel-10 interrupt flag register (HCH10INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH10INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH10INTEN;                  /*!< (@ 0x0000024C) host channel-10 interrupt enable register (HCH10INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH10INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH10LEN;                    /*!< (@ 0x00000250) host channel-10 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH10LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH10DMAADDR;                /*!< (@ 0x00000254) host channel-10 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH10DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED13[2];
  
  union {
    __IOM uint32_t HCH11CTL;                    /*!< (@ 0x00000260) host channel-11 control register (HCH11CTL) */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] Maximum packet size */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSD        : 1;            /*!< [17..17] Low-speed device */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t MPC        : 2;            /*!< [21..20] Multiple packet count */
      __IOM uint32_t DAR        : 7;            /*!< [28..22] Device address */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame */
      __IOM uint32_t CDIS       : 1;            /*!< [30..30] Channel disable */
      __IOM uint32_t CEN        : 1;            /*!< [31..31] Channel enable */
    } HCH11CTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH11STCTL;                  /*!< (@ 0x00000264) host channel-11 split transaction control register (HCH11STCTL) */
    
    struct {
      __IOM uint32_t PADDR      : 7;            /*!< [6..0] Port address */
      __IOM uint32_t HADDR      : 7;            /*!< [13..7] HUB address */
      __IOM uint32_t ISOPCE     : 2;            /*!< [15..14] Isochronous OUT payload continuation encoding */
      __IOM uint32_t CSPLT      : 1;            /*!< [16..16] Complete split enable */
      __IM  uint32_t            : 14;
      __IOM uint32_t SPLEN      : 1;            /*!< [31..31] Enable high speed split transaction */
    } HCH11STCTL_b;
  } ;
  
  union {
    __IOM uint32_t HCH11INTF;                   /*!< (@ 0x00000268) host channel-11 interrupt flag register (HCH11INTF) */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer completed */
      __IOM uint32_t CH         : 1;            /*!< [1..1] Channel halted */
      __IOM uint32_t DMAER      : 1;            /*!< [2..2] DMA Error */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] NYET */
      __IOM uint32_t USBER      : 1;            /*!< [7..7] USB bus error */
      __IOM uint32_t BBER       : 1;            /*!< [8..8] Babble error */
      __IOM uint32_t REQOVR     : 1;            /*!< [9..9] Request queue overrun */
      __IOM uint32_t DTER       : 1;            /*!< [10..10] Data toggle error */
    } HCH11INTF_b;
  } ;
  
  union {
    __IOM uint32_t HCH11INTEN;                  /*!< (@ 0x0000026C) host channel-11 interrupt enable register (HCH11INTEN) */
    
    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t CHIE       : 1;            /*!< [1..1] Channel halted interrupt enable */
      __IOM uint32_t DMAERIE    : 1;            /*!< [2..2] DMA error interrupt enable */
      __IOM uint32_t STALLIE    : 1;            /*!< [3..3] STALL interrupt enable */
      __IOM uint32_t NAKIE      : 1;            /*!< [4..4] NAK interrupt enable */
      __IOM uint32_t ACKIE      : 1;            /*!< [5..5] ACK interrupt enable */
      __IOM uint32_t NYETIE     : 1;            /*!< [6..6] NYET interrupt enable */
      __IOM uint32_t USBERIE    : 1;            /*!< [7..7] USB bus error interrupt enable */
      __IOM uint32_t BBERIE     : 1;            /*!< [8..8] Babble error interrupt enable */
      __IOM uint32_t REQOVRIE   : 1;            /*!< [9..9] request queue overrun interrupt enable */
      __IOM uint32_t DTERIE     : 1;            /*!< [10..10] Data toggle error interrupt enable */
    } HCH11INTEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH11LEN;                    /*!< (@ 0x00000270) host channel-11 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID */
      __IOM uint32_t PING       : 1;            /*!< [31..31] Ping token request */
    } HCH11LEN_b;
  } ;
  
  union {
    __IOM uint32_t HCH11DMAADDR;                /*!< (@ 0x00000274) host channel-11 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } HCH11DMAADDR_b;
  } ;
} HS_HOST_Type;                                 /*!< Size = 632 (0x278) */



/* =========================================================================================================================== */
/* ================                                         HS_DEVICE                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed device (HS_DEVICE)
  */

typedef struct {                                /*!< (@ 0x40040800) HS_DEVICE Structure */
  
  union {
    __IOM uint32_t DCFG;                        /*!< (@ 0x00000000) device configuration register (DCFG) */
    
    struct {
      __IOM uint32_t DS         : 2;            /*!< [1..0] Device speed */
      __IOM uint32_t NZLSOH     : 1;            /*!< [2..2] Non-zero-length status OUT handshake */
      __IM  uint32_t            : 1;
      __IOM uint32_t DAR        : 7;            /*!< [10..4] Device address */
      __IOM uint32_t EOPFT      : 2;            /*!< [12..11] end of periodic frame time */
    } DCFG_b;
  } ;
  
  union {
    __IOM uint32_t DCTL;                        /*!< (@ 0x00000004) device control register (DCTL) */
    
    struct {
      __IOM uint32_t RWKUP      : 1;            /*!< [0..0] Remote wakeup signaling */
      __IOM uint32_t SD         : 1;            /*!< [1..1] Soft disconnect */
      __IM  uint32_t GINS       : 1;            /*!< [2..2] Global IN NAK status */
      __IM  uint32_t GONS       : 1;            /*!< [3..3] Global OUT NAK status */
      __IM  uint32_t            : 3;
      __IOM uint32_t SGINAK     : 1;            /*!< [7..7] Set global IN NAK */
      __IOM uint32_t CGINAK     : 1;            /*!< [8..8] Clear global IN NAK */
      __IOM uint32_t SGONAK     : 1;            /*!< [9..9] Set global OUT NAK */
      __IOM uint32_t CGONAK     : 1;            /*!< [10..10] Clear global OUT NAK */
      __IOM uint32_t POIF       : 1;            /*!< [11..11] Power-on initialization finished */
    } DCTL_b;
  } ;
  
  union {
    __IM  uint32_t DSTAT;                       /*!< (@ 0x00000008) device status register (DSTAT) */
    
    struct {
      __IM  uint32_t SPST       : 1;            /*!< [0..0] Suspend status */
      __IM  uint32_t ES         : 2;            /*!< [2..1] Enumerated speed */
      __IM  uint32_t            : 5;
      __IM  uint32_t FNRSOF     : 14;           /*!< [21..8] Frame number of the received SOF */
    } DSTAT_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DIEPINTEN;                   /*!< (@ 0x00000010) device IN endpoint common interrupt mask register (DIEPINTEN) */
    
    struct {
      __IOM uint32_t TFEN       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t EPDISEN    : 1;            /*!< [1..1] Endpoint disabled interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITOEN     : 1;            /*!< [3..3] Control IN timeout condition interrupt enable (Non-isochronous endpoints) */
      __IOM uint32_t EPTXFUDEN  : 1;            /*!< [4..4] Endpoint Tx FIFO underrun interrupt enable bit */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNEEN    : 1;            /*!< [6..6] IN endpoint NAK effective interrupt enable */
      __IOM uint32_t TXFEEN     : 1;            /*!< [7..7] Trabsmit FIFO empty interrupt enable */
      __IM  uint32_t            : 5;
      __IOM uint32_t NAKEN      : 1;            /*!< [13..13] NAK handshake sent by USBHS interrupt enable bit */
    } DIEPINTEN_b;
  } ;
  
  union {
    __IOM uint32_t DOEPINTEN;                   /*!< (@ 0x00000014) device OUT endpoint common interrupt enable register (DOEPINTEN) */
    
    struct {
      __IOM uint32_t TFEN       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t EPDISEN    : 1;            /*!< [1..1] Endpoint disabled interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPFEN     : 1;            /*!< [3..3] SETUP phase done interrupt enable */
      __IOM uint32_t EPRXFOVREN : 1;            /*!< [4..4] Endpoint Rx FIFO overrun interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTPEN   : 1;            /*!< [6..6] Back-to-back SETUP packets ( Only for control OUT endpoint) interrupt enable bit */
      __IM  uint32_t            : 7;
      __IOM uint32_t NYETEN     : 1;            /*!< [14..14] NYET handshake is sent interrupt enable */
    } DOEPINTEN_b;
  } ;
  
  union {
    __IM  uint32_t DAEPINT;                     /*!< (@ 0x00000018) device all endpoints interrupt register (DAEPINT) */
    
    struct {
      __IM  uint32_t IEPITB     : 6;            /*!< [5..0] Device all IN endpoint interrupt bits */
      __IM  uint32_t            : 10;
      __IM  uint32_t OEPITB     : 6;            /*!< [21..16] Device all OUT endpoint interrupt bits */
    } DAEPINT_b;
  } ;
  
  union {
    __IOM uint32_t DAEPINTEN;                   /*!< (@ 0x0000001C) Device all endpoints interrupt enable register (DAEPINTEN) */
    
    struct {
      __IOM uint32_t IEPIE      : 6;            /*!< [5..0] IN endpoint interrupt enable bits */
      __IM  uint32_t            : 10;
      __IOM uint32_t OEPIE      : 6;            /*!< [21..16] OUT endpoint interrupt enable bits */
    } DAEPINTEN_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t DVBUSDT;                     /*!< (@ 0x00000028) device VBUS discharge time register */
    
    struct {
      __IOM uint32_t DVBUSDT    : 16;           /*!< [15..0] Device VBUS discharge time */
    } DVBUSDT_b;
  } ;
  
  union {
    __IOM uint32_t DVBUSPT;                     /*!< (@ 0x0000002C) device VBUS pulsing time register */
    
    struct {
      __IOM uint32_t DVBUSPT    : 12;           /*!< [11..0] Device VBUS pulsing time */
    } DVBUSPT_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t DIEPFEINTEN;                 /*!< (@ 0x00000034) device IN endpoint FIFO empty interrupt enable register */
    
    struct {
      __IOM uint32_t IEPTXFEIE  : 6;            /*!< [5..0] IN EP Tx FIFO empty interrupt enable bits */
    } DIEPFEINTEN_b;
  } ;
  
  union {
    __IOM uint32_t DEP1INT;                     /*!< (@ 0x00000038) device endpoint 1 interrupt register */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t IEP1INT    : 1;            /*!< [1..1] IN endpoint 1 interrupt bits */
      __IM  uint32_t            : 15;
      __IOM uint32_t OEP1INT    : 1;            /*!< [17..17] OUT endpoint 1 interrupt bits */
    } DEP1INT_b;
  } ;
  
  union {
    __IOM uint32_t DEP1INTEN;                   /*!< (@ 0x0000003C) device endpoint 1 interrupt enable register */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t IEP1INTEN  : 1;            /*!< [1..1] IN endpoint 1 interrupt enable bits */
      __IM  uint32_t            : 15;
      __IOM uint32_t OEP1INTEN  : 1;            /*!< [17..17] OUT endpoint 1 interrupt enable bits */
    } DEP1INTEN_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t DIEP1INTEN;                  /*!< (@ 0x00000044) device IN endpoint 1 interrupt mask register (DIEP1INTEN) */
    
    struct {
      __IOM uint32_t TFEN       : 1;            /*!< [0..0] Transfer finished interrupt enable */
      __IOM uint32_t EPDISEN    : 1;            /*!< [1..1] Endpoint disabled interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITOEN     : 1;            /*!< [3..3] Control IN timeout condition interrupt enable (Non-isochronous endpoints) */
      __IOM uint32_t EPTXFUDEN  : 1;            /*!< [4..4] Endpoint Tx FIFO underrun interrupt enable bit */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNEEN    : 1;            /*!< [6..6] IN endpoint NAK effective interrupt enable */
      __IM  uint32_t            : 6;
      __IOM uint32_t NAKEN      : 1;            /*!< [13..13] NAK handshake sent by USBHS interrupt enable bit */
    } DIEP1INTEN_b;
  } ;
  __IM  uint32_t  RESERVED4[15];
  
  union {
    __IOM uint32_t DOEP1INTEN;                  /*!< (@ 0x00000084) device OUT endpoint common interrupt enable register (DOEP1INTEN) */
    
    struct {
      __IOM uint32_t TFEN       : 1;            /*!< [0..0] Transfer completed interrupt enable */
      __IOM uint32_t EPDISEN    : 1;            /*!< [1..1] Endpoint disabled interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPFEN     : 1;            /*!< [3..3] SETUP phase done interrupt enable */
      __IOM uint32_t EPRXFOVREN : 1;            /*!< [4..4] Endpoint Rx FIFO overrun interrupt enable */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTPEN   : 1;            /*!< [6..6] Back-to-back SETUP packets ( Only for control OUT endpoint) interrupt enable bit */
      __IM  uint32_t            : 7;
      __IOM uint32_t NYETEN     : 1;            /*!< [14..14] NYET handshake is sent interrupt enable bit */
    } DOEP1INTEN_b;
  } ;
  __IM  uint32_t  RESERVED5[30];
  
  union {
    __IOM uint32_t DIEP0CTL;                    /*!< (@ 0x00000100) Device IN endpoint 0 control register (USBHS_DIEP0CTL) */
    
    struct {
      __IOM uint32_t MPL        : 2;            /*!< [1..0] Maximum packet length */
      __IM  uint32_t            : 13;
      __IM  uint32_t EPACT      : 1;            /*!< [15..15] endpoint active */
      __IM  uint32_t            : 1;
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IM  uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] TxFIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __IM  uint32_t            : 2;
      __IM  uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IM  uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP0CTL_b;
  } ;
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t DIEP0INTF;                   /*!< (@ 0x00000108) Device IN endpoint-0 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
      __IM  uint32_t            : 5;
      __IOM uint32_t NAK        : 1;            /*!< [13..13] NAK handshake sent by USBHS */
    } DIEP0INTF_b;
  } ;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint32_t DIEP0LEN;                    /*!< (@ 0x00000110) device IN endpoint-0 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 7;            /*!< [6..0] Transfer length */
      __IM  uint32_t            : 12;
      __IOM uint32_t PCNT       : 2;            /*!< [20..19] Packet count */
    } DIEP0LEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP0DMAADDR;                /*!< (@ 0x00000114) device IN endpoint 0 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DIEP0DMAADDR_b;
  } ;
  
  union {
    __IM  uint32_t DIEP0TFSTAT;                 /*!< (@ 0x00000118) device IN endpoint 0 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space available */
    } DIEP0TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED8;
  
  union {
    __IOM uint32_t DIEP1CTL;                    /*!< (@ 0x00000120) Device IN endpoint-x control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] Tx FIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVNFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] Set DATA1 PID/Set odd frame */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP1CTL_b;
  } ;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t DIEP1INTF;                   /*!< (@ 0x00000128) Device IN endpoint-1 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
      __IM  uint32_t            : 5;
      __IOM uint32_t NAK        : 1;            /*!< [13..13] NAK handshake sent by USBHS */
    } DIEP1INTF_b;
  } ;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t DIEP1LEN;                    /*!< (@ 0x00000130) device IN endpoint-1 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t MCNT       : 2;            /*!< [30..29] Multi count */
    } DIEP1LEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP1DMAADDR;                /*!< (@ 0x00000134) device IN endpoint 1 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DIEP1DMAADDR_b;
  } ;
  
  union {
    __IM  uint32_t DIEP1TFSTAT;                 /*!< (@ 0x00000138) device IN endpoint 1 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space available */
    } DIEP1TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint32_t DIEP2CTL;                    /*!< (@ 0x00000140) device endpoint-2 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] Tx FIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVNFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] Set DATA1 PID/Set odd frame */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP2CTL_b;
  } ;
  __IM  uint32_t  RESERVED12;
  
  union {
    __IOM uint32_t DIEP2INTF;                   /*!< (@ 0x00000148) Device IN endpoint-2 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
      __IM  uint32_t            : 5;
      __IOM uint32_t NAK        : 1;            /*!< [13..13] NAK handshake sent by USBHS */
    } DIEP2INTF_b;
  } ;
  __IM  uint32_t  RESERVED13;
  
  union {
    __IOM uint32_t DIEP2LEN;                    /*!< (@ 0x00000150) device IN endpoint-2 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t MCNT       : 2;            /*!< [30..29] Multi count */
    } DIEP2LEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP2DMAADDR;                /*!< (@ 0x00000154) device IN endpoint 2 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DIEP2DMAADDR_b;
  } ;
  
  union {
    __IM  uint32_t DIEP2TFSTAT;                 /*!< (@ 0x00000158) device IN endpoint 2 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space available */
    } DIEP2TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED14;
  
  union {
    __IOM uint32_t DIEP3CTL;                    /*!< (@ 0x00000160) device endpoint-3 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] Tx FIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVNFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] Set DATA1 PID/Set odd frame */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP3CTL_b;
  } ;
  __IM  uint32_t  RESERVED15;
  
  union {
    __IOM uint32_t DIEP3INTF;                   /*!< (@ 0x00000168) Device IN endpoint-3 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
      __IM  uint32_t            : 5;
      __IOM uint32_t NAK        : 1;            /*!< [13..13] NAK handshake sent by USBHS */
    } DIEP3INTF_b;
  } ;
  __IM  uint32_t  RESERVED16;
  
  union {
    __IOM uint32_t DIEP3LEN;                    /*!< (@ 0x00000170) device IN endpoint-3 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t MCNT       : 2;            /*!< [30..29] Multi count */
    } DIEP3LEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP3DMAADDR;                /*!< (@ 0x00000174) device IN endpoint 3 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DIEP3DMAADDR_b;
  } ;
  
  union {
    __IM  uint32_t DIEP3TFSTAT;                 /*!< (@ 0x00000178) device IN endpoint 3 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space available */
    } DIEP3TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED17;
  
  union {
    __IOM uint32_t DIEP4CTL;                    /*!< (@ 0x00000180) device endpoint-4 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] Tx FIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVNFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] Set DATA1 PID/Set odd frame */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP4CTL_b;
  } ;
  __IM  uint32_t  RESERVED18;
  
  union {
    __IOM uint32_t DIEP4INTF;                   /*!< (@ 0x00000188) Device IN endpoint-4 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
      __IM  uint32_t            : 5;
      __IOM uint32_t NAK        : 1;            /*!< [13..13] NAK handshake sent by USBHS */
    } DIEP4INTF_b;
  } ;
  __IM  uint32_t  RESERVED19;
  
  union {
    __IOM uint32_t DIEP4LEN;                    /*!< (@ 0x00000190) device IN endpoint-4 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t MCNT       : 2;            /*!< [30..29] Multi count */
    } DIEP4LEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP4DMAADDR;                /*!< (@ 0x00000194) device IN endpoint 4 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DIEP4DMAADDR_b;
  } ;
  
  union {
    __IM  uint32_t DIEP4TFSTAT;                 /*!< (@ 0x00000198) device IN endpoint 4 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space available */
    } DIEP4TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED20;
  
  union {
    __IOM uint32_t DIEP5CTL;                    /*!< (@ 0x000001A0) device endpoint-5 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IM  uint32_t            : 1;
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] Tx FIFO number */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVNFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] Set DATA1 PID/Set odd frame */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DIEP5CTL_b;
  } ;
  __IM  uint32_t  RESERVED21;
  
  union {
    __IOM uint32_t DIEP5INTF;                   /*!< (@ 0x000001A8) Device IN endpoint-5 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint finished */
      __IM  uint32_t            : 1;
      __IOM uint32_t CITO       : 1;            /*!< [3..3] Control in timeout interrupt */
      __IOM uint32_t EPTXFUD    : 1;            /*!< [4..4] Endpoint Tx FIFO underrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t IEPNE      : 1;            /*!< [6..6] IN endpoint NAK effective */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty */
      __IM  uint32_t            : 5;
      __IOM uint32_t NAK        : 1;            /*!< [13..13] NAK handshake sent by USBHS */
    } DIEP5INTF_b;
  } ;
  __IM  uint32_t  RESERVED22;
  
  union {
    __IOM uint32_t DIEP5LEN;                    /*!< (@ 0x000001B0) device IN endpoint-5 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t MCNT       : 2;            /*!< [30..29] Multi count */
    } DIEP5LEN_b;
  } ;
  
  union {
    __IOM uint32_t DIEP5DMAADDR;                /*!< (@ 0x000001B4) device IN endpoint 5 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DIEP5DMAADDR_b;
  } ;
  
  union {
    __IM  uint32_t DIEP5TFSTAT;                 /*!< (@ 0x000001B8) device IN endpoint 5 transmit FIFO status register */
    
    struct {
      __IM  uint32_t IEPTFS     : 16;           /*!< [15..0] IN endpoint TxFIFO space available */
    } DIEP5TFSTAT_b;
  } ;
  __IM  uint32_t  RESERVED23[81];
  
  union {
    __IOM uint32_t DOEP0CTL;                    /*!< (@ 0x00000300) Device OUT endpoint-0 control register */
    
    struct {
      __IM  uint32_t MPL        : 2;            /*!< [1..0] Maximum packet length */
      __IM  uint32_t            : 13;
      __IM  uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t            : 1;
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IM  uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __IM  uint32_t            : 2;
      __IM  uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __OM  uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP0CTL_b;
  } ;
  __IM  uint32_t  RESERVED24;
  
  union {
    __IOM uint32_t DOEP0INTF;                   /*!< (@ 0x00000308) device out endpoint-0 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
      __IM  uint32_t            : 7;
      __IOM uint32_t NYET       : 1;            /*!< [14..14] NYET handshake is sent */
    } DOEP0INTF_b;
  } ;
  __IM  uint32_t  RESERVED25;
  
  union {
    __IOM uint32_t DOEP0LEN;                    /*!< (@ 0x00000310) device OUT endpoint-0 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 7;            /*!< [6..0] Transfer length */
      __IM  uint32_t            : 12;
      __IOM uint32_t PCNT       : 1;            /*!< [19..19] Packet count */
      __IM  uint32_t            : 9;
      __IOM uint32_t STPCNT     : 2;            /*!< [30..29] SETUP packet count */
    } DOEP0LEN_b;
  } ;
  
  union {
    __IOM uint32_t DOEP0DMAADDR;                /*!< (@ 0x00000314) device OUT endpoint 0 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DOEP0DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED26[2];
  
  union {
    __IOM uint32_t DOEP1CTL;                    /*!< (@ 0x00000320) Device OUT endpoint-1 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVENFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] SD1PID/SODDFRM */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP1CTL_b;
  } ;
  __IM  uint32_t  RESERVED27;
  
  union {
    __IOM uint32_t DOEP1INTF;                   /*!< (@ 0x00000328) device out endpoint-1 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
      __IM  uint32_t            : 7;
      __IOM uint32_t NYET       : 1;            /*!< [14..14] NYET handshake is sent */
    } DOEP1INTF_b;
  } ;
  __IM  uint32_t  RESERVED28;
  
  union {
    __IOM uint32_t DOEP1LEN;                    /*!< (@ 0x00000330) device OUT endpoint-1 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t STPCNT_RXDPID : 2;         /*!< [30..29] SETUP packet count/Received data PID */
    } DOEP1LEN_b;
  } ;
  
  union {
    __IOM uint32_t DOEP1DMAADDR;                /*!< (@ 0x00000334) device OUT endpoint 1 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DOEP1DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED29[2];
  
  union {
    __IOM uint32_t DOEP2CTL;                    /*!< (@ 0x00000340) Device OUT endpoint-2 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVENFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] SD1PID/SODDFRM */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP2CTL_b;
  } ;
  __IM  uint32_t  RESERVED30;
  
  union {
    __IOM uint32_t DOEP2INTF;                   /*!< (@ 0x00000348) device out endpoint-2 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
      __IM  uint32_t            : 7;
      __IOM uint32_t NYET       : 1;            /*!< [14..14] NYET handshake is sent */
    } DOEP2INTF_b;
  } ;
  __IM  uint32_t  RESERVED31;
  
  union {
    __IOM uint32_t DOEP2LEN;                    /*!< (@ 0x00000350) device OUT endpoint-2 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t STPCNT_RXDPID : 2;         /*!< [30..29] SETUP packet count/Received data PID */
    } DOEP2LEN_b;
  } ;
  
  union {
    __IOM uint32_t DOEP2DMAADDR;                /*!< (@ 0x00000354) device OUT endpoint 2 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DOEP2DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED32[2];
  
  union {
    __IOM uint32_t DOEP3CTL;                    /*!< (@ 0x00000360) Device OUT endpoint-3 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVENFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] SD1PID/SODDFRM */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP3CTL_b;
  } ;
  __IM  uint32_t  RESERVED33;
  
  union {
    __IOM uint32_t DOEP3INTF;                   /*!< (@ 0x00000368) device out endpoint-3 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
      __IM  uint32_t            : 7;
      __IOM uint32_t NYET       : 1;            /*!< [14..14] NYET handshake is sent */
    } DOEP3INTF_b;
  } ;
  __IM  uint32_t  RESERVED34;
  
  union {
    __IOM uint32_t DOEP3LEN;                    /*!< (@ 0x00000370) device OUT endpoint-3 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t STPCNT_RXDPID : 2;         /*!< [30..29] SETUP packet count/Received data PID */
    } DOEP3LEN_b;
  } ;
  
  union {
    __IOM uint32_t DOEP3DMAADDR;                /*!< (@ 0x00000374) device OUT endpoint 3 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DOEP3DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED35[2];
  
  union {
    __IOM uint32_t DOEP4CTL;                    /*!< (@ 0x00000380) Device OUT endpoint-4 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVENFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] SD1PID/SODDFRM */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP4CTL_b;
  } ;
  __IM  uint32_t  RESERVED36;
  
  union {
    __IOM uint32_t DOEP4INTF;                   /*!< (@ 0x00000388) device out endpoint-4 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
      __IM  uint32_t            : 7;
      __IOM uint32_t NYET       : 1;            /*!< [14..14] NYET handshake is sent */
    } DOEP4INTF_b;
  } ;
  __IM  uint32_t  RESERVED37;
  
  union {
    __IOM uint32_t DOEP4LEN;                    /*!< (@ 0x00000390) device OUT endpoint-4 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t STPCNT_RXDPID : 2;         /*!< [30..29] SETUP packet count/Received data PID */
    } DOEP4LEN_b;
  } ;
  
  union {
    __IOM uint32_t DOEP4DMAADDR;                /*!< (@ 0x00000394) device OUT endpoint 4 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DOEP4DMAADDR_b;
  } ;
  __IM  uint32_t  RESERVED38[2];
  
  union {
    __IOM uint32_t DOEP5CTL;                    /*!< (@ 0x000003A0) Device OUT endpoint-5 control register */
    
    struct {
      __IOM uint32_t MPL        : 11;           /*!< [10..0] maximum packet length */
      __IM  uint32_t            : 4;
      __IOM uint32_t EPACT      : 1;            /*!< [15..15] Endpoint active */
      __IM  uint32_t EOFRM_DPID : 1;            /*!< [16..16] EOFRM/DPID */
      __IM  uint32_t NAKS       : 1;            /*!< [17..17] NAK status */
      __IOM uint32_t EPTYPE     : 2;            /*!< [19..18] Endpoint type */
      __IOM uint32_t SNOOP      : 1;            /*!< [20..20] Snoop mode */
      __IOM uint32_t STALL      : 1;            /*!< [21..21] STALL handshake */
      __IM  uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK */
      __OM  uint32_t SD0PID_SEVENFRM : 1;       /*!< [28..28] SD0PID/SEVENFRM */
      __OM  uint32_t SD1PID_SODDFRM : 1;        /*!< [29..29] SD1PID/SODDFRM */
      __IOM uint32_t EPD        : 1;            /*!< [30..30] Endpoint disable */
      __IOM uint32_t EPEN       : 1;            /*!< [31..31] Endpoint enable */
    } DOEP5CTL_b;
  } ;
  __IM  uint32_t  RESERVED39;
  
  union {
    __IOM uint32_t DOEP5INTF;                   /*!< (@ 0x000003A8) device out endpoint-5 interrupt register */
    
    struct {
      __IOM uint32_t TF         : 1;            /*!< [0..0] Transfer finished */
      __IOM uint32_t EPDIS      : 1;            /*!< [1..1] Endpoint disabled */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPF       : 1;            /*!< [3..3] Setup phase finished */
      __IOM uint32_t EPRXFOVR   : 1;            /*!< [4..4] Endpoint Rx FIFO overrun */
      __IM  uint32_t            : 1;
      __IOM uint32_t BTBSTP     : 1;            /*!< [6..6] Back-to-back SETUP packets */
      __IM  uint32_t            : 7;
      __IOM uint32_t NYET       : 1;            /*!< [14..14] NYET handshake is sent */
    } DOEP5INTF_b;
  } ;
  __IM  uint32_t  RESERVED40;
  
  union {
    __IOM uint32_t DOEP5LEN;                    /*!< (@ 0x000003B0) device OUT endpoint-5 transfer length register */
    
    struct {
      __IOM uint32_t TLEN       : 19;           /*!< [18..0] Transfer length */
      __IOM uint32_t PCNT       : 10;           /*!< [28..19] Packet count */
      __IOM uint32_t STPCNT_RXDPID : 2;         /*!< [30..29] SETUP packet count/Received data PID */
    } DOEP5LEN_b;
  } ;
  
  union {
    __IOM uint32_t DOEP5DMAADDR;                /*!< (@ 0x000003B4) device OUT endpoint 5 DMA address register */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address */
    } DOEP5DMAADDR_b;
  } ;
} HS_DEVICE_Type;                               /*!< Size = 952 (0x3b8) */



/* =========================================================================================================================== */
/* ================                                         HS_PWRCLK                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed power and clock (HS_PWRCLK)
  */

typedef struct {                                /*!< (@ 0x40040E00) HS_PWRCLK Structure */
  
  union {
    __IOM uint32_t PWRCLKCTL;                   /*!< (@ 0x00000000) power and clock gating control register (PWRCLKCTL) */
    
    struct {
      __IOM uint32_t SUCLK      : 1;            /*!< [0..0] Stop the USB clock */
      __IOM uint32_t SHCLK      : 1;            /*!< [1..1] Stop HCLK */
    } PWRCLKCTL_b;
  } ;
} HS_PWRCLK_Type;                               /*!< Size = 4 (0x4) */



/* =========================================================================================================================== */
/* ================                                           WWDGT                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Window watchdog timer (WWDGT)
  */

typedef struct {                                /*!< (@ 0x40002C00) WWDGT Structure */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) Control register */
    
    struct {
      __IOM uint32_t CNT        : 7;            /*!< [6..0] 7-bit counter */
      __IOM uint32_t WDGTEN     : 1;            /*!< [7..7] Activation bit */
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t CFG;                         /*!< (@ 0x00000004) Configuration register */
    
    struct {
      __IOM uint32_t WIN        : 7;            /*!< [6..0] 7-bit window value */
      __IOM uint32_t PSC        : 2;            /*!< [8..7] Prescaler */
      __IOM uint32_t EWIE       : 1;            /*!< [9..9] Early wakeup interrupt */
    } CFG_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000008) Status register */
    
    struct {
      __IOM uint32_t EWIF       : 1;            /*!< [0..0] Early wakeup interrupt flag */
    } STAT_b;
  } ;
} WWDGT_Type;                                   /*!< Size = 12 (0xc) */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define ADC0_BASE                   0x40012000UL
#define ADC1_BASE                   0x40012100UL
#define ADC2_BASE                   0x40012200UL
#define ADC_Common_BASE             0x40012300UL
#define CAN0_BASE                   0x40006400UL
#define CAN1_BASE                   0x40006800UL
#define CRC_BASE                    0x40023000UL
#define CTC_BASE                    0x40006C00UL
#define DAC_BASE                    0x40007400UL
#define DBG_BASE                    0xE0042000UL
#define DCI_BASE                    0x50050000UL
#define DMA0_BASE                   0x40026000UL
#define DMA1_BASE                   0x40026400UL
#define ENET_DMA_BASE               0x40029000UL
#define ENET_MAC_FCTH_BASE          0x40029080UL
#define ENET_MAC_BASE               0x40028000UL
#define ENET_MSC_BASE               0x40028100UL
#define ENET_PTP_BASE               0x40028700UL
#define EXMC_BASE                   0xA0000000UL
#define EXTI_BASE                   0x40013C00UL
#define FMC_BASE                    0x40023C00UL
#define FWDGT_BASE                  0x40003000UL
#define GPIOA_BASE                  0x40020000UL
#define GPIOB_BASE                  0x40020400UL
#define GPIOC_BASE                  0x40020800UL
#define GPIOD_BASE                  0x40020C00UL
#define GPIOE_BASE                  0x40021000UL
#define GPIOF_BASE                  0x40021400UL
#define GPIOG_BASE                  0x40021800UL
#define GPIOH_BASE                  0x40021C00UL
#define GPIOI_BASE                  0x40022000UL
#define I2C0_BASE                   0x40005400UL
#define I2C1_BASE                   0x40005800UL
#define I2C2_BASE                   0x40005C00UL
#define IPA_BASE                    0x4002B000UL
#define IREF_BASE                   0x4000C400UL
#define PMU_BASE                    0x40007000UL
#define RCU_BASE                    0x40023800UL
#define RTC_BASE                    0x40002800UL
#define SDIO_BASE                   0x40012C00UL
#define SPI0_BASE                   0x40013000UL
#define SPI1_BASE                   0x40003800UL
#define SPI2_BASE                   0x40003C00UL
#define SPI3_BASE                   0x40013400UL
#define SPI4_BASE                   0x40015000UL
#define SPI5_BASE                   0x40015400UL
#define I2S1_add_BASE               0x40003400UL
#define I2S2_add_BASE               0x40004000UL
#define SYSCFG_BASE                 0x40013800UL
#define TIMER0_BASE                 0x40010000UL
#define TIMER1_BASE                 0x40000000UL
#define TIMER2_BASE                 0x40000400UL
#define TIMER3_BASE                 0x40000800UL
#define TIMER4_BASE                 0x40000C00UL
#define TIMER5_BASE                 0x40001000UL
#define TIMER6_BASE                 0x40001400UL
#define TIMER7_BASE                 0x40010400UL
#define TIMER8_BASE                 0x40014000UL
#define TIMER9_BASE                 0x40014400UL
#define TIMER10_BASE                0x40014800UL
#define TIMER11_BASE                0x40001800UL
#define TIMER12_BASE                0x40001C00UL
#define TIMER13_BASE                0x40002000UL
#define TLI_BASE                    0x40016800UL
#define TRNG_BASE                   0x50060800UL
#define USART0_BASE                 0x40011000UL
#define USART1_BASE                 0x40004400UL
#define USART2_BASE                 0x40004800UL
#define USART5_BASE                 0x40011400UL
#define UART3_BASE                  0x40004C00UL
#define UART4_BASE                  0x40005000UL
#define UART6_BASE                  0x40007800UL
#define UART7_BASE                  0x40007C00UL
#define FS_GLOBAL_BASE              0x50000000UL
#define FS_HOST_BASE                0x50000400UL
#define FS_DEVICE_BASE              0x50000800UL
#define FS_PWRCLK_BASE              0x50000E00UL
#define HS_GLOBAL_BASE              0x40040000UL
#define HS_HOST_BASE                0x40040400UL
#define HS_DEVICE_BASE              0x40040800UL
#define HS_PWRCLK_BASE              0x40040E00UL
#define WWDGT_BASE                  0x40002C00UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define ADC0                        ((ADC0_Type*)              ADC0_BASE)
#define ADC1                        ((ADC1_Type*)              ADC1_BASE)
#define ADC2                        ((ADC2_Type*)              ADC2_BASE)
#define ADC_Common                  ((ADC_Common_Type*)        ADC_Common_BASE)
#define CAN0                        ((CAN0_Type*)              CAN0_BASE)
#define CAN1                        ((CAN1_Type*)              CAN1_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define CTC                         ((CTC_Type*)               CTC_BASE)
#define DAC                         ((DAC_Type*)               DAC_BASE)
#define DBG                         ((DBG_Type*)               DBG_BASE)
#define DCI                         ((DCI_Type*)               DCI_BASE)
#define DMA0                        ((DMA0_Type*)              DMA0_BASE)
#define DMA1                        ((DMA1_Type*)              DMA1_BASE)
#define ENET_DMA                    ((ENET_DMA_Type*)          ENET_DMA_BASE)
#define ENET_MAC_FCTH               ((ENET_MAC_FCTH_Type*)     ENET_MAC_FCTH_BASE)
#define ENET_MAC                    ((ENET_MAC_Type*)          ENET_MAC_BASE)
#define ENET_MSC                    ((ENET_MSC_Type*)          ENET_MSC_BASE)
#define ENET_PTP                    ((ENET_PTP_Type*)          ENET_PTP_BASE)
#define EXMC                        ((EXMC_Type*)              EXMC_BASE)
#define EXTI                        ((EXTI_Type*)              EXTI_BASE)
#define FMC                         ((FMC_Type*)               FMC_BASE)
#define FWDGT                       ((FWDGT_Type*)             FWDGT_BASE)
#define GPIOA                       ((GPIOA_Type*)             GPIOA_BASE)
#define GPIOB                       ((GPIOB_Type*)             GPIOB_BASE)
#define GPIOC                       ((GPIOC_Type*)             GPIOC_BASE)
#define GPIOD                       ((GPIOD_Type*)             GPIOD_BASE)
#define GPIOE                       ((GPIOE_Type*)             GPIOE_BASE)
#define GPIOF                       ((GPIOF_Type*)             GPIOF_BASE)
#define GPIOG                       ((GPIOG_Type*)             GPIOG_BASE)
#define GPIOH                       ((GPIOH_Type*)             GPIOH_BASE)
#define GPIOI                       ((GPIOI_Type*)             GPIOI_BASE)
#define I2C0                        ((I2C0_Type*)              I2C0_BASE)
#define I2C1                        ((I2C1_Type*)              I2C1_BASE)
#define I2C2                        ((I2C2_Type*)              I2C2_BASE)
#define IPA                         ((IPA_Type*)               IPA_BASE)
#define IREF                        ((IREF_Type*)              IREF_BASE)
#define PMU                         ((PMU_Type*)               PMU_BASE)
#define RCU                         ((RCU_Type*)               RCU_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define SDIO                        ((SDIO_Type*)              SDIO_BASE)
#define SPI0                        ((SPI0_Type*)              SPI0_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define SPI2                        ((SPI2_Type*)              SPI2_BASE)
#define SPI3                        ((SPI3_Type*)              SPI3_BASE)
#define SPI4                        ((SPI4_Type*)              SPI4_BASE)
#define SPI5                        ((SPI5_Type*)              SPI5_BASE)
#define I2S1_add                    ((I2S1_add_Type*)          I2S1_add_BASE)
#define I2S2_add                    ((I2S2_add_Type*)          I2S2_add_BASE)
#define SYSCFG                      ((SYSCFG_Type*)            SYSCFG_BASE)
#define TIMER0                      ((TIMER0_Type*)            TIMER0_BASE)
#define TIMER1                      ((TIMER1_Type*)            TIMER1_BASE)
#define TIMER2                      ((TIMER2_Type*)            TIMER2_BASE)
#define TIMER3                      ((TIMER3_Type*)            TIMER3_BASE)
#define TIMER4                      ((TIMER4_Type*)            TIMER4_BASE)
#define TIMER5                      ((TIMER5_Type*)            TIMER5_BASE)
#define TIMER6                      ((TIMER6_Type*)            TIMER6_BASE)
#define TIMER7                      ((TIMER7_Type*)            TIMER7_BASE)
#define TIMER8                      ((TIMER8_Type*)            TIMER8_BASE)
#define TIMER9                      ((TIMER9_Type*)            TIMER9_BASE)
#define TIMER10                     ((TIMER10_Type*)           TIMER10_BASE)
#define TIMER11                     ((TIMER11_Type*)           TIMER11_BASE)
#define TIMER12                     ((TIMER12_Type*)           TIMER12_BASE)
#define TIMER13                     ((TIMER13_Type*)           TIMER13_BASE)
#define TLI                         ((TLI_Type*)               TLI_BASE)
#define TRNG                        ((TRNG_Type*)              TRNG_BASE)
#define USART0                      ((USART0_Type*)            USART0_BASE)
#define USART1                      ((USART1_Type*)            USART1_BASE)
#define USART2                      ((USART2_Type*)            USART2_BASE)
#define USART5                      ((USART5_Type*)            USART5_BASE)
#define UART3                       ((UART3_Type*)             UART3_BASE)
#define UART4                       ((UART4_Type*)             UART4_BASE)
#define UART6                       ((UART6_Type*)             UART6_BASE)
#define UART7                       ((UART7_Type*)             UART7_BASE)
#define FS_GLOBAL                   ((FS_GLOBAL_Type*)         FS_GLOBAL_BASE)
#define FS_HOST                     ((FS_HOST_Type*)           FS_HOST_BASE)
#define FS_DEVICE                   ((FS_DEVICE_Type*)         FS_DEVICE_BASE)
#define FS_PWRCLK                   ((FS_PWRCLK_Type*)         FS_PWRCLK_BASE)
#define HS_GLOBAL                   ((HS_GLOBAL_Type*)         HS_GLOBAL_BASE)
#define HS_HOST                     ((HS_HOST_Type*)           HS_HOST_BASE)
#define HS_DEVICE                   ((HS_DEVICE_Type*)         HS_DEVICE_BASE)
#define HS_PWRCLK                   ((HS_PWRCLK_Type*)         HS_PWRCLK_BASE)
#define WWDGT                       ((WWDGT_Type*)             WWDGT_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           ADC0                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT  ========================================================== */
#define ADC0_STAT_ROVF_Pos                (5UL)                     /*!< ROVF (Bit 5) */
#define ADC0_STAT_ROVF_Msk                (0x20UL)                  /*!< ROVF (Bitfield-Mask: 0x01) */
#define ADC0_STAT_STRC_Pos                (4UL)                     /*!< STRC (Bit 4) */
#define ADC0_STAT_STRC_Msk                (0x10UL)                  /*!< STRC (Bitfield-Mask: 0x01) */
#define ADC0_STAT_STIC_Pos                (3UL)                     /*!< STIC (Bit 3) */
#define ADC0_STAT_STIC_Msk                (0x8UL)                   /*!< STIC (Bitfield-Mask: 0x01) */
#define ADC0_STAT_EOIC_Pos                (2UL)                     /*!< EOIC (Bit 2) */
#define ADC0_STAT_EOIC_Msk                (0x4UL)                   /*!< EOIC (Bitfield-Mask: 0x01) */
#define ADC0_STAT_EOC_Pos                 (1UL)                     /*!< EOC (Bit 1) */
#define ADC0_STAT_EOC_Msk                 (0x2UL)                   /*!< EOC (Bitfield-Mask: 0x01) */
#define ADC0_STAT_WDE_Pos                 (0UL)                     /*!< WDE (Bit 0) */
#define ADC0_STAT_WDE_Msk                 (0x1UL)                   /*!< WDE (Bitfield-Mask: 0x01) */
/* =========================================================  CTL0  ========================================================== */
#define ADC0_CTL0_ROVFIE_Pos              (26UL)                    /*!< ROVFIE (Bit 26) */
#define ADC0_CTL0_ROVFIE_Msk              (0x4000000UL)             /*!< ROVFIE (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_DRES_Pos                (24UL)                    /*!< DRES (Bit 24) */
#define ADC0_CTL0_DRES_Msk                (0x3000000UL)             /*!< DRES (Bitfield-Mask: 0x03) */
#define ADC0_CTL0_RWDEN_Pos               (23UL)                    /*!< RWDEN (Bit 23) */
#define ADC0_CTL0_RWDEN_Msk               (0x800000UL)              /*!< RWDEN (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_IWDEN_Pos               (22UL)                    /*!< IWDEN (Bit 22) */
#define ADC0_CTL0_IWDEN_Msk               (0x400000UL)              /*!< IWDEN (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_DISNUM_Pos              (13UL)                    /*!< DISNUM (Bit 13) */
#define ADC0_CTL0_DISNUM_Msk              (0xe000UL)                /*!< DISNUM (Bitfield-Mask: 0x07) */
#define ADC0_CTL0_DISIC_Pos               (12UL)                    /*!< DISIC (Bit 12) */
#define ADC0_CTL0_DISIC_Msk               (0x1000UL)                /*!< DISIC (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_DISRC_Pos               (11UL)                    /*!< DISRC (Bit 11) */
#define ADC0_CTL0_DISRC_Msk               (0x800UL)                 /*!< DISRC (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_ICA_Pos                 (10UL)                    /*!< ICA (Bit 10) */
#define ADC0_CTL0_ICA_Msk                 (0x400UL)                 /*!< ICA (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_WDSC_Pos                (9UL)                     /*!< WDSC (Bit 9) */
#define ADC0_CTL0_WDSC_Msk                (0x200UL)                 /*!< WDSC (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_SM_Pos                  (8UL)                     /*!< SM (Bit 8) */
#define ADC0_CTL0_SM_Msk                  (0x100UL)                 /*!< SM (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_EOICIE_Pos              (7UL)                     /*!< EOICIE (Bit 7) */
#define ADC0_CTL0_EOICIE_Msk              (0x80UL)                  /*!< EOICIE (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_WDEIE_Pos               (6UL)                     /*!< WDEIE (Bit 6) */
#define ADC0_CTL0_WDEIE_Msk               (0x40UL)                  /*!< WDEIE (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_EOCIE_Pos               (5UL)                     /*!< EOCIE (Bit 5) */
#define ADC0_CTL0_EOCIE_Msk               (0x20UL)                  /*!< EOCIE (Bitfield-Mask: 0x01) */
#define ADC0_CTL0_WDCHSEL_Pos             (0UL)                     /*!< WDCHSEL (Bit 0) */
#define ADC0_CTL0_WDCHSEL_Msk             (0x1fUL)                  /*!< WDCHSEL (Bitfield-Mask: 0x1f) */
/* =========================================================  CTL1  ========================================================== */
#define ADC0_CTL1_SWRCST_Pos              (30UL)                    /*!< SWRCST (Bit 30) */
#define ADC0_CTL1_SWRCST_Msk              (0x40000000UL)            /*!< SWRCST (Bitfield-Mask: 0x01) */
#define ADC0_CTL1_ETMRC_Pos               (28UL)                    /*!< ETMRC (Bit 28) */
#define ADC0_CTL1_ETMRC_Msk               (0x30000000UL)            /*!< ETMRC (Bitfield-Mask: 0x03) */
#define ADC0_CTL1_ETSRC_Pos               (24UL)                    /*!< ETSRC (Bit 24) */
#define ADC0_CTL1_ETSRC_Msk               (0xf000000UL)             /*!< ETSRC (Bitfield-Mask: 0x0f) */
#define ADC0_CTL1_SWICST_Pos              (22UL)                    /*!< SWICST (Bit 22) */
#define ADC0_CTL1_SWICST_Msk              (0x400000UL)              /*!< SWICST (Bitfield-Mask: 0x01) */
#define ADC0_CTL1_ETMIC_Pos               (20UL)                    /*!< ETMIC (Bit 20) */
#define ADC0_CTL1_ETMIC_Msk               (0x300000UL)              /*!< ETMIC (Bitfield-Mask: 0x03) */
#define ADC0_CTL1_ETSIC_Pos               (16UL)                    /*!< ETSIC (Bit 16) */
#define ADC0_CTL1_ETSIC_Msk               (0xf0000UL)               /*!< ETSIC (Bitfield-Mask: 0x0f) */
#define ADC0_CTL1_DAL_Pos                 (11UL)                    /*!< DAL (Bit 11) */
#define ADC0_CTL1_DAL_Msk                 (0x800UL)                 /*!< DAL (Bitfield-Mask: 0x01) */
#define ADC0_CTL1_EOCM_Pos                (10UL)                    /*!< EOCM (Bit 10) */
#define ADC0_CTL1_EOCM_Msk                (0x400UL)                 /*!< EOCM (Bitfield-Mask: 0x01) */
#define ADC0_CTL1_DDM_Pos                 (9UL)                     /*!< DDM (Bit 9) */
#define ADC0_CTL1_DDM_Msk                 (0x200UL)                 /*!< DDM (Bitfield-Mask: 0x01) */
#define ADC0_CTL1_DMA_Pos                 (8UL)                     /*!< DMA (Bit 8) */
#define ADC0_CTL1_DMA_Msk                 (0x100UL)                 /*!< DMA (Bitfield-Mask: 0x01) */
#define ADC0_CTL1_RSTCLB_Pos              (3UL)                     /*!< RSTCLB (Bit 3) */
#define ADC0_CTL1_RSTCLB_Msk              (0x8UL)                   /*!< RSTCLB (Bitfield-Mask: 0x01) */
#define ADC0_CTL1_CLB_Pos                 (2UL)                     /*!< CLB (Bit 2) */
#define ADC0_CTL1_CLB_Msk                 (0x4UL)                   /*!< CLB (Bitfield-Mask: 0x01) */
#define ADC0_CTL1_CTN_Pos                 (1UL)                     /*!< CTN (Bit 1) */
#define ADC0_CTL1_CTN_Msk                 (0x2UL)                   /*!< CTN (Bitfield-Mask: 0x01) */
#define ADC0_CTL1_ADCON_Pos               (0UL)                     /*!< ADCON (Bit 0) */
#define ADC0_CTL1_ADCON_Msk               (0x1UL)                   /*!< ADCON (Bitfield-Mask: 0x01) */
/* ========================================================  SAMPT0  ========================================================= */
#define ADC0_SAMPT0_SPT10_Pos             (0UL)                     /*!< SPT10 (Bit 0) */
#define ADC0_SAMPT0_SPT10_Msk             (0x7UL)                   /*!< SPT10 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT0_SPT11_Pos             (3UL)                     /*!< SPT11 (Bit 3) */
#define ADC0_SAMPT0_SPT11_Msk             (0x38UL)                  /*!< SPT11 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT0_SPT12_Pos             (6UL)                     /*!< SPT12 (Bit 6) */
#define ADC0_SAMPT0_SPT12_Msk             (0x1c0UL)                 /*!< SPT12 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT0_SPT13_Pos             (9UL)                     /*!< SPT13 (Bit 9) */
#define ADC0_SAMPT0_SPT13_Msk             (0xe00UL)                 /*!< SPT13 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT0_SPT14_Pos             (12UL)                    /*!< SPT14 (Bit 12) */
#define ADC0_SAMPT0_SPT14_Msk             (0x7000UL)                /*!< SPT14 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT0_SPT15_Pos             (15UL)                    /*!< SPT15 (Bit 15) */
#define ADC0_SAMPT0_SPT15_Msk             (0x38000UL)               /*!< SPT15 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT0_SPT16_Pos             (18UL)                    /*!< SPT16 (Bit 18) */
#define ADC0_SAMPT0_SPT16_Msk             (0x1c0000UL)              /*!< SPT16 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT0_SPT17_Pos             (21UL)                    /*!< SPT17 (Bit 21) */
#define ADC0_SAMPT0_SPT17_Msk             (0xe00000UL)              /*!< SPT17 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT0_SPT18_Pos             (24UL)                    /*!< SPT18 (Bit 24) */
#define ADC0_SAMPT0_SPT18_Msk             (0x7000000UL)             /*!< SPT18 (Bitfield-Mask: 0x07) */
/* ========================================================  SAMPT1  ========================================================= */
#define ADC0_SAMPT1_SPT0_Pos              (0UL)                     /*!< SPT0 (Bit 0) */
#define ADC0_SAMPT1_SPT0_Msk              (0x7UL)                   /*!< SPT0 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT1_SPT1_Pos              (3UL)                     /*!< SPT1 (Bit 3) */
#define ADC0_SAMPT1_SPT1_Msk              (0x38UL)                  /*!< SPT1 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT1_SPT2_Pos              (6UL)                     /*!< SPT2 (Bit 6) */
#define ADC0_SAMPT1_SPT2_Msk              (0x1c0UL)                 /*!< SPT2 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT1_SPT3_Pos              (9UL)                     /*!< SPT3 (Bit 9) */
#define ADC0_SAMPT1_SPT3_Msk              (0xe00UL)                 /*!< SPT3 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT1_SPT4_Pos              (12UL)                    /*!< SPT4 (Bit 12) */
#define ADC0_SAMPT1_SPT4_Msk              (0x7000UL)                /*!< SPT4 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT1_SPT5_Pos              (15UL)                    /*!< SPT5 (Bit 15) */
#define ADC0_SAMPT1_SPT5_Msk              (0x38000UL)               /*!< SPT5 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT1_SPT6_Pos              (18UL)                    /*!< SPT6 (Bit 18) */
#define ADC0_SAMPT1_SPT6_Msk              (0x1c0000UL)              /*!< SPT6 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT1_SPT7_Pos              (21UL)                    /*!< SPT7 (Bit 21) */
#define ADC0_SAMPT1_SPT7_Msk              (0xe00000UL)              /*!< SPT7 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT1_SPT8_Pos              (24UL)                    /*!< SPT8 (Bit 24) */
#define ADC0_SAMPT1_SPT8_Msk              (0x7000000UL)             /*!< SPT8 (Bitfield-Mask: 0x07) */
#define ADC0_SAMPT1_SPT9_Pos              (27UL)                    /*!< SPT9 (Bit 27) */
#define ADC0_SAMPT1_SPT9_Msk              (0x38000000UL)            /*!< SPT9 (Bitfield-Mask: 0x07) */
/* =========================================================  IOFF0  ========================================================= */
#define ADC0_IOFF0_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC0_IOFF0_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  IOFF1  ========================================================= */
#define ADC0_IOFF1_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC0_IOFF1_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  IOFF2  ========================================================= */
#define ADC0_IOFF2_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC0_IOFF2_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  IOFF3  ========================================================= */
#define ADC0_IOFF3_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC0_IOFF3_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  WDHT  ========================================================== */
#define ADC0_WDHT_WDHT_Pos                (0UL)                     /*!< WDHT (Bit 0) */
#define ADC0_WDHT_WDHT_Msk                (0xfffUL)                 /*!< WDHT (Bitfield-Mask: 0xfff) */
/* =========================================================  WDLT  ========================================================== */
#define ADC0_WDLT_WDLT_Pos                (0UL)                     /*!< WDLT (Bit 0) */
#define ADC0_WDLT_WDLT_Msk                (0xfffUL)                 /*!< WDLT (Bitfield-Mask: 0xfff) */
/* =========================================================  RSQ0  ========================================================== */
#define ADC0_RSQ0_RL_Pos                  (20UL)                    /*!< RL (Bit 20) */
#define ADC0_RSQ0_RL_Msk                  (0xf00000UL)              /*!< RL (Bitfield-Mask: 0x0f) */
#define ADC0_RSQ0_RSQ15_Pos               (15UL)                    /*!< RSQ15 (Bit 15) */
#define ADC0_RSQ0_RSQ15_Msk               (0xf8000UL)               /*!< RSQ15 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ0_RSQ14_Pos               (10UL)                    /*!< RSQ14 (Bit 10) */
#define ADC0_RSQ0_RSQ14_Msk               (0x7c00UL)                /*!< RSQ14 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ0_RSQ13_Pos               (5UL)                     /*!< RSQ13 (Bit 5) */
#define ADC0_RSQ0_RSQ13_Msk               (0x3e0UL)                 /*!< RSQ13 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ0_RSQ12_Pos               (0UL)                     /*!< RSQ12 (Bit 0) */
#define ADC0_RSQ0_RSQ12_Msk               (0x1fUL)                  /*!< RSQ12 (Bitfield-Mask: 0x1f) */
/* =========================================================  RSQ1  ========================================================== */
#define ADC0_RSQ1_RSQ11_Pos               (25UL)                    /*!< RSQ11 (Bit 25) */
#define ADC0_RSQ1_RSQ11_Msk               (0x3e000000UL)            /*!< RSQ11 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ1_RSQ10_Pos               (20UL)                    /*!< RSQ10 (Bit 20) */
#define ADC0_RSQ1_RSQ10_Msk               (0x1f00000UL)             /*!< RSQ10 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ1_RSQ9_Pos                (15UL)                    /*!< RSQ9 (Bit 15) */
#define ADC0_RSQ1_RSQ9_Msk                (0xf8000UL)               /*!< RSQ9 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ1_RSQ8_Pos                (10UL)                    /*!< RSQ8 (Bit 10) */
#define ADC0_RSQ1_RSQ8_Msk                (0x7c00UL)                /*!< RSQ8 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ1_RSQ7_Pos                (5UL)                     /*!< RSQ7 (Bit 5) */
#define ADC0_RSQ1_RSQ7_Msk                (0x3e0UL)                 /*!< RSQ7 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ1_RSQ6_Pos                (0UL)                     /*!< RSQ6 (Bit 0) */
#define ADC0_RSQ1_RSQ6_Msk                (0x1fUL)                  /*!< RSQ6 (Bitfield-Mask: 0x1f) */
/* =========================================================  RSQ2  ========================================================== */
#define ADC0_RSQ2_RSQ5_Pos                (25UL)                    /*!< RSQ5 (Bit 25) */
#define ADC0_RSQ2_RSQ5_Msk                (0x3e000000UL)            /*!< RSQ5 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ2_RSQ4_Pos                (20UL)                    /*!< RSQ4 (Bit 20) */
#define ADC0_RSQ2_RSQ4_Msk                (0x1f00000UL)             /*!< RSQ4 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ2_RSQ3_Pos                (15UL)                    /*!< RSQ3 (Bit 15) */
#define ADC0_RSQ2_RSQ3_Msk                (0xf8000UL)               /*!< RSQ3 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ2_RSQ2_Pos                (10UL)                    /*!< RSQ2 (Bit 10) */
#define ADC0_RSQ2_RSQ2_Msk                (0x7c00UL)                /*!< RSQ2 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ2_RSQ1_Pos                (5UL)                     /*!< RSQ1 (Bit 5) */
#define ADC0_RSQ2_RSQ1_Msk                (0x3e0UL)                 /*!< RSQ1 (Bitfield-Mask: 0x1f) */
#define ADC0_RSQ2_RSQ0_Pos                (0UL)                     /*!< RSQ0 (Bit 0) */
#define ADC0_RSQ2_RSQ0_Msk                (0x1fUL)                  /*!< RSQ0 (Bitfield-Mask: 0x1f) */
/* ==========================================================  ISQ  ========================================================== */
#define ADC0_ISQ_IL_Pos                   (20UL)                    /*!< IL (Bit 20) */
#define ADC0_ISQ_IL_Msk                   (0x300000UL)              /*!< IL (Bitfield-Mask: 0x03) */
#define ADC0_ISQ_ISQ3_Pos                 (15UL)                    /*!< ISQ3 (Bit 15) */
#define ADC0_ISQ_ISQ3_Msk                 (0xf8000UL)               /*!< ISQ3 (Bitfield-Mask: 0x1f) */
#define ADC0_ISQ_ISQ2_Pos                 (10UL)                    /*!< ISQ2 (Bit 10) */
#define ADC0_ISQ_ISQ2_Msk                 (0x7c00UL)                /*!< ISQ2 (Bitfield-Mask: 0x1f) */
#define ADC0_ISQ_ISQ1_Pos                 (5UL)                     /*!< ISQ1 (Bit 5) */
#define ADC0_ISQ_ISQ1_Msk                 (0x3e0UL)                 /*!< ISQ1 (Bitfield-Mask: 0x1f) */
#define ADC0_ISQ_ISQ0_Pos                 (0UL)                     /*!< ISQ0 (Bit 0) */
#define ADC0_ISQ_ISQ0_Msk                 (0x1fUL)                  /*!< ISQ0 (Bitfield-Mask: 0x1f) */
/* ========================================================  IDATA0  ========================================================= */
#define ADC0_IDATA0_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC0_IDATA0_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* ========================================================  IDATA1  ========================================================= */
#define ADC0_IDATA1_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC0_IDATA1_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* ========================================================  IDATA2  ========================================================= */
#define ADC0_IDATA2_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC0_IDATA2_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* ========================================================  IDATA3  ========================================================= */
#define ADC0_IDATA3_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC0_IDATA3_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* =========================================================  RDATA  ========================================================= */
#define ADC0_RDATA_RDATA_Pos              (0UL)                     /*!< RDATA (Bit 0) */
#define ADC0_RDATA_RDATA_Msk              (0xffffUL)                /*!< RDATA (Bitfield-Mask: 0xffff) */
/* =======================================================  OVSAMPCTL  ======================================================= */
#define ADC0_OVSAMPCTL_TOVS_Pos           (9UL)                     /*!< TOVS (Bit 9) */
#define ADC0_OVSAMPCTL_TOVS_Msk           (0x200UL)                 /*!< TOVS (Bitfield-Mask: 0x01) */
#define ADC0_OVSAMPCTL_OVSS_Pos           (5UL)                     /*!< OVSS (Bit 5) */
#define ADC0_OVSAMPCTL_OVSS_Msk           (0x1e0UL)                 /*!< OVSS (Bitfield-Mask: 0x0f) */
#define ADC0_OVSAMPCTL_OVSR_Pos           (2UL)                     /*!< OVSR (Bit 2) */
#define ADC0_OVSAMPCTL_OVSR_Msk           (0x1cUL)                  /*!< OVSR (Bitfield-Mask: 0x07) */
#define ADC0_OVSAMPCTL_OVSEN_Pos          (0UL)                     /*!< OVSEN (Bit 0) */
#define ADC0_OVSAMPCTL_OVSEN_Msk          (0x1UL)                   /*!< OVSEN (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           ADC1                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT  ========================================================== */
#define ADC1_STAT_ROVF_Pos                (5UL)                     /*!< ROVF (Bit 5) */
#define ADC1_STAT_ROVF_Msk                (0x20UL)                  /*!< ROVF (Bitfield-Mask: 0x01) */
#define ADC1_STAT_STRC_Pos                (4UL)                     /*!< STRC (Bit 4) */
#define ADC1_STAT_STRC_Msk                (0x10UL)                  /*!< STRC (Bitfield-Mask: 0x01) */
#define ADC1_STAT_STIC_Pos                (3UL)                     /*!< STIC (Bit 3) */
#define ADC1_STAT_STIC_Msk                (0x8UL)                   /*!< STIC (Bitfield-Mask: 0x01) */
#define ADC1_STAT_EOIC_Pos                (2UL)                     /*!< EOIC (Bit 2) */
#define ADC1_STAT_EOIC_Msk                (0x4UL)                   /*!< EOIC (Bitfield-Mask: 0x01) */
#define ADC1_STAT_EOC_Pos                 (1UL)                     /*!< EOC (Bit 1) */
#define ADC1_STAT_EOC_Msk                 (0x2UL)                   /*!< EOC (Bitfield-Mask: 0x01) */
#define ADC1_STAT_WDE_Pos                 (0UL)                     /*!< WDE (Bit 0) */
#define ADC1_STAT_WDE_Msk                 (0x1UL)                   /*!< WDE (Bitfield-Mask: 0x01) */
/* =========================================================  CTL0  ========================================================== */
#define ADC1_CTL0_ROVFIE_Pos              (26UL)                    /*!< ROVFIE (Bit 26) */
#define ADC1_CTL0_ROVFIE_Msk              (0x4000000UL)             /*!< ROVFIE (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_DRES_Pos                (24UL)                    /*!< DRES (Bit 24) */
#define ADC1_CTL0_DRES_Msk                (0x3000000UL)             /*!< DRES (Bitfield-Mask: 0x03) */
#define ADC1_CTL0_RWDEN_Pos               (23UL)                    /*!< RWDEN (Bit 23) */
#define ADC1_CTL0_RWDEN_Msk               (0x800000UL)              /*!< RWDEN (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_IWDEN_Pos               (22UL)                    /*!< IWDEN (Bit 22) */
#define ADC1_CTL0_IWDEN_Msk               (0x400000UL)              /*!< IWDEN (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_DISNUM_Pos              (13UL)                    /*!< DISNUM (Bit 13) */
#define ADC1_CTL0_DISNUM_Msk              (0xe000UL)                /*!< DISNUM (Bitfield-Mask: 0x07) */
#define ADC1_CTL0_DISIC_Pos               (12UL)                    /*!< DISIC (Bit 12) */
#define ADC1_CTL0_DISIC_Msk               (0x1000UL)                /*!< DISIC (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_DISRC_Pos               (11UL)                    /*!< DISRC (Bit 11) */
#define ADC1_CTL0_DISRC_Msk               (0x800UL)                 /*!< DISRC (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_ICA_Pos                 (10UL)                    /*!< ICA (Bit 10) */
#define ADC1_CTL0_ICA_Msk                 (0x400UL)                 /*!< ICA (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_WDSC_Pos                (9UL)                     /*!< WDSC (Bit 9) */
#define ADC1_CTL0_WDSC_Msk                (0x200UL)                 /*!< WDSC (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_SM_Pos                  (8UL)                     /*!< SM (Bit 8) */
#define ADC1_CTL0_SM_Msk                  (0x100UL)                 /*!< SM (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_EOICIE_Pos              (7UL)                     /*!< EOICIE (Bit 7) */
#define ADC1_CTL0_EOICIE_Msk              (0x80UL)                  /*!< EOICIE (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_WDEIE_Pos               (6UL)                     /*!< WDEIE (Bit 6) */
#define ADC1_CTL0_WDEIE_Msk               (0x40UL)                  /*!< WDEIE (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_EOCIE_Pos               (5UL)                     /*!< EOCIE (Bit 5) */
#define ADC1_CTL0_EOCIE_Msk               (0x20UL)                  /*!< EOCIE (Bitfield-Mask: 0x01) */
#define ADC1_CTL0_WDCHSEL_Pos             (0UL)                     /*!< WDCHSEL (Bit 0) */
#define ADC1_CTL0_WDCHSEL_Msk             (0x1fUL)                  /*!< WDCHSEL (Bitfield-Mask: 0x1f) */
/* =========================================================  CTL1  ========================================================== */
#define ADC1_CTL1_SWRCST_Pos              (30UL)                    /*!< SWRCST (Bit 30) */
#define ADC1_CTL1_SWRCST_Msk              (0x40000000UL)            /*!< SWRCST (Bitfield-Mask: 0x01) */
#define ADC1_CTL1_ETMRC_Pos               (28UL)                    /*!< ETMRC (Bit 28) */
#define ADC1_CTL1_ETMRC_Msk               (0x30000000UL)            /*!< ETMRC (Bitfield-Mask: 0x03) */
#define ADC1_CTL1_ETSRC_Pos               (24UL)                    /*!< ETSRC (Bit 24) */
#define ADC1_CTL1_ETSRC_Msk               (0xf000000UL)             /*!< ETSRC (Bitfield-Mask: 0x0f) */
#define ADC1_CTL1_SWICST_Pos              (22UL)                    /*!< SWICST (Bit 22) */
#define ADC1_CTL1_SWICST_Msk              (0x400000UL)              /*!< SWICST (Bitfield-Mask: 0x01) */
#define ADC1_CTL1_ETMIC_Pos               (20UL)                    /*!< ETMIC (Bit 20) */
#define ADC1_CTL1_ETMIC_Msk               (0x300000UL)              /*!< ETMIC (Bitfield-Mask: 0x03) */
#define ADC1_CTL1_ETSIC_Pos               (16UL)                    /*!< ETSIC (Bit 16) */
#define ADC1_CTL1_ETSIC_Msk               (0xf0000UL)               /*!< ETSIC (Bitfield-Mask: 0x0f) */
#define ADC1_CTL1_DAL_Pos                 (11UL)                    /*!< DAL (Bit 11) */
#define ADC1_CTL1_DAL_Msk                 (0x800UL)                 /*!< DAL (Bitfield-Mask: 0x01) */
#define ADC1_CTL1_EOCM_Pos                (10UL)                    /*!< EOCM (Bit 10) */
#define ADC1_CTL1_EOCM_Msk                (0x400UL)                 /*!< EOCM (Bitfield-Mask: 0x01) */
#define ADC1_CTL1_DDM_Pos                 (9UL)                     /*!< DDM (Bit 9) */
#define ADC1_CTL1_DDM_Msk                 (0x200UL)                 /*!< DDM (Bitfield-Mask: 0x01) */
#define ADC1_CTL1_DMA_Pos                 (8UL)                     /*!< DMA (Bit 8) */
#define ADC1_CTL1_DMA_Msk                 (0x100UL)                 /*!< DMA (Bitfield-Mask: 0x01) */
#define ADC1_CTL1_RSTCLB_Pos              (3UL)                     /*!< RSTCLB (Bit 3) */
#define ADC1_CTL1_RSTCLB_Msk              (0x8UL)                   /*!< RSTCLB (Bitfield-Mask: 0x01) */
#define ADC1_CTL1_CLB_Pos                 (2UL)                     /*!< CLB (Bit 2) */
#define ADC1_CTL1_CLB_Msk                 (0x4UL)                   /*!< CLB (Bitfield-Mask: 0x01) */
#define ADC1_CTL1_CTN_Pos                 (1UL)                     /*!< CTN (Bit 1) */
#define ADC1_CTL1_CTN_Msk                 (0x2UL)                   /*!< CTN (Bitfield-Mask: 0x01) */
#define ADC1_CTL1_ADCON_Pos               (0UL)                     /*!< ADCON (Bit 0) */
#define ADC1_CTL1_ADCON_Msk               (0x1UL)                   /*!< ADCON (Bitfield-Mask: 0x01) */
/* ========================================================  SAMPT0  ========================================================= */
#define ADC1_SAMPT0_SPT10_Pos             (0UL)                     /*!< SPT10 (Bit 0) */
#define ADC1_SAMPT0_SPT10_Msk             (0x7UL)                   /*!< SPT10 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT0_SPT11_Pos             (3UL)                     /*!< SPT11 (Bit 3) */
#define ADC1_SAMPT0_SPT11_Msk             (0x38UL)                  /*!< SPT11 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT0_SPT12_Pos             (6UL)                     /*!< SPT12 (Bit 6) */
#define ADC1_SAMPT0_SPT12_Msk             (0x1c0UL)                 /*!< SPT12 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT0_SPT13_Pos             (9UL)                     /*!< SPT13 (Bit 9) */
#define ADC1_SAMPT0_SPT13_Msk             (0xe00UL)                 /*!< SPT13 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT0_SPT14_Pos             (12UL)                    /*!< SPT14 (Bit 12) */
#define ADC1_SAMPT0_SPT14_Msk             (0x7000UL)                /*!< SPT14 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT0_SPT15_Pos             (15UL)                    /*!< SPT15 (Bit 15) */
#define ADC1_SAMPT0_SPT15_Msk             (0x38000UL)               /*!< SPT15 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT0_SPT16_Pos             (18UL)                    /*!< SPT16 (Bit 18) */
#define ADC1_SAMPT0_SPT16_Msk             (0x1c0000UL)              /*!< SPT16 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT0_SPT17_Pos             (21UL)                    /*!< SPT17 (Bit 21) */
#define ADC1_SAMPT0_SPT17_Msk             (0xe00000UL)              /*!< SPT17 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT0_SPT18_Pos             (24UL)                    /*!< SPT18 (Bit 24) */
#define ADC1_SAMPT0_SPT18_Msk             (0x7000000UL)             /*!< SPT18 (Bitfield-Mask: 0x07) */
/* ========================================================  SAMPT1  ========================================================= */
#define ADC1_SAMPT1_SPT0_Pos              (0UL)                     /*!< SPT0 (Bit 0) */
#define ADC1_SAMPT1_SPT0_Msk              (0x7UL)                   /*!< SPT0 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT1_SPT1_Pos              (3UL)                     /*!< SPT1 (Bit 3) */
#define ADC1_SAMPT1_SPT1_Msk              (0x38UL)                  /*!< SPT1 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT1_SPT2_Pos              (6UL)                     /*!< SPT2 (Bit 6) */
#define ADC1_SAMPT1_SPT2_Msk              (0x1c0UL)                 /*!< SPT2 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT1_SPT3_Pos              (9UL)                     /*!< SPT3 (Bit 9) */
#define ADC1_SAMPT1_SPT3_Msk              (0xe00UL)                 /*!< SPT3 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT1_SPT4_Pos              (12UL)                    /*!< SPT4 (Bit 12) */
#define ADC1_SAMPT1_SPT4_Msk              (0x7000UL)                /*!< SPT4 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT1_SPT5_Pos              (15UL)                    /*!< SPT5 (Bit 15) */
#define ADC1_SAMPT1_SPT5_Msk              (0x38000UL)               /*!< SPT5 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT1_SPT6_Pos              (18UL)                    /*!< SPT6 (Bit 18) */
#define ADC1_SAMPT1_SPT6_Msk              (0x1c0000UL)              /*!< SPT6 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT1_SPT7_Pos              (21UL)                    /*!< SPT7 (Bit 21) */
#define ADC1_SAMPT1_SPT7_Msk              (0xe00000UL)              /*!< SPT7 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT1_SPT8_Pos              (24UL)                    /*!< SPT8 (Bit 24) */
#define ADC1_SAMPT1_SPT8_Msk              (0x7000000UL)             /*!< SPT8 (Bitfield-Mask: 0x07) */
#define ADC1_SAMPT1_SPT9_Pos              (27UL)                    /*!< SPT9 (Bit 27) */
#define ADC1_SAMPT1_SPT9_Msk              (0x38000000UL)            /*!< SPT9 (Bitfield-Mask: 0x07) */
/* =========================================================  IOFF0  ========================================================= */
#define ADC1_IOFF0_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC1_IOFF0_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  IOFF1  ========================================================= */
#define ADC1_IOFF1_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC1_IOFF1_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  IOFF2  ========================================================= */
#define ADC1_IOFF2_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC1_IOFF2_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  IOFF3  ========================================================= */
#define ADC1_IOFF3_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC1_IOFF3_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  WDHT  ========================================================== */
#define ADC1_WDHT_WDHT_Pos                (0UL)                     /*!< WDHT (Bit 0) */
#define ADC1_WDHT_WDHT_Msk                (0xfffUL)                 /*!< WDHT (Bitfield-Mask: 0xfff) */
/* =========================================================  WDLT  ========================================================== */
#define ADC1_WDLT_WDLT_Pos                (0UL)                     /*!< WDLT (Bit 0) */
#define ADC1_WDLT_WDLT_Msk                (0xfffUL)                 /*!< WDLT (Bitfield-Mask: 0xfff) */
/* =========================================================  RSQ0  ========================================================== */
#define ADC1_RSQ0_RL_Pos                  (20UL)                    /*!< RL (Bit 20) */
#define ADC1_RSQ0_RL_Msk                  (0xf00000UL)              /*!< RL (Bitfield-Mask: 0x0f) */
#define ADC1_RSQ0_RSQ15_Pos               (15UL)                    /*!< RSQ15 (Bit 15) */
#define ADC1_RSQ0_RSQ15_Msk               (0xf8000UL)               /*!< RSQ15 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ0_RSQ14_Pos               (10UL)                    /*!< RSQ14 (Bit 10) */
#define ADC1_RSQ0_RSQ14_Msk               (0x7c00UL)                /*!< RSQ14 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ0_RSQ13_Pos               (5UL)                     /*!< RSQ13 (Bit 5) */
#define ADC1_RSQ0_RSQ13_Msk               (0x3e0UL)                 /*!< RSQ13 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ0_RSQ12_Pos               (0UL)                     /*!< RSQ12 (Bit 0) */
#define ADC1_RSQ0_RSQ12_Msk               (0x1fUL)                  /*!< RSQ12 (Bitfield-Mask: 0x1f) */
/* =========================================================  RSQ1  ========================================================== */
#define ADC1_RSQ1_RSQ11_Pos               (25UL)                    /*!< RSQ11 (Bit 25) */
#define ADC1_RSQ1_RSQ11_Msk               (0x3e000000UL)            /*!< RSQ11 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ1_RSQ10_Pos               (20UL)                    /*!< RSQ10 (Bit 20) */
#define ADC1_RSQ1_RSQ10_Msk               (0x1f00000UL)             /*!< RSQ10 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ1_RSQ9_Pos                (15UL)                    /*!< RSQ9 (Bit 15) */
#define ADC1_RSQ1_RSQ9_Msk                (0xf8000UL)               /*!< RSQ9 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ1_RSQ8_Pos                (10UL)                    /*!< RSQ8 (Bit 10) */
#define ADC1_RSQ1_RSQ8_Msk                (0x7c00UL)                /*!< RSQ8 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ1_RSQ7_Pos                (5UL)                     /*!< RSQ7 (Bit 5) */
#define ADC1_RSQ1_RSQ7_Msk                (0x3e0UL)                 /*!< RSQ7 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ1_RSQ6_Pos                (0UL)                     /*!< RSQ6 (Bit 0) */
#define ADC1_RSQ1_RSQ6_Msk                (0x1fUL)                  /*!< RSQ6 (Bitfield-Mask: 0x1f) */
/* =========================================================  RSQ2  ========================================================== */
#define ADC1_RSQ2_RSQ5_Pos                (25UL)                    /*!< RSQ5 (Bit 25) */
#define ADC1_RSQ2_RSQ5_Msk                (0x3e000000UL)            /*!< RSQ5 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ2_RSQ4_Pos                (20UL)                    /*!< RSQ4 (Bit 20) */
#define ADC1_RSQ2_RSQ4_Msk                (0x1f00000UL)             /*!< RSQ4 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ2_RSQ3_Pos                (15UL)                    /*!< RSQ3 (Bit 15) */
#define ADC1_RSQ2_RSQ3_Msk                (0xf8000UL)               /*!< RSQ3 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ2_RSQ2_Pos                (10UL)                    /*!< RSQ2 (Bit 10) */
#define ADC1_RSQ2_RSQ2_Msk                (0x7c00UL)                /*!< RSQ2 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ2_RSQ1_Pos                (5UL)                     /*!< RSQ1 (Bit 5) */
#define ADC1_RSQ2_RSQ1_Msk                (0x3e0UL)                 /*!< RSQ1 (Bitfield-Mask: 0x1f) */
#define ADC1_RSQ2_RSQ0_Pos                (0UL)                     /*!< RSQ0 (Bit 0) */
#define ADC1_RSQ2_RSQ0_Msk                (0x1fUL)                  /*!< RSQ0 (Bitfield-Mask: 0x1f) */
/* ==========================================================  ISQ  ========================================================== */
#define ADC1_ISQ_IL_Pos                   (20UL)                    /*!< IL (Bit 20) */
#define ADC1_ISQ_IL_Msk                   (0x300000UL)              /*!< IL (Bitfield-Mask: 0x03) */
#define ADC1_ISQ_ISQ3_Pos                 (15UL)                    /*!< ISQ3 (Bit 15) */
#define ADC1_ISQ_ISQ3_Msk                 (0xf8000UL)               /*!< ISQ3 (Bitfield-Mask: 0x1f) */
#define ADC1_ISQ_ISQ2_Pos                 (10UL)                    /*!< ISQ2 (Bit 10) */
#define ADC1_ISQ_ISQ2_Msk                 (0x7c00UL)                /*!< ISQ2 (Bitfield-Mask: 0x1f) */
#define ADC1_ISQ_ISQ1_Pos                 (5UL)                     /*!< ISQ1 (Bit 5) */
#define ADC1_ISQ_ISQ1_Msk                 (0x3e0UL)                 /*!< ISQ1 (Bitfield-Mask: 0x1f) */
#define ADC1_ISQ_ISQ0_Pos                 (0UL)                     /*!< ISQ0 (Bit 0) */
#define ADC1_ISQ_ISQ0_Msk                 (0x1fUL)                  /*!< ISQ0 (Bitfield-Mask: 0x1f) */
/* ========================================================  IDATA0  ========================================================= */
#define ADC1_IDATA0_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC1_IDATA0_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* ========================================================  IDATA1  ========================================================= */
#define ADC1_IDATA1_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC1_IDATA1_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* ========================================================  IDATA2  ========================================================= */
#define ADC1_IDATA2_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC1_IDATA2_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* ========================================================  IDATA3  ========================================================= */
#define ADC1_IDATA3_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC1_IDATA3_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* =========================================================  RDATA  ========================================================= */
#define ADC1_RDATA_RDATA_Pos              (0UL)                     /*!< RDATA (Bit 0) */
#define ADC1_RDATA_RDATA_Msk              (0xffffUL)                /*!< RDATA (Bitfield-Mask: 0xffff) */
/* =======================================================  OVSAMPCTL  ======================================================= */
#define ADC1_OVSAMPCTL_TOVS_Pos           (9UL)                     /*!< TOVS (Bit 9) */
#define ADC1_OVSAMPCTL_TOVS_Msk           (0x200UL)                 /*!< TOVS (Bitfield-Mask: 0x01) */
#define ADC1_OVSAMPCTL_OVSS_Pos           (5UL)                     /*!< OVSS (Bit 5) */
#define ADC1_OVSAMPCTL_OVSS_Msk           (0x1e0UL)                 /*!< OVSS (Bitfield-Mask: 0x0f) */
#define ADC1_OVSAMPCTL_OVSR_Pos           (2UL)                     /*!< OVSR (Bit 2) */
#define ADC1_OVSAMPCTL_OVSR_Msk           (0x1cUL)                  /*!< OVSR (Bitfield-Mask: 0x07) */
#define ADC1_OVSAMPCTL_OVSEN_Pos          (0UL)                     /*!< OVSEN (Bit 0) */
#define ADC1_OVSAMPCTL_OVSEN_Msk          (0x1UL)                   /*!< OVSEN (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           ADC2                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT  ========================================================== */
#define ADC2_STAT_ROVF_Pos                (5UL)                     /*!< ROVF (Bit 5) */
#define ADC2_STAT_ROVF_Msk                (0x20UL)                  /*!< ROVF (Bitfield-Mask: 0x01) */
#define ADC2_STAT_STRC_Pos                (4UL)                     /*!< STRC (Bit 4) */
#define ADC2_STAT_STRC_Msk                (0x10UL)                  /*!< STRC (Bitfield-Mask: 0x01) */
#define ADC2_STAT_STIC_Pos                (3UL)                     /*!< STIC (Bit 3) */
#define ADC2_STAT_STIC_Msk                (0x8UL)                   /*!< STIC (Bitfield-Mask: 0x01) */
#define ADC2_STAT_EOIC_Pos                (2UL)                     /*!< EOIC (Bit 2) */
#define ADC2_STAT_EOIC_Msk                (0x4UL)                   /*!< EOIC (Bitfield-Mask: 0x01) */
#define ADC2_STAT_EOC_Pos                 (1UL)                     /*!< EOC (Bit 1) */
#define ADC2_STAT_EOC_Msk                 (0x2UL)                   /*!< EOC (Bitfield-Mask: 0x01) */
#define ADC2_STAT_WDE_Pos                 (0UL)                     /*!< WDE (Bit 0) */
#define ADC2_STAT_WDE_Msk                 (0x1UL)                   /*!< WDE (Bitfield-Mask: 0x01) */
/* =========================================================  CTL0  ========================================================== */
#define ADC2_CTL0_ROVFIE_Pos              (26UL)                    /*!< ROVFIE (Bit 26) */
#define ADC2_CTL0_ROVFIE_Msk              (0x4000000UL)             /*!< ROVFIE (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_DRES_Pos                (24UL)                    /*!< DRES (Bit 24) */
#define ADC2_CTL0_DRES_Msk                (0x3000000UL)             /*!< DRES (Bitfield-Mask: 0x03) */
#define ADC2_CTL0_RWDEN_Pos               (23UL)                    /*!< RWDEN (Bit 23) */
#define ADC2_CTL0_RWDEN_Msk               (0x800000UL)              /*!< RWDEN (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_IWDEN_Pos               (22UL)                    /*!< IWDEN (Bit 22) */
#define ADC2_CTL0_IWDEN_Msk               (0x400000UL)              /*!< IWDEN (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_DISNUM_Pos              (13UL)                    /*!< DISNUM (Bit 13) */
#define ADC2_CTL0_DISNUM_Msk              (0xe000UL)                /*!< DISNUM (Bitfield-Mask: 0x07) */
#define ADC2_CTL0_DISIC_Pos               (12UL)                    /*!< DISIC (Bit 12) */
#define ADC2_CTL0_DISIC_Msk               (0x1000UL)                /*!< DISIC (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_DISRC_Pos               (11UL)                    /*!< DISRC (Bit 11) */
#define ADC2_CTL0_DISRC_Msk               (0x800UL)                 /*!< DISRC (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_ICA_Pos                 (10UL)                    /*!< ICA (Bit 10) */
#define ADC2_CTL0_ICA_Msk                 (0x400UL)                 /*!< ICA (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_WDSC_Pos                (9UL)                     /*!< WDSC (Bit 9) */
#define ADC2_CTL0_WDSC_Msk                (0x200UL)                 /*!< WDSC (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_SM_Pos                  (8UL)                     /*!< SM (Bit 8) */
#define ADC2_CTL0_SM_Msk                  (0x100UL)                 /*!< SM (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_EOICIE_Pos              (7UL)                     /*!< EOICIE (Bit 7) */
#define ADC2_CTL0_EOICIE_Msk              (0x80UL)                  /*!< EOICIE (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_WDEIE_Pos               (6UL)                     /*!< WDEIE (Bit 6) */
#define ADC2_CTL0_WDEIE_Msk               (0x40UL)                  /*!< WDEIE (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_EOCIE_Pos               (5UL)                     /*!< EOCIE (Bit 5) */
#define ADC2_CTL0_EOCIE_Msk               (0x20UL)                  /*!< EOCIE (Bitfield-Mask: 0x01) */
#define ADC2_CTL0_WDCHSEL_Pos             (0UL)                     /*!< WDCHSEL (Bit 0) */
#define ADC2_CTL0_WDCHSEL_Msk             (0x1fUL)                  /*!< WDCHSEL (Bitfield-Mask: 0x1f) */
/* =========================================================  CTL1  ========================================================== */
#define ADC2_CTL1_SWRCST_Pos              (30UL)                    /*!< SWRCST (Bit 30) */
#define ADC2_CTL1_SWRCST_Msk              (0x40000000UL)            /*!< SWRCST (Bitfield-Mask: 0x01) */
#define ADC2_CTL1_ETMRC_Pos               (28UL)                    /*!< ETMRC (Bit 28) */
#define ADC2_CTL1_ETMRC_Msk               (0x30000000UL)            /*!< ETMRC (Bitfield-Mask: 0x03) */
#define ADC2_CTL1_ETSRC_Pos               (24UL)                    /*!< ETSRC (Bit 24) */
#define ADC2_CTL1_ETSRC_Msk               (0xf000000UL)             /*!< ETSRC (Bitfield-Mask: 0x0f) */
#define ADC2_CTL1_SWICST_Pos              (22UL)                    /*!< SWICST (Bit 22) */
#define ADC2_CTL1_SWICST_Msk              (0x400000UL)              /*!< SWICST (Bitfield-Mask: 0x01) */
#define ADC2_CTL1_ETMIC_Pos               (20UL)                    /*!< ETMIC (Bit 20) */
#define ADC2_CTL1_ETMIC_Msk               (0x300000UL)              /*!< ETMIC (Bitfield-Mask: 0x03) */
#define ADC2_CTL1_ETSIC_Pos               (16UL)                    /*!< ETSIC (Bit 16) */
#define ADC2_CTL1_ETSIC_Msk               (0xf0000UL)               /*!< ETSIC (Bitfield-Mask: 0x0f) */
#define ADC2_CTL1_DAL_Pos                 (11UL)                    /*!< DAL (Bit 11) */
#define ADC2_CTL1_DAL_Msk                 (0x800UL)                 /*!< DAL (Bitfield-Mask: 0x01) */
#define ADC2_CTL1_EOCM_Pos                (10UL)                    /*!< EOCM (Bit 10) */
#define ADC2_CTL1_EOCM_Msk                (0x400UL)                 /*!< EOCM (Bitfield-Mask: 0x01) */
#define ADC2_CTL1_DDM_Pos                 (9UL)                     /*!< DDM (Bit 9) */
#define ADC2_CTL1_DDM_Msk                 (0x200UL)                 /*!< DDM (Bitfield-Mask: 0x01) */
#define ADC2_CTL1_DMA_Pos                 (8UL)                     /*!< DMA (Bit 8) */
#define ADC2_CTL1_DMA_Msk                 (0x100UL)                 /*!< DMA (Bitfield-Mask: 0x01) */
#define ADC2_CTL1_RSTCLB_Pos              (3UL)                     /*!< RSTCLB (Bit 3) */
#define ADC2_CTL1_RSTCLB_Msk              (0x8UL)                   /*!< RSTCLB (Bitfield-Mask: 0x01) */
#define ADC2_CTL1_CLB_Pos                 (2UL)                     /*!< CLB (Bit 2) */
#define ADC2_CTL1_CLB_Msk                 (0x4UL)                   /*!< CLB (Bitfield-Mask: 0x01) */
#define ADC2_CTL1_CTN_Pos                 (1UL)                     /*!< CTN (Bit 1) */
#define ADC2_CTL1_CTN_Msk                 (0x2UL)                   /*!< CTN (Bitfield-Mask: 0x01) */
#define ADC2_CTL1_ADCON_Pos               (0UL)                     /*!< ADCON (Bit 0) */
#define ADC2_CTL1_ADCON_Msk               (0x1UL)                   /*!< ADCON (Bitfield-Mask: 0x01) */
/* ========================================================  SAMPT0  ========================================================= */
#define ADC2_SAMPT0_SPT10_Pos             (0UL)                     /*!< SPT10 (Bit 0) */
#define ADC2_SAMPT0_SPT10_Msk             (0x7UL)                   /*!< SPT10 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT0_SPT11_Pos             (3UL)                     /*!< SPT11 (Bit 3) */
#define ADC2_SAMPT0_SPT11_Msk             (0x38UL)                  /*!< SPT11 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT0_SPT12_Pos             (6UL)                     /*!< SPT12 (Bit 6) */
#define ADC2_SAMPT0_SPT12_Msk             (0x1c0UL)                 /*!< SPT12 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT0_SPT13_Pos             (9UL)                     /*!< SPT13 (Bit 9) */
#define ADC2_SAMPT0_SPT13_Msk             (0xe00UL)                 /*!< SPT13 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT0_SPT14_Pos             (12UL)                    /*!< SPT14 (Bit 12) */
#define ADC2_SAMPT0_SPT14_Msk             (0x7000UL)                /*!< SPT14 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT0_SPT15_Pos             (15UL)                    /*!< SPT15 (Bit 15) */
#define ADC2_SAMPT0_SPT15_Msk             (0x38000UL)               /*!< SPT15 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT0_SPT16_Pos             (18UL)                    /*!< SPT16 (Bit 18) */
#define ADC2_SAMPT0_SPT16_Msk             (0x1c0000UL)              /*!< SPT16 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT0_SPT17_Pos             (21UL)                    /*!< SPT17 (Bit 21) */
#define ADC2_SAMPT0_SPT17_Msk             (0xe00000UL)              /*!< SPT17 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT0_SPT18_Pos             (24UL)                    /*!< SPT18 (Bit 24) */
#define ADC2_SAMPT0_SPT18_Msk             (0x7000000UL)             /*!< SPT18 (Bitfield-Mask: 0x07) */
/* ========================================================  SAMPT1  ========================================================= */
#define ADC2_SAMPT1_SPT0_Pos              (0UL)                     /*!< SPT0 (Bit 0) */
#define ADC2_SAMPT1_SPT0_Msk              (0x7UL)                   /*!< SPT0 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT1_SPT1_Pos              (3UL)                     /*!< SPT1 (Bit 3) */
#define ADC2_SAMPT1_SPT1_Msk              (0x38UL)                  /*!< SPT1 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT1_SPT2_Pos              (6UL)                     /*!< SPT2 (Bit 6) */
#define ADC2_SAMPT1_SPT2_Msk              (0x1c0UL)                 /*!< SPT2 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT1_SPT3_Pos              (9UL)                     /*!< SPT3 (Bit 9) */
#define ADC2_SAMPT1_SPT3_Msk              (0xe00UL)                 /*!< SPT3 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT1_SPT4_Pos              (12UL)                    /*!< SPT4 (Bit 12) */
#define ADC2_SAMPT1_SPT4_Msk              (0x7000UL)                /*!< SPT4 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT1_SPT5_Pos              (15UL)                    /*!< SPT5 (Bit 15) */
#define ADC2_SAMPT1_SPT5_Msk              (0x38000UL)               /*!< SPT5 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT1_SPT6_Pos              (18UL)                    /*!< SPT6 (Bit 18) */
#define ADC2_SAMPT1_SPT6_Msk              (0x1c0000UL)              /*!< SPT6 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT1_SPT7_Pos              (21UL)                    /*!< SPT7 (Bit 21) */
#define ADC2_SAMPT1_SPT7_Msk              (0xe00000UL)              /*!< SPT7 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT1_SPT8_Pos              (24UL)                    /*!< SPT8 (Bit 24) */
#define ADC2_SAMPT1_SPT8_Msk              (0x7000000UL)             /*!< SPT8 (Bitfield-Mask: 0x07) */
#define ADC2_SAMPT1_SPT9_Pos              (27UL)                    /*!< SPT9 (Bit 27) */
#define ADC2_SAMPT1_SPT9_Msk              (0x38000000UL)            /*!< SPT9 (Bitfield-Mask: 0x07) */
/* =========================================================  IOFF0  ========================================================= */
#define ADC2_IOFF0_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC2_IOFF0_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  IOFF1  ========================================================= */
#define ADC2_IOFF1_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC2_IOFF1_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  IOFF2  ========================================================= */
#define ADC2_IOFF2_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC2_IOFF2_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  IOFF3  ========================================================= */
#define ADC2_IOFF3_IOFF_Pos               (0UL)                     /*!< IOFF (Bit 0) */
#define ADC2_IOFF3_IOFF_Msk               (0xfffUL)                 /*!< IOFF (Bitfield-Mask: 0xfff) */
/* =========================================================  WDHT  ========================================================== */
#define ADC2_WDHT_WDHT_Pos                (0UL)                     /*!< WDHT (Bit 0) */
#define ADC2_WDHT_WDHT_Msk                (0xfffUL)                 /*!< WDHT (Bitfield-Mask: 0xfff) */
/* =========================================================  WDLT  ========================================================== */
#define ADC2_WDLT_WDLT_Pos                (0UL)                     /*!< WDLT (Bit 0) */
#define ADC2_WDLT_WDLT_Msk                (0xfffUL)                 /*!< WDLT (Bitfield-Mask: 0xfff) */
/* =========================================================  RSQ0  ========================================================== */
#define ADC2_RSQ0_RL_Pos                  (20UL)                    /*!< RL (Bit 20) */
#define ADC2_RSQ0_RL_Msk                  (0xf00000UL)              /*!< RL (Bitfield-Mask: 0x0f) */
#define ADC2_RSQ0_RSQ15_Pos               (15UL)                    /*!< RSQ15 (Bit 15) */
#define ADC2_RSQ0_RSQ15_Msk               (0xf8000UL)               /*!< RSQ15 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ0_RSQ14_Pos               (10UL)                    /*!< RSQ14 (Bit 10) */
#define ADC2_RSQ0_RSQ14_Msk               (0x7c00UL)                /*!< RSQ14 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ0_RSQ13_Pos               (5UL)                     /*!< RSQ13 (Bit 5) */
#define ADC2_RSQ0_RSQ13_Msk               (0x3e0UL)                 /*!< RSQ13 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ0_RSQ12_Pos               (0UL)                     /*!< RSQ12 (Bit 0) */
#define ADC2_RSQ0_RSQ12_Msk               (0x1fUL)                  /*!< RSQ12 (Bitfield-Mask: 0x1f) */
/* =========================================================  RSQ1  ========================================================== */
#define ADC2_RSQ1_RSQ11_Pos               (25UL)                    /*!< RSQ11 (Bit 25) */
#define ADC2_RSQ1_RSQ11_Msk               (0x3e000000UL)            /*!< RSQ11 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ1_RSQ10_Pos               (20UL)                    /*!< RSQ10 (Bit 20) */
#define ADC2_RSQ1_RSQ10_Msk               (0x1f00000UL)             /*!< RSQ10 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ1_RSQ9_Pos                (15UL)                    /*!< RSQ9 (Bit 15) */
#define ADC2_RSQ1_RSQ9_Msk                (0xf8000UL)               /*!< RSQ9 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ1_RSQ8_Pos                (10UL)                    /*!< RSQ8 (Bit 10) */
#define ADC2_RSQ1_RSQ8_Msk                (0x7c00UL)                /*!< RSQ8 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ1_RSQ7_Pos                (5UL)                     /*!< RSQ7 (Bit 5) */
#define ADC2_RSQ1_RSQ7_Msk                (0x3e0UL)                 /*!< RSQ7 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ1_RSQ6_Pos                (0UL)                     /*!< RSQ6 (Bit 0) */
#define ADC2_RSQ1_RSQ6_Msk                (0x1fUL)                  /*!< RSQ6 (Bitfield-Mask: 0x1f) */
/* =========================================================  RSQ2  ========================================================== */
#define ADC2_RSQ2_RSQ5_Pos                (25UL)                    /*!< RSQ5 (Bit 25) */
#define ADC2_RSQ2_RSQ5_Msk                (0x3e000000UL)            /*!< RSQ5 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ2_RSQ4_Pos                (20UL)                    /*!< RSQ4 (Bit 20) */
#define ADC2_RSQ2_RSQ4_Msk                (0x1f00000UL)             /*!< RSQ4 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ2_RSQ3_Pos                (15UL)                    /*!< RSQ3 (Bit 15) */
#define ADC2_RSQ2_RSQ3_Msk                (0xf8000UL)               /*!< RSQ3 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ2_RSQ2_Pos                (10UL)                    /*!< RSQ2 (Bit 10) */
#define ADC2_RSQ2_RSQ2_Msk                (0x7c00UL)                /*!< RSQ2 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ2_RSQ1_Pos                (5UL)                     /*!< RSQ1 (Bit 5) */
#define ADC2_RSQ2_RSQ1_Msk                (0x3e0UL)                 /*!< RSQ1 (Bitfield-Mask: 0x1f) */
#define ADC2_RSQ2_RSQ0_Pos                (0UL)                     /*!< RSQ0 (Bit 0) */
#define ADC2_RSQ2_RSQ0_Msk                (0x1fUL)                  /*!< RSQ0 (Bitfield-Mask: 0x1f) */
/* ==========================================================  ISQ  ========================================================== */
#define ADC2_ISQ_IL_Pos                   (20UL)                    /*!< IL (Bit 20) */
#define ADC2_ISQ_IL_Msk                   (0x300000UL)              /*!< IL (Bitfield-Mask: 0x03) */
#define ADC2_ISQ_ISQ3_Pos                 (15UL)                    /*!< ISQ3 (Bit 15) */
#define ADC2_ISQ_ISQ3_Msk                 (0xf8000UL)               /*!< ISQ3 (Bitfield-Mask: 0x1f) */
#define ADC2_ISQ_ISQ2_Pos                 (10UL)                    /*!< ISQ2 (Bit 10) */
#define ADC2_ISQ_ISQ2_Msk                 (0x7c00UL)                /*!< ISQ2 (Bitfield-Mask: 0x1f) */
#define ADC2_ISQ_ISQ1_Pos                 (5UL)                     /*!< ISQ1 (Bit 5) */
#define ADC2_ISQ_ISQ1_Msk                 (0x3e0UL)                 /*!< ISQ1 (Bitfield-Mask: 0x1f) */
#define ADC2_ISQ_ISQ0_Pos                 (0UL)                     /*!< ISQ0 (Bit 0) */
#define ADC2_ISQ_ISQ0_Msk                 (0x1fUL)                  /*!< ISQ0 (Bitfield-Mask: 0x1f) */
/* ========================================================  IDATA0  ========================================================= */
#define ADC2_IDATA0_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC2_IDATA0_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* ========================================================  IDATA1  ========================================================= */
#define ADC2_IDATA1_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC2_IDATA1_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* ========================================================  IDATA2  ========================================================= */
#define ADC2_IDATA2_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC2_IDATA2_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* ========================================================  IDATA3  ========================================================= */
#define ADC2_IDATA3_IDATAn_Pos            (0UL)                     /*!< IDATAn (Bit 0) */
#define ADC2_IDATA3_IDATAn_Msk            (0xffffUL)                /*!< IDATAn (Bitfield-Mask: 0xffff) */
/* =========================================================  RDATA  ========================================================= */
#define ADC2_RDATA_RDATA_Pos              (0UL)                     /*!< RDATA (Bit 0) */
#define ADC2_RDATA_RDATA_Msk              (0xffffUL)                /*!< RDATA (Bitfield-Mask: 0xffff) */
/* =======================================================  OVSAMPCTL  ======================================================= */
#define ADC2_OVSAMPCTL_TOVS_Pos           (9UL)                     /*!< TOVS (Bit 9) */
#define ADC2_OVSAMPCTL_TOVS_Msk           (0x200UL)                 /*!< TOVS (Bitfield-Mask: 0x01) */
#define ADC2_OVSAMPCTL_OVSS_Pos           (5UL)                     /*!< OVSS (Bit 5) */
#define ADC2_OVSAMPCTL_OVSS_Msk           (0x1e0UL)                 /*!< OVSS (Bitfield-Mask: 0x0f) */
#define ADC2_OVSAMPCTL_OVSR_Pos           (2UL)                     /*!< OVSR (Bit 2) */
#define ADC2_OVSAMPCTL_OVSR_Msk           (0x1cUL)                  /*!< OVSR (Bitfield-Mask: 0x07) */
#define ADC2_OVSAMPCTL_OVSEN_Pos          (0UL)                     /*!< OVSEN (Bit 0) */
#define ADC2_OVSAMPCTL_OVSEN_Msk          (0x1UL)                   /*!< OVSEN (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                        ADC_Common                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  SSTAT  ========================================================= */
#define ADC_Common_SSTAT_ROVF2_Pos        (21UL)                    /*!< ROVF2 (Bit 21) */
#define ADC_Common_SSTAT_ROVF2_Msk        (0x200000UL)              /*!< ROVF2 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_STRC2_Pos        (20UL)                    /*!< STRC2 (Bit 20) */
#define ADC_Common_SSTAT_STRC2_Msk        (0x100000UL)              /*!< STRC2 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_STIC2_Pos        (19UL)                    /*!< STIC2 (Bit 19) */
#define ADC_Common_SSTAT_STIC2_Msk        (0x80000UL)               /*!< STIC2 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_EOIC2_Pos        (18UL)                    /*!< EOIC2 (Bit 18) */
#define ADC_Common_SSTAT_EOIC2_Msk        (0x40000UL)               /*!< EOIC2 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_EOC2_Pos         (17UL)                    /*!< EOC2 (Bit 17) */
#define ADC_Common_SSTAT_EOC2_Msk         (0x20000UL)               /*!< EOC2 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_WDE2_Pos         (16UL)                    /*!< WDE2 (Bit 16) */
#define ADC_Common_SSTAT_WDE2_Msk         (0x10000UL)               /*!< WDE2 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_ROVF1_Pos        (13UL)                    /*!< ROVF1 (Bit 13) */
#define ADC_Common_SSTAT_ROVF1_Msk        (0x2000UL)                /*!< ROVF1 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_STRC1_Pos        (12UL)                    /*!< STRC1 (Bit 12) */
#define ADC_Common_SSTAT_STRC1_Msk        (0x1000UL)                /*!< STRC1 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_STIC1_Pos        (11UL)                    /*!< STIC1 (Bit 11) */
#define ADC_Common_SSTAT_STIC1_Msk        (0x800UL)                 /*!< STIC1 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_EOIC1_Pos        (10UL)                    /*!< EOIC1 (Bit 10) */
#define ADC_Common_SSTAT_EOIC1_Msk        (0x400UL)                 /*!< EOIC1 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_EOC1_Pos         (9UL)                     /*!< EOC1 (Bit 9) */
#define ADC_Common_SSTAT_EOC1_Msk         (0x200UL)                 /*!< EOC1 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_WDE1_Pos         (8UL)                     /*!< WDE1 (Bit 8) */
#define ADC_Common_SSTAT_WDE1_Msk         (0x100UL)                 /*!< WDE1 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_ROVF0_Pos        (5UL)                     /*!< ROVF0 (Bit 5) */
#define ADC_Common_SSTAT_ROVF0_Msk        (0x20UL)                  /*!< ROVF0 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_STRC0_Pos        (4UL)                     /*!< STRC0 (Bit 4) */
#define ADC_Common_SSTAT_STRC0_Msk        (0x10UL)                  /*!< STRC0 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_STIC0_Pos        (3UL)                     /*!< STIC0 (Bit 3) */
#define ADC_Common_SSTAT_STIC0_Msk        (0x8UL)                   /*!< STIC0 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_EOIC0_Pos        (2UL)                     /*!< EOIC0 (Bit 2) */
#define ADC_Common_SSTAT_EOIC0_Msk        (0x4UL)                   /*!< EOIC0 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_EOC0_Pos         (1UL)                     /*!< EOC0 (Bit 1) */
#define ADC_Common_SSTAT_EOC0_Msk         (0x2UL)                   /*!< EOC0 (Bitfield-Mask: 0x01) */
#define ADC_Common_SSTAT_WDE0_Pos         (0UL)                     /*!< WDE0 (Bit 0) */
#define ADC_Common_SSTAT_WDE0_Msk         (0x1UL)                   /*!< WDE0 (Bitfield-Mask: 0x01) */
/* ========================================================  SYNCCTL  ======================================================== */
#define ADC_Common_SYNCCTL_TSVREN_Pos     (23UL)                    /*!< TSVREN (Bit 23) */
#define ADC_Common_SYNCCTL_TSVREN_Msk     (0x800000UL)              /*!< TSVREN (Bitfield-Mask: 0x01) */
#define ADC_Common_SYNCCTL_VBATEN_Pos     (22UL)                    /*!< VBATEN (Bit 22) */
#define ADC_Common_SYNCCTL_VBATEN_Msk     (0x400000UL)              /*!< VBATEN (Bitfield-Mask: 0x01) */
#define ADC_Common_SYNCCTL_ADCCK_Pos      (16UL)                    /*!< ADCCK (Bit 16) */
#define ADC_Common_SYNCCTL_ADCCK_Msk      (0x70000UL)               /*!< ADCCK (Bitfield-Mask: 0x07) */
#define ADC_Common_SYNCCTL_SYNCDMA_Pos    (14UL)                    /*!< SYNCDMA (Bit 14) */
#define ADC_Common_SYNCCTL_SYNCDMA_Msk    (0xc000UL)                /*!< SYNCDMA (Bitfield-Mask: 0x03) */
#define ADC_Common_SYNCCTL_SYNCDDM_Pos    (13UL)                    /*!< SYNCDDM (Bit 13) */
#define ADC_Common_SYNCCTL_SYNCDDM_Msk    (0x2000UL)                /*!< SYNCDDM (Bitfield-Mask: 0x01) */
#define ADC_Common_SYNCCTL_SYNCDLY_Pos    (8UL)                     /*!< SYNCDLY (Bit 8) */
#define ADC_Common_SYNCCTL_SYNCDLY_Msk    (0xf00UL)                 /*!< SYNCDLY (Bitfield-Mask: 0x0f) */
#define ADC_Common_SYNCCTL_SYNCM_Pos      (0UL)                     /*!< SYNCM (Bit 0) */
#define ADC_Common_SYNCCTL_SYNCM_Msk      (0x1fUL)                  /*!< SYNCM (Bitfield-Mask: 0x1f) */
/* =======================================================  SYNCDATA  ======================================================== */
#define ADC_Common_SYNCDATA_SYNCDATA2_Pos (16UL)                    /*!< SYNCDATA2 (Bit 16) */
#define ADC_Common_SYNCDATA_SYNCDATA2_Msk (0xffff0000UL)            /*!< SYNCDATA2 (Bitfield-Mask: 0xffff) */
#define ADC_Common_SYNCDATA_SYNCDATA1_Pos (0UL)                     /*!< SYNCDATA1 (Bit 0) */
#define ADC_Common_SYNCDATA_SYNCDATA1_Msk (0xffffUL)                /*!< SYNCDATA1 (Bitfield-Mask: 0xffff) */


/* =========================================================================================================================== */
/* ================                                           CAN0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define CAN0_CTL_DFZ_Pos                  (16UL)                    /*!< DFZ (Bit 16) */
#define CAN0_CTL_DFZ_Msk                  (0x10000UL)               /*!< DFZ (Bitfield-Mask: 0x01) */
#define CAN0_CTL_SWRST_Pos                (15UL)                    /*!< SWRST (Bit 15) */
#define CAN0_CTL_SWRST_Msk                (0x8000UL)                /*!< SWRST (Bitfield-Mask: 0x01) */
#define CAN0_CTL_TTC_Pos                  (7UL)                     /*!< TTC (Bit 7) */
#define CAN0_CTL_TTC_Msk                  (0x80UL)                  /*!< TTC (Bitfield-Mask: 0x01) */
#define CAN0_CTL_ABOR_Pos                 (6UL)                     /*!< ABOR (Bit 6) */
#define CAN0_CTL_ABOR_Msk                 (0x40UL)                  /*!< ABOR (Bitfield-Mask: 0x01) */
#define CAN0_CTL_AWU_Pos                  (5UL)                     /*!< AWU (Bit 5) */
#define CAN0_CTL_AWU_Msk                  (0x20UL)                  /*!< AWU (Bitfield-Mask: 0x01) */
#define CAN0_CTL_ARD_Pos                  (4UL)                     /*!< ARD (Bit 4) */
#define CAN0_CTL_ARD_Msk                  (0x10UL)                  /*!< ARD (Bitfield-Mask: 0x01) */
#define CAN0_CTL_RFOD_Pos                 (3UL)                     /*!< RFOD (Bit 3) */
#define CAN0_CTL_RFOD_Msk                 (0x8UL)                   /*!< RFOD (Bitfield-Mask: 0x01) */
#define CAN0_CTL_TFO_Pos                  (2UL)                     /*!< TFO (Bit 2) */
#define CAN0_CTL_TFO_Msk                  (0x4UL)                   /*!< TFO (Bitfield-Mask: 0x01) */
#define CAN0_CTL_SLPWMOD_Pos              (1UL)                     /*!< SLPWMOD (Bit 1) */
#define CAN0_CTL_SLPWMOD_Msk              (0x2UL)                   /*!< SLPWMOD (Bitfield-Mask: 0x01) */
#define CAN0_CTL_IWMOD_Pos                (0UL)                     /*!< IWMOD (Bit 0) */
#define CAN0_CTL_IWMOD_Msk                (0x1UL)                   /*!< IWMOD (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define CAN0_STAT_RXL_Pos                 (11UL)                    /*!< RXL (Bit 11) */
#define CAN0_STAT_RXL_Msk                 (0x800UL)                 /*!< RXL (Bitfield-Mask: 0x01) */
#define CAN0_STAT_LASTRX_Pos              (10UL)                    /*!< LASTRX (Bit 10) */
#define CAN0_STAT_LASTRX_Msk              (0x400UL)                 /*!< LASTRX (Bitfield-Mask: 0x01) */
#define CAN0_STAT_RS_Pos                  (9UL)                     /*!< RS (Bit 9) */
#define CAN0_STAT_RS_Msk                  (0x200UL)                 /*!< RS (Bitfield-Mask: 0x01) */
#define CAN0_STAT_TS_Pos                  (8UL)                     /*!< TS (Bit 8) */
#define CAN0_STAT_TS_Msk                  (0x100UL)                 /*!< TS (Bitfield-Mask: 0x01) */
#define CAN0_STAT_SLPIF_Pos               (4UL)                     /*!< SLPIF (Bit 4) */
#define CAN0_STAT_SLPIF_Msk               (0x10UL)                  /*!< SLPIF (Bitfield-Mask: 0x01) */
#define CAN0_STAT_WUIF_Pos                (3UL)                     /*!< WUIF (Bit 3) */
#define CAN0_STAT_WUIF_Msk                (0x8UL)                   /*!< WUIF (Bitfield-Mask: 0x01) */
#define CAN0_STAT_ERRIF_Pos               (2UL)                     /*!< ERRIF (Bit 2) */
#define CAN0_STAT_ERRIF_Msk               (0x4UL)                   /*!< ERRIF (Bitfield-Mask: 0x01) */
#define CAN0_STAT_SLPWS_Pos               (1UL)                     /*!< SLPWS (Bit 1) */
#define CAN0_STAT_SLPWS_Msk               (0x2UL)                   /*!< SLPWS (Bitfield-Mask: 0x01) */
#define CAN0_STAT_IWS_Pos                 (0UL)                     /*!< IWS (Bit 0) */
#define CAN0_STAT_IWS_Msk                 (0x1UL)                   /*!< IWS (Bitfield-Mask: 0x01) */
/* =========================================================  TSTAT  ========================================================= */
#define CAN0_TSTAT_TMLS2_Pos              (31UL)                    /*!< TMLS2 (Bit 31) */
#define CAN0_TSTAT_TMLS2_Msk              (0x80000000UL)            /*!< TMLS2 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_TMLS1_Pos              (30UL)                    /*!< TMLS1 (Bit 30) */
#define CAN0_TSTAT_TMLS1_Msk              (0x40000000UL)            /*!< TMLS1 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_TMLS0_Pos              (29UL)                    /*!< TMLS0 (Bit 29) */
#define CAN0_TSTAT_TMLS0_Msk              (0x20000000UL)            /*!< TMLS0 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_TME2_Pos               (28UL)                    /*!< TME2 (Bit 28) */
#define CAN0_TSTAT_TME2_Msk               (0x10000000UL)            /*!< TME2 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_TME1_Pos               (27UL)                    /*!< TME1 (Bit 27) */
#define CAN0_TSTAT_TME1_Msk               (0x8000000UL)             /*!< TME1 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_TME0_Pos               (26UL)                    /*!< TME0 (Bit 26) */
#define CAN0_TSTAT_TME0_Msk               (0x4000000UL)             /*!< TME0 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_NUM_Pos                (24UL)                    /*!< NUM (Bit 24) */
#define CAN0_TSTAT_NUM_Msk                (0x3000000UL)             /*!< NUM (Bitfield-Mask: 0x03) */
#define CAN0_TSTAT_MST2_Pos               (23UL)                    /*!< MST2 (Bit 23) */
#define CAN0_TSTAT_MST2_Msk               (0x800000UL)              /*!< MST2 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MTE2_Pos               (19UL)                    /*!< MTE2 (Bit 19) */
#define CAN0_TSTAT_MTE2_Msk               (0x80000UL)               /*!< MTE2 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MAL2_Pos               (18UL)                    /*!< MAL2 (Bit 18) */
#define CAN0_TSTAT_MAL2_Msk               (0x40000UL)               /*!< MAL2 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MTFNERR2_Pos           (17UL)                    /*!< MTFNERR2 (Bit 17) */
#define CAN0_TSTAT_MTFNERR2_Msk           (0x20000UL)               /*!< MTFNERR2 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MTF2_Pos               (16UL)                    /*!< MTF2 (Bit 16) */
#define CAN0_TSTAT_MTF2_Msk               (0x10000UL)               /*!< MTF2 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MST1_Pos               (15UL)                    /*!< MST1 (Bit 15) */
#define CAN0_TSTAT_MST1_Msk               (0x8000UL)                /*!< MST1 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MTE1_Pos               (11UL)                    /*!< MTE1 (Bit 11) */
#define CAN0_TSTAT_MTE1_Msk               (0x800UL)                 /*!< MTE1 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MAL1_Pos               (10UL)                    /*!< MAL1 (Bit 10) */
#define CAN0_TSTAT_MAL1_Msk               (0x400UL)                 /*!< MAL1 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MTFNERR1_Pos           (9UL)                     /*!< MTFNERR1 (Bit 9) */
#define CAN0_TSTAT_MTFNERR1_Msk           (0x200UL)                 /*!< MTFNERR1 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MTF1_Pos               (8UL)                     /*!< MTF1 (Bit 8) */
#define CAN0_TSTAT_MTF1_Msk               (0x100UL)                 /*!< MTF1 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MST0_Pos               (7UL)                     /*!< MST0 (Bit 7) */
#define CAN0_TSTAT_MST0_Msk               (0x80UL)                  /*!< MST0 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MTE0_Pos               (3UL)                     /*!< MTE0 (Bit 3) */
#define CAN0_TSTAT_MTE0_Msk               (0x8UL)                   /*!< MTE0 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MAL0_Pos               (2UL)                     /*!< MAL0 (Bit 2) */
#define CAN0_TSTAT_MAL0_Msk               (0x4UL)                   /*!< MAL0 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MTFNERR0_Pos           (1UL)                     /*!< MTFNERR0 (Bit 1) */
#define CAN0_TSTAT_MTFNERR0_Msk           (0x2UL)                   /*!< MTFNERR0 (Bitfield-Mask: 0x01) */
#define CAN0_TSTAT_MTF0_Pos               (0UL)                     /*!< MTF0 (Bit 0) */
#define CAN0_TSTAT_MTF0_Msk               (0x1UL)                   /*!< MTF0 (Bitfield-Mask: 0x01) */
/* ========================================================  RFIFO0  ========================================================= */
#define CAN0_RFIFO0_RFD0_Pos              (5UL)                     /*!< RFD0 (Bit 5) */
#define CAN0_RFIFO0_RFD0_Msk              (0x20UL)                  /*!< RFD0 (Bitfield-Mask: 0x01) */
#define CAN0_RFIFO0_RFO0_Pos              (4UL)                     /*!< RFO0 (Bit 4) */
#define CAN0_RFIFO0_RFO0_Msk              (0x10UL)                  /*!< RFO0 (Bitfield-Mask: 0x01) */
#define CAN0_RFIFO0_RFF0_Pos              (3UL)                     /*!< RFF0 (Bit 3) */
#define CAN0_RFIFO0_RFF0_Msk              (0x8UL)                   /*!< RFF0 (Bitfield-Mask: 0x01) */
#define CAN0_RFIFO0_RFL0_Pos              (0UL)                     /*!< RFL0 (Bit 0) */
#define CAN0_RFIFO0_RFL0_Msk              (0x3UL)                   /*!< RFL0 (Bitfield-Mask: 0x03) */
/* ========================================================  RFIFO1  ========================================================= */
#define CAN0_RFIFO1_RFD1_Pos              (5UL)                     /*!< RFD1 (Bit 5) */
#define CAN0_RFIFO1_RFD1_Msk              (0x20UL)                  /*!< RFD1 (Bitfield-Mask: 0x01) */
#define CAN0_RFIFO1_RFO1_Pos              (4UL)                     /*!< RFO1 (Bit 4) */
#define CAN0_RFIFO1_RFO1_Msk              (0x10UL)                  /*!< RFO1 (Bitfield-Mask: 0x01) */
#define CAN0_RFIFO1_RFF1_Pos              (3UL)                     /*!< RFF1 (Bit 3) */
#define CAN0_RFIFO1_RFF1_Msk              (0x8UL)                   /*!< RFF1 (Bitfield-Mask: 0x01) */
#define CAN0_RFIFO1_RFL1_Pos              (0UL)                     /*!< RFL1 (Bit 0) */
#define CAN0_RFIFO1_RFL1_Msk              (0x3UL)                   /*!< RFL1 (Bitfield-Mask: 0x03) */
/* =========================================================  INTEN  ========================================================= */
#define CAN0_INTEN_SLPWIE_Pos             (17UL)                    /*!< SLPWIE (Bit 17) */
#define CAN0_INTEN_SLPWIE_Msk             (0x20000UL)               /*!< SLPWIE (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_WIE_Pos                (16UL)                    /*!< WIE (Bit 16) */
#define CAN0_INTEN_WIE_Msk                (0x10000UL)               /*!< WIE (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_ERRIE_Pos              (15UL)                    /*!< ERRIE (Bit 15) */
#define CAN0_INTEN_ERRIE_Msk              (0x8000UL)                /*!< ERRIE (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_ERRNIE_Pos             (11UL)                    /*!< ERRNIE (Bit 11) */
#define CAN0_INTEN_ERRNIE_Msk             (0x800UL)                 /*!< ERRNIE (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_BOIE_Pos               (10UL)                    /*!< BOIE (Bit 10) */
#define CAN0_INTEN_BOIE_Msk               (0x400UL)                 /*!< BOIE (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_PERRIE_Pos             (9UL)                     /*!< PERRIE (Bit 9) */
#define CAN0_INTEN_PERRIE_Msk             (0x200UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_WERRIE_Pos             (8UL)                     /*!< WERRIE (Bit 8) */
#define CAN0_INTEN_WERRIE_Msk             (0x100UL)                 /*!< WERRIE (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_RFOIE1_Pos             (6UL)                     /*!< RFOIE1 (Bit 6) */
#define CAN0_INTEN_RFOIE1_Msk             (0x40UL)                  /*!< RFOIE1 (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_RFFIE1_Pos             (5UL)                     /*!< RFFIE1 (Bit 5) */
#define CAN0_INTEN_RFFIE1_Msk             (0x20UL)                  /*!< RFFIE1 (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_RFNEIE1_Pos            (4UL)                     /*!< RFNEIE1 (Bit 4) */
#define CAN0_INTEN_RFNEIE1_Msk            (0x10UL)                  /*!< RFNEIE1 (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_RFOIE0_Pos             (3UL)                     /*!< RFOIE0 (Bit 3) */
#define CAN0_INTEN_RFOIE0_Msk             (0x8UL)                   /*!< RFOIE0 (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_RFFIE0_Pos             (2UL)                     /*!< RFFIE0 (Bit 2) */
#define CAN0_INTEN_RFFIE0_Msk             (0x4UL)                   /*!< RFFIE0 (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_RFNEIE0_Pos            (1UL)                     /*!< RFNEIE0 (Bit 1) */
#define CAN0_INTEN_RFNEIE0_Msk            (0x2UL)                   /*!< RFNEIE0 (Bitfield-Mask: 0x01) */
#define CAN0_INTEN_TMEIE_Pos              (0UL)                     /*!< TMEIE (Bit 0) */
#define CAN0_INTEN_TMEIE_Msk              (0x1UL)                   /*!< TMEIE (Bitfield-Mask: 0x01) */
/* ==========================================================  ERR  ========================================================== */
#define CAN0_ERR_RECNT_Pos                (24UL)                    /*!< RECNT (Bit 24) */
#define CAN0_ERR_RECNT_Msk                (0xff000000UL)            /*!< RECNT (Bitfield-Mask: 0xff) */
#define CAN0_ERR_TECNT_Pos                (16UL)                    /*!< TECNT (Bit 16) */
#define CAN0_ERR_TECNT_Msk                (0xff0000UL)              /*!< TECNT (Bitfield-Mask: 0xff) */
#define CAN0_ERR_ERRN_Pos                 (4UL)                     /*!< ERRN (Bit 4) */
#define CAN0_ERR_ERRN_Msk                 (0x70UL)                  /*!< ERRN (Bitfield-Mask: 0x07) */
#define CAN0_ERR_BOERR_Pos                (2UL)                     /*!< BOERR (Bit 2) */
#define CAN0_ERR_BOERR_Msk                (0x4UL)                   /*!< BOERR (Bitfield-Mask: 0x01) */
#define CAN0_ERR_PERR_Pos                 (1UL)                     /*!< PERR (Bit 1) */
#define CAN0_ERR_PERR_Msk                 (0x2UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
#define CAN0_ERR_WERR_Pos                 (0UL)                     /*!< WERR (Bit 0) */
#define CAN0_ERR_WERR_Msk                 (0x1UL)                   /*!< WERR (Bitfield-Mask: 0x01) */
/* ==========================================================  BT  =========================================================== */
#define CAN0_BT_SCMOD_Pos                 (31UL)                    /*!< SCMOD (Bit 31) */
#define CAN0_BT_SCMOD_Msk                 (0x80000000UL)            /*!< SCMOD (Bitfield-Mask: 0x01) */
#define CAN0_BT_LCMOD_Pos                 (30UL)                    /*!< LCMOD (Bit 30) */
#define CAN0_BT_LCMOD_Msk                 (0x40000000UL)            /*!< LCMOD (Bitfield-Mask: 0x01) */
#define CAN0_BT_SJW_Pos                   (24UL)                    /*!< SJW (Bit 24) */
#define CAN0_BT_SJW_Msk                   (0x3000000UL)             /*!< SJW (Bitfield-Mask: 0x03) */
#define CAN0_BT_BS2_Pos                   (20UL)                    /*!< BS2 (Bit 20) */
#define CAN0_BT_BS2_Msk                   (0x700000UL)              /*!< BS2 (Bitfield-Mask: 0x07) */
#define CAN0_BT_BS1_Pos                   (16UL)                    /*!< BS1 (Bit 16) */
#define CAN0_BT_BS1_Msk                   (0xf0000UL)               /*!< BS1 (Bitfield-Mask: 0x0f) */
#define CAN0_BT_BUADPSC_Pos               (0UL)                     /*!< BUADPSC (Bit 0) */
#define CAN0_BT_BUADPSC_Msk               (0x3ffUL)                 /*!< BUADPSC (Bitfield-Mask: 0x3ff) */
/* =========================================================  TMI0  ========================================================== */
#define CAN0_TMI0_SFID_EFID_Pos           (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN0_TMI0_SFID_EFID_Msk           (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN0_TMI0_EFID_Pos                (3UL)                     /*!< EFID (Bit 3) */
#define CAN0_TMI0_EFID_Msk                (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN0_TMI0_FF_Pos                  (2UL)                     /*!< FF (Bit 2) */
#define CAN0_TMI0_FF_Msk                  (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN0_TMI0_FT_Pos                  (1UL)                     /*!< FT (Bit 1) */
#define CAN0_TMI0_FT_Msk                  (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
#define CAN0_TMI0_TEN_Pos                 (0UL)                     /*!< TEN (Bit 0) */
#define CAN0_TMI0_TEN_Msk                 (0x1UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
/* =========================================================  TMP0  ========================================================== */
#define CAN0_TMP0_TS_Pos                  (16UL)                    /*!< TS (Bit 16) */
#define CAN0_TMP0_TS_Msk                  (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN0_TMP0_TSEN_Pos                (8UL)                     /*!< TSEN (Bit 8) */
#define CAN0_TMP0_TSEN_Msk                (0x100UL)                 /*!< TSEN (Bitfield-Mask: 0x01) */
#define CAN0_TMP0_DLENC_Pos               (0UL)                     /*!< DLENC (Bit 0) */
#define CAN0_TMP0_DLENC_Msk               (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =======================================================  TMDATA00  ======================================================== */
#define CAN0_TMDATA00_DB3_Pos             (24UL)                    /*!< DB3 (Bit 24) */
#define CAN0_TMDATA00_DB3_Msk             (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA00_DB2_Pos             (16UL)                    /*!< DB2 (Bit 16) */
#define CAN0_TMDATA00_DB2_Msk             (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA00_DB1_Pos             (8UL)                     /*!< DB1 (Bit 8) */
#define CAN0_TMDATA00_DB1_Msk             (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA00_DB0_Pos             (0UL)                     /*!< DB0 (Bit 0) */
#define CAN0_TMDATA00_DB0_Msk             (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =======================================================  TMDATA10  ======================================================== */
#define CAN0_TMDATA10_DB7_Pos             (24UL)                    /*!< DB7 (Bit 24) */
#define CAN0_TMDATA10_DB7_Msk             (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA10_DB6_Pos             (16UL)                    /*!< DB6 (Bit 16) */
#define CAN0_TMDATA10_DB6_Msk             (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA10_DB5_Pos             (8UL)                     /*!< DB5 (Bit 8) */
#define CAN0_TMDATA10_DB5_Msk             (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA10_DB4_Pos             (0UL)                     /*!< DB4 (Bit 0) */
#define CAN0_TMDATA10_DB4_Msk             (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =========================================================  TMI1  ========================================================== */
#define CAN0_TMI1_SFID_EFID_Pos           (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN0_TMI1_SFID_EFID_Msk           (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN0_TMI1_EFID_Pos                (3UL)                     /*!< EFID (Bit 3) */
#define CAN0_TMI1_EFID_Msk                (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN0_TMI1_FF_Pos                  (2UL)                     /*!< FF (Bit 2) */
#define CAN0_TMI1_FF_Msk                  (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN0_TMI1_FT_Pos                  (1UL)                     /*!< FT (Bit 1) */
#define CAN0_TMI1_FT_Msk                  (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
#define CAN0_TMI1_TEN_Pos                 (0UL)                     /*!< TEN (Bit 0) */
#define CAN0_TMI1_TEN_Msk                 (0x1UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
/* =========================================================  TMP1  ========================================================== */
#define CAN0_TMP1_TS_Pos                  (16UL)                    /*!< TS (Bit 16) */
#define CAN0_TMP1_TS_Msk                  (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN0_TMP1_TSEN_Pos                (8UL)                     /*!< TSEN (Bit 8) */
#define CAN0_TMP1_TSEN_Msk                (0x100UL)                 /*!< TSEN (Bitfield-Mask: 0x01) */
#define CAN0_TMP1_DLENC_Pos               (0UL)                     /*!< DLENC (Bit 0) */
#define CAN0_TMP1_DLENC_Msk               (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =======================================================  TMDATA01  ======================================================== */
#define CAN0_TMDATA01_DB3_Pos             (24UL)                    /*!< DB3 (Bit 24) */
#define CAN0_TMDATA01_DB3_Msk             (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA01_DB2_Pos             (16UL)                    /*!< DB2 (Bit 16) */
#define CAN0_TMDATA01_DB2_Msk             (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA01_DB1_Pos             (8UL)                     /*!< DB1 (Bit 8) */
#define CAN0_TMDATA01_DB1_Msk             (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA01_DB0_Pos             (0UL)                     /*!< DB0 (Bit 0) */
#define CAN0_TMDATA01_DB0_Msk             (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =======================================================  TMDATA11  ======================================================== */
#define CAN0_TMDATA11_DB7_Pos             (24UL)                    /*!< DB7 (Bit 24) */
#define CAN0_TMDATA11_DB7_Msk             (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA11_DB6_Pos             (16UL)                    /*!< DB6 (Bit 16) */
#define CAN0_TMDATA11_DB6_Msk             (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA11_DB5_Pos             (8UL)                     /*!< DB5 (Bit 8) */
#define CAN0_TMDATA11_DB5_Msk             (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA11_DB4_Pos             (0UL)                     /*!< DB4 (Bit 0) */
#define CAN0_TMDATA11_DB4_Msk             (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =========================================================  TMI2  ========================================================== */
#define CAN0_TMI2_SFID_EFID_Pos           (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN0_TMI2_SFID_EFID_Msk           (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN0_TMI2_EFID_Pos                (3UL)                     /*!< EFID (Bit 3) */
#define CAN0_TMI2_EFID_Msk                (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN0_TMI2_FF_Pos                  (2UL)                     /*!< FF (Bit 2) */
#define CAN0_TMI2_FF_Msk                  (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN0_TMI2_FT_Pos                  (1UL)                     /*!< FT (Bit 1) */
#define CAN0_TMI2_FT_Msk                  (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
#define CAN0_TMI2_TEN_Pos                 (0UL)                     /*!< TEN (Bit 0) */
#define CAN0_TMI2_TEN_Msk                 (0x1UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
/* =========================================================  TMP2  ========================================================== */
#define CAN0_TMP2_TS_Pos                  (16UL)                    /*!< TS (Bit 16) */
#define CAN0_TMP2_TS_Msk                  (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN0_TMP2_TSEN_Pos                (8UL)                     /*!< TSEN (Bit 8) */
#define CAN0_TMP2_TSEN_Msk                (0x100UL)                 /*!< TSEN (Bitfield-Mask: 0x01) */
#define CAN0_TMP2_DLENC_Pos               (0UL)                     /*!< DLENC (Bit 0) */
#define CAN0_TMP2_DLENC_Msk               (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =======================================================  TMDATA02  ======================================================== */
#define CAN0_TMDATA02_DB3_Pos             (24UL)                    /*!< DB3 (Bit 24) */
#define CAN0_TMDATA02_DB3_Msk             (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA02_DB2_Pos             (16UL)                    /*!< DB2 (Bit 16) */
#define CAN0_TMDATA02_DB2_Msk             (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA02_DB1_Pos             (8UL)                     /*!< DB1 (Bit 8) */
#define CAN0_TMDATA02_DB1_Msk             (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA02_DB0_Pos             (0UL)                     /*!< DB0 (Bit 0) */
#define CAN0_TMDATA02_DB0_Msk             (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =======================================================  TMDATA12  ======================================================== */
#define CAN0_TMDATA12_DB7_Pos             (24UL)                    /*!< DB7 (Bit 24) */
#define CAN0_TMDATA12_DB7_Msk             (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA12_DB6_Pos             (16UL)                    /*!< DB6 (Bit 16) */
#define CAN0_TMDATA12_DB6_Msk             (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA12_DB5_Pos             (8UL)                     /*!< DB5 (Bit 8) */
#define CAN0_TMDATA12_DB5_Msk             (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN0_TMDATA12_DB4_Pos             (0UL)                     /*!< DB4 (Bit 0) */
#define CAN0_TMDATA12_DB4_Msk             (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =======================================================  RFIFOMI0  ======================================================== */
#define CAN0_RFIFOMI0_SFID_EFID_Pos       (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN0_RFIFOMI0_SFID_EFID_Msk       (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN0_RFIFOMI0_EFID_Pos            (3UL)                     /*!< EFID (Bit 3) */
#define CAN0_RFIFOMI0_EFID_Msk            (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN0_RFIFOMI0_FF_Pos              (2UL)                     /*!< FF (Bit 2) */
#define CAN0_RFIFOMI0_FF_Msk              (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN0_RFIFOMI0_FT_Pos              (1UL)                     /*!< FT (Bit 1) */
#define CAN0_RFIFOMI0_FT_Msk              (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
/* =======================================================  RFIFOMP0  ======================================================== */
#define CAN0_RFIFOMP0_TS_Pos              (16UL)                    /*!< TS (Bit 16) */
#define CAN0_RFIFOMP0_TS_Msk              (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN0_RFIFOMP0_FI_Pos              (8UL)                     /*!< FI (Bit 8) */
#define CAN0_RFIFOMP0_FI_Msk              (0xff00UL)                /*!< FI (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMP0_DLENC_Pos           (0UL)                     /*!< DLENC (Bit 0) */
#define CAN0_RFIFOMP0_DLENC_Msk           (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =====================================================  RFIFOMDATA00  ====================================================== */
#define CAN0_RFIFOMDATA00_DB3_Pos         (24UL)                    /*!< DB3 (Bit 24) */
#define CAN0_RFIFOMDATA00_DB3_Msk         (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA00_DB2_Pos         (16UL)                    /*!< DB2 (Bit 16) */
#define CAN0_RFIFOMDATA00_DB2_Msk         (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA00_DB1_Pos         (8UL)                     /*!< DB1 (Bit 8) */
#define CAN0_RFIFOMDATA00_DB1_Msk         (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA00_DB0_Pos         (0UL)                     /*!< DB0 (Bit 0) */
#define CAN0_RFIFOMDATA00_DB0_Msk         (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =====================================================  RFIFOMDATA10  ====================================================== */
#define CAN0_RFIFOMDATA10_DB7_Pos         (24UL)                    /*!< DB7 (Bit 24) */
#define CAN0_RFIFOMDATA10_DB7_Msk         (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA10_DB6_Pos         (16UL)                    /*!< DB6 (Bit 16) */
#define CAN0_RFIFOMDATA10_DB6_Msk         (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA10_DB5_Pos         (8UL)                     /*!< DB5 (Bit 8) */
#define CAN0_RFIFOMDATA10_DB5_Msk         (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA10_DB4_Pos         (0UL)                     /*!< DB4 (Bit 0) */
#define CAN0_RFIFOMDATA10_DB4_Msk         (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =======================================================  RFIFOMI1  ======================================================== */
#define CAN0_RFIFOMI1_SFID_EFID_Pos       (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN0_RFIFOMI1_SFID_EFID_Msk       (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN0_RFIFOMI1_EFID_Pos            (3UL)                     /*!< EFID (Bit 3) */
#define CAN0_RFIFOMI1_EFID_Msk            (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN0_RFIFOMI1_FF_Pos              (2UL)                     /*!< FF (Bit 2) */
#define CAN0_RFIFOMI1_FF_Msk              (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN0_RFIFOMI1_FT_Pos              (1UL)                     /*!< FT (Bit 1) */
#define CAN0_RFIFOMI1_FT_Msk              (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
/* =======================================================  RFIFOMP1  ======================================================== */
#define CAN0_RFIFOMP1_TS_Pos              (16UL)                    /*!< TS (Bit 16) */
#define CAN0_RFIFOMP1_TS_Msk              (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN0_RFIFOMP1_FI_Pos              (8UL)                     /*!< FI (Bit 8) */
#define CAN0_RFIFOMP1_FI_Msk              (0xff00UL)                /*!< FI (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMP1_DLENC_Pos           (0UL)                     /*!< DLENC (Bit 0) */
#define CAN0_RFIFOMP1_DLENC_Msk           (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =====================================================  RFIFOMDATA01  ====================================================== */
#define CAN0_RFIFOMDATA01_DB3_Pos         (24UL)                    /*!< DB3 (Bit 24) */
#define CAN0_RFIFOMDATA01_DB3_Msk         (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA01_DB2_Pos         (16UL)                    /*!< DB2 (Bit 16) */
#define CAN0_RFIFOMDATA01_DB2_Msk         (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA01_DB1_Pos         (8UL)                     /*!< DB1 (Bit 8) */
#define CAN0_RFIFOMDATA01_DB1_Msk         (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA01_DB0_Pos         (0UL)                     /*!< DB0 (Bit 0) */
#define CAN0_RFIFOMDATA01_DB0_Msk         (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =====================================================  RFIFOMDATA11  ====================================================== */
#define CAN0_RFIFOMDATA11_DB7_Pos         (24UL)                    /*!< DB7 (Bit 24) */
#define CAN0_RFIFOMDATA11_DB7_Msk         (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA11_DB6_Pos         (16UL)                    /*!< DB6 (Bit 16) */
#define CAN0_RFIFOMDATA11_DB6_Msk         (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA11_DB5_Pos         (8UL)                     /*!< DB5 (Bit 8) */
#define CAN0_RFIFOMDATA11_DB5_Msk         (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN0_RFIFOMDATA11_DB4_Pos         (0UL)                     /*!< DB4 (Bit 0) */
#define CAN0_RFIFOMDATA11_DB4_Msk         (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =========================================================  FCTL  ========================================================== */
#define CAN0_FCTL_HBC1F_Pos               (8UL)                     /*!< HBC1F (Bit 8) */
#define CAN0_FCTL_HBC1F_Msk               (0x3f00UL)                /*!< HBC1F (Bitfield-Mask: 0x3f) */
#define CAN0_FCTL_FLD_Pos                 (0UL)                     /*!< FLD (Bit 0) */
#define CAN0_FCTL_FLD_Msk                 (0x1UL)                   /*!< FLD (Bitfield-Mask: 0x01) */
/* =========================================================  FMCFG  ========================================================= */
/* =========================================================  FSCFG  ========================================================= */
/* ========================================================  FAFIFO  ========================================================= */
/* ==========================================================  FW  =========================================================== */
/* ========================================================  F0DATA0  ======================================================== */
/* ========================================================  F0DATA1  ======================================================== */
/* ========================================================  F1DATA0  ======================================================== */
/* ========================================================  F1DATA1  ======================================================== */
/* ========================================================  F2DATA0  ======================================================== */
/* ========================================================  F2DATA1  ======================================================== */
/* ========================================================  F3DATA0  ======================================================== */
/* ========================================================  F3DATA1  ======================================================== */
/* ========================================================  F4DATA0  ======================================================== */
/* ========================================================  F4DATA1  ======================================================== */
/* ========================================================  F5DATA0  ======================================================== */
/* ========================================================  F5DATA1  ======================================================== */
/* ========================================================  F6DATA0  ======================================================== */
/* ========================================================  F6DATA1  ======================================================== */
/* ========================================================  F7DATA0  ======================================================== */
/* ========================================================  F7DATA1  ======================================================== */
/* ========================================================  F8DATA0  ======================================================== */
/* ========================================================  F8DATA1  ======================================================== */
/* ========================================================  F9DATA0  ======================================================== */
/* ========================================================  F9DATA1  ======================================================== */
/* =======================================================  F10DATA0  ======================================================== */
/* =======================================================  F10DATA1  ======================================================== */
/* =======================================================  F11DATA0  ======================================================== */
/* =======================================================  F11DATA1  ======================================================== */
/* =======================================================  F12DATA0  ======================================================== */
/* =======================================================  F12DATA1  ======================================================== */
/* =======================================================  F13DATA0  ======================================================== */
/* =======================================================  F13DATA1  ======================================================== */
/* =======================================================  F14DATA0  ======================================================== */
/* =======================================================  F14DATA1  ======================================================== */
/* =======================================================  F15DATA0  ======================================================== */
/* =======================================================  F15DATA1  ======================================================== */
/* =======================================================  F16DATA0  ======================================================== */
/* =======================================================  F16DATA1  ======================================================== */
/* =======================================================  F17DATA0  ======================================================== */
/* =======================================================  F17DATA1  ======================================================== */
/* =======================================================  F18DATA0  ======================================================== */
/* =======================================================  F18DATA1  ======================================================== */
/* =======================================================  F19DATA0  ======================================================== */
/* =======================================================  F19DATA1  ======================================================== */
/* =======================================================  F20DATA0  ======================================================== */
/* =======================================================  F20DATA1  ======================================================== */
/* =======================================================  F21DATA0  ======================================================== */
/* =======================================================  F21DATA1  ======================================================== */
/* =======================================================  F22DATA0  ======================================================== */
/* =======================================================  F22DATA1  ======================================================== */
/* =======================================================  F23DATA0  ======================================================== */
/* =======================================================  F23DATA1  ======================================================== */
/* =======================================================  F24DATA0  ======================================================== */
/* =======================================================  F24DATA1  ======================================================== */
/* =======================================================  F25DATA0  ======================================================== */
/* =======================================================  F25DATA1  ======================================================== */
/* =======================================================  F26DATA0  ======================================================== */
/* =======================================================  F26DATA1  ======================================================== */
/* =======================================================  F27DATA0  ======================================================== */
/* =======================================================  F27DATA1  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           CAN1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define CAN1_CTL_DFZ_Pos                  (16UL)                    /*!< DFZ (Bit 16) */
#define CAN1_CTL_DFZ_Msk                  (0x10000UL)               /*!< DFZ (Bitfield-Mask: 0x01) */
#define CAN1_CTL_SWRST_Pos                (15UL)                    /*!< SWRST (Bit 15) */
#define CAN1_CTL_SWRST_Msk                (0x8000UL)                /*!< SWRST (Bitfield-Mask: 0x01) */
#define CAN1_CTL_TTC_Pos                  (7UL)                     /*!< TTC (Bit 7) */
#define CAN1_CTL_TTC_Msk                  (0x80UL)                  /*!< TTC (Bitfield-Mask: 0x01) */
#define CAN1_CTL_ABOR_Pos                 (6UL)                     /*!< ABOR (Bit 6) */
#define CAN1_CTL_ABOR_Msk                 (0x40UL)                  /*!< ABOR (Bitfield-Mask: 0x01) */
#define CAN1_CTL_AWU_Pos                  (5UL)                     /*!< AWU (Bit 5) */
#define CAN1_CTL_AWU_Msk                  (0x20UL)                  /*!< AWU (Bitfield-Mask: 0x01) */
#define CAN1_CTL_ARD_Pos                  (4UL)                     /*!< ARD (Bit 4) */
#define CAN1_CTL_ARD_Msk                  (0x10UL)                  /*!< ARD (Bitfield-Mask: 0x01) */
#define CAN1_CTL_RFOD_Pos                 (3UL)                     /*!< RFOD (Bit 3) */
#define CAN1_CTL_RFOD_Msk                 (0x8UL)                   /*!< RFOD (Bitfield-Mask: 0x01) */
#define CAN1_CTL_TFO_Pos                  (2UL)                     /*!< TFO (Bit 2) */
#define CAN1_CTL_TFO_Msk                  (0x4UL)                   /*!< TFO (Bitfield-Mask: 0x01) */
#define CAN1_CTL_SLPWMOD_Pos              (1UL)                     /*!< SLPWMOD (Bit 1) */
#define CAN1_CTL_SLPWMOD_Msk              (0x2UL)                   /*!< SLPWMOD (Bitfield-Mask: 0x01) */
#define CAN1_CTL_IWMOD_Pos                (0UL)                     /*!< IWMOD (Bit 0) */
#define CAN1_CTL_IWMOD_Msk                (0x1UL)                   /*!< IWMOD (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define CAN1_STAT_RXL_Pos                 (11UL)                    /*!< RXL (Bit 11) */
#define CAN1_STAT_RXL_Msk                 (0x800UL)                 /*!< RXL (Bitfield-Mask: 0x01) */
#define CAN1_STAT_LASTRX_Pos              (10UL)                    /*!< LASTRX (Bit 10) */
#define CAN1_STAT_LASTRX_Msk              (0x400UL)                 /*!< LASTRX (Bitfield-Mask: 0x01) */
#define CAN1_STAT_RS_Pos                  (9UL)                     /*!< RS (Bit 9) */
#define CAN1_STAT_RS_Msk                  (0x200UL)                 /*!< RS (Bitfield-Mask: 0x01) */
#define CAN1_STAT_TS_Pos                  (8UL)                     /*!< TS (Bit 8) */
#define CAN1_STAT_TS_Msk                  (0x100UL)                 /*!< TS (Bitfield-Mask: 0x01) */
#define CAN1_STAT_SLPIF_Pos               (4UL)                     /*!< SLPIF (Bit 4) */
#define CAN1_STAT_SLPIF_Msk               (0x10UL)                  /*!< SLPIF (Bitfield-Mask: 0x01) */
#define CAN1_STAT_WUIF_Pos                (3UL)                     /*!< WUIF (Bit 3) */
#define CAN1_STAT_WUIF_Msk                (0x8UL)                   /*!< WUIF (Bitfield-Mask: 0x01) */
#define CAN1_STAT_ERRIF_Pos               (2UL)                     /*!< ERRIF (Bit 2) */
#define CAN1_STAT_ERRIF_Msk               (0x4UL)                   /*!< ERRIF (Bitfield-Mask: 0x01) */
#define CAN1_STAT_SLPWS_Pos               (1UL)                     /*!< SLPWS (Bit 1) */
#define CAN1_STAT_SLPWS_Msk               (0x2UL)                   /*!< SLPWS (Bitfield-Mask: 0x01) */
#define CAN1_STAT_IWS_Pos                 (0UL)                     /*!< IWS (Bit 0) */
#define CAN1_STAT_IWS_Msk                 (0x1UL)                   /*!< IWS (Bitfield-Mask: 0x01) */
/* =========================================================  TSTAT  ========================================================= */
#define CAN1_TSTAT_TMLS2_Pos              (31UL)                    /*!< TMLS2 (Bit 31) */
#define CAN1_TSTAT_TMLS2_Msk              (0x80000000UL)            /*!< TMLS2 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_TMLS1_Pos              (30UL)                    /*!< TMLS1 (Bit 30) */
#define CAN1_TSTAT_TMLS1_Msk              (0x40000000UL)            /*!< TMLS1 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_TMLS0_Pos              (29UL)                    /*!< TMLS0 (Bit 29) */
#define CAN1_TSTAT_TMLS0_Msk              (0x20000000UL)            /*!< TMLS0 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_TME2_Pos               (28UL)                    /*!< TME2 (Bit 28) */
#define CAN1_TSTAT_TME2_Msk               (0x10000000UL)            /*!< TME2 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_TME1_Pos               (27UL)                    /*!< TME1 (Bit 27) */
#define CAN1_TSTAT_TME1_Msk               (0x8000000UL)             /*!< TME1 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_TME0_Pos               (26UL)                    /*!< TME0 (Bit 26) */
#define CAN1_TSTAT_TME0_Msk               (0x4000000UL)             /*!< TME0 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_NUM_Pos                (24UL)                    /*!< NUM (Bit 24) */
#define CAN1_TSTAT_NUM_Msk                (0x3000000UL)             /*!< NUM (Bitfield-Mask: 0x03) */
#define CAN1_TSTAT_MST2_Pos               (23UL)                    /*!< MST2 (Bit 23) */
#define CAN1_TSTAT_MST2_Msk               (0x800000UL)              /*!< MST2 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MTE2_Pos               (19UL)                    /*!< MTE2 (Bit 19) */
#define CAN1_TSTAT_MTE2_Msk               (0x80000UL)               /*!< MTE2 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MAL2_Pos               (18UL)                    /*!< MAL2 (Bit 18) */
#define CAN1_TSTAT_MAL2_Msk               (0x40000UL)               /*!< MAL2 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MTFNERR2_Pos           (17UL)                    /*!< MTFNERR2 (Bit 17) */
#define CAN1_TSTAT_MTFNERR2_Msk           (0x20000UL)               /*!< MTFNERR2 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MTF2_Pos               (16UL)                    /*!< MTF2 (Bit 16) */
#define CAN1_TSTAT_MTF2_Msk               (0x10000UL)               /*!< MTF2 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MST1_Pos               (15UL)                    /*!< MST1 (Bit 15) */
#define CAN1_TSTAT_MST1_Msk               (0x8000UL)                /*!< MST1 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MTE1_Pos               (11UL)                    /*!< MTE1 (Bit 11) */
#define CAN1_TSTAT_MTE1_Msk               (0x800UL)                 /*!< MTE1 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MAL1_Pos               (10UL)                    /*!< MAL1 (Bit 10) */
#define CAN1_TSTAT_MAL1_Msk               (0x400UL)                 /*!< MAL1 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MTFNERR1_Pos           (9UL)                     /*!< MTFNERR1 (Bit 9) */
#define CAN1_TSTAT_MTFNERR1_Msk           (0x200UL)                 /*!< MTFNERR1 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MTF1_Pos               (8UL)                     /*!< MTF1 (Bit 8) */
#define CAN1_TSTAT_MTF1_Msk               (0x100UL)                 /*!< MTF1 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MST0_Pos               (7UL)                     /*!< MST0 (Bit 7) */
#define CAN1_TSTAT_MST0_Msk               (0x80UL)                  /*!< MST0 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MTE0_Pos               (3UL)                     /*!< MTE0 (Bit 3) */
#define CAN1_TSTAT_MTE0_Msk               (0x8UL)                   /*!< MTE0 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MAL0_Pos               (2UL)                     /*!< MAL0 (Bit 2) */
#define CAN1_TSTAT_MAL0_Msk               (0x4UL)                   /*!< MAL0 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MTFNERR0_Pos           (1UL)                     /*!< MTFNERR0 (Bit 1) */
#define CAN1_TSTAT_MTFNERR0_Msk           (0x2UL)                   /*!< MTFNERR0 (Bitfield-Mask: 0x01) */
#define CAN1_TSTAT_MTF0_Pos               (0UL)                     /*!< MTF0 (Bit 0) */
#define CAN1_TSTAT_MTF0_Msk               (0x1UL)                   /*!< MTF0 (Bitfield-Mask: 0x01) */
/* ========================================================  RFIFO0  ========================================================= */
#define CAN1_RFIFO0_RFD0_Pos              (5UL)                     /*!< RFD0 (Bit 5) */
#define CAN1_RFIFO0_RFD0_Msk              (0x20UL)                  /*!< RFD0 (Bitfield-Mask: 0x01) */
#define CAN1_RFIFO0_RFO0_Pos              (4UL)                     /*!< RFO0 (Bit 4) */
#define CAN1_RFIFO0_RFO0_Msk              (0x10UL)                  /*!< RFO0 (Bitfield-Mask: 0x01) */
#define CAN1_RFIFO0_RFF0_Pos              (3UL)                     /*!< RFF0 (Bit 3) */
#define CAN1_RFIFO0_RFF0_Msk              (0x8UL)                   /*!< RFF0 (Bitfield-Mask: 0x01) */
#define CAN1_RFIFO0_RFL0_Pos              (0UL)                     /*!< RFL0 (Bit 0) */
#define CAN1_RFIFO0_RFL0_Msk              (0x3UL)                   /*!< RFL0 (Bitfield-Mask: 0x03) */
/* ========================================================  RFIFO1  ========================================================= */
#define CAN1_RFIFO1_RFD1_Pos              (5UL)                     /*!< RFD1 (Bit 5) */
#define CAN1_RFIFO1_RFD1_Msk              (0x20UL)                  /*!< RFD1 (Bitfield-Mask: 0x01) */
#define CAN1_RFIFO1_RFO1_Pos              (4UL)                     /*!< RFO1 (Bit 4) */
#define CAN1_RFIFO1_RFO1_Msk              (0x10UL)                  /*!< RFO1 (Bitfield-Mask: 0x01) */
#define CAN1_RFIFO1_RFF1_Pos              (3UL)                     /*!< RFF1 (Bit 3) */
#define CAN1_RFIFO1_RFF1_Msk              (0x8UL)                   /*!< RFF1 (Bitfield-Mask: 0x01) */
#define CAN1_RFIFO1_RFL1_Pos              (0UL)                     /*!< RFL1 (Bit 0) */
#define CAN1_RFIFO1_RFL1_Msk              (0x3UL)                   /*!< RFL1 (Bitfield-Mask: 0x03) */
/* =========================================================  INTEN  ========================================================= */
#define CAN1_INTEN_SLPWIE_Pos             (17UL)                    /*!< SLPWIE (Bit 17) */
#define CAN1_INTEN_SLPWIE_Msk             (0x20000UL)               /*!< SLPWIE (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_WIE_Pos                (16UL)                    /*!< WIE (Bit 16) */
#define CAN1_INTEN_WIE_Msk                (0x10000UL)               /*!< WIE (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_ERRIE_Pos              (15UL)                    /*!< ERRIE (Bit 15) */
#define CAN1_INTEN_ERRIE_Msk              (0x8000UL)                /*!< ERRIE (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_ERRNIE_Pos             (11UL)                    /*!< ERRNIE (Bit 11) */
#define CAN1_INTEN_ERRNIE_Msk             (0x800UL)                 /*!< ERRNIE (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_BOIE_Pos               (10UL)                    /*!< BOIE (Bit 10) */
#define CAN1_INTEN_BOIE_Msk               (0x400UL)                 /*!< BOIE (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_PERRIE_Pos             (9UL)                     /*!< PERRIE (Bit 9) */
#define CAN1_INTEN_PERRIE_Msk             (0x200UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_WERRIE_Pos             (8UL)                     /*!< WERRIE (Bit 8) */
#define CAN1_INTEN_WERRIE_Msk             (0x100UL)                 /*!< WERRIE (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_RFOIE1_Pos             (6UL)                     /*!< RFOIE1 (Bit 6) */
#define CAN1_INTEN_RFOIE1_Msk             (0x40UL)                  /*!< RFOIE1 (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_RFFIE1_Pos             (5UL)                     /*!< RFFIE1 (Bit 5) */
#define CAN1_INTEN_RFFIE1_Msk             (0x20UL)                  /*!< RFFIE1 (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_RFNEIE1_Pos            (4UL)                     /*!< RFNEIE1 (Bit 4) */
#define CAN1_INTEN_RFNEIE1_Msk            (0x10UL)                  /*!< RFNEIE1 (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_RFOIE0_Pos             (3UL)                     /*!< RFOIE0 (Bit 3) */
#define CAN1_INTEN_RFOIE0_Msk             (0x8UL)                   /*!< RFOIE0 (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_RFFIE0_Pos             (2UL)                     /*!< RFFIE0 (Bit 2) */
#define CAN1_INTEN_RFFIE0_Msk             (0x4UL)                   /*!< RFFIE0 (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_RFNEIE0_Pos            (1UL)                     /*!< RFNEIE0 (Bit 1) */
#define CAN1_INTEN_RFNEIE0_Msk            (0x2UL)                   /*!< RFNEIE0 (Bitfield-Mask: 0x01) */
#define CAN1_INTEN_TMEIE_Pos              (0UL)                     /*!< TMEIE (Bit 0) */
#define CAN1_INTEN_TMEIE_Msk              (0x1UL)                   /*!< TMEIE (Bitfield-Mask: 0x01) */
/* ==========================================================  ERR  ========================================================== */
#define CAN1_ERR_RECNT_Pos                (24UL)                    /*!< RECNT (Bit 24) */
#define CAN1_ERR_RECNT_Msk                (0xff000000UL)            /*!< RECNT (Bitfield-Mask: 0xff) */
#define CAN1_ERR_TECNT_Pos                (16UL)                    /*!< TECNT (Bit 16) */
#define CAN1_ERR_TECNT_Msk                (0xff0000UL)              /*!< TECNT (Bitfield-Mask: 0xff) */
#define CAN1_ERR_ERRN_Pos                 (4UL)                     /*!< ERRN (Bit 4) */
#define CAN1_ERR_ERRN_Msk                 (0x70UL)                  /*!< ERRN (Bitfield-Mask: 0x07) */
#define CAN1_ERR_BOERR_Pos                (2UL)                     /*!< BOERR (Bit 2) */
#define CAN1_ERR_BOERR_Msk                (0x4UL)                   /*!< BOERR (Bitfield-Mask: 0x01) */
#define CAN1_ERR_PERR_Pos                 (1UL)                     /*!< PERR (Bit 1) */
#define CAN1_ERR_PERR_Msk                 (0x2UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
#define CAN1_ERR_WERR_Pos                 (0UL)                     /*!< WERR (Bit 0) */
#define CAN1_ERR_WERR_Msk                 (0x1UL)                   /*!< WERR (Bitfield-Mask: 0x01) */
/* ==========================================================  BT  =========================================================== */
#define CAN1_BT_SCMOD_Pos                 (31UL)                    /*!< SCMOD (Bit 31) */
#define CAN1_BT_SCMOD_Msk                 (0x80000000UL)            /*!< SCMOD (Bitfield-Mask: 0x01) */
#define CAN1_BT_LCMOD_Pos                 (30UL)                    /*!< LCMOD (Bit 30) */
#define CAN1_BT_LCMOD_Msk                 (0x40000000UL)            /*!< LCMOD (Bitfield-Mask: 0x01) */
#define CAN1_BT_SJW_Pos                   (24UL)                    /*!< SJW (Bit 24) */
#define CAN1_BT_SJW_Msk                   (0x3000000UL)             /*!< SJW (Bitfield-Mask: 0x03) */
#define CAN1_BT_BS2_Pos                   (20UL)                    /*!< BS2 (Bit 20) */
#define CAN1_BT_BS2_Msk                   (0x700000UL)              /*!< BS2 (Bitfield-Mask: 0x07) */
#define CAN1_BT_BS1_Pos                   (16UL)                    /*!< BS1 (Bit 16) */
#define CAN1_BT_BS1_Msk                   (0xf0000UL)               /*!< BS1 (Bitfield-Mask: 0x0f) */
#define CAN1_BT_BUADPSC_Pos               (0UL)                     /*!< BUADPSC (Bit 0) */
#define CAN1_BT_BUADPSC_Msk               (0x3ffUL)                 /*!< BUADPSC (Bitfield-Mask: 0x3ff) */
/* =========================================================  TMI0  ========================================================== */
#define CAN1_TMI0_SFID_EFID_Pos           (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN1_TMI0_SFID_EFID_Msk           (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN1_TMI0_EFID_Pos                (3UL)                     /*!< EFID (Bit 3) */
#define CAN1_TMI0_EFID_Msk                (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN1_TMI0_FF_Pos                  (2UL)                     /*!< FF (Bit 2) */
#define CAN1_TMI0_FF_Msk                  (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN1_TMI0_FT_Pos                  (1UL)                     /*!< FT (Bit 1) */
#define CAN1_TMI0_FT_Msk                  (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
#define CAN1_TMI0_TEN_Pos                 (0UL)                     /*!< TEN (Bit 0) */
#define CAN1_TMI0_TEN_Msk                 (0x1UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
/* =========================================================  TMP0  ========================================================== */
#define CAN1_TMP0_TS_Pos                  (16UL)                    /*!< TS (Bit 16) */
#define CAN1_TMP0_TS_Msk                  (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN1_TMP0_TSEN_Pos                (8UL)                     /*!< TSEN (Bit 8) */
#define CAN1_TMP0_TSEN_Msk                (0x100UL)                 /*!< TSEN (Bitfield-Mask: 0x01) */
#define CAN1_TMP0_DLENC_Pos               (0UL)                     /*!< DLENC (Bit 0) */
#define CAN1_TMP0_DLENC_Msk               (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =======================================================  TMDATA00  ======================================================== */
#define CAN1_TMDATA00_DB3_Pos             (24UL)                    /*!< DB3 (Bit 24) */
#define CAN1_TMDATA00_DB3_Msk             (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA00_DB2_Pos             (16UL)                    /*!< DB2 (Bit 16) */
#define CAN1_TMDATA00_DB2_Msk             (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA00_DB1_Pos             (8UL)                     /*!< DB1 (Bit 8) */
#define CAN1_TMDATA00_DB1_Msk             (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA00_DB0_Pos             (0UL)                     /*!< DB0 (Bit 0) */
#define CAN1_TMDATA00_DB0_Msk             (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =======================================================  TMDATA10  ======================================================== */
#define CAN1_TMDATA10_DB7_Pos             (24UL)                    /*!< DB7 (Bit 24) */
#define CAN1_TMDATA10_DB7_Msk             (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA10_DB6_Pos             (16UL)                    /*!< DB6 (Bit 16) */
#define CAN1_TMDATA10_DB6_Msk             (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA10_DB5_Pos             (8UL)                     /*!< DB5 (Bit 8) */
#define CAN1_TMDATA10_DB5_Msk             (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA10_DB4_Pos             (0UL)                     /*!< DB4 (Bit 0) */
#define CAN1_TMDATA10_DB4_Msk             (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =========================================================  TMI1  ========================================================== */
#define CAN1_TMI1_SFID_EFID_Pos           (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN1_TMI1_SFID_EFID_Msk           (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN1_TMI1_EFID_Pos                (3UL)                     /*!< EFID (Bit 3) */
#define CAN1_TMI1_EFID_Msk                (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN1_TMI1_FF_Pos                  (2UL)                     /*!< FF (Bit 2) */
#define CAN1_TMI1_FF_Msk                  (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN1_TMI1_FT_Pos                  (1UL)                     /*!< FT (Bit 1) */
#define CAN1_TMI1_FT_Msk                  (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
#define CAN1_TMI1_TEN_Pos                 (0UL)                     /*!< TEN (Bit 0) */
#define CAN1_TMI1_TEN_Msk                 (0x1UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
/* =========================================================  TMP1  ========================================================== */
#define CAN1_TMP1_TS_Pos                  (16UL)                    /*!< TS (Bit 16) */
#define CAN1_TMP1_TS_Msk                  (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN1_TMP1_TSEN_Pos                (8UL)                     /*!< TSEN (Bit 8) */
#define CAN1_TMP1_TSEN_Msk                (0x100UL)                 /*!< TSEN (Bitfield-Mask: 0x01) */
#define CAN1_TMP1_DLENC_Pos               (0UL)                     /*!< DLENC (Bit 0) */
#define CAN1_TMP1_DLENC_Msk               (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =======================================================  TMDATA01  ======================================================== */
#define CAN1_TMDATA01_DB3_Pos             (24UL)                    /*!< DB3 (Bit 24) */
#define CAN1_TMDATA01_DB3_Msk             (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA01_DB2_Pos             (16UL)                    /*!< DB2 (Bit 16) */
#define CAN1_TMDATA01_DB2_Msk             (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA01_DB1_Pos             (8UL)                     /*!< DB1 (Bit 8) */
#define CAN1_TMDATA01_DB1_Msk             (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA01_DB0_Pos             (0UL)                     /*!< DB0 (Bit 0) */
#define CAN1_TMDATA01_DB0_Msk             (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =======================================================  TMDATA11  ======================================================== */
#define CAN1_TMDATA11_DB7_Pos             (24UL)                    /*!< DB7 (Bit 24) */
#define CAN1_TMDATA11_DB7_Msk             (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA11_DB6_Pos             (16UL)                    /*!< DB6 (Bit 16) */
#define CAN1_TMDATA11_DB6_Msk             (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA11_DB5_Pos             (8UL)                     /*!< DB5 (Bit 8) */
#define CAN1_TMDATA11_DB5_Msk             (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA11_DB4_Pos             (0UL)                     /*!< DB4 (Bit 0) */
#define CAN1_TMDATA11_DB4_Msk             (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =========================================================  TMI2  ========================================================== */
#define CAN1_TMI2_SFID_EFID_Pos           (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN1_TMI2_SFID_EFID_Msk           (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN1_TMI2_EFID_Pos                (3UL)                     /*!< EFID (Bit 3) */
#define CAN1_TMI2_EFID_Msk                (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN1_TMI2_FF_Pos                  (2UL)                     /*!< FF (Bit 2) */
#define CAN1_TMI2_FF_Msk                  (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN1_TMI2_FT_Pos                  (1UL)                     /*!< FT (Bit 1) */
#define CAN1_TMI2_FT_Msk                  (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
#define CAN1_TMI2_TEN_Pos                 (0UL)                     /*!< TEN (Bit 0) */
#define CAN1_TMI2_TEN_Msk                 (0x1UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
/* =========================================================  TMP2  ========================================================== */
#define CAN1_TMP2_TS_Pos                  (16UL)                    /*!< TS (Bit 16) */
#define CAN1_TMP2_TS_Msk                  (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN1_TMP2_TSEN_Pos                (8UL)                     /*!< TSEN (Bit 8) */
#define CAN1_TMP2_TSEN_Msk                (0x100UL)                 /*!< TSEN (Bitfield-Mask: 0x01) */
#define CAN1_TMP2_DLENC_Pos               (0UL)                     /*!< DLENC (Bit 0) */
#define CAN1_TMP2_DLENC_Msk               (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =======================================================  TMDATA02  ======================================================== */
#define CAN1_TMDATA02_DB3_Pos             (24UL)                    /*!< DB3 (Bit 24) */
#define CAN1_TMDATA02_DB3_Msk             (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA02_DB2_Pos             (16UL)                    /*!< DB2 (Bit 16) */
#define CAN1_TMDATA02_DB2_Msk             (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA02_DB1_Pos             (8UL)                     /*!< DB1 (Bit 8) */
#define CAN1_TMDATA02_DB1_Msk             (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA02_DB0_Pos             (0UL)                     /*!< DB0 (Bit 0) */
#define CAN1_TMDATA02_DB0_Msk             (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =======================================================  TMDATA12  ======================================================== */
#define CAN1_TMDATA12_DB7_Pos             (24UL)                    /*!< DB7 (Bit 24) */
#define CAN1_TMDATA12_DB7_Msk             (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA12_DB6_Pos             (16UL)                    /*!< DB6 (Bit 16) */
#define CAN1_TMDATA12_DB6_Msk             (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA12_DB5_Pos             (8UL)                     /*!< DB5 (Bit 8) */
#define CAN1_TMDATA12_DB5_Msk             (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN1_TMDATA12_DB4_Pos             (0UL)                     /*!< DB4 (Bit 0) */
#define CAN1_TMDATA12_DB4_Msk             (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =======================================================  RFIFOMI0  ======================================================== */
#define CAN1_RFIFOMI0_SFID_EFID_Pos       (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN1_RFIFOMI0_SFID_EFID_Msk       (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN1_RFIFOMI0_EFID_Pos            (3UL)                     /*!< EFID (Bit 3) */
#define CAN1_RFIFOMI0_EFID_Msk            (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN1_RFIFOMI0_FF_Pos              (2UL)                     /*!< FF (Bit 2) */
#define CAN1_RFIFOMI0_FF_Msk              (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN1_RFIFOMI0_FT_Pos              (1UL)                     /*!< FT (Bit 1) */
#define CAN1_RFIFOMI0_FT_Msk              (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
/* =======================================================  RFIFOMP0  ======================================================== */
#define CAN1_RFIFOMP0_TS_Pos              (16UL)                    /*!< TS (Bit 16) */
#define CAN1_RFIFOMP0_TS_Msk              (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN1_RFIFOMP0_FI_Pos              (8UL)                     /*!< FI (Bit 8) */
#define CAN1_RFIFOMP0_FI_Msk              (0xff00UL)                /*!< FI (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMP0_DLENC_Pos           (0UL)                     /*!< DLENC (Bit 0) */
#define CAN1_RFIFOMP0_DLENC_Msk           (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =====================================================  RFIFOMDATA00  ====================================================== */
#define CAN1_RFIFOMDATA00_DB3_Pos         (24UL)                    /*!< DB3 (Bit 24) */
#define CAN1_RFIFOMDATA00_DB3_Msk         (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA00_DB2_Pos         (16UL)                    /*!< DB2 (Bit 16) */
#define CAN1_RFIFOMDATA00_DB2_Msk         (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA00_DB1_Pos         (8UL)                     /*!< DB1 (Bit 8) */
#define CAN1_RFIFOMDATA00_DB1_Msk         (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA00_DB0_Pos         (0UL)                     /*!< DB0 (Bit 0) */
#define CAN1_RFIFOMDATA00_DB0_Msk         (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =====================================================  RFIFOMDATA10  ====================================================== */
#define CAN1_RFIFOMDATA10_DB7_Pos         (24UL)                    /*!< DB7 (Bit 24) */
#define CAN1_RFIFOMDATA10_DB7_Msk         (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA10_DB6_Pos         (16UL)                    /*!< DB6 (Bit 16) */
#define CAN1_RFIFOMDATA10_DB6_Msk         (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA10_DB5_Pos         (8UL)                     /*!< DB5 (Bit 8) */
#define CAN1_RFIFOMDATA10_DB5_Msk         (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA10_DB4_Pos         (0UL)                     /*!< DB4 (Bit 0) */
#define CAN1_RFIFOMDATA10_DB4_Msk         (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =======================================================  RFIFOMI1  ======================================================== */
#define CAN1_RFIFOMI1_SFID_EFID_Pos       (21UL)                    /*!< SFID_EFID (Bit 21) */
#define CAN1_RFIFOMI1_SFID_EFID_Msk       (0xffe00000UL)            /*!< SFID_EFID (Bitfield-Mask: 0x7ff) */
#define CAN1_RFIFOMI1_EFID_Pos            (3UL)                     /*!< EFID (Bit 3) */
#define CAN1_RFIFOMI1_EFID_Msk            (0x1ffff8UL)              /*!< EFID (Bitfield-Mask: 0x3ffff) */
#define CAN1_RFIFOMI1_FF_Pos              (2UL)                     /*!< FF (Bit 2) */
#define CAN1_RFIFOMI1_FF_Msk              (0x4UL)                   /*!< FF (Bitfield-Mask: 0x01) */
#define CAN1_RFIFOMI1_FT_Pos              (1UL)                     /*!< FT (Bit 1) */
#define CAN1_RFIFOMI1_FT_Msk              (0x2UL)                   /*!< FT (Bitfield-Mask: 0x01) */
/* =======================================================  RFIFOMP1  ======================================================== */
#define CAN1_RFIFOMP1_TS_Pos              (16UL)                    /*!< TS (Bit 16) */
#define CAN1_RFIFOMP1_TS_Msk              (0xffff0000UL)            /*!< TS (Bitfield-Mask: 0xffff) */
#define CAN1_RFIFOMP1_FI_Pos              (8UL)                     /*!< FI (Bit 8) */
#define CAN1_RFIFOMP1_FI_Msk              (0xff00UL)                /*!< FI (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMP1_DLENC_Pos           (0UL)                     /*!< DLENC (Bit 0) */
#define CAN1_RFIFOMP1_DLENC_Msk           (0xfUL)                   /*!< DLENC (Bitfield-Mask: 0x0f) */
/* =====================================================  RFIFOMDATA01  ====================================================== */
#define CAN1_RFIFOMDATA01_DB3_Pos         (24UL)                    /*!< DB3 (Bit 24) */
#define CAN1_RFIFOMDATA01_DB3_Msk         (0xff000000UL)            /*!< DB3 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA01_DB2_Pos         (16UL)                    /*!< DB2 (Bit 16) */
#define CAN1_RFIFOMDATA01_DB2_Msk         (0xff0000UL)              /*!< DB2 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA01_DB1_Pos         (8UL)                     /*!< DB1 (Bit 8) */
#define CAN1_RFIFOMDATA01_DB1_Msk         (0xff00UL)                /*!< DB1 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA01_DB0_Pos         (0UL)                     /*!< DB0 (Bit 0) */
#define CAN1_RFIFOMDATA01_DB0_Msk         (0xffUL)                  /*!< DB0 (Bitfield-Mask: 0xff) */
/* =====================================================  RFIFOMDATA11  ====================================================== */
#define CAN1_RFIFOMDATA11_DB7_Pos         (24UL)                    /*!< DB7 (Bit 24) */
#define CAN1_RFIFOMDATA11_DB7_Msk         (0xff000000UL)            /*!< DB7 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA11_DB6_Pos         (16UL)                    /*!< DB6 (Bit 16) */
#define CAN1_RFIFOMDATA11_DB6_Msk         (0xff0000UL)              /*!< DB6 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA11_DB5_Pos         (8UL)                     /*!< DB5 (Bit 8) */
#define CAN1_RFIFOMDATA11_DB5_Msk         (0xff00UL)                /*!< DB5 (Bitfield-Mask: 0xff) */
#define CAN1_RFIFOMDATA11_DB4_Pos         (0UL)                     /*!< DB4 (Bit 0) */
#define CAN1_RFIFOMDATA11_DB4_Msk         (0xffUL)                  /*!< DB4 (Bitfield-Mask: 0xff) */
/* =========================================================  FCTL  ========================================================== */
#define CAN1_FCTL_HBC1F_Pos               (8UL)                     /*!< HBC1F (Bit 8) */
#define CAN1_FCTL_HBC1F_Msk               (0x3f00UL)                /*!< HBC1F (Bitfield-Mask: 0x3f) */
#define CAN1_FCTL_FLD_Pos                 (0UL)                     /*!< FLD (Bit 0) */
#define CAN1_FCTL_FLD_Msk                 (0x1UL)                   /*!< FLD (Bitfield-Mask: 0x01) */
/* =========================================================  FMCFG  ========================================================= */
/* =========================================================  FSCFG  ========================================================= */
/* ========================================================  FAFIFO  ========================================================= */
/* ==========================================================  FW  =========================================================== */
/* ========================================================  F0DATA0  ======================================================== */
/* ========================================================  F0DATA1  ======================================================== */
/* ========================================================  F1DATA0  ======================================================== */
/* ========================================================  F1DATA1  ======================================================== */
/* ========================================================  F2DATA0  ======================================================== */
/* ========================================================  F2DATA1  ======================================================== */
/* ========================================================  F3DATA0  ======================================================== */
/* ========================================================  F3DATA1  ======================================================== */
/* ========================================================  F4DATA0  ======================================================== */
/* ========================================================  F4DATA1  ======================================================== */
/* ========================================================  F5DATA0  ======================================================== */
/* ========================================================  F5DATA1  ======================================================== */
/* ========================================================  F6DATA0  ======================================================== */
/* ========================================================  F6DATA1  ======================================================== */
/* ========================================================  F7DATA0  ======================================================== */
/* ========================================================  F7DATA1  ======================================================== */
/* ========================================================  F8DATA0  ======================================================== */
/* ========================================================  F8DATA1  ======================================================== */
/* ========================================================  F9DATA0  ======================================================== */
/* ========================================================  F9DATA1  ======================================================== */
/* =======================================================  F10DATA0  ======================================================== */
/* =======================================================  F10DATA1  ======================================================== */
/* =======================================================  F11DATA0  ======================================================== */
/* =======================================================  F11DATA1  ======================================================== */
/* =======================================================  F12DATA0  ======================================================== */
/* =======================================================  F12DATA1  ======================================================== */
/* =======================================================  F13DATA0  ======================================================== */
/* =======================================================  F13DATA1  ======================================================== */
/* =======================================================  F14DATA0  ======================================================== */
/* =======================================================  F14DATA1  ======================================================== */
/* =======================================================  F15DATA0  ======================================================== */
/* =======================================================  F15DATA1  ======================================================== */
/* =======================================================  F16DATA0  ======================================================== */
/* =======================================================  F16DATA1  ======================================================== */
/* =======================================================  F17DATA0  ======================================================== */
/* =======================================================  F17DATA1  ======================================================== */
/* =======================================================  F18DATA0  ======================================================== */
/* =======================================================  F18DATA1  ======================================================== */
/* =======================================================  F19DATA0  ======================================================== */
/* =======================================================  F19DATA1  ======================================================== */
/* =======================================================  F20DATA0  ======================================================== */
/* =======================================================  F20DATA1  ======================================================== */
/* =======================================================  F21DATA0  ======================================================== */
/* =======================================================  F21DATA1  ======================================================== */
/* =======================================================  F22DATA0  ======================================================== */
/* =======================================================  F22DATA1  ======================================================== */
/* =======================================================  F23DATA0  ======================================================== */
/* =======================================================  F23DATA1  ======================================================== */
/* =======================================================  F24DATA0  ======================================================== */
/* =======================================================  F24DATA1  ======================================================== */
/* =======================================================  F25DATA0  ======================================================== */
/* =======================================================  F25DATA1  ======================================================== */
/* =======================================================  F26DATA0  ======================================================== */
/* =======================================================  F26DATA1  ======================================================== */
/* =======================================================  F27DATA0  ======================================================== */
/* =======================================================  F27DATA1  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DATA  ========================================================== */
#define CRC_DATA_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define CRC_DATA_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  FDATA  ========================================================= */
#define CRC_FDATA_FDATA_Pos               (0UL)                     /*!< FDATA (Bit 0) */
#define CRC_FDATA_FDATA_Msk               (0xffUL)                  /*!< FDATA (Bitfield-Mask: 0xff) */
/* ==========================================================  CTL  ========================================================== */
#define CRC_CTL_RST_Pos                   (0UL)                     /*!< RST (Bit 0) */
#define CRC_CTL_RST_Msk                   (0x1UL)                   /*!< RST (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                            CTC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define CTC_CTL0_CKOKIE_Pos               (0UL)                     /*!< CKOKIE (Bit 0) */
#define CTC_CTL0_CKOKIE_Msk               (0x1UL)                   /*!< CKOKIE (Bitfield-Mask: 0x01) */
#define CTC_CTL0_CKWARNIE_Pos             (1UL)                     /*!< CKWARNIE (Bit 1) */
#define CTC_CTL0_CKWARNIE_Msk             (0x2UL)                   /*!< CKWARNIE (Bitfield-Mask: 0x01) */
#define CTC_CTL0_ERRIE_Pos                (2UL)                     /*!< ERRIE (Bit 2) */
#define CTC_CTL0_ERRIE_Msk                (0x4UL)                   /*!< ERRIE (Bitfield-Mask: 0x01) */
#define CTC_CTL0_EREFIE_Pos               (3UL)                     /*!< EREFIE (Bit 3) */
#define CTC_CTL0_EREFIE_Msk               (0x8UL)                   /*!< EREFIE (Bitfield-Mask: 0x01) */
#define CTC_CTL0_CNTEN_Pos                (5UL)                     /*!< CNTEN (Bit 5) */
#define CTC_CTL0_CNTEN_Msk                (0x20UL)                  /*!< CNTEN (Bitfield-Mask: 0x01) */
#define CTC_CTL0_AUTOTRIM_Pos             (6UL)                     /*!< AUTOTRIM (Bit 6) */
#define CTC_CTL0_AUTOTRIM_Msk             (0x40UL)                  /*!< AUTOTRIM (Bitfield-Mask: 0x01) */
#define CTC_CTL0_SWREFPUL_Pos             (7UL)                     /*!< SWREFPUL (Bit 7) */
#define CTC_CTL0_SWREFPUL_Msk             (0x80UL)                  /*!< SWREFPUL (Bitfield-Mask: 0x01) */
#define CTC_CTL0_TRIMVALUE_Pos            (8UL)                     /*!< TRIMVALUE (Bit 8) */
#define CTC_CTL0_TRIMVALUE_Msk            (0x3f00UL)                /*!< TRIMVALUE (Bitfield-Mask: 0x3f) */
/* =========================================================  CTL1  ========================================================== */
#define CTC_CTL1_REFPOL_Pos               (31UL)                    /*!< REFPOL (Bit 31) */
#define CTC_CTL1_REFPOL_Msk               (0x80000000UL)            /*!< REFPOL (Bitfield-Mask: 0x01) */
#define CTC_CTL1_USBSOFSEL_Pos            (30UL)                    /*!< USBSOFSEL (Bit 30) */
#define CTC_CTL1_USBSOFSEL_Msk            (0x40000000UL)            /*!< USBSOFSEL (Bitfield-Mask: 0x01) */
#define CTC_CTL1_REFSEL_Pos               (28UL)                    /*!< REFSEL (Bit 28) */
#define CTC_CTL1_REFSEL_Msk               (0x30000000UL)            /*!< REFSEL (Bitfield-Mask: 0x03) */
#define CTC_CTL1_REFPSC_Pos               (24UL)                    /*!< REFPSC (Bit 24) */
#define CTC_CTL1_REFPSC_Msk               (0x7000000UL)             /*!< REFPSC (Bitfield-Mask: 0x07) */
#define CTC_CTL1_CKLIM_Pos                (16UL)                    /*!< CKLIM (Bit 16) */
#define CTC_CTL1_CKLIM_Msk                (0xff0000UL)              /*!< CKLIM (Bitfield-Mask: 0xff) */
#define CTC_CTL1_RLVALUE_Pos              (0UL)                     /*!< RLVALUE (Bit 0) */
#define CTC_CTL1_RLVALUE_Msk              (0xffffUL)                /*!< RLVALUE (Bitfield-Mask: 0xffff) */
/* =========================================================  STAT  ========================================================== */
#define CTC_STAT_CKOKIF_Pos               (0UL)                     /*!< CKOKIF (Bit 0) */
#define CTC_STAT_CKOKIF_Msk               (0x1UL)                   /*!< CKOKIF (Bitfield-Mask: 0x01) */
#define CTC_STAT_CKWARNIF_Pos             (1UL)                     /*!< CKWARNIF (Bit 1) */
#define CTC_STAT_CKWARNIF_Msk             (0x2UL)                   /*!< CKWARNIF (Bitfield-Mask: 0x01) */
#define CTC_STAT_ERRIF_Pos                (2UL)                     /*!< ERRIF (Bit 2) */
#define CTC_STAT_ERRIF_Msk                (0x4UL)                   /*!< ERRIF (Bitfield-Mask: 0x01) */
#define CTC_STAT_EREFIF_Pos               (3UL)                     /*!< EREFIF (Bit 3) */
#define CTC_STAT_EREFIF_Msk               (0x8UL)                   /*!< EREFIF (Bitfield-Mask: 0x01) */
#define CTC_STAT_CKERR_Pos                (8UL)                     /*!< CKERR (Bit 8) */
#define CTC_STAT_CKERR_Msk                (0x100UL)                 /*!< CKERR (Bitfield-Mask: 0x01) */
#define CTC_STAT_REFMISS_Pos              (9UL)                     /*!< REFMISS (Bit 9) */
#define CTC_STAT_REFMISS_Msk              (0x200UL)                 /*!< REFMISS (Bitfield-Mask: 0x01) */
#define CTC_STAT_TRIMERR_Pos              (10UL)                    /*!< TRIMERR (Bit 10) */
#define CTC_STAT_TRIMERR_Msk              (0x400UL)                 /*!< TRIMERR (Bitfield-Mask: 0x01) */
#define CTC_STAT_REFDIR_Pos               (15UL)                    /*!< REFDIR (Bit 15) */
#define CTC_STAT_REFDIR_Msk               (0x8000UL)                /*!< REFDIR (Bitfield-Mask: 0x01) */
#define CTC_STAT_REFCAP_Pos               (16UL)                    /*!< REFCAP (Bit 16) */
#define CTC_STAT_REFCAP_Msk               (0xffff0000UL)            /*!< REFCAP (Bitfield-Mask: 0xffff) */
/* =========================================================  INTC  ========================================================== */
#define CTC_INTC_CKOKIC_Pos               (0UL)                     /*!< CKOKIC (Bit 0) */
#define CTC_INTC_CKOKIC_Msk               (0x1UL)                   /*!< CKOKIC (Bitfield-Mask: 0x01) */
#define CTC_INTC_CKWARNIC_Pos             (1UL)                     /*!< CKWARNIC (Bit 1) */
#define CTC_INTC_CKWARNIC_Msk             (0x2UL)                   /*!< CKWARNIC (Bitfield-Mask: 0x01) */
#define CTC_INTC_ERRIC_Pos                (2UL)                     /*!< ERRIC (Bit 2) */
#define CTC_INTC_ERRIC_Msk                (0x4UL)                   /*!< ERRIC (Bitfield-Mask: 0x01) */
#define CTC_INTC_EREFIC_Pos               (3UL)                     /*!< EREFIC (Bit 3) */
#define CTC_INTC_EREFIC_Msk               (0x8UL)                   /*!< EREFIC (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                            DAC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define DAC_CTL_DEN0_Pos                  (0UL)                     /*!< DEN0 (Bit 0) */
#define DAC_CTL_DEN0_Msk                  (0x1UL)                   /*!< DEN0 (Bitfield-Mask: 0x01) */
#define DAC_CTL_DBOFF0_Pos                (1UL)                     /*!< DBOFF0 (Bit 1) */
#define DAC_CTL_DBOFF0_Msk                (0x2UL)                   /*!< DBOFF0 (Bitfield-Mask: 0x01) */
#define DAC_CTL_DTEN0_Pos                 (2UL)                     /*!< DTEN0 (Bit 2) */
#define DAC_CTL_DTEN0_Msk                 (0x4UL)                   /*!< DTEN0 (Bitfield-Mask: 0x01) */
#define DAC_CTL_DTSEL0_Pos                (3UL)                     /*!< DTSEL0 (Bit 3) */
#define DAC_CTL_DTSEL0_Msk                (0x38UL)                  /*!< DTSEL0 (Bitfield-Mask: 0x07) */
#define DAC_CTL_DWM0_Pos                  (6UL)                     /*!< DWM0 (Bit 6) */
#define DAC_CTL_DWM0_Msk                  (0xc0UL)                  /*!< DWM0 (Bitfield-Mask: 0x03) */
#define DAC_CTL_DWBW0_Pos                 (8UL)                     /*!< DWBW0 (Bit 8) */
#define DAC_CTL_DWBW0_Msk                 (0xf00UL)                 /*!< DWBW0 (Bitfield-Mask: 0x0f) */
#define DAC_CTL_DDMAEN0_Pos               (12UL)                    /*!< DDMAEN0 (Bit 12) */
#define DAC_CTL_DDMAEN0_Msk               (0x1000UL)                /*!< DDMAEN0 (Bitfield-Mask: 0x01) */
#define DAC_CTL_DDUDRIE0_Pos              (13UL)                    /*!< DDUDRIE0 (Bit 13) */
#define DAC_CTL_DDUDRIE0_Msk              (0x2000UL)                /*!< DDUDRIE0 (Bitfield-Mask: 0x01) */
#define DAC_CTL_DEN1_Pos                  (16UL)                    /*!< DEN1 (Bit 16) */
#define DAC_CTL_DEN1_Msk                  (0x10000UL)               /*!< DEN1 (Bitfield-Mask: 0x01) */
#define DAC_CTL_DBOFF1_Pos                (17UL)                    /*!< DBOFF1 (Bit 17) */
#define DAC_CTL_DBOFF1_Msk                (0x20000UL)               /*!< DBOFF1 (Bitfield-Mask: 0x01) */
#define DAC_CTL_DTEN1_Pos                 (18UL)                    /*!< DTEN1 (Bit 18) */
#define DAC_CTL_DTEN1_Msk                 (0x40000UL)               /*!< DTEN1 (Bitfield-Mask: 0x01) */
#define DAC_CTL_DTSEL1_Pos                (19UL)                    /*!< DTSEL1 (Bit 19) */
#define DAC_CTL_DTSEL1_Msk                (0x380000UL)              /*!< DTSEL1 (Bitfield-Mask: 0x07) */
#define DAC_CTL_DWM1_Pos                  (22UL)                    /*!< DWM1 (Bit 22) */
#define DAC_CTL_DWM1_Msk                  (0xc00000UL)              /*!< DWM1 (Bitfield-Mask: 0x03) */
#define DAC_CTL_DWBW1_Pos                 (24UL)                    /*!< DWBW1 (Bit 24) */
#define DAC_CTL_DWBW1_Msk                 (0xf000000UL)             /*!< DWBW1 (Bitfield-Mask: 0x0f) */
#define DAC_CTL_DDMAEN1_Pos               (28UL)                    /*!< DDMAEN1 (Bit 28) */
#define DAC_CTL_DDMAEN1_Msk               (0x10000000UL)            /*!< DDMAEN1 (Bitfield-Mask: 0x01) */
#define DAC_CTL_DDUDRIE1_Pos              (29UL)                    /*!< DDUDRIE1 (Bit 29) */
#define DAC_CTL_DDUDRIE1_Msk              (0x20000000UL)            /*!< DDUDRIE1 (Bitfield-Mask: 0x01) */
/* ==========================================================  SWT  ========================================================== */
#define DAC_SWT_SWTR0_Pos                 (0UL)                     /*!< SWTR0 (Bit 0) */
#define DAC_SWT_SWTR0_Msk                 (0x1UL)                   /*!< SWTR0 (Bitfield-Mask: 0x01) */
#define DAC_SWT_SWTR1_Pos                 (1UL)                     /*!< SWTR1 (Bit 1) */
#define DAC_SWT_SWTR1_Msk                 (0x2UL)                   /*!< SWTR1 (Bitfield-Mask: 0x01) */
/* ======================================================  DAC0_R12DH  ======================================================= */
#define DAC_DAC0_R12DH_DAC0_DH_Pos        (0UL)                     /*!< DAC0_DH (Bit 0) */
#define DAC_DAC0_R12DH_DAC0_DH_Msk        (0xfffUL)                 /*!< DAC0_DH (Bitfield-Mask: 0xfff) */
/* ======================================================  DAC0_L12DH  ======================================================= */
#define DAC_DAC0_L12DH_DAC0_DH_Pos        (4UL)                     /*!< DAC0_DH (Bit 4) */
#define DAC_DAC0_L12DH_DAC0_DH_Msk        (0xfff0UL)                /*!< DAC0_DH (Bitfield-Mask: 0xfff) */
/* =======================================================  DAC0_R8DH  ======================================================= */
#define DAC_DAC0_R8DH_DAC0_DH_Pos         (0UL)                     /*!< DAC0_DH (Bit 0) */
#define DAC_DAC0_R8DH_DAC0_DH_Msk         (0xffUL)                  /*!< DAC0_DH (Bitfield-Mask: 0xff) */
/* ======================================================  DAC1_R12DH  ======================================================= */
#define DAC_DAC1_R12DH_DAC1_DH_Pos        (0UL)                     /*!< DAC1_DH (Bit 0) */
#define DAC_DAC1_R12DH_DAC1_DH_Msk        (0xfffUL)                 /*!< DAC1_DH (Bitfield-Mask: 0xfff) */
/* ======================================================  DAC1_L12DH  ======================================================= */
#define DAC_DAC1_L12DH_DAC1_DH_Pos        (4UL)                     /*!< DAC1_DH (Bit 4) */
#define DAC_DAC1_L12DH_DAC1_DH_Msk        (0xfff0UL)                /*!< DAC1_DH (Bitfield-Mask: 0xfff) */
/* =======================================================  DAC1_R8DH  ======================================================= */
#define DAC_DAC1_R8DH_DAC1_DH_Pos         (0UL)                     /*!< DAC1_DH (Bit 0) */
#define DAC_DAC1_R8DH_DAC1_DH_Msk         (0xffUL)                  /*!< DAC1_DH (Bitfield-Mask: 0xff) */
/* ======================================================  DACC_R12DH  ======================================================= */
#define DAC_DACC_R12DH_DAC0_DH_Pos        (0UL)                     /*!< DAC0_DH (Bit 0) */
#define DAC_DACC_R12DH_DAC0_DH_Msk        (0xfffUL)                 /*!< DAC0_DH (Bitfield-Mask: 0xfff) */
#define DAC_DACC_R12DH_DAC1_DH_Pos        (16UL)                    /*!< DAC1_DH (Bit 16) */
#define DAC_DACC_R12DH_DAC1_DH_Msk        (0xfff0000UL)             /*!< DAC1_DH (Bitfield-Mask: 0xfff) */
/* ======================================================  DACC_L12DH  ======================================================= */
#define DAC_DACC_L12DH_DAC0_DH_Pos        (4UL)                     /*!< DAC0_DH (Bit 4) */
#define DAC_DACC_L12DH_DAC0_DH_Msk        (0xfff0UL)                /*!< DAC0_DH (Bitfield-Mask: 0xfff) */
#define DAC_DACC_L12DH_DAC1_DH_Pos        (20UL)                    /*!< DAC1_DH (Bit 20) */
#define DAC_DACC_L12DH_DAC1_DH_Msk        (0xfff00000UL)            /*!< DAC1_DH (Bitfield-Mask: 0xfff) */
/* =======================================================  DACC_R8DH  ======================================================= */
#define DAC_DACC_R8DH_DAC0_DH_Pos         (0UL)                     /*!< DAC0_DH (Bit 0) */
#define DAC_DACC_R8DH_DAC0_DH_Msk         (0xffUL)                  /*!< DAC0_DH (Bitfield-Mask: 0xff) */
#define DAC_DACC_R8DH_DAC1_DH_Pos         (8UL)                     /*!< DAC1_DH (Bit 8) */
#define DAC_DACC_R8DH_DAC1_DH_Msk         (0xff00UL)                /*!< DAC1_DH (Bitfield-Mask: 0xff) */
/* ========================================================  DAC0_DO  ======================================================== */
#define DAC_DAC0_DO_DAC0_DO_Pos           (0UL)                     /*!< DAC0_DO (Bit 0) */
#define DAC_DAC0_DO_DAC0_DO_Msk           (0xfffUL)                 /*!< DAC0_DO (Bitfield-Mask: 0xfff) */
/* ========================================================  DAC1_DO  ======================================================== */
#define DAC_DAC1_DO_DAC1_DO_Pos           (0UL)                     /*!< DAC1_DO (Bit 0) */
#define DAC_DAC1_DO_DAC1_DO_Msk           (0xfffUL)                 /*!< DAC1_DO (Bitfield-Mask: 0xfff) */
/* =========================================================  STAT  ========================================================== */
#define DAC_STAT_DDUDR0_Pos               (13UL)                    /*!< DDUDR0 (Bit 13) */
#define DAC_STAT_DDUDR0_Msk               (0x2000UL)                /*!< DDUDR0 (Bitfield-Mask: 0x01) */
#define DAC_STAT_DDUDR1_Pos               (29UL)                    /*!< DDUDR1 (Bit 29) */
#define DAC_STAT_DDUDR1_Msk               (0x20000000UL)            /*!< DDUDR1 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                            DBG                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  ID  =========================================================== */
#define DBG_ID_ID_CODE_Pos                (0UL)                     /*!< ID_CODE (Bit 0) */
#define DBG_ID_ID_CODE_Msk                (0xffffffffUL)            /*!< ID_CODE (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CTL0  ========================================================== */
#define DBG_CTL0_SLP_HOLD_Pos             (0UL)                     /*!< SLP_HOLD (Bit 0) */
#define DBG_CTL0_SLP_HOLD_Msk             (0x1UL)                   /*!< SLP_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL0_DSLP_HOLD_Pos            (1UL)                     /*!< DSLP_HOLD (Bit 1) */
#define DBG_CTL0_DSLP_HOLD_Msk            (0x2UL)                   /*!< DSLP_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL0_STB_HOLD_Pos             (2UL)                     /*!< STB_HOLD (Bit 2) */
#define DBG_CTL0_STB_HOLD_Msk             (0x4UL)                   /*!< STB_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL0_TRACE_IOEN_Pos           (5UL)                     /*!< TRACE_IOEN (Bit 5) */
#define DBG_CTL0_TRACE_IOEN_Msk           (0x20UL)                  /*!< TRACE_IOEN (Bitfield-Mask: 0x01) */
#define DBG_CTL0_TRACE_MODE_Pos           (6UL)                     /*!< TRACE_MODE (Bit 6) */
#define DBG_CTL0_TRACE_MODE_Msk           (0xc0UL)                  /*!< TRACE_MODE (Bitfield-Mask: 0x03) */
/* =========================================================  CTL1  ========================================================== */
#define DBG_CTL1_TIMER1_HOLD_Pos          (0UL)                     /*!< TIMER1_HOLD (Bit 0) */
#define DBG_CTL1_TIMER1_HOLD_Msk          (0x1UL)                   /*!< TIMER1_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_TIMER2_HOLD_Pos          (1UL)                     /*!< TIMER2_HOLD (Bit 1) */
#define DBG_CTL1_TIMER2_HOLD_Msk          (0x2UL)                   /*!< TIMER2_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_TIMER3_HOLD_Pos          (2UL)                     /*!< TIMER3_HOLD (Bit 2) */
#define DBG_CTL1_TIMER3_HOLD_Msk          (0x4UL)                   /*!< TIMER3_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_TIMER4_HOLD_Pos          (3UL)                     /*!< TIMER4_HOLD (Bit 3) */
#define DBG_CTL1_TIMER4_HOLD_Msk          (0x8UL)                   /*!< TIMER4_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_TIMER5_HOLD_Pos          (4UL)                     /*!< TIMER5_HOLD (Bit 4) */
#define DBG_CTL1_TIMER5_HOLD_Msk          (0x10UL)                  /*!< TIMER5_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_TIMER6_HOLD_Pos          (5UL)                     /*!< TIMER6_HOLD (Bit 5) */
#define DBG_CTL1_TIMER6_HOLD_Msk          (0x20UL)                  /*!< TIMER6_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_TIMER11_HOLD_Pos         (6UL)                     /*!< TIMER11_HOLD (Bit 6) */
#define DBG_CTL1_TIMER11_HOLD_Msk         (0x40UL)                  /*!< TIMER11_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_TIMER12_HOLD_Pos         (7UL)                     /*!< TIMER12_HOLD (Bit 7) */
#define DBG_CTL1_TIMER12_HOLD_Msk         (0x80UL)                  /*!< TIMER12_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_TIMER13_HOLD_Pos         (8UL)                     /*!< TIMER13_HOLD (Bit 8) */
#define DBG_CTL1_TIMER13_HOLD_Msk         (0x100UL)                 /*!< TIMER13_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_RTC_HOLD_Pos             (10UL)                    /*!< RTC_HOLD (Bit 10) */
#define DBG_CTL1_RTC_HOLD_Msk             (0x400UL)                 /*!< RTC_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_WWDGT_HOLD_Pos           (11UL)                    /*!< WWDGT_HOLD (Bit 11) */
#define DBG_CTL1_WWDGT_HOLD_Msk           (0x800UL)                 /*!< WWDGT_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_FWDGT_HOLD_Pos           (12UL)                    /*!< FWDGT_HOLD (Bit 12) */
#define DBG_CTL1_FWDGT_HOLD_Msk           (0x1000UL)                /*!< FWDGT_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_I2C0_HOLD_Pos            (21UL)                    /*!< I2C0_HOLD (Bit 21) */
#define DBG_CTL1_I2C0_HOLD_Msk            (0x200000UL)              /*!< I2C0_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_I2C1_HOLD_Pos            (22UL)                    /*!< I2C1_HOLD (Bit 22) */
#define DBG_CTL1_I2C1_HOLD_Msk            (0x400000UL)              /*!< I2C1_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_I2C2_HOLD_Pos            (23UL)                    /*!< I2C2_HOLD (Bit 23) */
#define DBG_CTL1_I2C2_HOLD_Msk            (0x800000UL)              /*!< I2C2_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_CAN0_HOLD_Pos            (25UL)                    /*!< CAN0_HOLD (Bit 25) */
#define DBG_CTL1_CAN0_HOLD_Msk            (0x2000000UL)             /*!< CAN0_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL1_CAN1_HOLD_Pos            (26UL)                    /*!< CAN1_HOLD (Bit 26) */
#define DBG_CTL1_CAN1_HOLD_Msk            (0x4000000UL)             /*!< CAN1_HOLD (Bitfield-Mask: 0x01) */
/* =========================================================  CTL2  ========================================================== */
#define DBG_CTL2_TIMER0_HOLD_Pos          (0UL)                     /*!< TIMER0_HOLD (Bit 0) */
#define DBG_CTL2_TIMER0_HOLD_Msk          (0x1UL)                   /*!< TIMER0_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL2_TIMER7_HOLD_Pos          (1UL)                     /*!< TIMER7_HOLD (Bit 1) */
#define DBG_CTL2_TIMER7_HOLD_Msk          (0x2UL)                   /*!< TIMER7_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL2_TIMER8_HOLD_Pos          (16UL)                    /*!< TIMER8_HOLD (Bit 16) */
#define DBG_CTL2_TIMER8_HOLD_Msk          (0x10000UL)               /*!< TIMER8_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL2_TIMER9_HOLD_Pos          (17UL)                    /*!< TIMER9_HOLD (Bit 17) */
#define DBG_CTL2_TIMER9_HOLD_Msk          (0x20000UL)               /*!< TIMER9_HOLD (Bitfield-Mask: 0x01) */
#define DBG_CTL2_TIMER10_HOLD_Pos         (18UL)                    /*!< TIMER10_HOLD (Bit 18) */
#define DBG_CTL2_TIMER10_HOLD_Msk         (0x40000UL)               /*!< TIMER10_HOLD (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                            DCI                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define DCI_CTL_DCIEN_Pos                 (14UL)                    /*!< DCIEN (Bit 14) */
#define DCI_CTL_DCIEN_Msk                 (0x4000UL)                /*!< DCIEN (Bitfield-Mask: 0x01) */
#define DCI_CTL_DCIF_Pos                  (10UL)                    /*!< DCIF (Bit 10) */
#define DCI_CTL_DCIF_Msk                  (0xc00UL)                 /*!< DCIF (Bitfield-Mask: 0x03) */
#define DCI_CTL_FR_Pos                    (8UL)                     /*!< FR (Bit 8) */
#define DCI_CTL_FR_Msk                    (0x300UL)                 /*!< FR (Bitfield-Mask: 0x03) */
#define DCI_CTL_VPS_Pos                   (7UL)                     /*!< VPS (Bit 7) */
#define DCI_CTL_VPS_Msk                   (0x80UL)                  /*!< VPS (Bitfield-Mask: 0x01) */
#define DCI_CTL_HPS_Pos                   (6UL)                     /*!< HPS (Bit 6) */
#define DCI_CTL_HPS_Msk                   (0x40UL)                  /*!< HPS (Bitfield-Mask: 0x01) */
#define DCI_CTL_CKS_Pos                   (5UL)                     /*!< CKS (Bit 5) */
#define DCI_CTL_CKS_Msk                   (0x20UL)                  /*!< CKS (Bitfield-Mask: 0x01) */
#define DCI_CTL_ESM_Pos                   (4UL)                     /*!< ESM (Bit 4) */
#define DCI_CTL_ESM_Msk                   (0x10UL)                  /*!< ESM (Bitfield-Mask: 0x01) */
#define DCI_CTL_JM_Pos                    (3UL)                     /*!< JM (Bit 3) */
#define DCI_CTL_JM_Msk                    (0x8UL)                   /*!< JM (Bitfield-Mask: 0x01) */
#define DCI_CTL_WDEN_Pos                  (2UL)                     /*!< WDEN (Bit 2) */
#define DCI_CTL_WDEN_Msk                  (0x4UL)                   /*!< WDEN (Bitfield-Mask: 0x01) */
#define DCI_CTL_SNAP_Pos                  (1UL)                     /*!< SNAP (Bit 1) */
#define DCI_CTL_SNAP_Msk                  (0x2UL)                   /*!< SNAP (Bitfield-Mask: 0x01) */
#define DCI_CTL_CAP_Pos                   (0UL)                     /*!< CAP (Bit 0) */
#define DCI_CTL_CAP_Msk                   (0x1UL)                   /*!< CAP (Bitfield-Mask: 0x01) */
/* =========================================================  STAT0  ========================================================= */
#define DCI_STAT0_FV_Pos                  (2UL)                     /*!< FV (Bit 2) */
#define DCI_STAT0_FV_Msk                  (0x4UL)                   /*!< FV (Bitfield-Mask: 0x01) */
#define DCI_STAT0_VS_Pos                  (1UL)                     /*!< VS (Bit 1) */
#define DCI_STAT0_VS_Msk                  (0x2UL)                   /*!< VS (Bitfield-Mask: 0x01) */
#define DCI_STAT0_HS_Pos                  (0UL)                     /*!< HS (Bit 0) */
#define DCI_STAT0_HS_Msk                  (0x1UL)                   /*!< HS (Bitfield-Mask: 0x01) */
/* =========================================================  STAT1  ========================================================= */
#define DCI_STAT1_ELF_Pos                 (4UL)                     /*!< ELF (Bit 4) */
#define DCI_STAT1_ELF_Msk                 (0x10UL)                  /*!< ELF (Bitfield-Mask: 0x01) */
#define DCI_STAT1_VSF_Pos                 (3UL)                     /*!< VSF (Bit 3) */
#define DCI_STAT1_VSF_Msk                 (0x8UL)                   /*!< VSF (Bitfield-Mask: 0x01) */
#define DCI_STAT1_ESEF_Pos                (2UL)                     /*!< ESEF (Bit 2) */
#define DCI_STAT1_ESEF_Msk                (0x4UL)                   /*!< ESEF (Bitfield-Mask: 0x01) */
#define DCI_STAT1_OVRF_Pos                (1UL)                     /*!< OVRF (Bit 1) */
#define DCI_STAT1_OVRF_Msk                (0x2UL)                   /*!< OVRF (Bitfield-Mask: 0x01) */
#define DCI_STAT1_EFF_Pos                 (0UL)                     /*!< EFF (Bit 0) */
#define DCI_STAT1_EFF_Msk                 (0x1UL)                   /*!< EFF (Bitfield-Mask: 0x01) */
/* =========================================================  INTEN  ========================================================= */
#define DCI_INTEN_ELIE_Pos                (4UL)                     /*!< ELIE (Bit 4) */
#define DCI_INTEN_ELIE_Msk                (0x10UL)                  /*!< ELIE (Bitfield-Mask: 0x01) */
#define DCI_INTEN_VSIE_Pos                (3UL)                     /*!< VSIE (Bit 3) */
#define DCI_INTEN_VSIE_Msk                (0x8UL)                   /*!< VSIE (Bitfield-Mask: 0x01) */
#define DCI_INTEN_ESEIE_Pos               (2UL)                     /*!< ESEIE (Bit 2) */
#define DCI_INTEN_ESEIE_Msk               (0x4UL)                   /*!< ESEIE (Bitfield-Mask: 0x01) */
#define DCI_INTEN_OVRIE_Pos               (1UL)                     /*!< OVRIE (Bit 1) */
#define DCI_INTEN_OVRIE_Msk               (0x2UL)                   /*!< OVRIE (Bitfield-Mask: 0x01) */
#define DCI_INTEN_EFIE_Pos                (0UL)                     /*!< EFIE (Bit 0) */
#define DCI_INTEN_EFIE_Msk                (0x1UL)                   /*!< EFIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define DCI_INTF_ELIF_Pos                 (4UL)                     /*!< ELIF (Bit 4) */
#define DCI_INTF_ELIF_Msk                 (0x10UL)                  /*!< ELIF (Bitfield-Mask: 0x01) */
#define DCI_INTF_VSIF_Pos                 (3UL)                     /*!< VSIF (Bit 3) */
#define DCI_INTF_VSIF_Msk                 (0x8UL)                   /*!< VSIF (Bitfield-Mask: 0x01) */
#define DCI_INTF_ESEIF_Pos                (2UL)                     /*!< ESEIF (Bit 2) */
#define DCI_INTF_ESEIF_Msk                (0x4UL)                   /*!< ESEIF (Bitfield-Mask: 0x01) */
#define DCI_INTF_OVRIF_Pos                (1UL)                     /*!< OVRIF (Bit 1) */
#define DCI_INTF_OVRIF_Msk                (0x2UL)                   /*!< OVRIF (Bitfield-Mask: 0x01) */
#define DCI_INTF_EFIF_Pos                 (0UL)                     /*!< EFIF (Bit 0) */
#define DCI_INTF_EFIF_Msk                 (0x1UL)                   /*!< EFIF (Bitfield-Mask: 0x01) */
/* =========================================================  INTC  ========================================================== */
#define DCI_INTC_ELFC_Pos                 (4UL)                     /*!< ELFC (Bit 4) */
#define DCI_INTC_ELFC_Msk                 (0x10UL)                  /*!< ELFC (Bitfield-Mask: 0x01) */
#define DCI_INTC_VSFC_Pos                 (3UL)                     /*!< VSFC (Bit 3) */
#define DCI_INTC_VSFC_Msk                 (0x8UL)                   /*!< VSFC (Bitfield-Mask: 0x01) */
#define DCI_INTC_ESEFC_Pos                (2UL)                     /*!< ESEFC (Bit 2) */
#define DCI_INTC_ESEFC_Msk                (0x4UL)                   /*!< ESEFC (Bitfield-Mask: 0x01) */
#define DCI_INTC_OVRFC_Pos                (1UL)                     /*!< OVRFC (Bit 1) */
#define DCI_INTC_OVRFC_Msk                (0x2UL)                   /*!< OVRFC (Bitfield-Mask: 0x01) */
#define DCI_INTC_EFFC_Pos                 (0UL)                     /*!< EFFC (Bit 0) */
#define DCI_INTC_EFFC_Msk                 (0x1UL)                   /*!< EFFC (Bitfield-Mask: 0x01) */
/* ==========================================================  SC  =========================================================== */
#define DCI_SC_FE_Pos                     (24UL)                    /*!< FE (Bit 24) */
#define DCI_SC_FE_Msk                     (0xff000000UL)            /*!< FE (Bitfield-Mask: 0xff) */
#define DCI_SC_LE_Pos                     (16UL)                    /*!< LE (Bit 16) */
#define DCI_SC_LE_Msk                     (0xff0000UL)              /*!< LE (Bitfield-Mask: 0xff) */
#define DCI_SC_LS_Pos                     (8UL)                     /*!< LS (Bit 8) */
#define DCI_SC_LS_Msk                     (0xff00UL)                /*!< LS (Bitfield-Mask: 0xff) */
#define DCI_SC_FS_Pos                     (0UL)                     /*!< FS (Bit 0) */
#define DCI_SC_FS_Msk                     (0xffUL)                  /*!< FS (Bitfield-Mask: 0xff) */
/* ========================================================  SCUMSK  ========================================================= */
#define DCI_SCUMSK_FEM_Pos                (24UL)                    /*!< FEM (Bit 24) */
#define DCI_SCUMSK_FEM_Msk                (0xff000000UL)            /*!< FEM (Bitfield-Mask: 0xff) */
#define DCI_SCUMSK_LEM_Pos                (16UL)                    /*!< LEM (Bit 16) */
#define DCI_SCUMSK_LEM_Msk                (0xff0000UL)              /*!< LEM (Bitfield-Mask: 0xff) */
#define DCI_SCUMSK_LSM_Pos                (8UL)                     /*!< LSM (Bit 8) */
#define DCI_SCUMSK_LSM_Msk                (0xff00UL)                /*!< LSM (Bitfield-Mask: 0xff) */
#define DCI_SCUMSK_FSM_Pos                (0UL)                     /*!< FSM (Bit 0) */
#define DCI_SCUMSK_FSM_Msk                (0xffUL)                  /*!< FSM (Bitfield-Mask: 0xff) */
/* ========================================================  CWSPOS  ========================================================= */
#define DCI_CWSPOS_WVSP_Pos               (16UL)                    /*!< WVSP (Bit 16) */
#define DCI_CWSPOS_WVSP_Msk               (0x1fff0000UL)            /*!< WVSP (Bitfield-Mask: 0x1fff) */
#define DCI_CWSPOS_WHSP_Pos               (0UL)                     /*!< WHSP (Bit 0) */
#define DCI_CWSPOS_WHSP_Msk               (0x3fffUL)                /*!< WHSP (Bitfield-Mask: 0x3fff) */
/* =========================================================  CWSZ  ========================================================== */
#define DCI_CWSZ_WVSZ_Pos                 (16UL)                    /*!< WVSZ (Bit 16) */
#define DCI_CWSZ_WVSZ_Msk                 (0x3fff0000UL)            /*!< WVSZ (Bitfield-Mask: 0x3fff) */
#define DCI_CWSZ_WHSZ_Pos                 (0UL)                     /*!< WHSZ (Bit 0) */
#define DCI_CWSZ_WHSZ_Msk                 (0x3fffUL)                /*!< WHSZ (Bitfield-Mask: 0x3fff) */
/* =========================================================  DATA  ========================================================== */
#define DCI_DATA_DT3_Pos                  (24UL)                    /*!< DT3 (Bit 24) */
#define DCI_DATA_DT3_Msk                  (0xff000000UL)            /*!< DT3 (Bitfield-Mask: 0xff) */
#define DCI_DATA_DT2_Pos                  (16UL)                    /*!< DT2 (Bit 16) */
#define DCI_DATA_DT2_Msk                  (0xff0000UL)              /*!< DT2 (Bitfield-Mask: 0xff) */
#define DCI_DATA_DT1_Pos                  (8UL)                     /*!< DT1 (Bit 8) */
#define DCI_DATA_DT1_Msk                  (0xff00UL)                /*!< DT1 (Bitfield-Mask: 0xff) */
#define DCI_DATA_DT0_Pos                  (0UL)                     /*!< DT0 (Bit 0) */
#define DCI_DATA_DT0_Msk                  (0xffUL)                  /*!< DT0 (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                           DMA0                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  INTF0  ========================================================= */
#define DMA0_INTF0_FEEIF0_Pos             (0UL)                     /*!< FEEIF0 (Bit 0) */
#define DMA0_INTF0_FEEIF0_Msk             (0x1UL)                   /*!< FEEIF0 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_SDEIF0_Pos             (2UL)                     /*!< SDEIF0 (Bit 2) */
#define DMA0_INTF0_SDEIF0_Msk             (0x4UL)                   /*!< SDEIF0 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_TAEIF0_Pos             (3UL)                     /*!< TAEIF0 (Bit 3) */
#define DMA0_INTF0_TAEIF0_Msk             (0x8UL)                   /*!< TAEIF0 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_HTFIF0_Pos             (4UL)                     /*!< HTFIF0 (Bit 4) */
#define DMA0_INTF0_HTFIF0_Msk             (0x10UL)                  /*!< HTFIF0 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_FTFIF0_Pos             (5UL)                     /*!< FTFIF0 (Bit 5) */
#define DMA0_INTF0_FTFIF0_Msk             (0x20UL)                  /*!< FTFIF0 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_FEEIF1_Pos             (6UL)                     /*!< FEEIF1 (Bit 6) */
#define DMA0_INTF0_FEEIF1_Msk             (0x40UL)                  /*!< FEEIF1 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_SDEIF1_Pos             (8UL)                     /*!< SDEIF1 (Bit 8) */
#define DMA0_INTF0_SDEIF1_Msk             (0x100UL)                 /*!< SDEIF1 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_TAEIF1_Pos             (9UL)                     /*!< TAEIF1 (Bit 9) */
#define DMA0_INTF0_TAEIF1_Msk             (0x200UL)                 /*!< TAEIF1 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_HTFIF1_Pos             (10UL)                    /*!< HTFIF1 (Bit 10) */
#define DMA0_INTF0_HTFIF1_Msk             (0x400UL)                 /*!< HTFIF1 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_FTFIF1_Pos             (11UL)                    /*!< FTFIF1 (Bit 11) */
#define DMA0_INTF0_FTFIF1_Msk             (0x800UL)                 /*!< FTFIF1 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_FEEIF2_Pos             (16UL)                    /*!< FEEIF2 (Bit 16) */
#define DMA0_INTF0_FEEIF2_Msk             (0x10000UL)               /*!< FEEIF2 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_SDEIF2_Pos             (18UL)                    /*!< SDEIF2 (Bit 18) */
#define DMA0_INTF0_SDEIF2_Msk             (0x40000UL)               /*!< SDEIF2 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_TAEIF2_Pos             (19UL)                    /*!< TAEIF2 (Bit 19) */
#define DMA0_INTF0_TAEIF2_Msk             (0x80000UL)               /*!< TAEIF2 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_HTFIF2_Pos             (20UL)                    /*!< HTFIF2 (Bit 20) */
#define DMA0_INTF0_HTFIF2_Msk             (0x100000UL)              /*!< HTFIF2 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_FTFIF2_Pos             (21UL)                    /*!< FTFIF2 (Bit 21) */
#define DMA0_INTF0_FTFIF2_Msk             (0x200000UL)              /*!< FTFIF2 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_FEEIF3_Pos             (22UL)                    /*!< FEEIF3 (Bit 22) */
#define DMA0_INTF0_FEEIF3_Msk             (0x400000UL)              /*!< FEEIF3 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_SDEIF3_Pos             (24UL)                    /*!< SDEIF3 (Bit 24) */
#define DMA0_INTF0_SDEIF3_Msk             (0x1000000UL)             /*!< SDEIF3 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_TAEIF3_Pos             (25UL)                    /*!< TAEIF3 (Bit 25) */
#define DMA0_INTF0_TAEIF3_Msk             (0x2000000UL)             /*!< TAEIF3 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_HTFIF3_Pos             (26UL)                    /*!< HTFIF3 (Bit 26) */
#define DMA0_INTF0_HTFIF3_Msk             (0x4000000UL)             /*!< HTFIF3 (Bitfield-Mask: 0x01) */
#define DMA0_INTF0_FTFIF3_Pos             (27UL)                    /*!< FTFIF3 (Bit 27) */
#define DMA0_INTF0_FTFIF3_Msk             (0x8000000UL)             /*!< FTFIF3 (Bitfield-Mask: 0x01) */
/* =========================================================  INTF1  ========================================================= */
#define DMA0_INTF1_FEEIF4_Pos             (0UL)                     /*!< FEEIF4 (Bit 0) */
#define DMA0_INTF1_FEEIF4_Msk             (0x1UL)                   /*!< FEEIF4 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_SDEIF4_Pos             (2UL)                     /*!< SDEIF4 (Bit 2) */
#define DMA0_INTF1_SDEIF4_Msk             (0x4UL)                   /*!< SDEIF4 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_TAEIF4_Pos             (3UL)                     /*!< TAEIF4 (Bit 3) */
#define DMA0_INTF1_TAEIF4_Msk             (0x8UL)                   /*!< TAEIF4 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_HTFIF4_Pos             (4UL)                     /*!< HTFIF4 (Bit 4) */
#define DMA0_INTF1_HTFIF4_Msk             (0x10UL)                  /*!< HTFIF4 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_FTFIF4_Pos             (5UL)                     /*!< FTFIF4 (Bit 5) */
#define DMA0_INTF1_FTFIF4_Msk             (0x20UL)                  /*!< FTFIF4 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_FEEIF5_Pos             (6UL)                     /*!< FEEIF5 (Bit 6) */
#define DMA0_INTF1_FEEIF5_Msk             (0x40UL)                  /*!< FEEIF5 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_SDEIF5_Pos             (8UL)                     /*!< SDEIF5 (Bit 8) */
#define DMA0_INTF1_SDEIF5_Msk             (0x100UL)                 /*!< SDEIF5 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_TAEIF5_Pos             (9UL)                     /*!< TAEIF5 (Bit 9) */
#define DMA0_INTF1_TAEIF5_Msk             (0x200UL)                 /*!< TAEIF5 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_HTFIF5_Pos             (10UL)                    /*!< HTFIF5 (Bit 10) */
#define DMA0_INTF1_HTFIF5_Msk             (0x400UL)                 /*!< HTFIF5 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_FTFIF5_Pos             (11UL)                    /*!< FTFIF5 (Bit 11) */
#define DMA0_INTF1_FTFIF5_Msk             (0x800UL)                 /*!< FTFIF5 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_FEEIF6_Pos             (16UL)                    /*!< FEEIF6 (Bit 16) */
#define DMA0_INTF1_FEEIF6_Msk             (0x10000UL)               /*!< FEEIF6 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_SDEIF6_Pos             (18UL)                    /*!< SDEIF6 (Bit 18) */
#define DMA0_INTF1_SDEIF6_Msk             (0x40000UL)               /*!< SDEIF6 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_TAEIF6_Pos             (19UL)                    /*!< TAEIF6 (Bit 19) */
#define DMA0_INTF1_TAEIF6_Msk             (0x80000UL)               /*!< TAEIF6 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_HTFIF6_Pos             (20UL)                    /*!< HTFIF6 (Bit 20) */
#define DMA0_INTF1_HTFIF6_Msk             (0x100000UL)              /*!< HTFIF6 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_FTFIF6_Pos             (21UL)                    /*!< FTFIF6 (Bit 21) */
#define DMA0_INTF1_FTFIF6_Msk             (0x200000UL)              /*!< FTFIF6 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_FEEIF7_Pos             (22UL)                    /*!< FEEIF7 (Bit 22) */
#define DMA0_INTF1_FEEIF7_Msk             (0x400000UL)              /*!< FEEIF7 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_SDEIF7_Pos             (24UL)                    /*!< SDEIF7 (Bit 24) */
#define DMA0_INTF1_SDEIF7_Msk             (0x1000000UL)             /*!< SDEIF7 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_TAEIF7_Pos             (25UL)                    /*!< TAEIF7 (Bit 25) */
#define DMA0_INTF1_TAEIF7_Msk             (0x2000000UL)             /*!< TAEIF7 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_HTFIF7_Pos             (26UL)                    /*!< HTFIF7 (Bit 26) */
#define DMA0_INTF1_HTFIF7_Msk             (0x4000000UL)             /*!< HTFIF7 (Bitfield-Mask: 0x01) */
#define DMA0_INTF1_FTFIF7_Pos             (27UL)                    /*!< FTFIF7 (Bit 27) */
#define DMA0_INTF1_FTFIF7_Msk             (0x8000000UL)             /*!< FTFIF7 (Bitfield-Mask: 0x01) */
/* =========================================================  INTC0  ========================================================= */
#define DMA0_INTC0_FEEIFC0_Pos            (0UL)                     /*!< FEEIFC0 (Bit 0) */
#define DMA0_INTC0_FEEIFC0_Msk            (0x1UL)                   /*!< FEEIFC0 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_SDEIFC0_Pos            (2UL)                     /*!< SDEIFC0 (Bit 2) */
#define DMA0_INTC0_SDEIFC0_Msk            (0x4UL)                   /*!< SDEIFC0 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_TAEIFC0_Pos            (3UL)                     /*!< TAEIFC0 (Bit 3) */
#define DMA0_INTC0_TAEIFC0_Msk            (0x8UL)                   /*!< TAEIFC0 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_HTFIFC0_Pos            (4UL)                     /*!< HTFIFC0 (Bit 4) */
#define DMA0_INTC0_HTFIFC0_Msk            (0x10UL)                  /*!< HTFIFC0 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_FTFIFC0_Pos            (5UL)                     /*!< FTFIFC0 (Bit 5) */
#define DMA0_INTC0_FTFIFC0_Msk            (0x20UL)                  /*!< FTFIFC0 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_FEEIFC1_Pos            (6UL)                     /*!< FEEIFC1 (Bit 6) */
#define DMA0_INTC0_FEEIFC1_Msk            (0x40UL)                  /*!< FEEIFC1 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_SDEIFC1_Pos            (8UL)                     /*!< SDEIFC1 (Bit 8) */
#define DMA0_INTC0_SDEIFC1_Msk            (0x100UL)                 /*!< SDEIFC1 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_TAEIFC1_Pos            (9UL)                     /*!< TAEIFC1 (Bit 9) */
#define DMA0_INTC0_TAEIFC1_Msk            (0x200UL)                 /*!< TAEIFC1 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_HTFIFC1_Pos            (10UL)                    /*!< HTFIFC1 (Bit 10) */
#define DMA0_INTC0_HTFIFC1_Msk            (0x400UL)                 /*!< HTFIFC1 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_FTFIFC1_Pos            (11UL)                    /*!< FTFIFC1 (Bit 11) */
#define DMA0_INTC0_FTFIFC1_Msk            (0x800UL)                 /*!< FTFIFC1 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_FEEIFC2_Pos            (16UL)                    /*!< FEEIFC2 (Bit 16) */
#define DMA0_INTC0_FEEIFC2_Msk            (0x10000UL)               /*!< FEEIFC2 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_SDEIFC2_Pos            (18UL)                    /*!< SDEIFC2 (Bit 18) */
#define DMA0_INTC0_SDEIFC2_Msk            (0x40000UL)               /*!< SDEIFC2 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_TAEIFC2_Pos            (19UL)                    /*!< TAEIFC2 (Bit 19) */
#define DMA0_INTC0_TAEIFC2_Msk            (0x80000UL)               /*!< TAEIFC2 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_HTFIFC2_Pos            (20UL)                    /*!< HTFIFC2 (Bit 20) */
#define DMA0_INTC0_HTFIFC2_Msk            (0x100000UL)              /*!< HTFIFC2 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_FTFIFC2_Pos            (21UL)                    /*!< FTFIFC2 (Bit 21) */
#define DMA0_INTC0_FTFIFC2_Msk            (0x200000UL)              /*!< FTFIFC2 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_FEEIFC3_Pos            (22UL)                    /*!< FEEIFC3 (Bit 22) */
#define DMA0_INTC0_FEEIFC3_Msk            (0x400000UL)              /*!< FEEIFC3 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_SDEIFC3_Pos            (24UL)                    /*!< SDEIFC3 (Bit 24) */
#define DMA0_INTC0_SDEIFC3_Msk            (0x1000000UL)             /*!< SDEIFC3 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_TAEIFC3_Pos            (25UL)                    /*!< TAEIFC3 (Bit 25) */
#define DMA0_INTC0_TAEIFC3_Msk            (0x2000000UL)             /*!< TAEIFC3 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_HTFIFC3_Pos            (26UL)                    /*!< HTFIFC3 (Bit 26) */
#define DMA0_INTC0_HTFIFC3_Msk            (0x4000000UL)             /*!< HTFIFC3 (Bitfield-Mask: 0x01) */
#define DMA0_INTC0_FTFIFC3_Pos            (27UL)                    /*!< FTFIFC3 (Bit 27) */
#define DMA0_INTC0_FTFIFC3_Msk            (0x8000000UL)             /*!< FTFIFC3 (Bitfield-Mask: 0x01) */
/* =========================================================  INTC1  ========================================================= */
#define DMA0_INTC1_FEEIFC4_Pos            (0UL)                     /*!< FEEIFC4 (Bit 0) */
#define DMA0_INTC1_FEEIFC4_Msk            (0x1UL)                   /*!< FEEIFC4 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_SDEIFC4_Pos            (2UL)                     /*!< SDEIFC4 (Bit 2) */
#define DMA0_INTC1_SDEIFC4_Msk            (0x4UL)                   /*!< SDEIFC4 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_TAEIFC4_Pos            (3UL)                     /*!< TAEIFC4 (Bit 3) */
#define DMA0_INTC1_TAEIFC4_Msk            (0x8UL)                   /*!< TAEIFC4 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_HTFIFC4_Pos            (4UL)                     /*!< HTFIFC4 (Bit 4) */
#define DMA0_INTC1_HTFIFC4_Msk            (0x10UL)                  /*!< HTFIFC4 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_FTFIFC4_Pos            (5UL)                     /*!< FTFIFC4 (Bit 5) */
#define DMA0_INTC1_FTFIFC4_Msk            (0x20UL)                  /*!< FTFIFC4 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_FEEIFC5_Pos            (6UL)                     /*!< FEEIFC5 (Bit 6) */
#define DMA0_INTC1_FEEIFC5_Msk            (0x40UL)                  /*!< FEEIFC5 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_SDEIFC5_Pos            (8UL)                     /*!< SDEIFC5 (Bit 8) */
#define DMA0_INTC1_SDEIFC5_Msk            (0x100UL)                 /*!< SDEIFC5 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_TAEIFC5_Pos            (9UL)                     /*!< TAEIFC5 (Bit 9) */
#define DMA0_INTC1_TAEIFC5_Msk            (0x200UL)                 /*!< TAEIFC5 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_HTFIFC5_Pos            (10UL)                    /*!< HTFIFC5 (Bit 10) */
#define DMA0_INTC1_HTFIFC5_Msk            (0x400UL)                 /*!< HTFIFC5 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_FTFIFC5_Pos            (11UL)                    /*!< FTFIFC5 (Bit 11) */
#define DMA0_INTC1_FTFIFC5_Msk            (0x800UL)                 /*!< FTFIFC5 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_FEEIFC6_Pos            (16UL)                    /*!< FEEIFC6 (Bit 16) */
#define DMA0_INTC1_FEEIFC6_Msk            (0x10000UL)               /*!< FEEIFC6 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_SDEIFC6_Pos            (18UL)                    /*!< SDEIFC6 (Bit 18) */
#define DMA0_INTC1_SDEIFC6_Msk            (0x40000UL)               /*!< SDEIFC6 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_TAEIFC6_Pos            (19UL)                    /*!< TAEIFC6 (Bit 19) */
#define DMA0_INTC1_TAEIFC6_Msk            (0x80000UL)               /*!< TAEIFC6 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_HTFIFC6_Pos            (20UL)                    /*!< HTFIFC6 (Bit 20) */
#define DMA0_INTC1_HTFIFC6_Msk            (0x100000UL)              /*!< HTFIFC6 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_FTFIFC6_Pos            (21UL)                    /*!< FTFIFC6 (Bit 21) */
#define DMA0_INTC1_FTFIFC6_Msk            (0x200000UL)              /*!< FTFIFC6 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_FEEIFC7_Pos            (22UL)                    /*!< FEEIFC7 (Bit 22) */
#define DMA0_INTC1_FEEIFC7_Msk            (0x400000UL)              /*!< FEEIFC7 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_SDEIFC7_Pos            (24UL)                    /*!< SDEIFC7 (Bit 24) */
#define DMA0_INTC1_SDEIFC7_Msk            (0x1000000UL)             /*!< SDEIFC7 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_TAEIFC7_Pos            (25UL)                    /*!< TAEIFC7 (Bit 25) */
#define DMA0_INTC1_TAEIFC7_Msk            (0x2000000UL)             /*!< TAEIFC7 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_HTFIFC7_Pos            (26UL)                    /*!< HTFIFC7 (Bit 26) */
#define DMA0_INTC1_HTFIFC7_Msk            (0x4000000UL)             /*!< HTFIFC7 (Bitfield-Mask: 0x01) */
#define DMA0_INTC1_FTFIFC7_Pos            (27UL)                    /*!< FTFIFC7 (Bit 27) */
#define DMA0_INTC1_FTFIFC7_Msk            (0x8000000UL)             /*!< FTFIFC7 (Bitfield-Mask: 0x01) */
/* ========================================================  CH0CTL  ========================================================= */
#define DMA0_CH0CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA0_CH0CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA0_CH0CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA0_CH0CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA0_CH0CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA0_CH0CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA0_CH0CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA0_CH0CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA0_CH0CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA0_CH0CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA0_CH0CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA0_CH0CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA0_CH0CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH0CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA0_CH0CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH0CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA0_CH0CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA0_CH0CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA0_CH0CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA0_CH0CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA0_CH0CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA0_CH0CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA0_CH0CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH0CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA0_CH0CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH0CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA0_CH0CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH0CNT  ========================================================= */
#define DMA0_CH0CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA0_CH0CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH0PADDR  ======================================================== */
#define DMA0_CH0PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA0_CH0PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH0M0ADDR  ======================================================= */
#define DMA0_CH0M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA0_CH0M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH0M1ADDR  ======================================================= */
#define DMA0_CH0M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA0_CH0M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH0FCTL  ======================================================== */
#define DMA0_CH0FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA0_CH0FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA0_CH0FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA0_CH0FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH0FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA0_CH0FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA0_CH0FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA0_CH0FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH1CTL  ========================================================= */
#define DMA0_CH1CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA0_CH1CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA0_CH1CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA0_CH1CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA0_CH1CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA0_CH1CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA0_CH1CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA0_CH1CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA0_CH1CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA0_CH1CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA0_CH1CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA0_CH1CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA0_CH1CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH1CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA0_CH1CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH1CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA0_CH1CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA0_CH1CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA0_CH1CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA0_CH1CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA0_CH1CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA0_CH1CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA0_CH1CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH1CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA0_CH1CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH1CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA0_CH1CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH1CNT  ========================================================= */
#define DMA0_CH1CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA0_CH1CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH1PADDR  ======================================================== */
#define DMA0_CH1PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA0_CH1PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH1M0ADDR  ======================================================= */
#define DMA0_CH1M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA0_CH1M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH1M1ADDR  ======================================================= */
#define DMA0_CH1M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA0_CH1M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH1FCTL  ======================================================== */
#define DMA0_CH1FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA0_CH1FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA0_CH1FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA0_CH1FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH1FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA0_CH1FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA0_CH1FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA0_CH1FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH2CTL  ========================================================= */
#define DMA0_CH2CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA0_CH2CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA0_CH2CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA0_CH2CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA0_CH2CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA0_CH2CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA0_CH2CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA0_CH2CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA0_CH2CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA0_CH2CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA0_CH2CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA0_CH2CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA0_CH2CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH2CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA0_CH2CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH2CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA0_CH2CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA0_CH2CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA0_CH2CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA0_CH2CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA0_CH2CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA0_CH2CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA0_CH2CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH2CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA0_CH2CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH2CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA0_CH2CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH2CNT  ========================================================= */
#define DMA0_CH2CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA0_CH2CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH2PADDR  ======================================================== */
#define DMA0_CH2PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA0_CH2PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH2M0ADDR  ======================================================= */
#define DMA0_CH2M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA0_CH2M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH2M1ADDR  ======================================================= */
#define DMA0_CH2M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA0_CH2M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH2FCTL  ======================================================== */
#define DMA0_CH2FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA0_CH2FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA0_CH2FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA0_CH2FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH2FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA0_CH2FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA0_CH2FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA0_CH2FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH3CTL  ========================================================= */
#define DMA0_CH3CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA0_CH3CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA0_CH3CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA0_CH3CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA0_CH3CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA0_CH3CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA0_CH3CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA0_CH3CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA0_CH3CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA0_CH3CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA0_CH3CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA0_CH3CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA0_CH3CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH3CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA0_CH3CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH3CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA0_CH3CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA0_CH3CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA0_CH3CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA0_CH3CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA0_CH3CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA0_CH3CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA0_CH3CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH3CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA0_CH3CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH3CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA0_CH3CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH3CNT  ========================================================= */
#define DMA0_CH3CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA0_CH3CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH3PADDR  ======================================================== */
#define DMA0_CH3PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA0_CH3PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH3M0ADDR  ======================================================= */
#define DMA0_CH3M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA0_CH3M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH3M1ADDR  ======================================================= */
#define DMA0_CH3M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA0_CH3M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH3FCTL  ======================================================== */
#define DMA0_CH3FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA0_CH3FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA0_CH3FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA0_CH3FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH3FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA0_CH3FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA0_CH3FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA0_CH3FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH4CTL  ========================================================= */
#define DMA0_CH4CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA0_CH4CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA0_CH4CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA0_CH4CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA0_CH4CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA0_CH4CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA0_CH4CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA0_CH4CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA0_CH4CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA0_CH4CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA0_CH4CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA0_CH4CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA0_CH4CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH4CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA0_CH4CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH4CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA0_CH4CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA0_CH4CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA0_CH4CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA0_CH4CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA0_CH4CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA0_CH4CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA0_CH4CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH4CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA0_CH4CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH4CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA0_CH4CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH4CNT  ========================================================= */
#define DMA0_CH4CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA0_CH4CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH4PADDR  ======================================================== */
#define DMA0_CH4PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA0_CH4PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH4M0ADDR  ======================================================= */
#define DMA0_CH4M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA0_CH4M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH4M1ADDR  ======================================================= */
#define DMA0_CH4M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA0_CH4M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH4FCTL  ======================================================== */
#define DMA0_CH4FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA0_CH4FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA0_CH4FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA0_CH4FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH4FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA0_CH4FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA0_CH4FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA0_CH4FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH5CTL  ========================================================= */
#define DMA0_CH5CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA0_CH5CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA0_CH5CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA0_CH5CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA0_CH5CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA0_CH5CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA0_CH5CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA0_CH5CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA0_CH5CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA0_CH5CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA0_CH5CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA0_CH5CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA0_CH5CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH5CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA0_CH5CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH5CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA0_CH5CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA0_CH5CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA0_CH5CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA0_CH5CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA0_CH5CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA0_CH5CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA0_CH5CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH5CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA0_CH5CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH5CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA0_CH5CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH5CNT  ========================================================= */
#define DMA0_CH5CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA0_CH5CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH5PADDR  ======================================================== */
#define DMA0_CH5PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA0_CH5PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH5M0ADDR  ======================================================= */
#define DMA0_CH5M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA0_CH5M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH5M1ADDR  ======================================================= */
#define DMA0_CH5M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA0_CH5M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH5FCTL  ======================================================== */
#define DMA0_CH5FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA0_CH5FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA0_CH5FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA0_CH5FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH5FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA0_CH5FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA0_CH5FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA0_CH5FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH6CTL  ========================================================= */
#define DMA0_CH6CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA0_CH6CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA0_CH6CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA0_CH6CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA0_CH6CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA0_CH6CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA0_CH6CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA0_CH6CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA0_CH6CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA0_CH6CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA0_CH6CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA0_CH6CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA0_CH6CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH6CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA0_CH6CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH6CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA0_CH6CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA0_CH6CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA0_CH6CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA0_CH6CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA0_CH6CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA0_CH6CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA0_CH6CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH6CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA0_CH6CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH6CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA0_CH6CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH6CNT  ========================================================= */
#define DMA0_CH6CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA0_CH6CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH6PADDR  ======================================================== */
#define DMA0_CH6PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA0_CH6PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH6M0ADDR  ======================================================= */
#define DMA0_CH6M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA0_CH6M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH6M1ADDR  ======================================================= */
#define DMA0_CH6M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA0_CH6M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH6FCTL  ======================================================== */
#define DMA0_CH6FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA0_CH6FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA0_CH6FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA0_CH6FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH6FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA0_CH6FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA0_CH6FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA0_CH6FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH7CTL  ========================================================= */
#define DMA0_CH7CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA0_CH7CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA0_CH7CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA0_CH7CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA0_CH7CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA0_CH7CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA0_CH7CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA0_CH7CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA0_CH7CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA0_CH7CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA0_CH7CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA0_CH7CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA0_CH7CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH7CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA0_CH7CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA0_CH7CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA0_CH7CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA0_CH7CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA0_CH7CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA0_CH7CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA0_CH7CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA0_CH7CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA0_CH7CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH7CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA0_CH7CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA0_CH7CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA0_CH7CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH7CNT  ========================================================= */
#define DMA0_CH7CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA0_CH7CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH7PADDR  ======================================================== */
#define DMA0_CH7PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA0_CH7PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH7M0ADDR  ======================================================= */
#define DMA0_CH7M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA0_CH7M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH7M1ADDR  ======================================================= */
#define DMA0_CH7M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA0_CH7M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH7FCTL  ======================================================== */
#define DMA0_CH7FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA0_CH7FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA0_CH7FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA0_CH7FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA0_CH7FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA0_CH7FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA0_CH7FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA0_CH7FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           DMA1                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  INTF0  ========================================================= */
#define DMA1_INTF0_FEEIF0_Pos             (0UL)                     /*!< FEEIF0 (Bit 0) */
#define DMA1_INTF0_FEEIF0_Msk             (0x1UL)                   /*!< FEEIF0 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_SDEIF0_Pos             (2UL)                     /*!< SDEIF0 (Bit 2) */
#define DMA1_INTF0_SDEIF0_Msk             (0x4UL)                   /*!< SDEIF0 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_TAEIF0_Pos             (3UL)                     /*!< TAEIF0 (Bit 3) */
#define DMA1_INTF0_TAEIF0_Msk             (0x8UL)                   /*!< TAEIF0 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_HTFIF0_Pos             (4UL)                     /*!< HTFIF0 (Bit 4) */
#define DMA1_INTF0_HTFIF0_Msk             (0x10UL)                  /*!< HTFIF0 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_FTFIF0_Pos             (5UL)                     /*!< FTFIF0 (Bit 5) */
#define DMA1_INTF0_FTFIF0_Msk             (0x20UL)                  /*!< FTFIF0 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_FEEIF1_Pos             (6UL)                     /*!< FEEIF1 (Bit 6) */
#define DMA1_INTF0_FEEIF1_Msk             (0x40UL)                  /*!< FEEIF1 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_SDEIF1_Pos             (8UL)                     /*!< SDEIF1 (Bit 8) */
#define DMA1_INTF0_SDEIF1_Msk             (0x100UL)                 /*!< SDEIF1 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_TAEIF1_Pos             (9UL)                     /*!< TAEIF1 (Bit 9) */
#define DMA1_INTF0_TAEIF1_Msk             (0x200UL)                 /*!< TAEIF1 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_HTFIF1_Pos             (10UL)                    /*!< HTFIF1 (Bit 10) */
#define DMA1_INTF0_HTFIF1_Msk             (0x400UL)                 /*!< HTFIF1 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_FTFIF1_Pos             (11UL)                    /*!< FTFIF1 (Bit 11) */
#define DMA1_INTF0_FTFIF1_Msk             (0x800UL)                 /*!< FTFIF1 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_FEEIF2_Pos             (16UL)                    /*!< FEEIF2 (Bit 16) */
#define DMA1_INTF0_FEEIF2_Msk             (0x10000UL)               /*!< FEEIF2 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_SDEIF2_Pos             (18UL)                    /*!< SDEIF2 (Bit 18) */
#define DMA1_INTF0_SDEIF2_Msk             (0x40000UL)               /*!< SDEIF2 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_TAEIF2_Pos             (19UL)                    /*!< TAEIF2 (Bit 19) */
#define DMA1_INTF0_TAEIF2_Msk             (0x80000UL)               /*!< TAEIF2 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_HTFIF2_Pos             (20UL)                    /*!< HTFIF2 (Bit 20) */
#define DMA1_INTF0_HTFIF2_Msk             (0x100000UL)              /*!< HTFIF2 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_FTFIF2_Pos             (21UL)                    /*!< FTFIF2 (Bit 21) */
#define DMA1_INTF0_FTFIF2_Msk             (0x200000UL)              /*!< FTFIF2 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_FEEIF3_Pos             (22UL)                    /*!< FEEIF3 (Bit 22) */
#define DMA1_INTF0_FEEIF3_Msk             (0x400000UL)              /*!< FEEIF3 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_SDEIF3_Pos             (24UL)                    /*!< SDEIF3 (Bit 24) */
#define DMA1_INTF0_SDEIF3_Msk             (0x1000000UL)             /*!< SDEIF3 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_TAEIF3_Pos             (25UL)                    /*!< TAEIF3 (Bit 25) */
#define DMA1_INTF0_TAEIF3_Msk             (0x2000000UL)             /*!< TAEIF3 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_HTFIF3_Pos             (26UL)                    /*!< HTFIF3 (Bit 26) */
#define DMA1_INTF0_HTFIF3_Msk             (0x4000000UL)             /*!< HTFIF3 (Bitfield-Mask: 0x01) */
#define DMA1_INTF0_FTFIF3_Pos             (27UL)                    /*!< FTFIF3 (Bit 27) */
#define DMA1_INTF0_FTFIF3_Msk             (0x8000000UL)             /*!< FTFIF3 (Bitfield-Mask: 0x01) */
/* =========================================================  INTF1  ========================================================= */
#define DMA1_INTF1_FEEIF4_Pos             (0UL)                     /*!< FEEIF4 (Bit 0) */
#define DMA1_INTF1_FEEIF4_Msk             (0x1UL)                   /*!< FEEIF4 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_SDEIF4_Pos             (2UL)                     /*!< SDEIF4 (Bit 2) */
#define DMA1_INTF1_SDEIF4_Msk             (0x4UL)                   /*!< SDEIF4 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_TAEIF4_Pos             (3UL)                     /*!< TAEIF4 (Bit 3) */
#define DMA1_INTF1_TAEIF4_Msk             (0x8UL)                   /*!< TAEIF4 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_HTFIF4_Pos             (4UL)                     /*!< HTFIF4 (Bit 4) */
#define DMA1_INTF1_HTFIF4_Msk             (0x10UL)                  /*!< HTFIF4 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_FTFIF4_Pos             (5UL)                     /*!< FTFIF4 (Bit 5) */
#define DMA1_INTF1_FTFIF4_Msk             (0x20UL)                  /*!< FTFIF4 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_FEEIF5_Pos             (6UL)                     /*!< FEEIF5 (Bit 6) */
#define DMA1_INTF1_FEEIF5_Msk             (0x40UL)                  /*!< FEEIF5 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_SDEIF5_Pos             (8UL)                     /*!< SDEIF5 (Bit 8) */
#define DMA1_INTF1_SDEIF5_Msk             (0x100UL)                 /*!< SDEIF5 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_TAEIF5_Pos             (9UL)                     /*!< TAEIF5 (Bit 9) */
#define DMA1_INTF1_TAEIF5_Msk             (0x200UL)                 /*!< TAEIF5 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_HTFIF5_Pos             (10UL)                    /*!< HTFIF5 (Bit 10) */
#define DMA1_INTF1_HTFIF5_Msk             (0x400UL)                 /*!< HTFIF5 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_FTFIF5_Pos             (11UL)                    /*!< FTFIF5 (Bit 11) */
#define DMA1_INTF1_FTFIF5_Msk             (0x800UL)                 /*!< FTFIF5 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_FEEIF6_Pos             (16UL)                    /*!< FEEIF6 (Bit 16) */
#define DMA1_INTF1_FEEIF6_Msk             (0x10000UL)               /*!< FEEIF6 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_SDEIF6_Pos             (18UL)                    /*!< SDEIF6 (Bit 18) */
#define DMA1_INTF1_SDEIF6_Msk             (0x40000UL)               /*!< SDEIF6 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_TAEIF6_Pos             (19UL)                    /*!< TAEIF6 (Bit 19) */
#define DMA1_INTF1_TAEIF6_Msk             (0x80000UL)               /*!< TAEIF6 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_HTFIF6_Pos             (20UL)                    /*!< HTFIF6 (Bit 20) */
#define DMA1_INTF1_HTFIF6_Msk             (0x100000UL)              /*!< HTFIF6 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_FTFIF6_Pos             (21UL)                    /*!< FTFIF6 (Bit 21) */
#define DMA1_INTF1_FTFIF6_Msk             (0x200000UL)              /*!< FTFIF6 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_FEEIF7_Pos             (22UL)                    /*!< FEEIF7 (Bit 22) */
#define DMA1_INTF1_FEEIF7_Msk             (0x400000UL)              /*!< FEEIF7 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_SDEIF7_Pos             (24UL)                    /*!< SDEIF7 (Bit 24) */
#define DMA1_INTF1_SDEIF7_Msk             (0x1000000UL)             /*!< SDEIF7 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_TAEIF7_Pos             (25UL)                    /*!< TAEIF7 (Bit 25) */
#define DMA1_INTF1_TAEIF7_Msk             (0x2000000UL)             /*!< TAEIF7 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_HTFIF7_Pos             (26UL)                    /*!< HTFIF7 (Bit 26) */
#define DMA1_INTF1_HTFIF7_Msk             (0x4000000UL)             /*!< HTFIF7 (Bitfield-Mask: 0x01) */
#define DMA1_INTF1_FTFIF7_Pos             (27UL)                    /*!< FTFIF7 (Bit 27) */
#define DMA1_INTF1_FTFIF7_Msk             (0x8000000UL)             /*!< FTFIF7 (Bitfield-Mask: 0x01) */
/* =========================================================  INTC0  ========================================================= */
#define DMA1_INTC0_FEEIFC0_Pos            (0UL)                     /*!< FEEIFC0 (Bit 0) */
#define DMA1_INTC0_FEEIFC0_Msk            (0x1UL)                   /*!< FEEIFC0 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_SDEIFC0_Pos            (2UL)                     /*!< SDEIFC0 (Bit 2) */
#define DMA1_INTC0_SDEIFC0_Msk            (0x4UL)                   /*!< SDEIFC0 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_TAEIFC0_Pos            (3UL)                     /*!< TAEIFC0 (Bit 3) */
#define DMA1_INTC0_TAEIFC0_Msk            (0x8UL)                   /*!< TAEIFC0 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_HTFIFC0_Pos            (4UL)                     /*!< HTFIFC0 (Bit 4) */
#define DMA1_INTC0_HTFIFC0_Msk            (0x10UL)                  /*!< HTFIFC0 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_FTFIFC0_Pos            (5UL)                     /*!< FTFIFC0 (Bit 5) */
#define DMA1_INTC0_FTFIFC0_Msk            (0x20UL)                  /*!< FTFIFC0 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_FEEIFC1_Pos            (6UL)                     /*!< FEEIFC1 (Bit 6) */
#define DMA1_INTC0_FEEIFC1_Msk            (0x40UL)                  /*!< FEEIFC1 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_SDEIFC1_Pos            (8UL)                     /*!< SDEIFC1 (Bit 8) */
#define DMA1_INTC0_SDEIFC1_Msk            (0x100UL)                 /*!< SDEIFC1 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_TAEIFC1_Pos            (9UL)                     /*!< TAEIFC1 (Bit 9) */
#define DMA1_INTC0_TAEIFC1_Msk            (0x200UL)                 /*!< TAEIFC1 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_HTFIFC1_Pos            (10UL)                    /*!< HTFIFC1 (Bit 10) */
#define DMA1_INTC0_HTFIFC1_Msk            (0x400UL)                 /*!< HTFIFC1 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_FTFIFC1_Pos            (11UL)                    /*!< FTFIFC1 (Bit 11) */
#define DMA1_INTC0_FTFIFC1_Msk            (0x800UL)                 /*!< FTFIFC1 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_FEEIFC2_Pos            (16UL)                    /*!< FEEIFC2 (Bit 16) */
#define DMA1_INTC0_FEEIFC2_Msk            (0x10000UL)               /*!< FEEIFC2 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_SDEIFC2_Pos            (18UL)                    /*!< SDEIFC2 (Bit 18) */
#define DMA1_INTC0_SDEIFC2_Msk            (0x40000UL)               /*!< SDEIFC2 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_TAEIFC2_Pos            (19UL)                    /*!< TAEIFC2 (Bit 19) */
#define DMA1_INTC0_TAEIFC2_Msk            (0x80000UL)               /*!< TAEIFC2 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_HTFIFC2_Pos            (20UL)                    /*!< HTFIFC2 (Bit 20) */
#define DMA1_INTC0_HTFIFC2_Msk            (0x100000UL)              /*!< HTFIFC2 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_FTFIFC2_Pos            (21UL)                    /*!< FTFIFC2 (Bit 21) */
#define DMA1_INTC0_FTFIFC2_Msk            (0x200000UL)              /*!< FTFIFC2 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_FEEIFC3_Pos            (22UL)                    /*!< FEEIFC3 (Bit 22) */
#define DMA1_INTC0_FEEIFC3_Msk            (0x400000UL)              /*!< FEEIFC3 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_SDEIFC3_Pos            (24UL)                    /*!< SDEIFC3 (Bit 24) */
#define DMA1_INTC0_SDEIFC3_Msk            (0x1000000UL)             /*!< SDEIFC3 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_TAEIFC3_Pos            (25UL)                    /*!< TAEIFC3 (Bit 25) */
#define DMA1_INTC0_TAEIFC3_Msk            (0x2000000UL)             /*!< TAEIFC3 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_HTFIFC3_Pos            (26UL)                    /*!< HTFIFC3 (Bit 26) */
#define DMA1_INTC0_HTFIFC3_Msk            (0x4000000UL)             /*!< HTFIFC3 (Bitfield-Mask: 0x01) */
#define DMA1_INTC0_FTFIFC3_Pos            (27UL)                    /*!< FTFIFC3 (Bit 27) */
#define DMA1_INTC0_FTFIFC3_Msk            (0x8000000UL)             /*!< FTFIFC3 (Bitfield-Mask: 0x01) */
/* =========================================================  INTC1  ========================================================= */
#define DMA1_INTC1_FEEIFC4_Pos            (0UL)                     /*!< FEEIFC4 (Bit 0) */
#define DMA1_INTC1_FEEIFC4_Msk            (0x1UL)                   /*!< FEEIFC4 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_SDEIFC4_Pos            (2UL)                     /*!< SDEIFC4 (Bit 2) */
#define DMA1_INTC1_SDEIFC4_Msk            (0x4UL)                   /*!< SDEIFC4 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_TAEIFC4_Pos            (3UL)                     /*!< TAEIFC4 (Bit 3) */
#define DMA1_INTC1_TAEIFC4_Msk            (0x8UL)                   /*!< TAEIFC4 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_HTFIFC4_Pos            (4UL)                     /*!< HTFIFC4 (Bit 4) */
#define DMA1_INTC1_HTFIFC4_Msk            (0x10UL)                  /*!< HTFIFC4 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_FTFIFC4_Pos            (5UL)                     /*!< FTFIFC4 (Bit 5) */
#define DMA1_INTC1_FTFIFC4_Msk            (0x20UL)                  /*!< FTFIFC4 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_FEEIFC5_Pos            (6UL)                     /*!< FEEIFC5 (Bit 6) */
#define DMA1_INTC1_FEEIFC5_Msk            (0x40UL)                  /*!< FEEIFC5 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_SDEIFC5_Pos            (8UL)                     /*!< SDEIFC5 (Bit 8) */
#define DMA1_INTC1_SDEIFC5_Msk            (0x100UL)                 /*!< SDEIFC5 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_TAEIFC5_Pos            (9UL)                     /*!< TAEIFC5 (Bit 9) */
#define DMA1_INTC1_TAEIFC5_Msk            (0x200UL)                 /*!< TAEIFC5 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_HTFIFC5_Pos            (10UL)                    /*!< HTFIFC5 (Bit 10) */
#define DMA1_INTC1_HTFIFC5_Msk            (0x400UL)                 /*!< HTFIFC5 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_FTFIFC5_Pos            (11UL)                    /*!< FTFIFC5 (Bit 11) */
#define DMA1_INTC1_FTFIFC5_Msk            (0x800UL)                 /*!< FTFIFC5 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_FEEIFC6_Pos            (16UL)                    /*!< FEEIFC6 (Bit 16) */
#define DMA1_INTC1_FEEIFC6_Msk            (0x10000UL)               /*!< FEEIFC6 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_SDEIFC6_Pos            (18UL)                    /*!< SDEIFC6 (Bit 18) */
#define DMA1_INTC1_SDEIFC6_Msk            (0x40000UL)               /*!< SDEIFC6 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_TAEIFC6_Pos            (19UL)                    /*!< TAEIFC6 (Bit 19) */
#define DMA1_INTC1_TAEIFC6_Msk            (0x80000UL)               /*!< TAEIFC6 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_HTFIFC6_Pos            (20UL)                    /*!< HTFIFC6 (Bit 20) */
#define DMA1_INTC1_HTFIFC6_Msk            (0x100000UL)              /*!< HTFIFC6 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_FTFIFC6_Pos            (21UL)                    /*!< FTFIFC6 (Bit 21) */
#define DMA1_INTC1_FTFIFC6_Msk            (0x200000UL)              /*!< FTFIFC6 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_FEEIFC7_Pos            (22UL)                    /*!< FEEIFC7 (Bit 22) */
#define DMA1_INTC1_FEEIFC7_Msk            (0x400000UL)              /*!< FEEIFC7 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_SDEIFC7_Pos            (24UL)                    /*!< SDEIFC7 (Bit 24) */
#define DMA1_INTC1_SDEIFC7_Msk            (0x1000000UL)             /*!< SDEIFC7 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_TAEIFC7_Pos            (25UL)                    /*!< TAEIFC7 (Bit 25) */
#define DMA1_INTC1_TAEIFC7_Msk            (0x2000000UL)             /*!< TAEIFC7 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_HTFIFC7_Pos            (26UL)                    /*!< HTFIFC7 (Bit 26) */
#define DMA1_INTC1_HTFIFC7_Msk            (0x4000000UL)             /*!< HTFIFC7 (Bitfield-Mask: 0x01) */
#define DMA1_INTC1_FTFIFC7_Pos            (27UL)                    /*!< FTFIFC7 (Bit 27) */
#define DMA1_INTC1_FTFIFC7_Msk            (0x8000000UL)             /*!< FTFIFC7 (Bitfield-Mask: 0x01) */
/* ========================================================  CH0CTL  ========================================================= */
#define DMA1_CH0CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA1_CH0CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA1_CH0CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA1_CH0CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA1_CH0CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA1_CH0CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA1_CH0CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA1_CH0CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA1_CH0CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA1_CH0CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA1_CH0CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA1_CH0CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA1_CH0CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH0CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA1_CH0CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH0CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA1_CH0CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA1_CH0CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA1_CH0CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA1_CH0CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA1_CH0CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA1_CH0CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA1_CH0CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH0CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA1_CH0CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH0CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA1_CH0CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH0CNT  ========================================================= */
#define DMA1_CH0CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA1_CH0CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH0PADDR  ======================================================== */
#define DMA1_CH0PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA1_CH0PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH0M0ADDR  ======================================================= */
#define DMA1_CH0M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA1_CH0M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH0M1ADDR  ======================================================= */
#define DMA1_CH0M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA1_CH0M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH0FCTL  ======================================================== */
#define DMA1_CH0FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA1_CH0FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA1_CH0FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA1_CH0FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH0FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA1_CH0FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA1_CH0FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA1_CH0FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH1CTL  ========================================================= */
#define DMA1_CH1CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA1_CH1CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA1_CH1CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA1_CH1CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA1_CH1CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA1_CH1CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA1_CH1CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA1_CH1CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA1_CH1CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA1_CH1CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA1_CH1CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA1_CH1CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA1_CH1CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH1CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA1_CH1CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH1CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA1_CH1CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA1_CH1CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA1_CH1CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA1_CH1CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA1_CH1CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA1_CH1CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA1_CH1CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH1CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA1_CH1CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH1CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA1_CH1CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH1CNT  ========================================================= */
#define DMA1_CH1CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA1_CH1CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH1PADDR  ======================================================== */
#define DMA1_CH1PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA1_CH1PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH1M0ADDR  ======================================================= */
#define DMA1_CH1M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA1_CH1M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH1M1ADDR  ======================================================= */
#define DMA1_CH1M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA1_CH1M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH1FCTL  ======================================================== */
#define DMA1_CH1FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA1_CH1FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA1_CH1FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA1_CH1FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH1FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA1_CH1FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA1_CH1FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA1_CH1FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH2CTL  ========================================================= */
#define DMA1_CH2CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA1_CH2CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA1_CH2CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA1_CH2CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA1_CH2CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA1_CH2CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA1_CH2CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA1_CH2CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA1_CH2CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA1_CH2CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA1_CH2CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA1_CH2CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA1_CH2CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH2CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA1_CH2CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH2CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA1_CH2CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA1_CH2CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA1_CH2CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA1_CH2CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA1_CH2CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA1_CH2CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA1_CH2CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH2CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA1_CH2CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH2CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA1_CH2CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH2CNT  ========================================================= */
#define DMA1_CH2CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA1_CH2CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH2PADDR  ======================================================== */
#define DMA1_CH2PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA1_CH2PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH2M0ADDR  ======================================================= */
#define DMA1_CH2M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA1_CH2M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH2M1ADDR  ======================================================= */
#define DMA1_CH2M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA1_CH2M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH2FCTL  ======================================================== */
#define DMA1_CH2FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA1_CH2FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA1_CH2FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA1_CH2FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH2FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA1_CH2FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA1_CH2FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA1_CH2FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH3CTL  ========================================================= */
#define DMA1_CH3CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA1_CH3CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA1_CH3CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA1_CH3CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA1_CH3CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA1_CH3CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA1_CH3CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA1_CH3CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA1_CH3CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA1_CH3CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA1_CH3CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA1_CH3CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA1_CH3CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH3CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA1_CH3CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH3CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA1_CH3CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA1_CH3CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA1_CH3CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA1_CH3CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA1_CH3CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA1_CH3CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA1_CH3CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH3CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA1_CH3CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH3CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA1_CH3CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH3CNT  ========================================================= */
#define DMA1_CH3CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA1_CH3CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH3PADDR  ======================================================== */
#define DMA1_CH3PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA1_CH3PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH3M0ADDR  ======================================================= */
#define DMA1_CH3M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA1_CH3M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH3M1ADDR  ======================================================= */
#define DMA1_CH3M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA1_CH3M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH3FCTL  ======================================================== */
#define DMA1_CH3FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA1_CH3FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA1_CH3FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA1_CH3FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH3FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA1_CH3FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA1_CH3FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA1_CH3FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH4CTL  ========================================================= */
#define DMA1_CH4CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA1_CH4CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA1_CH4CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA1_CH4CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA1_CH4CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA1_CH4CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA1_CH4CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA1_CH4CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA1_CH4CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA1_CH4CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA1_CH4CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA1_CH4CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA1_CH4CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH4CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA1_CH4CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH4CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA1_CH4CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA1_CH4CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA1_CH4CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA1_CH4CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA1_CH4CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA1_CH4CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA1_CH4CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH4CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA1_CH4CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH4CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA1_CH4CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH4CNT  ========================================================= */
#define DMA1_CH4CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA1_CH4CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH4PADDR  ======================================================== */
#define DMA1_CH4PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA1_CH4PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH4M0ADDR  ======================================================= */
#define DMA1_CH4M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA1_CH4M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH4M1ADDR  ======================================================= */
#define DMA1_CH4M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA1_CH4M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH4FCTL  ======================================================== */
#define DMA1_CH4FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA1_CH4FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA1_CH4FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA1_CH4FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH4FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA1_CH4FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA1_CH4FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA1_CH4FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH5CTL  ========================================================= */
#define DMA1_CH5CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA1_CH5CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA1_CH5CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA1_CH5CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA1_CH5CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA1_CH5CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA1_CH5CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA1_CH5CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA1_CH5CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA1_CH5CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA1_CH5CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA1_CH5CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA1_CH5CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH5CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA1_CH5CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH5CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA1_CH5CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA1_CH5CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA1_CH5CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA1_CH5CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA1_CH5CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA1_CH5CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA1_CH5CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH5CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA1_CH5CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH5CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA1_CH5CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH5CNT  ========================================================= */
#define DMA1_CH5CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA1_CH5CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH5PADDR  ======================================================== */
#define DMA1_CH5PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA1_CH5PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH5M0ADDR  ======================================================= */
#define DMA1_CH5M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA1_CH5M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH5M1ADDR  ======================================================= */
#define DMA1_CH5M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA1_CH5M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH5FCTL  ======================================================== */
#define DMA1_CH5FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA1_CH5FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA1_CH5FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA1_CH5FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH5FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA1_CH5FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA1_CH5FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA1_CH5FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH6CTL  ========================================================= */
#define DMA1_CH6CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA1_CH6CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA1_CH6CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA1_CH6CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA1_CH6CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA1_CH6CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA1_CH6CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA1_CH6CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA1_CH6CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA1_CH6CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA1_CH6CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA1_CH6CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA1_CH6CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH6CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA1_CH6CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH6CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA1_CH6CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA1_CH6CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA1_CH6CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA1_CH6CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA1_CH6CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA1_CH6CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA1_CH6CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH6CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA1_CH6CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH6CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA1_CH6CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH6CNT  ========================================================= */
#define DMA1_CH6CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA1_CH6CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH6PADDR  ======================================================== */
#define DMA1_CH6PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA1_CH6PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH6M0ADDR  ======================================================= */
#define DMA1_CH6M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA1_CH6M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH6M1ADDR  ======================================================= */
#define DMA1_CH6M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA1_CH6M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH6FCTL  ======================================================== */
#define DMA1_CH6FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA1_CH6FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA1_CH6FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA1_CH6FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH6FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA1_CH6FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA1_CH6FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA1_CH6FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */
/* ========================================================  CH7CTL  ========================================================= */
#define DMA1_CH7CTL_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0) */
#define DMA1_CH7CTL_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_SDEIE_Pos             (1UL)                     /*!< SDEIE (Bit 1) */
#define DMA1_CH7CTL_SDEIE_Msk             (0x2UL)                   /*!< SDEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_TAEIE_Pos             (2UL)                     /*!< TAEIE (Bit 2) */
#define DMA1_CH7CTL_TAEIE_Msk             (0x4UL)                   /*!< TAEIE (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_HTFIE_Pos             (3UL)                     /*!< HTFIE (Bit 3) */
#define DMA1_CH7CTL_HTFIE_Msk             (0x8UL)                   /*!< HTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_FTFIE_Pos             (4UL)                     /*!< FTFIE (Bit 4) */
#define DMA1_CH7CTL_FTFIE_Msk             (0x10UL)                  /*!< FTFIE (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_TFCS_Pos              (5UL)                     /*!< TFCS (Bit 5) */
#define DMA1_CH7CTL_TFCS_Msk              (0x20UL)                  /*!< TFCS (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_TM_Pos                (6UL)                     /*!< TM (Bit 6) */
#define DMA1_CH7CTL_TM_Msk                (0xc0UL)                  /*!< TM (Bitfield-Mask: 0x03) */
#define DMA1_CH7CTL_CMEN_Pos              (8UL)                     /*!< CMEN (Bit 8) */
#define DMA1_CH7CTL_CMEN_Msk              (0x100UL)                 /*!< CMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_PNAGA_Pos             (9UL)                     /*!< PNAGA (Bit 9) */
#define DMA1_CH7CTL_PNAGA_Msk             (0x200UL)                 /*!< PNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_MNAGA_Pos             (10UL)                    /*!< MNAGA (Bit 10) */
#define DMA1_CH7CTL_MNAGA_Msk             (0x400UL)                 /*!< MNAGA (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_PWIDTH_Pos            (11UL)                    /*!< PWIDTH (Bit 11) */
#define DMA1_CH7CTL_PWIDTH_Msk            (0x1800UL)                /*!< PWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH7CTL_MWIDTH_Pos            (13UL)                    /*!< MWIDTH (Bit 13) */
#define DMA1_CH7CTL_MWIDTH_Msk            (0x6000UL)                /*!< MWIDTH (Bitfield-Mask: 0x03) */
#define DMA1_CH7CTL_PAIF_Pos              (15UL)                    /*!< PAIF (Bit 15) */
#define DMA1_CH7CTL_PAIF_Msk              (0x8000UL)                /*!< PAIF (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_PRIO_Pos              (16UL)                    /*!< PRIO (Bit 16) */
#define DMA1_CH7CTL_PRIO_Msk              (0x30000UL)               /*!< PRIO (Bitfield-Mask: 0x03) */
#define DMA1_CH7CTL_SBMEN_Pos             (18UL)                    /*!< SBMEN (Bit 18) */
#define DMA1_CH7CTL_SBMEN_Msk             (0x40000UL)               /*!< SBMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_MBS_Pos               (19UL)                    /*!< MBS (Bit 19) */
#define DMA1_CH7CTL_MBS_Msk               (0x80000UL)               /*!< MBS (Bitfield-Mask: 0x01) */
#define DMA1_CH7CTL_PBURST_Pos            (21UL)                    /*!< PBURST (Bit 21) */
#define DMA1_CH7CTL_PBURST_Msk            (0x600000UL)              /*!< PBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH7CTL_MBURST_Pos            (23UL)                    /*!< MBURST (Bit 23) */
#define DMA1_CH7CTL_MBURST_Msk            (0x1800000UL)             /*!< MBURST (Bitfield-Mask: 0x03) */
#define DMA1_CH7CTL_PERIEN_Pos            (25UL)                    /*!< PERIEN (Bit 25) */
#define DMA1_CH7CTL_PERIEN_Msk            (0xe000000UL)             /*!< PERIEN (Bitfield-Mask: 0x07) */
/* ========================================================  CH7CNT  ========================================================= */
#define DMA1_CH7CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define DMA1_CH7CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* =======================================================  CH7PADDR  ======================================================== */
#define DMA1_CH7PADDR_PADDR_Pos           (0UL)                     /*!< PADDR (Bit 0) */
#define DMA1_CH7PADDR_PADDR_Msk           (0xffffffffUL)            /*!< PADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH7M0ADDR  ======================================================= */
#define DMA1_CH7M0ADDR_M0ADDR_Pos         (0UL)                     /*!< M0ADDR (Bit 0) */
#define DMA1_CH7M0ADDR_M0ADDR_Msk         (0xffffffffUL)            /*!< M0ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CH7M1ADDR  ======================================================= */
#define DMA1_CH7M1ADDR_M1ADDR_Pos         (0UL)                     /*!< M1ADDR (Bit 0) */
#define DMA1_CH7M1ADDR_M1ADDR_Msk         (0xffffffffUL)            /*!< M1ADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CH7FCTL  ======================================================== */
#define DMA1_CH7FCTL_FCCV_Pos             (0UL)                     /*!< FCCV (Bit 0) */
#define DMA1_CH7FCTL_FCCV_Msk             (0x3UL)                   /*!< FCCV (Bitfield-Mask: 0x03) */
#define DMA1_CH7FCTL_MDMEN_Pos            (2UL)                     /*!< MDMEN (Bit 2) */
#define DMA1_CH7FCTL_MDMEN_Msk            (0x4UL)                   /*!< MDMEN (Bitfield-Mask: 0x01) */
#define DMA1_CH7FCTL_FCNT_Pos             (3UL)                     /*!< FCNT (Bit 3) */
#define DMA1_CH7FCTL_FCNT_Msk             (0x38UL)                  /*!< FCNT (Bitfield-Mask: 0x07) */
#define DMA1_CH7FCTL_FEEIE_Pos            (7UL)                     /*!< FEEIE (Bit 7) */
#define DMA1_CH7FCTL_FEEIE_Msk            (0x80UL)                  /*!< FEEIE (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                         ENET_DMA                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  DMA_BCTL  ======================================================== */
#define ENET_DMA_DMA_BCTL_SWR_Pos         (0UL)                     /*!< SWR (Bit 0) */
#define ENET_DMA_DMA_BCTL_SWR_Msk         (0x1UL)                   /*!< SWR (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_BCTL_DAB_Pos         (1UL)                     /*!< DAB (Bit 1) */
#define ENET_DMA_DMA_BCTL_DAB_Msk         (0x2UL)                   /*!< DAB (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_BCTL_DPSL_Pos        (2UL)                     /*!< DPSL (Bit 2) */
#define ENET_DMA_DMA_BCTL_DPSL_Msk        (0x7cUL)                  /*!< DPSL (Bitfield-Mask: 0x1f) */
#define ENET_DMA_DMA_BCTL_DFM_Pos         (7UL)                     /*!< DFM (Bit 7) */
#define ENET_DMA_DMA_BCTL_DFM_Msk         (0x80UL)                  /*!< DFM (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_BCTL_PGBL_Pos        (8UL)                     /*!< PGBL (Bit 8) */
#define ENET_DMA_DMA_BCTL_PGBL_Msk        (0x3f00UL)                /*!< PGBL (Bitfield-Mask: 0x3f) */
#define ENET_DMA_DMA_BCTL_RTPR_Pos        (14UL)                    /*!< RTPR (Bit 14) */
#define ENET_DMA_DMA_BCTL_RTPR_Msk        (0xc000UL)                /*!< RTPR (Bitfield-Mask: 0x03) */
#define ENET_DMA_DMA_BCTL_FB_Pos          (16UL)                    /*!< FB (Bit 16) */
#define ENET_DMA_DMA_BCTL_FB_Msk          (0x10000UL)               /*!< FB (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_BCTL_RXDP_Pos        (17UL)                    /*!< RXDP (Bit 17) */
#define ENET_DMA_DMA_BCTL_RXDP_Msk        (0x7e0000UL)              /*!< RXDP (Bitfield-Mask: 0x3f) */
#define ENET_DMA_DMA_BCTL_UIP_Pos         (23UL)                    /*!< UIP (Bit 23) */
#define ENET_DMA_DMA_BCTL_UIP_Msk         (0x800000UL)              /*!< UIP (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_BCTL_FPBL_Pos        (24UL)                    /*!< FPBL (Bit 24) */
#define ENET_DMA_DMA_BCTL_FPBL_Msk        (0x1000000UL)             /*!< FPBL (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_BCTL_AA_Pos          (25UL)                    /*!< AA (Bit 25) */
#define ENET_DMA_DMA_BCTL_AA_Msk          (0x2000000UL)             /*!< AA (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_BCTL_MB_Pos          (26UL)                    /*!< MB (Bit 26) */
#define ENET_DMA_DMA_BCTL_MB_Msk          (0x4000000UL)             /*!< MB (Bitfield-Mask: 0x01) */
/* =======================================================  DMA_TPEN  ======================================================== */
#define ENET_DMA_DMA_TPEN_TPE_Pos         (0UL)                     /*!< TPE (Bit 0) */
#define ENET_DMA_DMA_TPEN_TPE_Msk         (0xffffffffUL)            /*!< TPE (Bitfield-Mask: 0xffffffff) */
/* =======================================================  DMA_RPEN  ======================================================== */
#define ENET_DMA_DMA_RPEN_RPE_Pos         (0UL)                     /*!< RPE (Bit 0) */
#define ENET_DMA_DMA_RPEN_RPE_Msk         (0xffffffffUL)            /*!< RPE (Bitfield-Mask: 0xffffffff) */
/* ======================================================  DMA_RDTADDR  ====================================================== */
#define ENET_DMA_DMA_RDTADDR_SRT_Pos      (0UL)                     /*!< SRT (Bit 0) */
#define ENET_DMA_DMA_RDTADDR_SRT_Msk      (0xffffffffUL)            /*!< SRT (Bitfield-Mask: 0xffffffff) */
/* ======================================================  DMA_TDTADDR  ====================================================== */
#define ENET_DMA_DMA_TDTADDR_STT_Pos      (0UL)                     /*!< STT (Bit 0) */
#define ENET_DMA_DMA_TDTADDR_STT_Msk      (0xffffffffUL)            /*!< STT (Bitfield-Mask: 0xffffffff) */
/* =======================================================  DMA_STAT  ======================================================== */
#define ENET_DMA_DMA_STAT_TS_Pos          (0UL)                     /*!< TS (Bit 0) */
#define ENET_DMA_DMA_STAT_TS_Msk          (0x1UL)                   /*!< TS (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_TPS_Pos         (1UL)                     /*!< TPS (Bit 1) */
#define ENET_DMA_DMA_STAT_TPS_Msk         (0x2UL)                   /*!< TPS (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_TBU_Pos         (2UL)                     /*!< TBU (Bit 2) */
#define ENET_DMA_DMA_STAT_TBU_Msk         (0x4UL)                   /*!< TBU (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_TJT_Pos         (3UL)                     /*!< TJT (Bit 3) */
#define ENET_DMA_DMA_STAT_TJT_Msk         (0x8UL)                   /*!< TJT (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_RO_Pos          (4UL)                     /*!< RO (Bit 4) */
#define ENET_DMA_DMA_STAT_RO_Msk          (0x10UL)                  /*!< RO (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_TU_Pos          (5UL)                     /*!< TU (Bit 5) */
#define ENET_DMA_DMA_STAT_TU_Msk          (0x20UL)                  /*!< TU (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_RS_Pos          (6UL)                     /*!< RS (Bit 6) */
#define ENET_DMA_DMA_STAT_RS_Msk          (0x40UL)                  /*!< RS (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_RBU_Pos         (7UL)                     /*!< RBU (Bit 7) */
#define ENET_DMA_DMA_STAT_RBU_Msk         (0x80UL)                  /*!< RBU (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_RPS_Pos         (8UL)                     /*!< RPS (Bit 8) */
#define ENET_DMA_DMA_STAT_RPS_Msk         (0x100UL)                 /*!< RPS (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_RWT_Pos         (9UL)                     /*!< RWT (Bit 9) */
#define ENET_DMA_DMA_STAT_RWT_Msk         (0x200UL)                 /*!< RWT (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_ET_Pos          (10UL)                    /*!< ET (Bit 10) */
#define ENET_DMA_DMA_STAT_ET_Msk          (0x400UL)                 /*!< ET (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_FBE_Pos         (13UL)                    /*!< FBE (Bit 13) */
#define ENET_DMA_DMA_STAT_FBE_Msk         (0x2000UL)                /*!< FBE (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_ER_Pos          (14UL)                    /*!< ER (Bit 14) */
#define ENET_DMA_DMA_STAT_ER_Msk          (0x4000UL)                /*!< ER (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_AI_Pos          (15UL)                    /*!< AI (Bit 15) */
#define ENET_DMA_DMA_STAT_AI_Msk          (0x8000UL)                /*!< AI (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_NI_Pos          (16UL)                    /*!< NI (Bit 16) */
#define ENET_DMA_DMA_STAT_NI_Msk          (0x10000UL)               /*!< NI (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_RP_Pos          (17UL)                    /*!< RP (Bit 17) */
#define ENET_DMA_DMA_STAT_RP_Msk          (0xe0000UL)               /*!< RP (Bitfield-Mask: 0x07) */
#define ENET_DMA_DMA_STAT_TP_Pos          (20UL)                    /*!< TP (Bit 20) */
#define ENET_DMA_DMA_STAT_TP_Msk          (0x700000UL)              /*!< TP (Bitfield-Mask: 0x07) */
#define ENET_DMA_DMA_STAT_EB_Pos          (23UL)                    /*!< EB (Bit 23) */
#define ENET_DMA_DMA_STAT_EB_Msk          (0x3800000UL)             /*!< EB (Bitfield-Mask: 0x07) */
#define ENET_DMA_DMA_STAT_MSC_Pos         (27UL)                    /*!< MSC (Bit 27) */
#define ENET_DMA_DMA_STAT_MSC_Msk         (0x8000000UL)             /*!< MSC (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_WUM_Pos         (28UL)                    /*!< WUM (Bit 28) */
#define ENET_DMA_DMA_STAT_WUM_Msk         (0x10000000UL)            /*!< WUM (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_STAT_TST_Pos         (29UL)                    /*!< TST (Bit 29) */
#define ENET_DMA_DMA_STAT_TST_Msk         (0x20000000UL)            /*!< TST (Bitfield-Mask: 0x01) */
/* ========================================================  DMA_CTL  ======================================================== */
#define ENET_DMA_DMA_CTL_SRE_Pos          (1UL)                     /*!< SRE (Bit 1) */
#define ENET_DMA_DMA_CTL_SRE_Msk          (0x2UL)                   /*!< SRE (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_CTL_OSF_Pos          (2UL)                     /*!< OSF (Bit 2) */
#define ENET_DMA_DMA_CTL_OSF_Msk          (0x4UL)                   /*!< OSF (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_CTL_RTHC_Pos         (3UL)                     /*!< RTHC (Bit 3) */
#define ENET_DMA_DMA_CTL_RTHC_Msk         (0x18UL)                  /*!< RTHC (Bitfield-Mask: 0x03) */
#define ENET_DMA_DMA_CTL_FUF_Pos          (6UL)                     /*!< FUF (Bit 6) */
#define ENET_DMA_DMA_CTL_FUF_Msk          (0x40UL)                  /*!< FUF (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_CTL_FERF_Pos         (7UL)                     /*!< FERF (Bit 7) */
#define ENET_DMA_DMA_CTL_FERF_Msk         (0x80UL)                  /*!< FERF (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_CTL_STE_Pos          (13UL)                    /*!< STE (Bit 13) */
#define ENET_DMA_DMA_CTL_STE_Msk          (0x2000UL)                /*!< STE (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_CTL_TTHC_Pos         (14UL)                    /*!< TTHC (Bit 14) */
#define ENET_DMA_DMA_CTL_TTHC_Msk         (0x1c000UL)               /*!< TTHC (Bitfield-Mask: 0x07) */
#define ENET_DMA_DMA_CTL_FTF_Pos          (20UL)                    /*!< FTF (Bit 20) */
#define ENET_DMA_DMA_CTL_FTF_Msk          (0x100000UL)              /*!< FTF (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_CTL_TSFD_Pos         (21UL)                    /*!< TSFD (Bit 21) */
#define ENET_DMA_DMA_CTL_TSFD_Msk         (0x200000UL)              /*!< TSFD (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_CTL_DAFRF_Pos        (24UL)                    /*!< DAFRF (Bit 24) */
#define ENET_DMA_DMA_CTL_DAFRF_Msk        (0x1000000UL)             /*!< DAFRF (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_CTL_RSFD_Pos         (25UL)                    /*!< RSFD (Bit 25) */
#define ENET_DMA_DMA_CTL_RSFD_Msk         (0x2000000UL)             /*!< RSFD (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_CTL_DTCERFD_Pos      (26UL)                    /*!< DTCERFD (Bit 26) */
#define ENET_DMA_DMA_CTL_DTCERFD_Msk      (0x4000000UL)             /*!< DTCERFD (Bitfield-Mask: 0x01) */
/* =======================================================  DMA_INTEN  ======================================================= */
#define ENET_DMA_DMA_INTEN_TIEN_Pos       (0UL)                     /*!< TIEN (Bit 0) */
#define ENET_DMA_DMA_INTEN_TIEN_Msk       (0x1UL)                   /*!< TIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_TPSIEN_Pos     (1UL)                     /*!< TPSIEN (Bit 1) */
#define ENET_DMA_DMA_INTEN_TPSIEN_Msk     (0x2UL)                   /*!< TPSIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_TBUIEN_Pos     (2UL)                     /*!< TBUIEN (Bit 2) */
#define ENET_DMA_DMA_INTEN_TBUIEN_Msk     (0x4UL)                   /*!< TBUIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_TJTIEN_Pos     (3UL)                     /*!< TJTIEN (Bit 3) */
#define ENET_DMA_DMA_INTEN_TJTIEN_Msk     (0x8UL)                   /*!< TJTIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_ROIEN_Pos      (4UL)                     /*!< ROIEN (Bit 4) */
#define ENET_DMA_DMA_INTEN_ROIEN_Msk      (0x10UL)                  /*!< ROIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_TUIEN_Pos      (5UL)                     /*!< TUIEN (Bit 5) */
#define ENET_DMA_DMA_INTEN_TUIEN_Msk      (0x20UL)                  /*!< TUIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_RIEN_Pos       (6UL)                     /*!< RIEN (Bit 6) */
#define ENET_DMA_DMA_INTEN_RIEN_Msk       (0x40UL)                  /*!< RIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_RBUIEN_Pos     (7UL)                     /*!< RBUIEN (Bit 7) */
#define ENET_DMA_DMA_INTEN_RBUIEN_Msk     (0x80UL)                  /*!< RBUIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_RPSIEN_Pos     (8UL)                     /*!< RPSIEN (Bit 8) */
#define ENET_DMA_DMA_INTEN_RPSIEN_Msk     (0x100UL)                 /*!< RPSIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_RWTIEN_Pos     (9UL)                     /*!< RWTIEN (Bit 9) */
#define ENET_DMA_DMA_INTEN_RWTIEN_Msk     (0x200UL)                 /*!< RWTIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_ETIEN_Pos      (10UL)                    /*!< ETIEN (Bit 10) */
#define ENET_DMA_DMA_INTEN_ETIEN_Msk      (0x400UL)                 /*!< ETIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_FBEIEN_Pos     (13UL)                    /*!< FBEIEN (Bit 13) */
#define ENET_DMA_DMA_INTEN_FBEIEN_Msk     (0x2000UL)                /*!< FBEIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_ERIEN_Pos      (14UL)                    /*!< ERIEN (Bit 14) */
#define ENET_DMA_DMA_INTEN_ERIEN_Msk      (0x4000UL)                /*!< ERIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_AIEN_Pos       (15UL)                    /*!< AIEN (Bit 15) */
#define ENET_DMA_DMA_INTEN_AIEN_Msk       (0x8000UL)                /*!< AIEN (Bitfield-Mask: 0x01) */
#define ENET_DMA_DMA_INTEN_NIEN_Pos       (16UL)                    /*!< NIEN (Bit 16) */
#define ENET_DMA_DMA_INTEN_NIEN_Msk       (0x10000UL)               /*!< NIEN (Bitfield-Mask: 0x01) */
/* ======================================================  DMA_MFBOCNT  ====================================================== */
#define ENET_DMA_DMA_MFBOCNT_MSFC_Pos     (0UL)                     /*!< MSFC (Bit 0) */
#define ENET_DMA_DMA_MFBOCNT_MSFC_Msk     (0xffffUL)                /*!< MSFC (Bitfield-Mask: 0xffff) */
#define ENET_DMA_DMA_MFBOCNT_MSFA_Pos     (17UL)                    /*!< MSFA (Bit 17) */
#define ENET_DMA_DMA_MFBOCNT_MSFA_Msk     (0xffe0000UL)             /*!< MSFA (Bitfield-Mask: 0x7ff) */
/* =======================================================  DMA_RSWDC  ======================================================= */
#define ENET_DMA_DMA_RSWDC_WDCFRS_Pos     (0UL)                     /*!< WDCFRS (Bit 0) */
#define ENET_DMA_DMA_RSWDC_WDCFRS_Msk     (0xffUL)                  /*!< WDCFRS (Bitfield-Mask: 0xff) */
/* ======================================================  DMA_CTDADDR  ====================================================== */
#define ENET_DMA_DMA_CTDADDR_TDAP_Pos     (0UL)                     /*!< TDAP (Bit 0) */
#define ENET_DMA_DMA_CTDADDR_TDAP_Msk     (0xffffffffUL)            /*!< TDAP (Bitfield-Mask: 0xffffffff) */
/* ======================================================  DMA_CRDADDR  ====================================================== */
#define ENET_DMA_DMA_CRDADDR_RDAP_Pos     (0UL)                     /*!< RDAP (Bit 0) */
#define ENET_DMA_DMA_CRDADDR_RDAP_Msk     (0xffffffffUL)            /*!< RDAP (Bitfield-Mask: 0xffffffff) */
/* ======================================================  DMA_CTBADDR  ====================================================== */
#define ENET_DMA_DMA_CTBADDR_TBAP_Pos     (0UL)                     /*!< TBAP (Bit 0) */
#define ENET_DMA_DMA_CTBADDR_TBAP_Msk     (0xffffffffUL)            /*!< TBAP (Bitfield-Mask: 0xffffffff) */
/* ======================================================  DMA_CRBADDR  ====================================================== */
#define ENET_DMA_DMA_CRBADDR_RBAP_Pos     (0UL)                     /*!< RBAP (Bit 0) */
#define ENET_DMA_DMA_CRBADDR_RBAP_Msk     (0xffffffffUL)            /*!< RBAP (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                       ENET_MAC_FCTH                                       ================ */
/* =========================================================================================================================== */

/* =======================================================  MAC_FCTH  ======================================================== */
#define ENET_MAC_FCTH_MAC_FCTH_RFA_Pos    (0UL)                     /*!< RFA (Bit 0) */
#define ENET_MAC_FCTH_MAC_FCTH_RFA_Msk    (0x7UL)                   /*!< RFA (Bitfield-Mask: 0x07) */
#define ENET_MAC_FCTH_MAC_FCTH_RFD_Pos    (4UL)                     /*!< RFD (Bit 4) */
#define ENET_MAC_FCTH_MAC_FCTH_RFD_Msk    (0x70UL)                  /*!< RFD (Bitfield-Mask: 0x07) */


/* =========================================================================================================================== */
/* ================                                         ENET_MAC                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  MAC_CFG  ======================================================== */
#define ENET_MAC_MAC_CFG_REN_Pos          (2UL)                     /*!< REN (Bit 2) */
#define ENET_MAC_MAC_CFG_REN_Msk          (0x4UL)                   /*!< REN (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_TEN_Pos          (3UL)                     /*!< TEN (Bit 3) */
#define ENET_MAC_MAC_CFG_TEN_Msk          (0x8UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_DFC_Pos          (4UL)                     /*!< DFC (Bit 4) */
#define ENET_MAC_MAC_CFG_DFC_Msk          (0x10UL)                  /*!< DFC (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_BOL_Pos          (5UL)                     /*!< BOL (Bit 5) */
#define ENET_MAC_MAC_CFG_BOL_Msk          (0x60UL)                  /*!< BOL (Bitfield-Mask: 0x03) */
#define ENET_MAC_MAC_CFG_APCD_Pos         (7UL)                     /*!< APCD (Bit 7) */
#define ENET_MAC_MAC_CFG_APCD_Msk         (0x80UL)                  /*!< APCD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_RTD_Pos          (9UL)                     /*!< RTD (Bit 9) */
#define ENET_MAC_MAC_CFG_RTD_Msk          (0x200UL)                 /*!< RTD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_IPFCO_Pos        (10UL)                    /*!< IPFCO (Bit 10) */
#define ENET_MAC_MAC_CFG_IPFCO_Msk        (0x400UL)                 /*!< IPFCO (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_DPM_Pos          (11UL)                    /*!< DPM (Bit 11) */
#define ENET_MAC_MAC_CFG_DPM_Msk          (0x800UL)                 /*!< DPM (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_LBM_Pos          (12UL)                    /*!< LBM (Bit 12) */
#define ENET_MAC_MAC_CFG_LBM_Msk          (0x1000UL)                /*!< LBM (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_ROD_Pos          (13UL)                    /*!< ROD (Bit 13) */
#define ENET_MAC_MAC_CFG_ROD_Msk          (0x2000UL)                /*!< ROD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_SPD_Pos          (14UL)                    /*!< SPD (Bit 14) */
#define ENET_MAC_MAC_CFG_SPD_Msk          (0x4000UL)                /*!< SPD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_CSD_Pos          (16UL)                    /*!< CSD (Bit 16) */
#define ENET_MAC_MAC_CFG_CSD_Msk          (0x10000UL)               /*!< CSD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_IGBS_Pos         (17UL)                    /*!< IGBS (Bit 17) */
#define ENET_MAC_MAC_CFG_IGBS_Msk         (0xe0000UL)               /*!< IGBS (Bitfield-Mask: 0x07) */
#define ENET_MAC_MAC_CFG_JBD_Pos          (22UL)                    /*!< JBD (Bit 22) */
#define ENET_MAC_MAC_CFG_JBD_Msk          (0x400000UL)              /*!< JBD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_WDD_Pos          (23UL)                    /*!< WDD (Bit 23) */
#define ENET_MAC_MAC_CFG_WDD_Msk          (0x800000UL)              /*!< WDD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_CFG_TFCD_Pos         (25UL)                    /*!< TFCD (Bit 25) */
#define ENET_MAC_MAC_CFG_TFCD_Msk         (0x2000000UL)             /*!< TFCD (Bitfield-Mask: 0x01) */
/* =======================================================  MAC_FRMF  ======================================================== */
#define ENET_MAC_MAC_FRMF_PM_Pos          (0UL)                     /*!< PM (Bit 0) */
#define ENET_MAC_MAC_FRMF_PM_Msk          (0x1UL)                   /*!< PM (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FRMF_HUF_Pos         (1UL)                     /*!< HUF (Bit 1) */
#define ENET_MAC_MAC_FRMF_HUF_Msk         (0x2UL)                   /*!< HUF (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FRMF_HMF_Pos         (2UL)                     /*!< HMF (Bit 2) */
#define ENET_MAC_MAC_FRMF_HMF_Msk         (0x4UL)                   /*!< HMF (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FRMF_DAIFLT_Pos      (3UL)                     /*!< DAIFLT (Bit 3) */
#define ENET_MAC_MAC_FRMF_DAIFLT_Msk      (0x8UL)                   /*!< DAIFLT (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FRMF_MFD_Pos         (4UL)                     /*!< MFD (Bit 4) */
#define ENET_MAC_MAC_FRMF_MFD_Msk         (0x10UL)                  /*!< MFD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FRMF_BFRMD_Pos       (5UL)                     /*!< BFRMD (Bit 5) */
#define ENET_MAC_MAC_FRMF_BFRMD_Msk       (0x20UL)                  /*!< BFRMD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FRMF_PCFRM_Pos       (6UL)                     /*!< PCFRM (Bit 6) */
#define ENET_MAC_MAC_FRMF_PCFRM_Msk       (0xc0UL)                  /*!< PCFRM (Bitfield-Mask: 0x03) */
#define ENET_MAC_MAC_FRMF_SAIFLT_Pos      (8UL)                     /*!< SAIFLT (Bit 8) */
#define ENET_MAC_MAC_FRMF_SAIFLT_Msk      (0x100UL)                 /*!< SAIFLT (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FRMF_SAFLT_Pos       (9UL)                     /*!< SAFLT (Bit 9) */
#define ENET_MAC_MAC_FRMF_SAFLT_Msk       (0x200UL)                 /*!< SAFLT (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FRMF_HPFLT_Pos       (10UL)                    /*!< HPFLT (Bit 10) */
#define ENET_MAC_MAC_FRMF_HPFLT_Msk       (0x400UL)                 /*!< HPFLT (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FRMF_FAR_Pos         (31UL)                    /*!< FAR (Bit 31) */
#define ENET_MAC_MAC_FRMF_FAR_Msk         (0x80000000UL)            /*!< FAR (Bitfield-Mask: 0x01) */
/* ========================================================  MAC_HLH  ======================================================== */
#define ENET_MAC_MAC_HLH_HLH_Pos          (0UL)                     /*!< HLH (Bit 0) */
#define ENET_MAC_MAC_HLH_HLH_Msk          (0xffffffffUL)            /*!< HLH (Bitfield-Mask: 0xffffffff) */
/* ========================================================  MAC_HLL  ======================================================== */
#define ENET_MAC_MAC_HLL_HLL_Pos          (0UL)                     /*!< HLL (Bit 0) */
#define ENET_MAC_MAC_HLL_HLL_Msk          (0xffffffffUL)            /*!< HLL (Bitfield-Mask: 0xffffffff) */
/* ======================================================  MAC_PHY_CTL  ====================================================== */
#define ENET_MAC_MAC_PHY_CTL_PB_Pos       (0UL)                     /*!< PB (Bit 0) */
#define ENET_MAC_MAC_PHY_CTL_PB_Msk       (0x1UL)                   /*!< PB (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_PHY_CTL_PW_Pos       (1UL)                     /*!< PW (Bit 1) */
#define ENET_MAC_MAC_PHY_CTL_PW_Msk       (0x2UL)                   /*!< PW (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_PHY_CTL_CLR_Pos      (2UL)                     /*!< CLR (Bit 2) */
#define ENET_MAC_MAC_PHY_CTL_CLR_Msk      (0x1cUL)                  /*!< CLR (Bitfield-Mask: 0x07) */
#define ENET_MAC_MAC_PHY_CTL_PR_Pos       (6UL)                     /*!< PR (Bit 6) */
#define ENET_MAC_MAC_PHY_CTL_PR_Msk       (0x7c0UL)                 /*!< PR (Bitfield-Mask: 0x1f) */
#define ENET_MAC_MAC_PHY_CTL_PA_Pos       (11UL)                    /*!< PA (Bit 11) */
#define ENET_MAC_MAC_PHY_CTL_PA_Msk       (0xf800UL)                /*!< PA (Bitfield-Mask: 0x1f) */
/* =====================================================  MAC_PHY_DATA  ====================================================== */
#define ENET_MAC_MAC_PHY_DATA_PD_Pos      (0UL)                     /*!< PD (Bit 0) */
#define ENET_MAC_MAC_PHY_DATA_PD_Msk      (0xffffUL)                /*!< PD (Bitfield-Mask: 0xffff) */
/* =======================================================  MAC_FCTL  ======================================================== */
#define ENET_MAC_MAC_FCTL_FLCB_BKPA_Pos   (0UL)                     /*!< FLCB_BKPA (Bit 0) */
#define ENET_MAC_MAC_FCTL_FLCB_BKPA_Msk   (0x1UL)                   /*!< FLCB_BKPA (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FCTL_TFCEN_Pos       (1UL)                     /*!< TFCEN (Bit 1) */
#define ENET_MAC_MAC_FCTL_TFCEN_Msk       (0x2UL)                   /*!< TFCEN (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FCTL_RFCEN_Pos       (2UL)                     /*!< RFCEN (Bit 2) */
#define ENET_MAC_MAC_FCTL_RFCEN_Msk       (0x4UL)                   /*!< RFCEN (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FCTL_UPFDT_Pos       (3UL)                     /*!< UPFDT (Bit 3) */
#define ENET_MAC_MAC_FCTL_UPFDT_Msk       (0x8UL)                   /*!< UPFDT (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FCTL_PLTS_Pos        (4UL)                     /*!< PLTS (Bit 4) */
#define ENET_MAC_MAC_FCTL_PLTS_Msk        (0x30UL)                  /*!< PLTS (Bitfield-Mask: 0x03) */
#define ENET_MAC_MAC_FCTL_DZQP_Pos        (7UL)                     /*!< DZQP (Bit 7) */
#define ENET_MAC_MAC_FCTL_DZQP_Msk        (0x80UL)                  /*!< DZQP (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_FCTL_PTM_Pos         (16UL)                    /*!< PTM (Bit 16) */
#define ENET_MAC_MAC_FCTL_PTM_Msk         (0xffff0000UL)            /*!< PTM (Bitfield-Mask: 0xffff) */
/* ========================================================  MAC_VLT  ======================================================== */
#define ENET_MAC_MAC_VLT_VLTI_Pos         (0UL)                     /*!< VLTI (Bit 0) */
#define ENET_MAC_MAC_VLT_VLTI_Msk         (0xffffUL)                /*!< VLTI (Bitfield-Mask: 0xffff) */
#define ENET_MAC_MAC_VLT_VLTC_Pos         (16UL)                    /*!< VLTC (Bit 16) */
#define ENET_MAC_MAC_VLT_VLTC_Msk         (0x10000UL)               /*!< VLTC (Bitfield-Mask: 0x01) */
/* =======================================================  MAC_RWFF  ======================================================== */
/* ========================================================  MAC_WUM  ======================================================== */
#define ENET_MAC_MAC_WUM_PWD_Pos          (0UL)                     /*!< PWD (Bit 0) */
#define ENET_MAC_MAC_WUM_PWD_Msk          (0x1UL)                   /*!< PWD (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_WUM_MPEN_Pos         (1UL)                     /*!< MPEN (Bit 1) */
#define ENET_MAC_MAC_WUM_MPEN_Msk         (0x2UL)                   /*!< MPEN (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_WUM_WFEN_Pos         (2UL)                     /*!< WFEN (Bit 2) */
#define ENET_MAC_MAC_WUM_WFEN_Msk         (0x4UL)                   /*!< WFEN (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_WUM_MPKR_Pos         (5UL)                     /*!< MPKR (Bit 5) */
#define ENET_MAC_MAC_WUM_MPKR_Msk         (0x20UL)                  /*!< MPKR (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_WUM_WUFR_Pos         (6UL)                     /*!< WUFR (Bit 6) */
#define ENET_MAC_MAC_WUM_WUFR_Msk         (0x40UL)                  /*!< WUFR (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_WUM_GU_Pos           (9UL)                     /*!< GU (Bit 9) */
#define ENET_MAC_MAC_WUM_GU_Msk           (0x200UL)                 /*!< GU (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_WUM_WUFFRPR_Pos      (31UL)                    /*!< WUFFRPR (Bit 31) */
#define ENET_MAC_MAC_WUM_WUFFRPR_Msk      (0x80000000UL)            /*!< WUFFRPR (Bitfield-Mask: 0x01) */
/* ========================================================  MAC_DBG  ======================================================== */
#define ENET_MAC_MAC_DBG_MRNI_Pos         (0UL)                     /*!< MRNI (Bit 0) */
#define ENET_MAC_MAC_DBG_MRNI_Msk         (0x1UL)                   /*!< MRNI (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_DBG_RXAFS_Pos        (1UL)                     /*!< RXAFS (Bit 1) */
#define ENET_MAC_MAC_DBG_RXAFS_Msk        (0x6UL)                   /*!< RXAFS (Bitfield-Mask: 0x03) */
#define ENET_MAC_MAC_DBG_RXFW_Pos         (4UL)                     /*!< RXFW (Bit 4) */
#define ENET_MAC_MAC_DBG_RXFW_Msk         (0x10UL)                  /*!< RXFW (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_DBG_RXFRS_Pos        (5UL)                     /*!< RXFRS (Bit 5) */
#define ENET_MAC_MAC_DBG_RXFRS_Msk        (0x60UL)                  /*!< RXFRS (Bitfield-Mask: 0x03) */
#define ENET_MAC_MAC_DBG_RXFS_Pos         (8UL)                     /*!< RXFS (Bit 8) */
#define ENET_MAC_MAC_DBG_RXFS_Msk         (0x300UL)                 /*!< RXFS (Bitfield-Mask: 0x03) */
#define ENET_MAC_MAC_DBG_MTNI_Pos         (16UL)                    /*!< MTNI (Bit 16) */
#define ENET_MAC_MAC_DBG_MTNI_Msk         (0x10000UL)               /*!< MTNI (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_DBG_SOMT_Pos         (17UL)                    /*!< SOMT (Bit 17) */
#define ENET_MAC_MAC_DBG_SOMT_Msk         (0x60000UL)               /*!< SOMT (Bitfield-Mask: 0x03) */
#define ENET_MAC_MAC_DBG_PCS_Pos          (19UL)                    /*!< PCS (Bit 19) */
#define ENET_MAC_MAC_DBG_PCS_Msk          (0x80000UL)               /*!< PCS (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_DBG_TXFRS_Pos        (20UL)                    /*!< TXFRS (Bit 20) */
#define ENET_MAC_MAC_DBG_TXFRS_Msk        (0x300000UL)              /*!< TXFRS (Bitfield-Mask: 0x03) */
#define ENET_MAC_MAC_DBG_TXFW_Pos         (22UL)                    /*!< TXFW (Bit 22) */
#define ENET_MAC_MAC_DBG_TXFW_Msk         (0x400000UL)              /*!< TXFW (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_DBG_TXFNE_Pos        (24UL)                    /*!< TXFNE (Bit 24) */
#define ENET_MAC_MAC_DBG_TXFNE_Msk        (0x1000000UL)             /*!< TXFNE (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_DBG_TXFF_Pos         (25UL)                    /*!< TXFF (Bit 25) */
#define ENET_MAC_MAC_DBG_TXFF_Msk         (0x2000000UL)             /*!< TXFF (Bitfield-Mask: 0x01) */
/* =======================================================  MAC_INTF  ======================================================== */
#define ENET_MAC_MAC_INTF_WUM_Pos         (3UL)                     /*!< WUM (Bit 3) */
#define ENET_MAC_MAC_INTF_WUM_Msk         (0x8UL)                   /*!< WUM (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_INTF_MSC_Pos         (4UL)                     /*!< MSC (Bit 4) */
#define ENET_MAC_MAC_INTF_MSC_Msk         (0x10UL)                  /*!< MSC (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_INTF_MSCR_Pos        (5UL)                     /*!< MSCR (Bit 5) */
#define ENET_MAC_MAC_INTF_MSCR_Msk        (0x20UL)                  /*!< MSCR (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_INTF_MSCT_Pos        (6UL)                     /*!< MSCT (Bit 6) */
#define ENET_MAC_MAC_INTF_MSCT_Msk        (0x40UL)                  /*!< MSCT (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_INTF_TMST_Pos        (9UL)                     /*!< TMST (Bit 9) */
#define ENET_MAC_MAC_INTF_TMST_Msk        (0x200UL)                 /*!< TMST (Bitfield-Mask: 0x01) */
/* ======================================================  MAC_INTMSK  ======================================================= */
#define ENET_MAC_MAC_INTMSK_WUMIM_Pos     (3UL)                     /*!< WUMIM (Bit 3) */
#define ENET_MAC_MAC_INTMSK_WUMIM_Msk     (0x8UL)                   /*!< WUMIM (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_INTMSK_TMSTIM_Pos    (9UL)                     /*!< TMSTIM (Bit 9) */
#define ENET_MAC_MAC_INTMSK_TMSTIM_Msk    (0x200UL)                 /*!< TMSTIM (Bitfield-Mask: 0x01) */
/* ======================================================  MAC_ADDR0H  ======================================================= */
#define ENET_MAC_MAC_ADDR0H_ADDR0H_Pos    (0UL)                     /*!< ADDR0H (Bit 0) */
#define ENET_MAC_MAC_ADDR0H_ADDR0H_Msk    (0xffffUL)                /*!< ADDR0H (Bitfield-Mask: 0xffff) */
#define ENET_MAC_MAC_ADDR0H_MO_Pos        (31UL)                    /*!< MO (Bit 31) */
#define ENET_MAC_MAC_ADDR0H_MO_Msk        (0x80000000UL)            /*!< MO (Bitfield-Mask: 0x01) */
/* ======================================================  MAC_ADDR0L  ======================================================= */
#define ENET_MAC_MAC_ADDR0L_ADDR0L_Pos    (0UL)                     /*!< ADDR0L (Bit 0) */
#define ENET_MAC_MAC_ADDR0L_ADDR0L_Msk    (0xffffffffUL)            /*!< ADDR0L (Bitfield-Mask: 0xffffffff) */
/* ======================================================  MAC_ADDR1H  ======================================================= */
#define ENET_MAC_MAC_ADDR1H_ADDR1H_Pos    (0UL)                     /*!< ADDR1H (Bit 0) */
#define ENET_MAC_MAC_ADDR1H_ADDR1H_Msk    (0xffffUL)                /*!< ADDR1H (Bitfield-Mask: 0xffff) */
#define ENET_MAC_MAC_ADDR1H_MB_Pos        (24UL)                    /*!< MB (Bit 24) */
#define ENET_MAC_MAC_ADDR1H_MB_Msk        (0x3f000000UL)            /*!< MB (Bitfield-Mask: 0x3f) */
#define ENET_MAC_MAC_ADDR1H_SAF_Pos       (30UL)                    /*!< SAF (Bit 30) */
#define ENET_MAC_MAC_ADDR1H_SAF_Msk       (0x40000000UL)            /*!< SAF (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_ADDR1H_AFE_Pos       (31UL)                    /*!< AFE (Bit 31) */
#define ENET_MAC_MAC_ADDR1H_AFE_Msk       (0x80000000UL)            /*!< AFE (Bitfield-Mask: 0x01) */
/* ======================================================  MAC_ADDR1L  ======================================================= */
#define ENET_MAC_MAC_ADDR1L_ADDR1L_Pos    (0UL)                     /*!< ADDR1L (Bit 0) */
#define ENET_MAC_MAC_ADDR1L_ADDR1L_Msk    (0xffffffffUL)            /*!< ADDR1L (Bitfield-Mask: 0xffffffff) */
/* ======================================================  MAC_ADDR2H  ======================================================= */
#define ENET_MAC_MAC_ADDR2H_ADDR2H_Pos    (0UL)                     /*!< ADDR2H (Bit 0) */
#define ENET_MAC_MAC_ADDR2H_ADDR2H_Msk    (0xffffUL)                /*!< ADDR2H (Bitfield-Mask: 0xffff) */
#define ENET_MAC_MAC_ADDR2H_MB_Pos        (24UL)                    /*!< MB (Bit 24) */
#define ENET_MAC_MAC_ADDR2H_MB_Msk        (0x3f000000UL)            /*!< MB (Bitfield-Mask: 0x3f) */
#define ENET_MAC_MAC_ADDR2H_SAF_Pos       (30UL)                    /*!< SAF (Bit 30) */
#define ENET_MAC_MAC_ADDR2H_SAF_Msk       (0x40000000UL)            /*!< SAF (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_ADDR2H_AFE_Pos       (31UL)                    /*!< AFE (Bit 31) */
#define ENET_MAC_MAC_ADDR2H_AFE_Msk       (0x80000000UL)            /*!< AFE (Bitfield-Mask: 0x01) */
/* ======================================================  MAC_ADDR2L  ======================================================= */
#define ENET_MAC_MAC_ADDR2L_ADDR2L_Pos    (0UL)                     /*!< ADDR2L (Bit 0) */
#define ENET_MAC_MAC_ADDR2L_ADDR2L_Msk    (0xffffffffUL)            /*!< ADDR2L (Bitfield-Mask: 0xffffffff) */
/* ======================================================  MAC_ADDR3H  ======================================================= */
#define ENET_MAC_MAC_ADDR3H_ADDR3H_Pos    (0UL)                     /*!< ADDR3H (Bit 0) */
#define ENET_MAC_MAC_ADDR3H_ADDR3H_Msk    (0xffffUL)                /*!< ADDR3H (Bitfield-Mask: 0xffff) */
#define ENET_MAC_MAC_ADDR3H_MB_Pos        (24UL)                    /*!< MB (Bit 24) */
#define ENET_MAC_MAC_ADDR3H_MB_Msk        (0x3f000000UL)            /*!< MB (Bitfield-Mask: 0x3f) */
#define ENET_MAC_MAC_ADDR3H_SAF_Pos       (30UL)                    /*!< SAF (Bit 30) */
#define ENET_MAC_MAC_ADDR3H_SAF_Msk       (0x40000000UL)            /*!< SAF (Bitfield-Mask: 0x01) */
#define ENET_MAC_MAC_ADDR3H_AFE_Pos       (31UL)                    /*!< AFE (Bit 31) */
#define ENET_MAC_MAC_ADDR3H_AFE_Msk       (0x80000000UL)            /*!< AFE (Bitfield-Mask: 0x01) */
/* ======================================================  MAC_ADDR3L  ======================================================= */
#define ENET_MAC_MAC_ADDR3L_ADDR3L_Pos    (0UL)                     /*!< ADDR3L (Bit 0) */
#define ENET_MAC_MAC_ADDR3L_ADDR3L_Msk    (0xffffffffUL)            /*!< ADDR3L (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                         ENET_MSC                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  MSC_CTL  ======================================================== */
#define ENET_MSC_MSC_CTL_CTR_Pos          (0UL)                     /*!< CTR (Bit 0) */
#define ENET_MSC_MSC_CTL_CTR_Msk          (0x1UL)                   /*!< CTR (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_CTL_CTSR_Pos         (1UL)                     /*!< CTSR (Bit 1) */
#define ENET_MSC_MSC_CTL_CTSR_Msk         (0x2UL)                   /*!< CTSR (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_CTL_RTOR_Pos         (2UL)                     /*!< RTOR (Bit 2) */
#define ENET_MSC_MSC_CTL_RTOR_Msk         (0x4UL)                   /*!< RTOR (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_CTL_MCFZ_Pos         (3UL)                     /*!< MCFZ (Bit 3) */
#define ENET_MSC_MSC_CTL_MCFZ_Msk         (0x8UL)                   /*!< MCFZ (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_CTL_PMC_Pos          (4UL)                     /*!< PMC (Bit 4) */
#define ENET_MSC_MSC_CTL_PMC_Msk          (0x10UL)                  /*!< PMC (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_CTL_AFHPM_Pos        (5UL)                     /*!< AFHPM (Bit 5) */
#define ENET_MSC_MSC_CTL_AFHPM_Msk        (0x20UL)                  /*!< AFHPM (Bitfield-Mask: 0x01) */
/* =======================================================  MSC_RINTF  ======================================================= */
#define ENET_MSC_MSC_RINTF_RFCE_Pos       (5UL)                     /*!< RFCE (Bit 5) */
#define ENET_MSC_MSC_RINTF_RFCE_Msk       (0x20UL)                  /*!< RFCE (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_RINTF_RFAE_Pos       (6UL)                     /*!< RFAE (Bit 6) */
#define ENET_MSC_MSC_RINTF_RFAE_Msk       (0x40UL)                  /*!< RFAE (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_RINTF_RGUF_Pos       (17UL)                    /*!< RGUF (Bit 17) */
#define ENET_MSC_MSC_RINTF_RGUF_Msk       (0x20000UL)               /*!< RGUF (Bitfield-Mask: 0x01) */
/* =======================================================  MSC_TINTF  ======================================================= */
#define ENET_MSC_MSC_TINTF_TGFSC_Pos      (14UL)                    /*!< TGFSC (Bit 14) */
#define ENET_MSC_MSC_TINTF_TGFSC_Msk      (0x4000UL)                /*!< TGFSC (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_TINTF_TGFMSC_Pos     (15UL)                    /*!< TGFMSC (Bit 15) */
#define ENET_MSC_MSC_TINTF_TGFMSC_Msk     (0x8000UL)                /*!< TGFMSC (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_TINTF_TGF_Pos        (21UL)                    /*!< TGF (Bit 21) */
#define ENET_MSC_MSC_TINTF_TGF_Msk        (0x200000UL)              /*!< TGF (Bitfield-Mask: 0x01) */
/* ======================================================  MSC_RINTMSK  ====================================================== */
#define ENET_MSC_MSC_RINTMSK_RFCEIM_Pos   (5UL)                     /*!< RFCEIM (Bit 5) */
#define ENET_MSC_MSC_RINTMSK_RFCEIM_Msk   (0x20UL)                  /*!< RFCEIM (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_RINTMSK_RFAEIM_Pos   (6UL)                     /*!< RFAEIM (Bit 6) */
#define ENET_MSC_MSC_RINTMSK_RFAEIM_Msk   (0x40UL)                  /*!< RFAEIM (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_RINTMSK_RGUFIM_Pos   (17UL)                    /*!< RGUFIM (Bit 17) */
#define ENET_MSC_MSC_RINTMSK_RGUFIM_Msk   (0x20000UL)               /*!< RGUFIM (Bitfield-Mask: 0x01) */
/* ======================================================  MSC_TINTMSK  ====================================================== */
#define ENET_MSC_MSC_TINTMSK_TGFSCIM_Pos  (14UL)                    /*!< TGFSCIM (Bit 14) */
#define ENET_MSC_MSC_TINTMSK_TGFSCIM_Msk  (0x4000UL)                /*!< TGFSCIM (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_TINTMSK_TGFMSCIM_Pos (15UL)                    /*!< TGFMSCIM (Bit 15) */
#define ENET_MSC_MSC_TINTMSK_TGFMSCIM_Msk (0x8000UL)                /*!< TGFMSCIM (Bitfield-Mask: 0x01) */
#define ENET_MSC_MSC_TINTMSK_TGFIM_Pos    (21UL)                    /*!< TGFIM (Bit 21) */
#define ENET_MSC_MSC_TINTMSK_TGFIM_Msk    (0x200000UL)              /*!< TGFIM (Bitfield-Mask: 0x01) */
/* =======================================================  MSC_SCCNT  ======================================================= */
#define ENET_MSC_MSC_SCCNT_SCC_Pos        (0UL)                     /*!< SCC (Bit 0) */
#define ENET_MSC_MSC_SCCNT_SCC_Msk        (0xffffffffUL)            /*!< SCC (Bitfield-Mask: 0xffffffff) */
/* ======================================================  MSC_MSCCNT  ======================================================= */
#define ENET_MSC_MSC_MSCCNT_MSCC_Pos      (0UL)                     /*!< MSCC (Bit 0) */
#define ENET_MSC_MSC_MSCCNT_MSCC_Msk      (0xffffffffUL)            /*!< MSCC (Bitfield-Mask: 0xffffffff) */
/* ======================================================  MSC_TGFCNT  ======================================================= */
#define ENET_MSC_MSC_TGFCNT_TGF_Pos       (0UL)                     /*!< TGF (Bit 0) */
#define ENET_MSC_MSC_TGFCNT_TGF_Msk       (0xffffffffUL)            /*!< TGF (Bitfield-Mask: 0xffffffff) */
/* ======================================================  MSC_RFCECNT  ====================================================== */
#define ENET_MSC_MSC_RFCECNT_RFCER_Pos    (0UL)                     /*!< RFCER (Bit 0) */
#define ENET_MSC_MSC_RFCECNT_RFCER_Msk    (0xffffffffUL)            /*!< RFCER (Bitfield-Mask: 0xffffffff) */
/* ======================================================  MSC_RFAECNT  ====================================================== */
#define ENET_MSC_MSC_RFAECNT_RFAER_Pos    (0UL)                     /*!< RFAER (Bit 0) */
#define ENET_MSC_MSC_RFAECNT_RFAER_Msk    (0xffffffffUL)            /*!< RFAER (Bitfield-Mask: 0xffffffff) */
/* ======================================================  MSC_RGUFCNT  ====================================================== */
#define ENET_MSC_MSC_RGUFCNT_RGUF_Pos     (0UL)                     /*!< RGUF (Bit 0) */
#define ENET_MSC_MSC_RGUFCNT_RGUF_Msk     (0xffffffffUL)            /*!< RGUF (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                         ENET_PTP                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  PTP_TSCTL  ======================================================= */
#define ENET_PTP_PTP_TSCTL_TMSEN_Pos      (0UL)                     /*!< TMSEN (Bit 0) */
#define ENET_PTP_PTP_TSCTL_TMSEN_Msk      (0x1UL)                   /*!< TMSEN (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_TMSFCU_Pos     (1UL)                     /*!< TMSFCU (Bit 1) */
#define ENET_PTP_PTP_TSCTL_TMSFCU_Msk     (0x2UL)                   /*!< TMSFCU (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_TMSSTI_Pos     (2UL)                     /*!< TMSSTI (Bit 2) */
#define ENET_PTP_PTP_TSCTL_TMSSTI_Msk     (0x4UL)                   /*!< TMSSTI (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_TMSSTU_Pos     (3UL)                     /*!< TMSSTU (Bit 3) */
#define ENET_PTP_PTP_TSCTL_TMSSTU_Msk     (0x8UL)                   /*!< TMSSTU (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_TMSITEN_Pos    (4UL)                     /*!< TMSITEN (Bit 4) */
#define ENET_PTP_PTP_TSCTL_TMSITEN_Msk    (0x10UL)                  /*!< TMSITEN (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_TMSARU_Pos     (5UL)                     /*!< TMSARU (Bit 5) */
#define ENET_PTP_PTP_TSCTL_TMSARU_Msk     (0x20UL)                  /*!< TMSARU (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_ARFSEN_Pos     (8UL)                     /*!< ARFSEN (Bit 8) */
#define ENET_PTP_PTP_TSCTL_ARFSEN_Msk     (0x100UL)                 /*!< ARFSEN (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_SCROM_Pos      (9UL)                     /*!< SCROM (Bit 9) */
#define ENET_PTP_PTP_TSCTL_SCROM_Msk      (0x200UL)                 /*!< SCROM (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_PFSV_Pos       (10UL)                    /*!< PFSV (Bit 10) */
#define ENET_PTP_PTP_TSCTL_PFSV_Msk       (0x400UL)                 /*!< PFSV (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_ESEN_Pos       (11UL)                    /*!< ESEN (Bit 11) */
#define ENET_PTP_PTP_TSCTL_ESEN_Msk       (0x800UL)                 /*!< ESEN (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_IP6SEN_Pos     (12UL)                    /*!< IP6SEN (Bit 12) */
#define ENET_PTP_PTP_TSCTL_IP6SEN_Msk     (0x1000UL)                /*!< IP6SEN (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_IP4SEN_Pos     (13UL)                    /*!< IP4SEN (Bit 13) */
#define ENET_PTP_PTP_TSCTL_IP4SEN_Msk     (0x2000UL)                /*!< IP4SEN (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_ETMSEN_Pos     (14UL)                    /*!< ETMSEN (Bit 14) */
#define ENET_PTP_PTP_TSCTL_ETMSEN_Msk     (0x4000UL)                /*!< ETMSEN (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_MNMSEN_Pos     (15UL)                    /*!< MNMSEN (Bit 15) */
#define ENET_PTP_PTP_TSCTL_MNMSEN_Msk     (0x8000UL)                /*!< MNMSEN (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSCTL_CKNT_Pos       (16UL)                    /*!< CKNT (Bit 16) */
#define ENET_PTP_PTP_TSCTL_CKNT_Msk       (0x30000UL)               /*!< CKNT (Bitfield-Mask: 0x03) */
#define ENET_PTP_PTP_TSCTL_MAFEN_Pos      (18UL)                    /*!< MAFEN (Bit 18) */
#define ENET_PTP_PTP_TSCTL_MAFEN_Msk      (0x40000UL)               /*!< MAFEN (Bitfield-Mask: 0x01) */
/* =======================================================  PTP_SSINC  ======================================================= */
#define ENET_PTP_PTP_SSINC_STMSSI_Pos     (0UL)                     /*!< STMSSI (Bit 0) */
#define ENET_PTP_PTP_SSINC_STMSSI_Msk     (0xffUL)                  /*!< STMSSI (Bitfield-Mask: 0xff) */
/* ========================================================  PTP_TSH  ======================================================== */
#define ENET_PTP_PTP_TSH_STMS_Pos         (0UL)                     /*!< STMS (Bit 0) */
#define ENET_PTP_PTP_TSH_STMS_Msk         (0xffffffffUL)            /*!< STMS (Bitfield-Mask: 0xffffffff) */
/* ========================================================  PTP_TSL  ======================================================== */
#define ENET_PTP_PTP_TSL_STMSS_Pos        (0UL)                     /*!< STMSS (Bit 0) */
#define ENET_PTP_PTP_TSL_STMSS_Msk        (0x7fffffffUL)            /*!< STMSS (Bitfield-Mask: 0x7fffffff) */
#define ENET_PTP_PTP_TSL_STS_Pos          (31UL)                    /*!< STS (Bit 31) */
#define ENET_PTP_PTP_TSL_STS_Msk          (0x80000000UL)            /*!< STS (Bitfield-Mask: 0x01) */
/* =======================================================  PTP_TSUH  ======================================================== */
#define ENET_PTP_PTP_TSUH_TMSUS_Pos       (0UL)                     /*!< TMSUS (Bit 0) */
#define ENET_PTP_PTP_TSUH_TMSUS_Msk       (0xffffffffUL)            /*!< TMSUS (Bitfield-Mask: 0xffffffff) */
/* =======================================================  PTP_TSUL  ======================================================== */
#define ENET_PTP_PTP_TSUL_TMSUSS_Pos      (0UL)                     /*!< TMSUSS (Bit 0) */
#define ENET_PTP_PTP_TSUL_TMSUSS_Msk      (0x7fffffffUL)            /*!< TMSUSS (Bitfield-Mask: 0x7fffffff) */
#define ENET_PTP_PTP_TSUL_TMSUPNS_Pos     (31UL)                    /*!< TMSUPNS (Bit 31) */
#define ENET_PTP_PTP_TSUL_TMSUPNS_Msk     (0x80000000UL)            /*!< TMSUPNS (Bitfield-Mask: 0x01) */
/* =====================================================  PTP_TSADDEND  ====================================================== */
#define ENET_PTP_PTP_TSADDEND_TMSA_Pos    (0UL)                     /*!< TMSA (Bit 0) */
#define ENET_PTP_PTP_TSADDEND_TMSA_Msk    (0xffffffffUL)            /*!< TMSA (Bitfield-Mask: 0xffffffff) */
/* ========================================================  PTP_ETH  ======================================================== */
#define ENET_PTP_PTP_ETH_ETSH_Pos         (0UL)                     /*!< ETSH (Bit 0) */
#define ENET_PTP_PTP_ETH_ETSH_Msk         (0xffffffffUL)            /*!< ETSH (Bitfield-Mask: 0xffffffff) */
/* ========================================================  PTP_ETL  ======================================================== */
#define ENET_PTP_PTP_ETL_ETSL_Pos         (0UL)                     /*!< ETSL (Bit 0) */
#define ENET_PTP_PTP_ETL_ETSL_Msk         (0xffffffffUL)            /*!< ETSL (Bitfield-Mask: 0xffffffff) */
/* ========================================================  PTP_TSF  ======================================================== */
#define ENET_PTP_PTP_TSF_TSSCO_Pos        (0UL)                     /*!< TSSCO (Bit 0) */
#define ENET_PTP_PTP_TSF_TSSCO_Msk        (0x1UL)                   /*!< TSSCO (Bitfield-Mask: 0x01) */
#define ENET_PTP_PTP_TSF_TTM_Pos          (1UL)                     /*!< TTM (Bit 1) */
#define ENET_PTP_PTP_TSF_TTM_Msk          (0x2UL)                   /*!< TTM (Bitfield-Mask: 0x01) */
/* ======================================================  PTP_PPSCTL  ======================================================= */
#define ENET_PTP_PTP_PPSCTL_PPSOFC_Pos    (0UL)                     /*!< PPSOFC (Bit 0) */
#define ENET_PTP_PTP_PPSCTL_PPSOFC_Msk    (0xfUL)                   /*!< PPSOFC (Bitfield-Mask: 0x0f) */


/* =========================================================================================================================== */
/* ================                                           EXMC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  SNCTL0  ========================================================= */
#define EXMC_SNCTL0_CCK_Pos               (20UL)                    /*!< CCK (Bit 20) */
#define EXMC_SNCTL0_CCK_Msk               (0x100000UL)              /*!< CCK (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_SYNCWR_Pos            (19UL)                    /*!< SYNCWR (Bit 19) */
#define EXMC_SNCTL0_SYNCWR_Msk            (0x80000UL)               /*!< SYNCWR (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_CPS_Pos               (16UL)                    /*!< CPS (Bit 16) */
#define EXMC_SNCTL0_CPS_Msk               (0x70000UL)               /*!< CPS (Bitfield-Mask: 0x07) */
#define EXMC_SNCTL0_ASYNCWAIT_Pos         (15UL)                    /*!< ASYNCWAIT (Bit 15) */
#define EXMC_SNCTL0_ASYNCWAIT_Msk         (0x8000UL)                /*!< ASYNCWAIT (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_EXMODEN_Pos           (14UL)                    /*!< EXMODEN (Bit 14) */
#define EXMC_SNCTL0_EXMODEN_Msk           (0x4000UL)                /*!< EXMODEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_NRWTEN_Pos            (13UL)                    /*!< NRWTEN (Bit 13) */
#define EXMC_SNCTL0_NRWTEN_Msk            (0x2000UL)                /*!< NRWTEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_WREN_Pos              (12UL)                    /*!< WREN (Bit 12) */
#define EXMC_SNCTL0_WREN_Msk              (0x1000UL)                /*!< WREN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_NRWTCFG_Pos           (11UL)                    /*!< NRWTCFG (Bit 11) */
#define EXMC_SNCTL0_NRWTCFG_Msk           (0x800UL)                 /*!< NRWTCFG (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_WRAPEN_Pos            (10UL)                    /*!< WRAPEN (Bit 10) */
#define EXMC_SNCTL0_WRAPEN_Msk            (0x400UL)                 /*!< WRAPEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_NRWTPOL_Pos           (9UL)                     /*!< NRWTPOL (Bit 9) */
#define EXMC_SNCTL0_NRWTPOL_Msk           (0x200UL)                 /*!< NRWTPOL (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_SBRSTEN_Pos           (8UL)                     /*!< SBRSTEN (Bit 8) */
#define EXMC_SNCTL0_SBRSTEN_Msk           (0x100UL)                 /*!< SBRSTEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_NREN_Pos              (6UL)                     /*!< NREN (Bit 6) */
#define EXMC_SNCTL0_NREN_Msk              (0x40UL)                  /*!< NREN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_NRW_Pos               (4UL)                     /*!< NRW (Bit 4) */
#define EXMC_SNCTL0_NRW_Msk               (0x30UL)                  /*!< NRW (Bitfield-Mask: 0x03) */
#define EXMC_SNCTL0_NRTP_Pos              (2UL)                     /*!< NRTP (Bit 2) */
#define EXMC_SNCTL0_NRTP_Msk              (0xcUL)                   /*!< NRTP (Bitfield-Mask: 0x03) */
#define EXMC_SNCTL0_NRMUX_Pos             (1UL)                     /*!< NRMUX (Bit 1) */
#define EXMC_SNCTL0_NRMUX_Msk             (0x2UL)                   /*!< NRMUX (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL0_NRBKEN_Pos            (0UL)                     /*!< NRBKEN (Bit 0) */
#define EXMC_SNCTL0_NRBKEN_Msk            (0x1UL)                   /*!< NRBKEN (Bitfield-Mask: 0x01) */
/* ========================================================  SNTCFG0  ======================================================== */
#define EXMC_SNTCFG0_ASYNCMOD_Pos         (28UL)                    /*!< ASYNCMOD (Bit 28) */
#define EXMC_SNTCFG0_ASYNCMOD_Msk         (0x30000000UL)            /*!< ASYNCMOD (Bitfield-Mask: 0x03) */
#define EXMC_SNTCFG0_DLAT_Pos             (24UL)                    /*!< DLAT (Bit 24) */
#define EXMC_SNTCFG0_DLAT_Msk             (0xf000000UL)             /*!< DLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG0_CKDIV_Pos            (20UL)                    /*!< CKDIV (Bit 20) */
#define EXMC_SNTCFG0_CKDIV_Msk            (0xf00000UL)              /*!< CKDIV (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG0_BUSLAT_Pos           (16UL)                    /*!< BUSLAT (Bit 16) */
#define EXMC_SNTCFG0_BUSLAT_Msk           (0xf0000UL)               /*!< BUSLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG0_DSET_Pos             (8UL)                     /*!< DSET (Bit 8) */
#define EXMC_SNTCFG0_DSET_Msk             (0xff00UL)                /*!< DSET (Bitfield-Mask: 0xff) */
#define EXMC_SNTCFG0_AHLD_Pos             (4UL)                     /*!< AHLD (Bit 4) */
#define EXMC_SNTCFG0_AHLD_Msk             (0xf0UL)                  /*!< AHLD (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG0_ASET_Pos             (0UL)                     /*!< ASET (Bit 0) */
#define EXMC_SNTCFG0_ASET_Msk             (0xfUL)                   /*!< ASET (Bitfield-Mask: 0x0f) */
/* ========================================================  SNCTL1  ========================================================= */
#define EXMC_SNCTL1_CCK_Pos               (20UL)                    /*!< CCK (Bit 20) */
#define EXMC_SNCTL1_CCK_Msk               (0x100000UL)              /*!< CCK (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_SYNCWR_Pos            (19UL)                    /*!< SYNCWR (Bit 19) */
#define EXMC_SNCTL1_SYNCWR_Msk            (0x80000UL)               /*!< SYNCWR (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_CPS_Pos               (16UL)                    /*!< CPS (Bit 16) */
#define EXMC_SNCTL1_CPS_Msk               (0x70000UL)               /*!< CPS (Bitfield-Mask: 0x07) */
#define EXMC_SNCTL1_ASYNCWAIT_Pos         (15UL)                    /*!< ASYNCWAIT (Bit 15) */
#define EXMC_SNCTL1_ASYNCWAIT_Msk         (0x8000UL)                /*!< ASYNCWAIT (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_EXMODEN_Pos           (14UL)                    /*!< EXMODEN (Bit 14) */
#define EXMC_SNCTL1_EXMODEN_Msk           (0x4000UL)                /*!< EXMODEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_NRWTEN_Pos            (13UL)                    /*!< NRWTEN (Bit 13) */
#define EXMC_SNCTL1_NRWTEN_Msk            (0x2000UL)                /*!< NRWTEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_WREN_Pos              (12UL)                    /*!< WREN (Bit 12) */
#define EXMC_SNCTL1_WREN_Msk              (0x1000UL)                /*!< WREN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_NRWTCFG_Pos           (11UL)                    /*!< NRWTCFG (Bit 11) */
#define EXMC_SNCTL1_NRWTCFG_Msk           (0x800UL)                 /*!< NRWTCFG (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_WRAPEN_Pos            (10UL)                    /*!< WRAPEN (Bit 10) */
#define EXMC_SNCTL1_WRAPEN_Msk            (0x400UL)                 /*!< WRAPEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_NRWTPOL_Pos           (9UL)                     /*!< NRWTPOL (Bit 9) */
#define EXMC_SNCTL1_NRWTPOL_Msk           (0x200UL)                 /*!< NRWTPOL (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_SBRSTEN_Pos           (8UL)                     /*!< SBRSTEN (Bit 8) */
#define EXMC_SNCTL1_SBRSTEN_Msk           (0x100UL)                 /*!< SBRSTEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_NREN_Pos              (6UL)                     /*!< NREN (Bit 6) */
#define EXMC_SNCTL1_NREN_Msk              (0x40UL)                  /*!< NREN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_NRW_Pos               (4UL)                     /*!< NRW (Bit 4) */
#define EXMC_SNCTL1_NRW_Msk               (0x30UL)                  /*!< NRW (Bitfield-Mask: 0x03) */
#define EXMC_SNCTL1_NRTP_Pos              (2UL)                     /*!< NRTP (Bit 2) */
#define EXMC_SNCTL1_NRTP_Msk              (0xcUL)                   /*!< NRTP (Bitfield-Mask: 0x03) */
#define EXMC_SNCTL1_NRMUX_Pos             (1UL)                     /*!< NRMUX (Bit 1) */
#define EXMC_SNCTL1_NRMUX_Msk             (0x2UL)                   /*!< NRMUX (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL1_NRBKEN_Pos            (0UL)                     /*!< NRBKEN (Bit 0) */
#define EXMC_SNCTL1_NRBKEN_Msk            (0x1UL)                   /*!< NRBKEN (Bitfield-Mask: 0x01) */
/* ========================================================  SNTCFG1  ======================================================== */
#define EXMC_SNTCFG1_ASYNCMOD_Pos         (28UL)                    /*!< ASYNCMOD (Bit 28) */
#define EXMC_SNTCFG1_ASYNCMOD_Msk         (0x30000000UL)            /*!< ASYNCMOD (Bitfield-Mask: 0x03) */
#define EXMC_SNTCFG1_DLAT_Pos             (24UL)                    /*!< DLAT (Bit 24) */
#define EXMC_SNTCFG1_DLAT_Msk             (0xf000000UL)             /*!< DLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG1_CKDIV_Pos            (20UL)                    /*!< CKDIV (Bit 20) */
#define EXMC_SNTCFG1_CKDIV_Msk            (0xf00000UL)              /*!< CKDIV (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG1_BUSLAT_Pos           (16UL)                    /*!< BUSLAT (Bit 16) */
#define EXMC_SNTCFG1_BUSLAT_Msk           (0xf0000UL)               /*!< BUSLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG1_DSET_Pos             (8UL)                     /*!< DSET (Bit 8) */
#define EXMC_SNTCFG1_DSET_Msk             (0xff00UL)                /*!< DSET (Bitfield-Mask: 0xff) */
#define EXMC_SNTCFG1_AHLD_Pos             (4UL)                     /*!< AHLD (Bit 4) */
#define EXMC_SNTCFG1_AHLD_Msk             (0xf0UL)                  /*!< AHLD (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG1_ASET_Pos             (0UL)                     /*!< ASET (Bit 0) */
#define EXMC_SNTCFG1_ASET_Msk             (0xfUL)                   /*!< ASET (Bitfield-Mask: 0x0f) */
/* ========================================================  SNCTL2  ========================================================= */
#define EXMC_SNCTL2_CCK_Pos               (20UL)                    /*!< CCK (Bit 20) */
#define EXMC_SNCTL2_CCK_Msk               (0x100000UL)              /*!< CCK (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_SYNCWR_Pos            (19UL)                    /*!< SYNCWR (Bit 19) */
#define EXMC_SNCTL2_SYNCWR_Msk            (0x80000UL)               /*!< SYNCWR (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_CPS_Pos               (16UL)                    /*!< CPS (Bit 16) */
#define EXMC_SNCTL2_CPS_Msk               (0x70000UL)               /*!< CPS (Bitfield-Mask: 0x07) */
#define EXMC_SNCTL2_ASYNCWAIT_Pos         (15UL)                    /*!< ASYNCWAIT (Bit 15) */
#define EXMC_SNCTL2_ASYNCWAIT_Msk         (0x8000UL)                /*!< ASYNCWAIT (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_EXMODEN_Pos           (14UL)                    /*!< EXMODEN (Bit 14) */
#define EXMC_SNCTL2_EXMODEN_Msk           (0x4000UL)                /*!< EXMODEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_NRWTEN_Pos            (13UL)                    /*!< NRWTEN (Bit 13) */
#define EXMC_SNCTL2_NRWTEN_Msk            (0x2000UL)                /*!< NRWTEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_WREN_Pos              (12UL)                    /*!< WREN (Bit 12) */
#define EXMC_SNCTL2_WREN_Msk              (0x1000UL)                /*!< WREN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_NRWTCFG_Pos           (11UL)                    /*!< NRWTCFG (Bit 11) */
#define EXMC_SNCTL2_NRWTCFG_Msk           (0x800UL)                 /*!< NRWTCFG (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_WRAPEN_Pos            (10UL)                    /*!< WRAPEN (Bit 10) */
#define EXMC_SNCTL2_WRAPEN_Msk            (0x400UL)                 /*!< WRAPEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_NRWTPOL_Pos           (9UL)                     /*!< NRWTPOL (Bit 9) */
#define EXMC_SNCTL2_NRWTPOL_Msk           (0x200UL)                 /*!< NRWTPOL (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_SBRSTEN_Pos           (8UL)                     /*!< SBRSTEN (Bit 8) */
#define EXMC_SNCTL2_SBRSTEN_Msk           (0x100UL)                 /*!< SBRSTEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_NREN_Pos              (6UL)                     /*!< NREN (Bit 6) */
#define EXMC_SNCTL2_NREN_Msk              (0x40UL)                  /*!< NREN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_NRW_Pos               (4UL)                     /*!< NRW (Bit 4) */
#define EXMC_SNCTL2_NRW_Msk               (0x30UL)                  /*!< NRW (Bitfield-Mask: 0x03) */
#define EXMC_SNCTL2_NRTP_Pos              (2UL)                     /*!< NRTP (Bit 2) */
#define EXMC_SNCTL2_NRTP_Msk              (0xcUL)                   /*!< NRTP (Bitfield-Mask: 0x03) */
#define EXMC_SNCTL2_NRMUX_Pos             (1UL)                     /*!< NRMUX (Bit 1) */
#define EXMC_SNCTL2_NRMUX_Msk             (0x2UL)                   /*!< NRMUX (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL2_NRBKEN_Pos            (0UL)                     /*!< NRBKEN (Bit 0) */
#define EXMC_SNCTL2_NRBKEN_Msk            (0x1UL)                   /*!< NRBKEN (Bitfield-Mask: 0x01) */
/* ========================================================  SNTCFG2  ======================================================== */
#define EXMC_SNTCFG2_ASYNCMOD_Pos         (28UL)                    /*!< ASYNCMOD (Bit 28) */
#define EXMC_SNTCFG2_ASYNCMOD_Msk         (0x30000000UL)            /*!< ASYNCMOD (Bitfield-Mask: 0x03) */
#define EXMC_SNTCFG2_DLAT_Pos             (24UL)                    /*!< DLAT (Bit 24) */
#define EXMC_SNTCFG2_DLAT_Msk             (0xf000000UL)             /*!< DLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG2_CKDIV_Pos            (20UL)                    /*!< CKDIV (Bit 20) */
#define EXMC_SNTCFG2_CKDIV_Msk            (0xf00000UL)              /*!< CKDIV (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG2_BUSLAT_Pos           (16UL)                    /*!< BUSLAT (Bit 16) */
#define EXMC_SNTCFG2_BUSLAT_Msk           (0xf0000UL)               /*!< BUSLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG2_DSET_Pos             (8UL)                     /*!< DSET (Bit 8) */
#define EXMC_SNTCFG2_DSET_Msk             (0xff00UL)                /*!< DSET (Bitfield-Mask: 0xff) */
#define EXMC_SNTCFG2_AHLD_Pos             (4UL)                     /*!< AHLD (Bit 4) */
#define EXMC_SNTCFG2_AHLD_Msk             (0xf0UL)                  /*!< AHLD (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG2_ASET_Pos             (0UL)                     /*!< ASET (Bit 0) */
#define EXMC_SNTCFG2_ASET_Msk             (0xfUL)                   /*!< ASET (Bitfield-Mask: 0x0f) */
/* ========================================================  SNCTL3  ========================================================= */
#define EXMC_SNCTL3_CCK_Pos               (20UL)                    /*!< CCK (Bit 20) */
#define EXMC_SNCTL3_CCK_Msk               (0x100000UL)              /*!< CCK (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_SYNCWR_Pos            (19UL)                    /*!< SYNCWR (Bit 19) */
#define EXMC_SNCTL3_SYNCWR_Msk            (0x80000UL)               /*!< SYNCWR (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_CPS_Pos               (16UL)                    /*!< CPS (Bit 16) */
#define EXMC_SNCTL3_CPS_Msk               (0x70000UL)               /*!< CPS (Bitfield-Mask: 0x07) */
#define EXMC_SNCTL3_ASYNCWAIT_Pos         (15UL)                    /*!< ASYNCWAIT (Bit 15) */
#define EXMC_SNCTL3_ASYNCWAIT_Msk         (0x8000UL)                /*!< ASYNCWAIT (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_EXMODEN_Pos           (14UL)                    /*!< EXMODEN (Bit 14) */
#define EXMC_SNCTL3_EXMODEN_Msk           (0x4000UL)                /*!< EXMODEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_NRWTEN_Pos            (13UL)                    /*!< NRWTEN (Bit 13) */
#define EXMC_SNCTL3_NRWTEN_Msk            (0x2000UL)                /*!< NRWTEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_WREN_Pos              (12UL)                    /*!< WREN (Bit 12) */
#define EXMC_SNCTL3_WREN_Msk              (0x1000UL)                /*!< WREN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_NRWTCFG_Pos           (11UL)                    /*!< NRWTCFG (Bit 11) */
#define EXMC_SNCTL3_NRWTCFG_Msk           (0x800UL)                 /*!< NRWTCFG (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_WRAPEN_Pos            (10UL)                    /*!< WRAPEN (Bit 10) */
#define EXMC_SNCTL3_WRAPEN_Msk            (0x400UL)                 /*!< WRAPEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_NRWTPOL_Pos           (9UL)                     /*!< NRWTPOL (Bit 9) */
#define EXMC_SNCTL3_NRWTPOL_Msk           (0x200UL)                 /*!< NRWTPOL (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_SBRSTEN_Pos           (8UL)                     /*!< SBRSTEN (Bit 8) */
#define EXMC_SNCTL3_SBRSTEN_Msk           (0x100UL)                 /*!< SBRSTEN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_NREN_Pos              (6UL)                     /*!< NREN (Bit 6) */
#define EXMC_SNCTL3_NREN_Msk              (0x40UL)                  /*!< NREN (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_NRW_Pos               (4UL)                     /*!< NRW (Bit 4) */
#define EXMC_SNCTL3_NRW_Msk               (0x30UL)                  /*!< NRW (Bitfield-Mask: 0x03) */
#define EXMC_SNCTL3_NRTP_Pos              (2UL)                     /*!< NRTP (Bit 2) */
#define EXMC_SNCTL3_NRTP_Msk              (0xcUL)                   /*!< NRTP (Bitfield-Mask: 0x03) */
#define EXMC_SNCTL3_NRMUX_Pos             (1UL)                     /*!< NRMUX (Bit 1) */
#define EXMC_SNCTL3_NRMUX_Msk             (0x2UL)                   /*!< NRMUX (Bitfield-Mask: 0x01) */
#define EXMC_SNCTL3_NRBKEN_Pos            (0UL)                     /*!< NRBKEN (Bit 0) */
#define EXMC_SNCTL3_NRBKEN_Msk            (0x1UL)                   /*!< NRBKEN (Bitfield-Mask: 0x01) */
/* ========================================================  SNTCFG3  ======================================================== */
#define EXMC_SNTCFG3_ASYNCMOD_Pos         (28UL)                    /*!< ASYNCMOD (Bit 28) */
#define EXMC_SNTCFG3_ASYNCMOD_Msk         (0x30000000UL)            /*!< ASYNCMOD (Bitfield-Mask: 0x03) */
#define EXMC_SNTCFG3_DLAT_Pos             (24UL)                    /*!< DLAT (Bit 24) */
#define EXMC_SNTCFG3_DLAT_Msk             (0xf000000UL)             /*!< DLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG3_CKDIV_Pos            (20UL)                    /*!< CKDIV (Bit 20) */
#define EXMC_SNTCFG3_CKDIV_Msk            (0xf00000UL)              /*!< CKDIV (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG3_BUSLAT_Pos           (16UL)                    /*!< BUSLAT (Bit 16) */
#define EXMC_SNTCFG3_BUSLAT_Msk           (0xf0000UL)               /*!< BUSLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG3_DSET_Pos             (8UL)                     /*!< DSET (Bit 8) */
#define EXMC_SNTCFG3_DSET_Msk             (0xff00UL)                /*!< DSET (Bitfield-Mask: 0xff) */
#define EXMC_SNTCFG3_AHLD_Pos             (4UL)                     /*!< AHLD (Bit 4) */
#define EXMC_SNTCFG3_AHLD_Msk             (0xf0UL)                  /*!< AHLD (Bitfield-Mask: 0x0f) */
#define EXMC_SNTCFG3_ASET_Pos             (0UL)                     /*!< ASET (Bit 0) */
#define EXMC_SNTCFG3_ASET_Msk             (0xfUL)                   /*!< ASET (Bitfield-Mask: 0x0f) */
/* =======================================================  SNWTCFG0  ======================================================== */
#define EXMC_SNWTCFG0_WASYNCMOD_Pos       (28UL)                    /*!< WASYNCMOD (Bit 28) */
#define EXMC_SNWTCFG0_WASYNCMOD_Msk       (0x30000000UL)            /*!< WASYNCMOD (Bitfield-Mask: 0x03) */
#define EXMC_SNWTCFG0_WBUSLAT_Pos         (16UL)                    /*!< WBUSLAT (Bit 16) */
#define EXMC_SNWTCFG0_WBUSLAT_Msk         (0xf0000UL)               /*!< WBUSLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNWTCFG0_WDSET_Pos           (8UL)                     /*!< WDSET (Bit 8) */
#define EXMC_SNWTCFG0_WDSET_Msk           (0xff00UL)                /*!< WDSET (Bitfield-Mask: 0xff) */
#define EXMC_SNWTCFG0_WAHLD_Pos           (4UL)                     /*!< WAHLD (Bit 4) */
#define EXMC_SNWTCFG0_WAHLD_Msk           (0xf0UL)                  /*!< WAHLD (Bitfield-Mask: 0x0f) */
#define EXMC_SNWTCFG0_WASET_Pos           (0UL)                     /*!< WASET (Bit 0) */
#define EXMC_SNWTCFG0_WASET_Msk           (0xfUL)                   /*!< WASET (Bitfield-Mask: 0x0f) */
/* =======================================================  SNWTCFG1  ======================================================== */
#define EXMC_SNWTCFG1_WASYNCMOD_Pos       (28UL)                    /*!< WASYNCMOD (Bit 28) */
#define EXMC_SNWTCFG1_WASYNCMOD_Msk       (0x30000000UL)            /*!< WASYNCMOD (Bitfield-Mask: 0x03) */
#define EXMC_SNWTCFG1_WBUSLAT_Pos         (16UL)                    /*!< WBUSLAT (Bit 16) */
#define EXMC_SNWTCFG1_WBUSLAT_Msk         (0xf0000UL)               /*!< WBUSLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNWTCFG1_WDSET_Pos           (8UL)                     /*!< WDSET (Bit 8) */
#define EXMC_SNWTCFG1_WDSET_Msk           (0xff00UL)                /*!< WDSET (Bitfield-Mask: 0xff) */
#define EXMC_SNWTCFG1_WAHLD_Pos           (4UL)                     /*!< WAHLD (Bit 4) */
#define EXMC_SNWTCFG1_WAHLD_Msk           (0xf0UL)                  /*!< WAHLD (Bitfield-Mask: 0x0f) */
#define EXMC_SNWTCFG1_WASET_Pos           (0UL)                     /*!< WASET (Bit 0) */
#define EXMC_SNWTCFG1_WASET_Msk           (0xfUL)                   /*!< WASET (Bitfield-Mask: 0x0f) */
/* =======================================================  SNWTCFG2  ======================================================== */
#define EXMC_SNWTCFG2_WASYNCMOD_Pos       (28UL)                    /*!< WASYNCMOD (Bit 28) */
#define EXMC_SNWTCFG2_WASYNCMOD_Msk       (0x30000000UL)            /*!< WASYNCMOD (Bitfield-Mask: 0x03) */
#define EXMC_SNWTCFG2_WBUSLAT_Pos         (16UL)                    /*!< WBUSLAT (Bit 16) */
#define EXMC_SNWTCFG2_WBUSLAT_Msk         (0xf0000UL)               /*!< WBUSLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNWTCFG2_WDSET_Pos           (8UL)                     /*!< WDSET (Bit 8) */
#define EXMC_SNWTCFG2_WDSET_Msk           (0xff00UL)                /*!< WDSET (Bitfield-Mask: 0xff) */
#define EXMC_SNWTCFG2_WAHLD_Pos           (4UL)                     /*!< WAHLD (Bit 4) */
#define EXMC_SNWTCFG2_WAHLD_Msk           (0xf0UL)                  /*!< WAHLD (Bitfield-Mask: 0x0f) */
#define EXMC_SNWTCFG2_WASET_Pos           (0UL)                     /*!< WASET (Bit 0) */
#define EXMC_SNWTCFG2_WASET_Msk           (0xfUL)                   /*!< WASET (Bitfield-Mask: 0x0f) */
/* =======================================================  SNWTCFG3  ======================================================== */
#define EXMC_SNWTCFG3_WASYNCMOD_Pos       (28UL)                    /*!< WASYNCMOD (Bit 28) */
#define EXMC_SNWTCFG3_WASYNCMOD_Msk       (0x30000000UL)            /*!< WASYNCMOD (Bitfield-Mask: 0x03) */
#define EXMC_SNWTCFG3_WBUSLAT_Pos         (16UL)                    /*!< WBUSLAT (Bit 16) */
#define EXMC_SNWTCFG3_WBUSLAT_Msk         (0xf0000UL)               /*!< WBUSLAT (Bitfield-Mask: 0x0f) */
#define EXMC_SNWTCFG3_WDSET_Pos           (8UL)                     /*!< WDSET (Bit 8) */
#define EXMC_SNWTCFG3_WDSET_Msk           (0xff00UL)                /*!< WDSET (Bitfield-Mask: 0xff) */
#define EXMC_SNWTCFG3_WAHLD_Pos           (4UL)                     /*!< WAHLD (Bit 4) */
#define EXMC_SNWTCFG3_WAHLD_Msk           (0xf0UL)                  /*!< WAHLD (Bitfield-Mask: 0x0f) */
#define EXMC_SNWTCFG3_WASET_Pos           (0UL)                     /*!< WASET (Bit 0) */
#define EXMC_SNWTCFG3_WASET_Msk           (0xfUL)                   /*!< WASET (Bitfield-Mask: 0x0f) */
/* ========================================================  NPCTL1  ========================================================= */
#define EXMC_NPCTL1_ECCSZ_Pos             (17UL)                    /*!< ECCSZ (Bit 17) */
#define EXMC_NPCTL1_ECCSZ_Msk             (0xe0000UL)               /*!< ECCSZ (Bitfield-Mask: 0x07) */
#define EXMC_NPCTL1_ATR_Pos               (13UL)                    /*!< ATR (Bit 13) */
#define EXMC_NPCTL1_ATR_Msk               (0x1e000UL)               /*!< ATR (Bitfield-Mask: 0x0f) */
#define EXMC_NPCTL1_CTR_Pos               (9UL)                     /*!< CTR (Bit 9) */
#define EXMC_NPCTL1_CTR_Msk               (0x1e00UL)                /*!< CTR (Bitfield-Mask: 0x0f) */
#define EXMC_NPCTL1_ECCEN_Pos             (6UL)                     /*!< ECCEN (Bit 6) */
#define EXMC_NPCTL1_ECCEN_Msk             (0x40UL)                  /*!< ECCEN (Bitfield-Mask: 0x01) */
#define EXMC_NPCTL1_NDW_Pos               (4UL)                     /*!< NDW (Bit 4) */
#define EXMC_NPCTL1_NDW_Msk               (0x30UL)                  /*!< NDW (Bitfield-Mask: 0x03) */
#define EXMC_NPCTL1_NDTP_Pos              (3UL)                     /*!< NDTP (Bit 3) */
#define EXMC_NPCTL1_NDTP_Msk              (0x8UL)                   /*!< NDTP (Bitfield-Mask: 0x01) */
#define EXMC_NPCTL1_NDBKEN_Pos            (2UL)                     /*!< NDBKEN (Bit 2) */
#define EXMC_NPCTL1_NDBKEN_Msk            (0x4UL)                   /*!< NDBKEN (Bitfield-Mask: 0x01) */
#define EXMC_NPCTL1_NDWTEN_Pos            (1UL)                     /*!< NDWTEN (Bit 1) */
#define EXMC_NPCTL1_NDWTEN_Msk            (0x2UL)                   /*!< NDWTEN (Bitfield-Mask: 0x01) */
/* ========================================================  NPCTL2  ========================================================= */
#define EXMC_NPCTL2_ECCSZ_Pos             (17UL)                    /*!< ECCSZ (Bit 17) */
#define EXMC_NPCTL2_ECCSZ_Msk             (0xe0000UL)               /*!< ECCSZ (Bitfield-Mask: 0x07) */
#define EXMC_NPCTL2_ATR_Pos               (13UL)                    /*!< ATR (Bit 13) */
#define EXMC_NPCTL2_ATR_Msk               (0x1e000UL)               /*!< ATR (Bitfield-Mask: 0x0f) */
#define EXMC_NPCTL2_CTR_Pos               (9UL)                     /*!< CTR (Bit 9) */
#define EXMC_NPCTL2_CTR_Msk               (0x1e00UL)                /*!< CTR (Bitfield-Mask: 0x0f) */
#define EXMC_NPCTL2_ECCEN_Pos             (6UL)                     /*!< ECCEN (Bit 6) */
#define EXMC_NPCTL2_ECCEN_Msk             (0x40UL)                  /*!< ECCEN (Bitfield-Mask: 0x01) */
#define EXMC_NPCTL2_NDW_Pos               (4UL)                     /*!< NDW (Bit 4) */
#define EXMC_NPCTL2_NDW_Msk               (0x30UL)                  /*!< NDW (Bitfield-Mask: 0x03) */
#define EXMC_NPCTL2_NDTP_Pos              (3UL)                     /*!< NDTP (Bit 3) */
#define EXMC_NPCTL2_NDTP_Msk              (0x8UL)                   /*!< NDTP (Bitfield-Mask: 0x01) */
#define EXMC_NPCTL2_NDBKEN_Pos            (2UL)                     /*!< NDBKEN (Bit 2) */
#define EXMC_NPCTL2_NDBKEN_Msk            (0x4UL)                   /*!< NDBKEN (Bitfield-Mask: 0x01) */
#define EXMC_NPCTL2_NDWTEN_Pos            (1UL)                     /*!< NDWTEN (Bit 1) */
#define EXMC_NPCTL2_NDWTEN_Msk            (0x2UL)                   /*!< NDWTEN (Bitfield-Mask: 0x01) */
/* ========================================================  NPCTL3  ========================================================= */
#define EXMC_NPCTL3_ECCSZ_Pos             (17UL)                    /*!< ECCSZ (Bit 17) */
#define EXMC_NPCTL3_ECCSZ_Msk             (0xe0000UL)               /*!< ECCSZ (Bitfield-Mask: 0x07) */
#define EXMC_NPCTL3_ATR_Pos               (13UL)                    /*!< ATR (Bit 13) */
#define EXMC_NPCTL3_ATR_Msk               (0x1e000UL)               /*!< ATR (Bitfield-Mask: 0x0f) */
#define EXMC_NPCTL3_CTR_Pos               (9UL)                     /*!< CTR (Bit 9) */
#define EXMC_NPCTL3_CTR_Msk               (0x1e00UL)                /*!< CTR (Bitfield-Mask: 0x0f) */
#define EXMC_NPCTL3_ECCEN_Pos             (6UL)                     /*!< ECCEN (Bit 6) */
#define EXMC_NPCTL3_ECCEN_Msk             (0x40UL)                  /*!< ECCEN (Bitfield-Mask: 0x01) */
#define EXMC_NPCTL3_NDW_Pos               (4UL)                     /*!< NDW (Bit 4) */
#define EXMC_NPCTL3_NDW_Msk               (0x30UL)                  /*!< NDW (Bitfield-Mask: 0x03) */
#define EXMC_NPCTL3_NDTP_Pos              (3UL)                     /*!< NDTP (Bit 3) */
#define EXMC_NPCTL3_NDTP_Msk              (0x8UL)                   /*!< NDTP (Bitfield-Mask: 0x01) */
#define EXMC_NPCTL3_NDBKEN_Pos            (2UL)                     /*!< NDBKEN (Bit 2) */
#define EXMC_NPCTL3_NDBKEN_Msk            (0x4UL)                   /*!< NDBKEN (Bitfield-Mask: 0x01) */
#define EXMC_NPCTL3_NDWTEN_Pos            (1UL)                     /*!< NDWTEN (Bit 1) */
#define EXMC_NPCTL3_NDWTEN_Msk            (0x2UL)                   /*!< NDWTEN (Bitfield-Mask: 0x01) */
/* =======================================================  NPINTEN1  ======================================================== */
#define EXMC_NPINTEN1_FFEPT_Pos           (6UL)                     /*!< FFEPT (Bit 6) */
#define EXMC_NPINTEN1_FFEPT_Msk           (0x40UL)                  /*!< FFEPT (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN1_INTFEN_Pos          (5UL)                     /*!< INTFEN (Bit 5) */
#define EXMC_NPINTEN1_INTFEN_Msk          (0x20UL)                  /*!< INTFEN (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN1_INTHEN_Pos          (4UL)                     /*!< INTHEN (Bit 4) */
#define EXMC_NPINTEN1_INTHEN_Msk          (0x10UL)                  /*!< INTHEN (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN1_INTREN_Pos          (3UL)                     /*!< INTREN (Bit 3) */
#define EXMC_NPINTEN1_INTREN_Msk          (0x8UL)                   /*!< INTREN (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN1_INTFS_Pos           (2UL)                     /*!< INTFS (Bit 2) */
#define EXMC_NPINTEN1_INTFS_Msk           (0x4UL)                   /*!< INTFS (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN1_INTHS_Pos           (1UL)                     /*!< INTHS (Bit 1) */
#define EXMC_NPINTEN1_INTHS_Msk           (0x2UL)                   /*!< INTHS (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN1_INTRS_Pos           (0UL)                     /*!< INTRS (Bit 0) */
#define EXMC_NPINTEN1_INTRS_Msk           (0x1UL)                   /*!< INTRS (Bitfield-Mask: 0x01) */
/* =======================================================  NPINTEN2  ======================================================== */
#define EXMC_NPINTEN2_FFEPT_Pos           (6UL)                     /*!< FFEPT (Bit 6) */
#define EXMC_NPINTEN2_FFEPT_Msk           (0x40UL)                  /*!< FFEPT (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN2_INTFEN_Pos          (5UL)                     /*!< INTFEN (Bit 5) */
#define EXMC_NPINTEN2_INTFEN_Msk          (0x20UL)                  /*!< INTFEN (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN2_INTHEN_Pos          (4UL)                     /*!< INTHEN (Bit 4) */
#define EXMC_NPINTEN2_INTHEN_Msk          (0x10UL)                  /*!< INTHEN (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN2_INTREN_Pos          (3UL)                     /*!< INTREN (Bit 3) */
#define EXMC_NPINTEN2_INTREN_Msk          (0x8UL)                   /*!< INTREN (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN2_INTFS_Pos           (2UL)                     /*!< INTFS (Bit 2) */
#define EXMC_NPINTEN2_INTFS_Msk           (0x4UL)                   /*!< INTFS (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN2_INTHS_Pos           (1UL)                     /*!< INTHS (Bit 1) */
#define EXMC_NPINTEN2_INTHS_Msk           (0x2UL)                   /*!< INTHS (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN2_INTRS_Pos           (0UL)                     /*!< INTRS (Bit 0) */
#define EXMC_NPINTEN2_INTRS_Msk           (0x1UL)                   /*!< INTRS (Bitfield-Mask: 0x01) */
/* =======================================================  NPINTEN3  ======================================================== */
#define EXMC_NPINTEN3_FFEPT_Pos           (6UL)                     /*!< FFEPT (Bit 6) */
#define EXMC_NPINTEN3_FFEPT_Msk           (0x40UL)                  /*!< FFEPT (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN3_INTFEN_Pos          (5UL)                     /*!< INTFEN (Bit 5) */
#define EXMC_NPINTEN3_INTFEN_Msk          (0x20UL)                  /*!< INTFEN (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN3_INTHEN_Pos          (4UL)                     /*!< INTHEN (Bit 4) */
#define EXMC_NPINTEN3_INTHEN_Msk          (0x10UL)                  /*!< INTHEN (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN3_INTREN_Pos          (3UL)                     /*!< INTREN (Bit 3) */
#define EXMC_NPINTEN3_INTREN_Msk          (0x8UL)                   /*!< INTREN (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN3_INTFS_Pos           (2UL)                     /*!< INTFS (Bit 2) */
#define EXMC_NPINTEN3_INTFS_Msk           (0x4UL)                   /*!< INTFS (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN3_INTHS_Pos           (1UL)                     /*!< INTHS (Bit 1) */
#define EXMC_NPINTEN3_INTHS_Msk           (0x2UL)                   /*!< INTHS (Bitfield-Mask: 0x01) */
#define EXMC_NPINTEN3_INTRS_Pos           (0UL)                     /*!< INTRS (Bit 0) */
#define EXMC_NPINTEN3_INTRS_Msk           (0x1UL)                   /*!< INTRS (Bitfield-Mask: 0x01) */
/* =======================================================  NPCTCFG1  ======================================================== */
#define EXMC_NPCTCFG1_COMHIZ_Pos          (24UL)                    /*!< COMHIZ (Bit 24) */
#define EXMC_NPCTCFG1_COMHIZ_Msk          (0xff000000UL)            /*!< COMHIZ (Bitfield-Mask: 0xff) */
#define EXMC_NPCTCFG1_COMHLD_Pos          (16UL)                    /*!< COMHLD (Bit 16) */
#define EXMC_NPCTCFG1_COMHLD_Msk          (0xff0000UL)              /*!< COMHLD (Bitfield-Mask: 0xff) */
#define EXMC_NPCTCFG1_COMWAIT_Pos         (8UL)                     /*!< COMWAIT (Bit 8) */
#define EXMC_NPCTCFG1_COMWAIT_Msk         (0xff00UL)                /*!< COMWAIT (Bitfield-Mask: 0xff) */
#define EXMC_NPCTCFG1_COMSET_Pos          (0UL)                     /*!< COMSET (Bit 0) */
#define EXMC_NPCTCFG1_COMSET_Msk          (0xffUL)                  /*!< COMSET (Bitfield-Mask: 0xff) */
/* =======================================================  NPCTCFG2  ======================================================== */
#define EXMC_NPCTCFG2_COMHIZ_Pos          (24UL)                    /*!< COMHIZ (Bit 24) */
#define EXMC_NPCTCFG2_COMHIZ_Msk          (0xff000000UL)            /*!< COMHIZ (Bitfield-Mask: 0xff) */
#define EXMC_NPCTCFG2_COMHLD_Pos          (16UL)                    /*!< COMHLD (Bit 16) */
#define EXMC_NPCTCFG2_COMHLD_Msk          (0xff0000UL)              /*!< COMHLD (Bitfield-Mask: 0xff) */
#define EXMC_NPCTCFG2_COMWAIT_Pos         (8UL)                     /*!< COMWAIT (Bit 8) */
#define EXMC_NPCTCFG2_COMWAIT_Msk         (0xff00UL)                /*!< COMWAIT (Bitfield-Mask: 0xff) */
#define EXMC_NPCTCFG2_COMSET_Pos          (0UL)                     /*!< COMSET (Bit 0) */
#define EXMC_NPCTCFG2_COMSET_Msk          (0xffUL)                  /*!< COMSET (Bitfield-Mask: 0xff) */
/* =======================================================  NPCTCFG3  ======================================================== */
#define EXMC_NPCTCFG3_COMHIZ_Pos          (24UL)                    /*!< COMHIZ (Bit 24) */
#define EXMC_NPCTCFG3_COMHIZ_Msk          (0xff000000UL)            /*!< COMHIZ (Bitfield-Mask: 0xff) */
#define EXMC_NPCTCFG3_COMHLD_Pos          (16UL)                    /*!< COMHLD (Bit 16) */
#define EXMC_NPCTCFG3_COMHLD_Msk          (0xff0000UL)              /*!< COMHLD (Bitfield-Mask: 0xff) */
#define EXMC_NPCTCFG3_COMWAIT_Pos         (8UL)                     /*!< COMWAIT (Bit 8) */
#define EXMC_NPCTCFG3_COMWAIT_Msk         (0xff00UL)                /*!< COMWAIT (Bitfield-Mask: 0xff) */
#define EXMC_NPCTCFG3_COMSET_Pos          (0UL)                     /*!< COMSET (Bit 0) */
#define EXMC_NPCTCFG3_COMSET_Msk          (0xffUL)                  /*!< COMSET (Bitfield-Mask: 0xff) */
/* =======================================================  NPATCFG1  ======================================================== */
#define EXMC_NPATCFG1_ATTHIZ_Pos          (24UL)                    /*!< ATTHIZ (Bit 24) */
#define EXMC_NPATCFG1_ATTHIZ_Msk          (0xff000000UL)            /*!< ATTHIZ (Bitfield-Mask: 0xff) */
#define EXMC_NPATCFG1_ATTHLD_Pos          (16UL)                    /*!< ATTHLD (Bit 16) */
#define EXMC_NPATCFG1_ATTHLD_Msk          (0xff0000UL)              /*!< ATTHLD (Bitfield-Mask: 0xff) */
#define EXMC_NPATCFG1_ATTWAIT_Pos         (8UL)                     /*!< ATTWAIT (Bit 8) */
#define EXMC_NPATCFG1_ATTWAIT_Msk         (0xff00UL)                /*!< ATTWAIT (Bitfield-Mask: 0xff) */
#define EXMC_NPATCFG1_ATTSET_Pos          (0UL)                     /*!< ATTSET (Bit 0) */
#define EXMC_NPATCFG1_ATTSET_Msk          (0xffUL)                  /*!< ATTSET (Bitfield-Mask: 0xff) */
/* =======================================================  NPATCFG2  ======================================================== */
#define EXMC_NPATCFG2_ATTHIZ_Pos          (24UL)                    /*!< ATTHIZ (Bit 24) */
#define EXMC_NPATCFG2_ATTHIZ_Msk          (0xff000000UL)            /*!< ATTHIZ (Bitfield-Mask: 0xff) */
#define EXMC_NPATCFG2_ATTHLD_Pos          (16UL)                    /*!< ATTHLD (Bit 16) */
#define EXMC_NPATCFG2_ATTHLD_Msk          (0xff0000UL)              /*!< ATTHLD (Bitfield-Mask: 0xff) */
#define EXMC_NPATCFG2_ATTWAIT_Pos         (8UL)                     /*!< ATTWAIT (Bit 8) */
#define EXMC_NPATCFG2_ATTWAIT_Msk         (0xff00UL)                /*!< ATTWAIT (Bitfield-Mask: 0xff) */
#define EXMC_NPATCFG2_ATTSET_Pos          (0UL)                     /*!< ATTSET (Bit 0) */
#define EXMC_NPATCFG2_ATTSET_Msk          (0xffUL)                  /*!< ATTSET (Bitfield-Mask: 0xff) */
/* =======================================================  NPATCFG3  ======================================================== */
#define EXMC_NPATCFG3_ATTHIZ_Pos          (24UL)                    /*!< ATTHIZ (Bit 24) */
#define EXMC_NPATCFG3_ATTHIZ_Msk          (0xff000000UL)            /*!< ATTHIZ (Bitfield-Mask: 0xff) */
#define EXMC_NPATCFG3_ATTHLD_Pos          (16UL)                    /*!< ATTHLD (Bit 16) */
#define EXMC_NPATCFG3_ATTHLD_Msk          (0xff0000UL)              /*!< ATTHLD (Bitfield-Mask: 0xff) */
#define EXMC_NPATCFG3_ATTWAIT_Pos         (8UL)                     /*!< ATTWAIT (Bit 8) */
#define EXMC_NPATCFG3_ATTWAIT_Msk         (0xff00UL)                /*!< ATTWAIT (Bitfield-Mask: 0xff) */
#define EXMC_NPATCFG3_ATTSET_Pos          (0UL)                     /*!< ATTSET (Bit 0) */
#define EXMC_NPATCFG3_ATTSET_Msk          (0xffUL)                  /*!< ATTSET (Bitfield-Mask: 0xff) */
/* =======================================================  PIOTCFG3  ======================================================== */
#define EXMC_PIOTCFG3_IOHIZ_Pos           (24UL)                    /*!< IOHIZ (Bit 24) */
#define EXMC_PIOTCFG3_IOHIZ_Msk           (0xff000000UL)            /*!< IOHIZ (Bitfield-Mask: 0xff) */
#define EXMC_PIOTCFG3_IOHLD_Pos           (16UL)                    /*!< IOHLD (Bit 16) */
#define EXMC_PIOTCFG3_IOHLD_Msk           (0xff0000UL)              /*!< IOHLD (Bitfield-Mask: 0xff) */
#define EXMC_PIOTCFG3_IOWAIT_Pos          (8UL)                     /*!< IOWAIT (Bit 8) */
#define EXMC_PIOTCFG3_IOWAIT_Msk          (0xff00UL)                /*!< IOWAIT (Bitfield-Mask: 0xff) */
#define EXMC_PIOTCFG3_IOSET_Pos           (0UL)                     /*!< IOSET (Bit 0) */
#define EXMC_PIOTCFG3_IOSET_Msk           (0xffUL)                  /*!< IOSET (Bitfield-Mask: 0xff) */
/* =========================================================  NECC1  ========================================================= */
#define EXMC_NECC1_ECC_Pos                (0UL)                     /*!< ECC (Bit 0) */
#define EXMC_NECC1_ECC_Msk                (0xffffffffUL)            /*!< ECC (Bitfield-Mask: 0xffffffff) */
/* =========================================================  NECC2  ========================================================= */
#define EXMC_NECC2_ECC_Pos                (0UL)                     /*!< ECC (Bit 0) */
#define EXMC_NECC2_ECC_Msk                (0xffffffffUL)            /*!< ECC (Bitfield-Mask: 0xffffffff) */
/* ========================================================  SDCTL0  ========================================================= */
#define EXMC_SDCTL0_PIPED_Pos             (13UL)                    /*!< PIPED (Bit 13) */
#define EXMC_SDCTL0_PIPED_Msk             (0x6000UL)                /*!< PIPED (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL0_BRSTRD_Pos            (12UL)                    /*!< BRSTRD (Bit 12) */
#define EXMC_SDCTL0_BRSTRD_Msk            (0x1000UL)                /*!< BRSTRD (Bitfield-Mask: 0x01) */
#define EXMC_SDCTL0_SDCLK_Pos             (10UL)                    /*!< SDCLK (Bit 10) */
#define EXMC_SDCTL0_SDCLK_Msk             (0xc00UL)                 /*!< SDCLK (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL0_WPEN_Pos              (9UL)                     /*!< WPEN (Bit 9) */
#define EXMC_SDCTL0_WPEN_Msk              (0x200UL)                 /*!< WPEN (Bitfield-Mask: 0x01) */
#define EXMC_SDCTL0_CL_Pos                (7UL)                     /*!< CL (Bit 7) */
#define EXMC_SDCTL0_CL_Msk                (0x180UL)                 /*!< CL (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL0_NBK_Pos               (6UL)                     /*!< NBK (Bit 6) */
#define EXMC_SDCTL0_NBK_Msk               (0x40UL)                  /*!< NBK (Bitfield-Mask: 0x01) */
#define EXMC_SDCTL0_SDW_Pos               (4UL)                     /*!< SDW (Bit 4) */
#define EXMC_SDCTL0_SDW_Msk               (0x30UL)                  /*!< SDW (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL0_RAW_Pos               (2UL)                     /*!< RAW (Bit 2) */
#define EXMC_SDCTL0_RAW_Msk               (0xcUL)                   /*!< RAW (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL0_CAW_Pos               (0UL)                     /*!< CAW (Bit 0) */
#define EXMC_SDCTL0_CAW_Msk               (0x3UL)                   /*!< CAW (Bitfield-Mask: 0x03) */
/* ========================================================  SDCTL1  ========================================================= */
#define EXMC_SDCTL1_PIPED_Pos             (13UL)                    /*!< PIPED (Bit 13) */
#define EXMC_SDCTL1_PIPED_Msk             (0x6000UL)                /*!< PIPED (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL1_BRSTRD_Pos            (12UL)                    /*!< BRSTRD (Bit 12) */
#define EXMC_SDCTL1_BRSTRD_Msk            (0x1000UL)                /*!< BRSTRD (Bitfield-Mask: 0x01) */
#define EXMC_SDCTL1_SDCLK_Pos             (10UL)                    /*!< SDCLK (Bit 10) */
#define EXMC_SDCTL1_SDCLK_Msk             (0xc00UL)                 /*!< SDCLK (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL1_WPEN_Pos              (9UL)                     /*!< WPEN (Bit 9) */
#define EXMC_SDCTL1_WPEN_Msk              (0x200UL)                 /*!< WPEN (Bitfield-Mask: 0x01) */
#define EXMC_SDCTL1_CL_Pos                (7UL)                     /*!< CL (Bit 7) */
#define EXMC_SDCTL1_CL_Msk                (0x180UL)                 /*!< CL (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL1_NBK_Pos               (6UL)                     /*!< NBK (Bit 6) */
#define EXMC_SDCTL1_NBK_Msk               (0x40UL)                  /*!< NBK (Bitfield-Mask: 0x01) */
#define EXMC_SDCTL1_SDW_Pos               (4UL)                     /*!< SDW (Bit 4) */
#define EXMC_SDCTL1_SDW_Msk               (0x30UL)                  /*!< SDW (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL1_RAW_Pos               (2UL)                     /*!< RAW (Bit 2) */
#define EXMC_SDCTL1_RAW_Msk               (0xcUL)                   /*!< RAW (Bitfield-Mask: 0x03) */
#define EXMC_SDCTL1_CAW_Pos               (0UL)                     /*!< CAW (Bit 0) */
#define EXMC_SDCTL1_CAW_Msk               (0x3UL)                   /*!< CAW (Bitfield-Mask: 0x03) */
/* ========================================================  SDTCFG0  ======================================================== */
#define EXMC_SDTCFG0_RCD_Pos              (24UL)                    /*!< RCD (Bit 24) */
#define EXMC_SDTCFG0_RCD_Msk              (0xf000000UL)             /*!< RCD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG0_RPD_Pos              (20UL)                    /*!< RPD (Bit 20) */
#define EXMC_SDTCFG0_RPD_Msk              (0xf00000UL)              /*!< RPD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG0_WRD_Pos              (16UL)                    /*!< WRD (Bit 16) */
#define EXMC_SDTCFG0_WRD_Msk              (0xf0000UL)               /*!< WRD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG0_ARFD_Pos             (12UL)                    /*!< ARFD (Bit 12) */
#define EXMC_SDTCFG0_ARFD_Msk             (0xf000UL)                /*!< ARFD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG0_RASD_Pos             (8UL)                     /*!< RASD (Bit 8) */
#define EXMC_SDTCFG0_RASD_Msk             (0xf00UL)                 /*!< RASD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG0_XSRD_Pos             (4UL)                     /*!< XSRD (Bit 4) */
#define EXMC_SDTCFG0_XSRD_Msk             (0xf0UL)                  /*!< XSRD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG0_LMRD_Pos             (0UL)                     /*!< LMRD (Bit 0) */
#define EXMC_SDTCFG0_LMRD_Msk             (0xfUL)                   /*!< LMRD (Bitfield-Mask: 0x0f) */
/* ========================================================  SDTCFG1  ======================================================== */
#define EXMC_SDTCFG1_RCD_Pos              (24UL)                    /*!< RCD (Bit 24) */
#define EXMC_SDTCFG1_RCD_Msk              (0xf000000UL)             /*!< RCD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG1_RPD_Pos              (20UL)                    /*!< RPD (Bit 20) */
#define EXMC_SDTCFG1_RPD_Msk              (0xf00000UL)              /*!< RPD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG1_WRD_Pos              (16UL)                    /*!< WRD (Bit 16) */
#define EXMC_SDTCFG1_WRD_Msk              (0xf0000UL)               /*!< WRD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG1_ARFD_Pos             (12UL)                    /*!< ARFD (Bit 12) */
#define EXMC_SDTCFG1_ARFD_Msk             (0xf000UL)                /*!< ARFD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG1_RASD_Pos             (8UL)                     /*!< RASD (Bit 8) */
#define EXMC_SDTCFG1_RASD_Msk             (0xf00UL)                 /*!< RASD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG1_XSRD_Pos             (4UL)                     /*!< XSRD (Bit 4) */
#define EXMC_SDTCFG1_XSRD_Msk             (0xf0UL)                  /*!< XSRD (Bitfield-Mask: 0x0f) */
#define EXMC_SDTCFG1_LMRD_Pos             (0UL)                     /*!< LMRD (Bit 0) */
#define EXMC_SDTCFG1_LMRD_Msk             (0xfUL)                   /*!< LMRD (Bitfield-Mask: 0x0f) */
/* =========================================================  SDCMD  ========================================================= */
#define EXMC_SDCMD_MRC_Pos                (9UL)                     /*!< MRC (Bit 9) */
#define EXMC_SDCMD_MRC_Msk                (0x3ffe00UL)              /*!< MRC (Bitfield-Mask: 0x1fff) */
#define EXMC_SDCMD_NARF_Pos               (5UL)                     /*!< NARF (Bit 5) */
#define EXMC_SDCMD_NARF_Msk               (0x1e0UL)                 /*!< NARF (Bitfield-Mask: 0x0f) */
#define EXMC_SDCMD_DS0_Pos                (4UL)                     /*!< DS0 (Bit 4) */
#define EXMC_SDCMD_DS0_Msk                (0x10UL)                  /*!< DS0 (Bitfield-Mask: 0x01) */
#define EXMC_SDCMD_DS1_Pos                (3UL)                     /*!< DS1 (Bit 3) */
#define EXMC_SDCMD_DS1_Msk                (0x8UL)                   /*!< DS1 (Bitfield-Mask: 0x01) */
#define EXMC_SDCMD_CMD_Pos                (0UL)                     /*!< CMD (Bit 0) */
#define EXMC_SDCMD_CMD_Msk                (0x7UL)                   /*!< CMD (Bitfield-Mask: 0x07) */
/* =========================================================  SDARI  ========================================================= */
#define EXMC_SDARI_REIE_Pos               (14UL)                    /*!< REIE (Bit 14) */
#define EXMC_SDARI_REIE_Msk               (0x4000UL)                /*!< REIE (Bitfield-Mask: 0x01) */
#define EXMC_SDARI_ARINTV_Pos             (1UL)                     /*!< ARINTV (Bit 1) */
#define EXMC_SDARI_ARINTV_Msk             (0x3ffeUL)                /*!< ARINTV (Bitfield-Mask: 0x1fff) */
#define EXMC_SDARI_REC_Pos                (0UL)                     /*!< REC (Bit 0) */
#define EXMC_SDARI_REC_Msk                (0x1UL)                   /*!< REC (Bitfield-Mask: 0x01) */
/* ========================================================  SDSTAT  ========================================================= */
#define EXMC_SDSTAT_NRDY_Pos              (5UL)                     /*!< NRDY (Bit 5) */
#define EXMC_SDSTAT_NRDY_Msk              (0x20UL)                  /*!< NRDY (Bitfield-Mask: 0x01) */
#define EXMC_SDSTAT_STA1_Pos              (3UL)                     /*!< STA1 (Bit 3) */
#define EXMC_SDSTAT_STA1_Msk              (0x18UL)                  /*!< STA1 (Bitfield-Mask: 0x03) */
#define EXMC_SDSTAT_STA0_Pos              (1UL)                     /*!< STA0 (Bit 1) */
#define EXMC_SDSTAT_STA0_Msk              (0x6UL)                   /*!< STA0 (Bitfield-Mask: 0x03) */
#define EXMC_SDSTAT_REIF_Pos              (0UL)                     /*!< REIF (Bit 0) */
#define EXMC_SDSTAT_REIF_Msk              (0x1UL)                   /*!< REIF (Bitfield-Mask: 0x01) */
/* ========================================================  SDRSCTL  ======================================================== */
#define EXMC_SDRSCTL_SDSC_Pos             (4UL)                     /*!< SDSC (Bit 4) */
#define EXMC_SDRSCTL_SDSC_Msk             (0xf0UL)                  /*!< SDSC (Bitfield-Mask: 0x0f) */
#define EXMC_SDRSCTL_SSCR_Pos             (1UL)                     /*!< SSCR (Bit 1) */
#define EXMC_SDRSCTL_SSCR_Msk             (0x2UL)                   /*!< SSCR (Bitfield-Mask: 0x01) */
#define EXMC_SDRSCTL_RSEN_Pos             (0UL)                     /*!< RSEN (Bit 0) */
#define EXMC_SDRSCTL_RSEN_Msk             (0x1UL)                   /*!< RSEN (Bitfield-Mask: 0x01) */
/* =========================================================  SINIT  ========================================================= */
#define EXMC_SINIT_POL_Pos                (31UL)                    /*!< POL (Bit 31) */
#define EXMC_SINIT_POL_Msk                (0x80000000UL)            /*!< POL (Bitfield-Mask: 0x01) */
#define EXMC_SINIT_IDL_Pos                (29UL)                    /*!< IDL (Bit 29) */
#define EXMC_SINIT_IDL_Msk                (0x60000000UL)            /*!< IDL (Bitfield-Mask: 0x03) */
#define EXMC_SINIT_ADRBIT_Pos             (24UL)                    /*!< ADRBIT (Bit 24) */
#define EXMC_SINIT_ADRBIT_Msk             (0x1f000000UL)            /*!< ADRBIT (Bitfield-Mask: 0x1f) */
#define EXMC_SINIT_CMDBIT_Pos             (16UL)                    /*!< CMDBIT (Bit 16) */
#define EXMC_SINIT_CMDBIT_Msk             (0x30000UL)               /*!< CMDBIT (Bitfield-Mask: 0x03) */
/* =========================================================  SRCMD  ========================================================= */
#define EXMC_SRCMD_RDID_Pos               (31UL)                    /*!< RDID (Bit 31) */
#define EXMC_SRCMD_RDID_Msk               (0x80000000UL)            /*!< RDID (Bitfield-Mask: 0x01) */
#define EXMC_SRCMD_RMODE_Pos              (20UL)                    /*!< RMODE (Bit 20) */
#define EXMC_SRCMD_RMODE_Msk              (0x300000UL)              /*!< RMODE (Bitfield-Mask: 0x03) */
#define EXMC_SRCMD_RWAITCYCLE_Pos         (16UL)                    /*!< RWAITCYCLE (Bit 16) */
#define EXMC_SRCMD_RWAITCYCLE_Msk         (0xf0000UL)               /*!< RWAITCYCLE (Bitfield-Mask: 0x0f) */
#define EXMC_SRCMD_RCMD_Pos               (0UL)                     /*!< RCMD (Bit 0) */
#define EXMC_SRCMD_RCMD_Msk               (0xffffUL)                /*!< RCMD (Bitfield-Mask: 0xffff) */
/* =========================================================  SWCMD  ========================================================= */
#define EXMC_SWCMD_SC_Pos                 (31UL)                    /*!< SC (Bit 31) */
#define EXMC_SWCMD_SC_Msk                 (0x80000000UL)            /*!< SC (Bitfield-Mask: 0x01) */
#define EXMC_SWCMD_WMODE_Pos              (20UL)                    /*!< WMODE (Bit 20) */
#define EXMC_SWCMD_WMODE_Msk              (0x300000UL)              /*!< WMODE (Bitfield-Mask: 0x03) */
#define EXMC_SWCMD_WWAITCYCLE_Pos         (16UL)                    /*!< WWAITCYCLE (Bit 16) */
#define EXMC_SWCMD_WWAITCYCLE_Msk         (0xf0000UL)               /*!< WWAITCYCLE (Bitfield-Mask: 0x0f) */
#define EXMC_SWCMD_WCMD_Pos               (0UL)                     /*!< WCMD (Bit 0) */
#define EXMC_SWCMD_WCMD_Msk               (0x7fffUL)                /*!< WCMD (Bitfield-Mask: 0x7fff) */
/* =========================================================  SIDL  ========================================================== */
#define EXMC_SIDL_SIDL_Pos                (0UL)                     /*!< SIDL (Bit 0) */
#define EXMC_SIDL_SIDL_Msk                (0xffffffffUL)            /*!< SIDL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  SIDH  ========================================================== */
#define EXMC_SIDH_SIDH_Pos                (0UL)                     /*!< SIDH (Bit 0) */
#define EXMC_SIDH_SIDH_Msk                (0xffffffffUL)            /*!< SIDH (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  INTEN  ========================================================= */
#define EXTI_INTEN_INTEN0_Pos             (0UL)                     /*!< INTEN0 (Bit 0) */
#define EXTI_INTEN_INTEN0_Msk             (0x1UL)                   /*!< INTEN0 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN1_Pos             (1UL)                     /*!< INTEN1 (Bit 1) */
#define EXTI_INTEN_INTEN1_Msk             (0x2UL)                   /*!< INTEN1 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN2_Pos             (2UL)                     /*!< INTEN2 (Bit 2) */
#define EXTI_INTEN_INTEN2_Msk             (0x4UL)                   /*!< INTEN2 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN3_Pos             (3UL)                     /*!< INTEN3 (Bit 3) */
#define EXTI_INTEN_INTEN3_Msk             (0x8UL)                   /*!< INTEN3 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN4_Pos             (4UL)                     /*!< INTEN4 (Bit 4) */
#define EXTI_INTEN_INTEN4_Msk             (0x10UL)                  /*!< INTEN4 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN5_Pos             (5UL)                     /*!< INTEN5 (Bit 5) */
#define EXTI_INTEN_INTEN5_Msk             (0x20UL)                  /*!< INTEN5 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN6_Pos             (6UL)                     /*!< INTEN6 (Bit 6) */
#define EXTI_INTEN_INTEN6_Msk             (0x40UL)                  /*!< INTEN6 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN7_Pos             (7UL)                     /*!< INTEN7 (Bit 7) */
#define EXTI_INTEN_INTEN7_Msk             (0x80UL)                  /*!< INTEN7 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN8_Pos             (8UL)                     /*!< INTEN8 (Bit 8) */
#define EXTI_INTEN_INTEN8_Msk             (0x100UL)                 /*!< INTEN8 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN9_Pos             (9UL)                     /*!< INTEN9 (Bit 9) */
#define EXTI_INTEN_INTEN9_Msk             (0x200UL)                 /*!< INTEN9 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN10_Pos            (10UL)                    /*!< INTEN10 (Bit 10) */
#define EXTI_INTEN_INTEN10_Msk            (0x400UL)                 /*!< INTEN10 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN11_Pos            (11UL)                    /*!< INTEN11 (Bit 11) */
#define EXTI_INTEN_INTEN11_Msk            (0x800UL)                 /*!< INTEN11 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN12_Pos            (12UL)                    /*!< INTEN12 (Bit 12) */
#define EXTI_INTEN_INTEN12_Msk            (0x1000UL)                /*!< INTEN12 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN13_Pos            (13UL)                    /*!< INTEN13 (Bit 13) */
#define EXTI_INTEN_INTEN13_Msk            (0x2000UL)                /*!< INTEN13 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN14_Pos            (14UL)                    /*!< INTEN14 (Bit 14) */
#define EXTI_INTEN_INTEN14_Msk            (0x4000UL)                /*!< INTEN14 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN15_Pos            (15UL)                    /*!< INTEN15 (Bit 15) */
#define EXTI_INTEN_INTEN15_Msk            (0x8000UL)                /*!< INTEN15 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN16_Pos            (16UL)                    /*!< INTEN16 (Bit 16) */
#define EXTI_INTEN_INTEN16_Msk            (0x10000UL)               /*!< INTEN16 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN17_Pos            (17UL)                    /*!< INTEN17 (Bit 17) */
#define EXTI_INTEN_INTEN17_Msk            (0x20000UL)               /*!< INTEN17 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN18_Pos            (18UL)                    /*!< INTEN18 (Bit 18) */
#define EXTI_INTEN_INTEN18_Msk            (0x40000UL)               /*!< INTEN18 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN19_Pos            (19UL)                    /*!< INTEN19 (Bit 19) */
#define EXTI_INTEN_INTEN19_Msk            (0x80000UL)               /*!< INTEN19 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN20_Pos            (20UL)                    /*!< INTEN20 (Bit 20) */
#define EXTI_INTEN_INTEN20_Msk            (0x100000UL)              /*!< INTEN20 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN21_Pos            (21UL)                    /*!< INTEN21 (Bit 21) */
#define EXTI_INTEN_INTEN21_Msk            (0x200000UL)              /*!< INTEN21 (Bitfield-Mask: 0x01) */
#define EXTI_INTEN_INTEN22_Pos            (22UL)                    /*!< INTEN22 (Bit 22) */
#define EXTI_INTEN_INTEN22_Msk            (0x400000UL)              /*!< INTEN22 (Bitfield-Mask: 0x01) */
/* =========================================================  EVEN  ========================================================== */
#define EXTI_EVEN_EVEN0_Pos               (0UL)                     /*!< EVEN0 (Bit 0) */
#define EXTI_EVEN_EVEN0_Msk               (0x1UL)                   /*!< EVEN0 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN1_Pos               (1UL)                     /*!< EVEN1 (Bit 1) */
#define EXTI_EVEN_EVEN1_Msk               (0x2UL)                   /*!< EVEN1 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN2_Pos               (2UL)                     /*!< EVEN2 (Bit 2) */
#define EXTI_EVEN_EVEN2_Msk               (0x4UL)                   /*!< EVEN2 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN3_Pos               (3UL)                     /*!< EVEN3 (Bit 3) */
#define EXTI_EVEN_EVEN3_Msk               (0x8UL)                   /*!< EVEN3 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN4_Pos               (4UL)                     /*!< EVEN4 (Bit 4) */
#define EXTI_EVEN_EVEN4_Msk               (0x10UL)                  /*!< EVEN4 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN5_Pos               (5UL)                     /*!< EVEN5 (Bit 5) */
#define EXTI_EVEN_EVEN5_Msk               (0x20UL)                  /*!< EVEN5 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN6_Pos               (6UL)                     /*!< EVEN6 (Bit 6) */
#define EXTI_EVEN_EVEN6_Msk               (0x40UL)                  /*!< EVEN6 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN7_Pos               (7UL)                     /*!< EVEN7 (Bit 7) */
#define EXTI_EVEN_EVEN7_Msk               (0x80UL)                  /*!< EVEN7 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN8_Pos               (8UL)                     /*!< EVEN8 (Bit 8) */
#define EXTI_EVEN_EVEN8_Msk               (0x100UL)                 /*!< EVEN8 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN9_Pos               (9UL)                     /*!< EVEN9 (Bit 9) */
#define EXTI_EVEN_EVEN9_Msk               (0x200UL)                 /*!< EVEN9 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN10_Pos              (10UL)                    /*!< EVEN10 (Bit 10) */
#define EXTI_EVEN_EVEN10_Msk              (0x400UL)                 /*!< EVEN10 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN11_Pos              (11UL)                    /*!< EVEN11 (Bit 11) */
#define EXTI_EVEN_EVEN11_Msk              (0x800UL)                 /*!< EVEN11 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN12_Pos              (12UL)                    /*!< EVEN12 (Bit 12) */
#define EXTI_EVEN_EVEN12_Msk              (0x1000UL)                /*!< EVEN12 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN13_Pos              (13UL)                    /*!< EVEN13 (Bit 13) */
#define EXTI_EVEN_EVEN13_Msk              (0x2000UL)                /*!< EVEN13 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN14_Pos              (14UL)                    /*!< EVEN14 (Bit 14) */
#define EXTI_EVEN_EVEN14_Msk              (0x4000UL)                /*!< EVEN14 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN15_Pos              (15UL)                    /*!< EVEN15 (Bit 15) */
#define EXTI_EVEN_EVEN15_Msk              (0x8000UL)                /*!< EVEN15 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN16_Pos              (16UL)                    /*!< EVEN16 (Bit 16) */
#define EXTI_EVEN_EVEN16_Msk              (0x10000UL)               /*!< EVEN16 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN17_Pos              (17UL)                    /*!< EVEN17 (Bit 17) */
#define EXTI_EVEN_EVEN17_Msk              (0x20000UL)               /*!< EVEN17 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN18_Pos              (18UL)                    /*!< EVEN18 (Bit 18) */
#define EXTI_EVEN_EVEN18_Msk              (0x40000UL)               /*!< EVEN18 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN19_Pos              (19UL)                    /*!< EVEN19 (Bit 19) */
#define EXTI_EVEN_EVEN19_Msk              (0x80000UL)               /*!< EVEN19 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN20_Pos              (20UL)                    /*!< EVEN20 (Bit 20) */
#define EXTI_EVEN_EVEN20_Msk              (0x100000UL)              /*!< EVEN20 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN21_Pos              (21UL)                    /*!< EVEN21 (Bit 21) */
#define EXTI_EVEN_EVEN21_Msk              (0x200000UL)              /*!< EVEN21 (Bitfield-Mask: 0x01) */
#define EXTI_EVEN_EVEN22_Pos              (22UL)                    /*!< EVEN22 (Bit 22) */
#define EXTI_EVEN_EVEN22_Msk              (0x400000UL)              /*!< EVEN22 (Bitfield-Mask: 0x01) */
/* =========================================================  RTEN  ========================================================== */
#define EXTI_RTEN_RTEN0_Pos               (0UL)                     /*!< RTEN0 (Bit 0) */
#define EXTI_RTEN_RTEN0_Msk               (0x1UL)                   /*!< RTEN0 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN1_Pos               (1UL)                     /*!< RTEN1 (Bit 1) */
#define EXTI_RTEN_RTEN1_Msk               (0x2UL)                   /*!< RTEN1 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN2_Pos               (2UL)                     /*!< RTEN2 (Bit 2) */
#define EXTI_RTEN_RTEN2_Msk               (0x4UL)                   /*!< RTEN2 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN3_Pos               (3UL)                     /*!< RTEN3 (Bit 3) */
#define EXTI_RTEN_RTEN3_Msk               (0x8UL)                   /*!< RTEN3 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN4_Pos               (4UL)                     /*!< RTEN4 (Bit 4) */
#define EXTI_RTEN_RTEN4_Msk               (0x10UL)                  /*!< RTEN4 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN5_Pos               (5UL)                     /*!< RTEN5 (Bit 5) */
#define EXTI_RTEN_RTEN5_Msk               (0x20UL)                  /*!< RTEN5 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN6_Pos               (6UL)                     /*!< RTEN6 (Bit 6) */
#define EXTI_RTEN_RTEN6_Msk               (0x40UL)                  /*!< RTEN6 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN7_Pos               (7UL)                     /*!< RTEN7 (Bit 7) */
#define EXTI_RTEN_RTEN7_Msk               (0x80UL)                  /*!< RTEN7 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN8_Pos               (8UL)                     /*!< RTEN8 (Bit 8) */
#define EXTI_RTEN_RTEN8_Msk               (0x100UL)                 /*!< RTEN8 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN9_Pos               (9UL)                     /*!< RTEN9 (Bit 9) */
#define EXTI_RTEN_RTEN9_Msk               (0x200UL)                 /*!< RTEN9 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN10_Pos              (10UL)                    /*!< RTEN10 (Bit 10) */
#define EXTI_RTEN_RTEN10_Msk              (0x400UL)                 /*!< RTEN10 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN11_Pos              (11UL)                    /*!< RTEN11 (Bit 11) */
#define EXTI_RTEN_RTEN11_Msk              (0x800UL)                 /*!< RTEN11 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN12_Pos              (12UL)                    /*!< RTEN12 (Bit 12) */
#define EXTI_RTEN_RTEN12_Msk              (0x1000UL)                /*!< RTEN12 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN13_Pos              (13UL)                    /*!< RTEN13 (Bit 13) */
#define EXTI_RTEN_RTEN13_Msk              (0x2000UL)                /*!< RTEN13 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN14_Pos              (14UL)                    /*!< RTEN14 (Bit 14) */
#define EXTI_RTEN_RTEN14_Msk              (0x4000UL)                /*!< RTEN14 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN15_Pos              (15UL)                    /*!< RTEN15 (Bit 15) */
#define EXTI_RTEN_RTEN15_Msk              (0x8000UL)                /*!< RTEN15 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN16_Pos              (16UL)                    /*!< RTEN16 (Bit 16) */
#define EXTI_RTEN_RTEN16_Msk              (0x10000UL)               /*!< RTEN16 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN17_Pos              (17UL)                    /*!< RTEN17 (Bit 17) */
#define EXTI_RTEN_RTEN17_Msk              (0x20000UL)               /*!< RTEN17 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN18_Pos              (18UL)                    /*!< RTEN18 (Bit 18) */
#define EXTI_RTEN_RTEN18_Msk              (0x40000UL)               /*!< RTEN18 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN19_Pos              (19UL)                    /*!< RTEN19 (Bit 19) */
#define EXTI_RTEN_RTEN19_Msk              (0x80000UL)               /*!< RTEN19 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN20_Pos              (20UL)                    /*!< RTEN20 (Bit 20) */
#define EXTI_RTEN_RTEN20_Msk              (0x100000UL)              /*!< RTEN20 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN21_Pos              (21UL)                    /*!< RTEN21 (Bit 21) */
#define EXTI_RTEN_RTEN21_Msk              (0x200000UL)              /*!< RTEN21 (Bitfield-Mask: 0x01) */
#define EXTI_RTEN_RTEN22_Pos              (22UL)                    /*!< RTEN22 (Bit 22) */
#define EXTI_RTEN_RTEN22_Msk              (0x400000UL)              /*!< RTEN22 (Bitfield-Mask: 0x01) */
/* =========================================================  FTEN  ========================================================== */
#define EXTI_FTEN_FTEN0_Pos               (0UL)                     /*!< FTEN0 (Bit 0) */
#define EXTI_FTEN_FTEN0_Msk               (0x1UL)                   /*!< FTEN0 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN1_Pos               (1UL)                     /*!< FTEN1 (Bit 1) */
#define EXTI_FTEN_FTEN1_Msk               (0x2UL)                   /*!< FTEN1 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN2_Pos               (2UL)                     /*!< FTEN2 (Bit 2) */
#define EXTI_FTEN_FTEN2_Msk               (0x4UL)                   /*!< FTEN2 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN3_Pos               (3UL)                     /*!< FTEN3 (Bit 3) */
#define EXTI_FTEN_FTEN3_Msk               (0x8UL)                   /*!< FTEN3 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN4_Pos               (4UL)                     /*!< FTEN4 (Bit 4) */
#define EXTI_FTEN_FTEN4_Msk               (0x10UL)                  /*!< FTEN4 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN5_Pos               (5UL)                     /*!< FTEN5 (Bit 5) */
#define EXTI_FTEN_FTEN5_Msk               (0x20UL)                  /*!< FTEN5 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN6_Pos               (6UL)                     /*!< FTEN6 (Bit 6) */
#define EXTI_FTEN_FTEN6_Msk               (0x40UL)                  /*!< FTEN6 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN7_Pos               (7UL)                     /*!< FTEN7 (Bit 7) */
#define EXTI_FTEN_FTEN7_Msk               (0x80UL)                  /*!< FTEN7 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN8_Pos               (8UL)                     /*!< FTEN8 (Bit 8) */
#define EXTI_FTEN_FTEN8_Msk               (0x100UL)                 /*!< FTEN8 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN9_Pos               (9UL)                     /*!< FTEN9 (Bit 9) */
#define EXTI_FTEN_FTEN9_Msk               (0x200UL)                 /*!< FTEN9 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN10_Pos              (10UL)                    /*!< FTEN10 (Bit 10) */
#define EXTI_FTEN_FTEN10_Msk              (0x400UL)                 /*!< FTEN10 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN11_Pos              (11UL)                    /*!< FTEN11 (Bit 11) */
#define EXTI_FTEN_FTEN11_Msk              (0x800UL)                 /*!< FTEN11 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN12_Pos              (12UL)                    /*!< FTEN12 (Bit 12) */
#define EXTI_FTEN_FTEN12_Msk              (0x1000UL)                /*!< FTEN12 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN13_Pos              (13UL)                    /*!< FTEN13 (Bit 13) */
#define EXTI_FTEN_FTEN13_Msk              (0x2000UL)                /*!< FTEN13 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN14_Pos              (14UL)                    /*!< FTEN14 (Bit 14) */
#define EXTI_FTEN_FTEN14_Msk              (0x4000UL)                /*!< FTEN14 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN15_Pos              (15UL)                    /*!< FTEN15 (Bit 15) */
#define EXTI_FTEN_FTEN15_Msk              (0x8000UL)                /*!< FTEN15 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN16_Pos              (16UL)                    /*!< FTEN16 (Bit 16) */
#define EXTI_FTEN_FTEN16_Msk              (0x10000UL)               /*!< FTEN16 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN17_Pos              (17UL)                    /*!< FTEN17 (Bit 17) */
#define EXTI_FTEN_FTEN17_Msk              (0x20000UL)               /*!< FTEN17 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN18_Pos              (18UL)                    /*!< FTEN18 (Bit 18) */
#define EXTI_FTEN_FTEN18_Msk              (0x40000UL)               /*!< FTEN18 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN19_Pos              (19UL)                    /*!< FTEN19 (Bit 19) */
#define EXTI_FTEN_FTEN19_Msk              (0x80000UL)               /*!< FTEN19 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN20_Pos              (20UL)                    /*!< FTEN20 (Bit 20) */
#define EXTI_FTEN_FTEN20_Msk              (0x100000UL)              /*!< FTEN20 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN21_Pos              (21UL)                    /*!< FTEN21 (Bit 21) */
#define EXTI_FTEN_FTEN21_Msk              (0x200000UL)              /*!< FTEN21 (Bitfield-Mask: 0x01) */
#define EXTI_FTEN_FTEN22_Pos              (22UL)                    /*!< FTEN22 (Bit 22) */
#define EXTI_FTEN_FTEN22_Msk              (0x400000UL)              /*!< FTEN22 (Bitfield-Mask: 0x01) */
/* =========================================================  SWIEV  ========================================================= */
#define EXTI_SWIEV_SWIEV0_Pos             (0UL)                     /*!< SWIEV0 (Bit 0) */
#define EXTI_SWIEV_SWIEV0_Msk             (0x1UL)                   /*!< SWIEV0 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV1_Pos             (1UL)                     /*!< SWIEV1 (Bit 1) */
#define EXTI_SWIEV_SWIEV1_Msk             (0x2UL)                   /*!< SWIEV1 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV2_Pos             (2UL)                     /*!< SWIEV2 (Bit 2) */
#define EXTI_SWIEV_SWIEV2_Msk             (0x4UL)                   /*!< SWIEV2 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV3_Pos             (3UL)                     /*!< SWIEV3 (Bit 3) */
#define EXTI_SWIEV_SWIEV3_Msk             (0x8UL)                   /*!< SWIEV3 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV4_Pos             (4UL)                     /*!< SWIEV4 (Bit 4) */
#define EXTI_SWIEV_SWIEV4_Msk             (0x10UL)                  /*!< SWIEV4 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV5_Pos             (5UL)                     /*!< SWIEV5 (Bit 5) */
#define EXTI_SWIEV_SWIEV5_Msk             (0x20UL)                  /*!< SWIEV5 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV6_Pos             (6UL)                     /*!< SWIEV6 (Bit 6) */
#define EXTI_SWIEV_SWIEV6_Msk             (0x40UL)                  /*!< SWIEV6 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV7_Pos             (7UL)                     /*!< SWIEV7 (Bit 7) */
#define EXTI_SWIEV_SWIEV7_Msk             (0x80UL)                  /*!< SWIEV7 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV8_Pos             (8UL)                     /*!< SWIEV8 (Bit 8) */
#define EXTI_SWIEV_SWIEV8_Msk             (0x100UL)                 /*!< SWIEV8 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV9_Pos             (9UL)                     /*!< SWIEV9 (Bit 9) */
#define EXTI_SWIEV_SWIEV9_Msk             (0x200UL)                 /*!< SWIEV9 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV10_Pos            (10UL)                    /*!< SWIEV10 (Bit 10) */
#define EXTI_SWIEV_SWIEV10_Msk            (0x400UL)                 /*!< SWIEV10 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV11_Pos            (11UL)                    /*!< SWIEV11 (Bit 11) */
#define EXTI_SWIEV_SWIEV11_Msk            (0x800UL)                 /*!< SWIEV11 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV12_Pos            (12UL)                    /*!< SWIEV12 (Bit 12) */
#define EXTI_SWIEV_SWIEV12_Msk            (0x1000UL)                /*!< SWIEV12 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV13_Pos            (13UL)                    /*!< SWIEV13 (Bit 13) */
#define EXTI_SWIEV_SWIEV13_Msk            (0x2000UL)                /*!< SWIEV13 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV14_Pos            (14UL)                    /*!< SWIEV14 (Bit 14) */
#define EXTI_SWIEV_SWIEV14_Msk            (0x4000UL)                /*!< SWIEV14 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV15_Pos            (15UL)                    /*!< SWIEV15 (Bit 15) */
#define EXTI_SWIEV_SWIEV15_Msk            (0x8000UL)                /*!< SWIEV15 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV16_Pos            (16UL)                    /*!< SWIEV16 (Bit 16) */
#define EXTI_SWIEV_SWIEV16_Msk            (0x10000UL)               /*!< SWIEV16 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV17_Pos            (17UL)                    /*!< SWIEV17 (Bit 17) */
#define EXTI_SWIEV_SWIEV17_Msk            (0x20000UL)               /*!< SWIEV17 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV18_Pos            (18UL)                    /*!< SWIEV18 (Bit 18) */
#define EXTI_SWIEV_SWIEV18_Msk            (0x40000UL)               /*!< SWIEV18 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV19_Pos            (19UL)                    /*!< SWIEV19 (Bit 19) */
#define EXTI_SWIEV_SWIEV19_Msk            (0x80000UL)               /*!< SWIEV19 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV20_Pos            (20UL)                    /*!< SWIEV20 (Bit 20) */
#define EXTI_SWIEV_SWIEV20_Msk            (0x100000UL)              /*!< SWIEV20 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV21_Pos            (21UL)                    /*!< SWIEV21 (Bit 21) */
#define EXTI_SWIEV_SWIEV21_Msk            (0x200000UL)              /*!< SWIEV21 (Bitfield-Mask: 0x01) */
#define EXTI_SWIEV_SWIEV22_Pos            (22UL)                    /*!< SWIEV22 (Bit 22) */
#define EXTI_SWIEV_SWIEV22_Msk            (0x400000UL)              /*!< SWIEV22 (Bitfield-Mask: 0x01) */
/* ==========================================================  PD  =========================================================== */
#define EXTI_PD_PD0_Pos                   (0UL)                     /*!< PD0 (Bit 0) */
#define EXTI_PD_PD0_Msk                   (0x1UL)                   /*!< PD0 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD1_Pos                   (1UL)                     /*!< PD1 (Bit 1) */
#define EXTI_PD_PD1_Msk                   (0x2UL)                   /*!< PD1 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD2_Pos                   (2UL)                     /*!< PD2 (Bit 2) */
#define EXTI_PD_PD2_Msk                   (0x4UL)                   /*!< PD2 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD3_Pos                   (3UL)                     /*!< PD3 (Bit 3) */
#define EXTI_PD_PD3_Msk                   (0x8UL)                   /*!< PD3 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD4_Pos                   (4UL)                     /*!< PD4 (Bit 4) */
#define EXTI_PD_PD4_Msk                   (0x10UL)                  /*!< PD4 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD5_Pos                   (5UL)                     /*!< PD5 (Bit 5) */
#define EXTI_PD_PD5_Msk                   (0x20UL)                  /*!< PD5 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD6_Pos                   (6UL)                     /*!< PD6 (Bit 6) */
#define EXTI_PD_PD6_Msk                   (0x40UL)                  /*!< PD6 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD7_Pos                   (7UL)                     /*!< PD7 (Bit 7) */
#define EXTI_PD_PD7_Msk                   (0x80UL)                  /*!< PD7 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD8_Pos                   (8UL)                     /*!< PD8 (Bit 8) */
#define EXTI_PD_PD8_Msk                   (0x100UL)                 /*!< PD8 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD9_Pos                   (9UL)                     /*!< PD9 (Bit 9) */
#define EXTI_PD_PD9_Msk                   (0x200UL)                 /*!< PD9 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD10_Pos                  (10UL)                    /*!< PD10 (Bit 10) */
#define EXTI_PD_PD10_Msk                  (0x400UL)                 /*!< PD10 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD11_Pos                  (11UL)                    /*!< PD11 (Bit 11) */
#define EXTI_PD_PD11_Msk                  (0x800UL)                 /*!< PD11 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD12_Pos                  (12UL)                    /*!< PD12 (Bit 12) */
#define EXTI_PD_PD12_Msk                  (0x1000UL)                /*!< PD12 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD13_Pos                  (13UL)                    /*!< PD13 (Bit 13) */
#define EXTI_PD_PD13_Msk                  (0x2000UL)                /*!< PD13 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD14_Pos                  (14UL)                    /*!< PD14 (Bit 14) */
#define EXTI_PD_PD14_Msk                  (0x4000UL)                /*!< PD14 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD15_Pos                  (15UL)                    /*!< PD15 (Bit 15) */
#define EXTI_PD_PD15_Msk                  (0x8000UL)                /*!< PD15 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD16_Pos                  (16UL)                    /*!< PD16 (Bit 16) */
#define EXTI_PD_PD16_Msk                  (0x10000UL)               /*!< PD16 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD17_Pos                  (17UL)                    /*!< PD17 (Bit 17) */
#define EXTI_PD_PD17_Msk                  (0x20000UL)               /*!< PD17 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD18_Pos                  (18UL)                    /*!< PD18 (Bit 18) */
#define EXTI_PD_PD18_Msk                  (0x40000UL)               /*!< PD18 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD19_Pos                  (19UL)                    /*!< PD19 (Bit 19) */
#define EXTI_PD_PD19_Msk                  (0x80000UL)               /*!< PD19 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD20_Pos                  (20UL)                    /*!< PD20 (Bit 20) */
#define EXTI_PD_PD20_Msk                  (0x100000UL)              /*!< PD20 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD21_Pos                  (21UL)                    /*!< PD21 (Bit 21) */
#define EXTI_PD_PD21_Msk                  (0x200000UL)              /*!< PD21 (Bitfield-Mask: 0x01) */
#define EXTI_PD_PD22_Pos                  (22UL)                    /*!< PD22 (Bit 22) */
#define EXTI_PD_PD22_Msk                  (0x400000UL)              /*!< PD22 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  WS  =========================================================== */
#define FMC_WS_WSCNT_Pos                  (0UL)                     /*!< WSCNT (Bit 0) */
#define FMC_WS_WSCNT_Msk                  (0xfUL)                   /*!< WSCNT (Bitfield-Mask: 0x0f) */
/* ==========================================================  KEY  ========================================================== */
#define FMC_KEY_KEY_Pos                   (0UL)                     /*!< KEY (Bit 0) */
#define FMC_KEY_KEY_Msk                   (0xffffffffUL)            /*!< KEY (Bitfield-Mask: 0xffffffff) */
/* =========================================================  OBKEY  ========================================================= */
#define FMC_OBKEY_OBKEY_Pos               (0UL)                     /*!< OBKEY (Bit 0) */
#define FMC_OBKEY_OBKEY_Msk               (0xffffffffUL)            /*!< OBKEY (Bitfield-Mask: 0xffffffff) */
/* =========================================================  STAT  ========================================================== */
#define FMC_STAT_END_Pos                  (0UL)                     /*!< END (Bit 0) */
#define FMC_STAT_END_Msk                  (0x1UL)                   /*!< END (Bitfield-Mask: 0x01) */
#define FMC_STAT_OPERR_Pos                (1UL)                     /*!< OPERR (Bit 1) */
#define FMC_STAT_OPERR_Msk                (0x2UL)                   /*!< OPERR (Bitfield-Mask: 0x01) */
#define FMC_STAT_WPERR_Pos                (4UL)                     /*!< WPERR (Bit 4) */
#define FMC_STAT_WPERR_Msk                (0x10UL)                  /*!< WPERR (Bitfield-Mask: 0x01) */
#define FMC_STAT_PGMERR_Pos               (6UL)                     /*!< PGMERR (Bit 6) */
#define FMC_STAT_PGMERR_Msk               (0x40UL)                  /*!< PGMERR (Bitfield-Mask: 0x01) */
#define FMC_STAT_PGSERR_Pos               (7UL)                     /*!< PGSERR (Bit 7) */
#define FMC_STAT_PGSERR_Msk               (0x80UL)                  /*!< PGSERR (Bitfield-Mask: 0x01) */
#define FMC_STAT_RDDERR_Pos               (8UL)                     /*!< RDDERR (Bit 8) */
#define FMC_STAT_RDDERR_Msk               (0x100UL)                 /*!< RDDERR (Bitfield-Mask: 0x01) */
#define FMC_STAT_BUSY_Pos                 (16UL)                    /*!< BUSY (Bit 16) */
#define FMC_STAT_BUSY_Msk                 (0x10000UL)               /*!< BUSY (Bitfield-Mask: 0x01) */
/* ==========================================================  CTL  ========================================================== */
#define FMC_CTL_LK_Pos                    (31UL)                    /*!< LK (Bit 31) */
#define FMC_CTL_LK_Msk                    (0x80000000UL)            /*!< LK (Bitfield-Mask: 0x01) */
#define FMC_CTL_ERRIE_Pos                 (25UL)                    /*!< ERRIE (Bit 25) */
#define FMC_CTL_ERRIE_Msk                 (0x2000000UL)             /*!< ERRIE (Bitfield-Mask: 0x01) */
#define FMC_CTL_ENDIE_Pos                 (24UL)                    /*!< ENDIE (Bit 24) */
#define FMC_CTL_ENDIE_Msk                 (0x1000000UL)             /*!< ENDIE (Bitfield-Mask: 0x01) */
#define FMC_CTL_START_Pos                 (16UL)                    /*!< START (Bit 16) */
#define FMC_CTL_START_Msk                 (0x10000UL)               /*!< START (Bitfield-Mask: 0x01) */
#define FMC_CTL_MER1_Pos                  (15UL)                    /*!< MER1 (Bit 15) */
#define FMC_CTL_MER1_Msk                  (0x8000UL)                /*!< MER1 (Bitfield-Mask: 0x01) */
#define FMC_CTL_PSZ_Pos                   (8UL)                     /*!< PSZ (Bit 8) */
#define FMC_CTL_PSZ_Msk                   (0x300UL)                 /*!< PSZ (Bitfield-Mask: 0x03) */
#define FMC_CTL_SN_Pos                    (3UL)                     /*!< SN (Bit 3) */
#define FMC_CTL_SN_Msk                    (0xf8UL)                  /*!< SN (Bitfield-Mask: 0x1f) */
#define FMC_CTL_MER0_Pos                  (2UL)                     /*!< MER0 (Bit 2) */
#define FMC_CTL_MER0_Msk                  (0x4UL)                   /*!< MER0 (Bitfield-Mask: 0x01) */
#define FMC_CTL_SER_Pos                   (1UL)                     /*!< SER (Bit 1) */
#define FMC_CTL_SER_Msk                   (0x2UL)                   /*!< SER (Bitfield-Mask: 0x01) */
#define FMC_CTL_PG_Pos                    (0UL)                     /*!< PG (Bit 0) */
#define FMC_CTL_PG_Msk                    (0x1UL)                   /*!< PG (Bitfield-Mask: 0x01) */
/* ========================================================  OBCTL0  ========================================================= */
#define FMC_OBCTL0_OB_LK_Pos              (0UL)                     /*!< OB_LK (Bit 0) */
#define FMC_OBCTL0_OB_LK_Msk              (0x1UL)                   /*!< OB_LK (Bitfield-Mask: 0x01) */
#define FMC_OBCTL0_OB_START_Pos           (1UL)                     /*!< OB_START (Bit 1) */
#define FMC_OBCTL0_OB_START_Msk           (0x2UL)                   /*!< OB_START (Bitfield-Mask: 0x01) */
#define FMC_OBCTL0_BOR_TH_Pos             (2UL)                     /*!< BOR_TH (Bit 2) */
#define FMC_OBCTL0_BOR_TH_Msk             (0xcUL)                   /*!< BOR_TH (Bitfield-Mask: 0x03) */
#define FMC_OBCTL0_BB_Pos                 (4UL)                     /*!< BB (Bit 4) */
#define FMC_OBCTL0_BB_Msk                 (0x10UL)                  /*!< BB (Bitfield-Mask: 0x01) */
#define FMC_OBCTL0_nWDG_HW_Pos            (5UL)                     /*!< nWDG_HW (Bit 5) */
#define FMC_OBCTL0_nWDG_HW_Msk            (0x20UL)                  /*!< nWDG_HW (Bitfield-Mask: 0x01) */
#define FMC_OBCTL0_nRST_DPSLP_Pos         (6UL)                     /*!< nRST_DPSLP (Bit 6) */
#define FMC_OBCTL0_nRST_DPSLP_Msk         (0x40UL)                  /*!< nRST_DPSLP (Bitfield-Mask: 0x01) */
#define FMC_OBCTL0_nRST_STDBY_Pos         (7UL)                     /*!< nRST_STDBY (Bit 7) */
#define FMC_OBCTL0_nRST_STDBY_Msk         (0x80UL)                  /*!< nRST_STDBY (Bitfield-Mask: 0x01) */
#define FMC_OBCTL0_SPC_Pos                (8UL)                     /*!< SPC (Bit 8) */
#define FMC_OBCTL0_SPC_Msk                (0xff00UL)                /*!< SPC (Bitfield-Mask: 0xff) */
#define FMC_OBCTL0_WP0_Pos                (16UL)                    /*!< WP0 (Bit 16) */
#define FMC_OBCTL0_WP0_Msk                (0xfff0000UL)             /*!< WP0 (Bitfield-Mask: 0xfff) */
#define FMC_OBCTL0_DBS_Pos                (30UL)                    /*!< DBS (Bit 30) */
#define FMC_OBCTL0_DBS_Msk                (0x40000000UL)            /*!< DBS (Bitfield-Mask: 0x01) */
#define FMC_OBCTL0_DRP_Pos                (31UL)                    /*!< DRP (Bit 31) */
#define FMC_OBCTL0_DRP_Msk                (0x80000000UL)            /*!< DRP (Bitfield-Mask: 0x01) */
/* ========================================================  OBCTL1  ========================================================= */
#define FMC_OBCTL1_WP1_Pos                (16UL)                    /*!< WP1 (Bit 16) */
#define FMC_OBCTL1_WP1_Msk                (0xfff0000UL)             /*!< WP1 (Bitfield-Mask: 0xfff) */
/* =========================================================  WSEN  ========================================================== */
#define FMC_WSEN_WSEN_Pos                 (0UL)                     /*!< WSEN (Bit 0) */
#define FMC_WSEN_WSEN_Msk                 (0x1UL)                   /*!< WSEN (Bitfield-Mask: 0x01) */
/* ==========================================================  PID  ========================================================== */
#define FMC_PID_PID_Pos                   (0UL)                     /*!< PID (Bit 0) */
#define FMC_PID_PID_Msk                   (0xffffffffUL)            /*!< PID (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                           FWDGT                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define FWDGT_CTL_CMD_Pos                 (0UL)                     /*!< CMD (Bit 0) */
#define FWDGT_CTL_CMD_Msk                 (0xffffUL)                /*!< CMD (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define FWDGT_PSC_PSC_Pos                 (0UL)                     /*!< PSC (Bit 0) */
#define FWDGT_PSC_PSC_Msk                 (0x7UL)                   /*!< PSC (Bitfield-Mask: 0x07) */
/* ==========================================================  RLD  ========================================================== */
#define FWDGT_RLD_RLD_Pos                 (0UL)                     /*!< RLD (Bit 0) */
#define FWDGT_RLD_RLD_Msk                 (0xfffUL)                 /*!< RLD (Bitfield-Mask: 0xfff) */
/* =========================================================  STAT  ========================================================== */
#define FWDGT_STAT_PUD_Pos                (0UL)                     /*!< PUD (Bit 0) */
#define FWDGT_STAT_PUD_Msk                (0x1UL)                   /*!< PUD (Bitfield-Mask: 0x01) */
#define FWDGT_STAT_RUD_Pos                (1UL)                     /*!< RUD (Bit 1) */
#define FWDGT_STAT_RUD_Msk                (0x2UL)                   /*!< RUD (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           GPIOA                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define GPIOA_CTL_CTL15_Pos               (30UL)                    /*!< CTL15 (Bit 30) */
#define GPIOA_CTL_CTL15_Msk               (0xc0000000UL)            /*!< CTL15 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL14_Pos               (28UL)                    /*!< CTL14 (Bit 28) */
#define GPIOA_CTL_CTL14_Msk               (0x30000000UL)            /*!< CTL14 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL13_Pos               (26UL)                    /*!< CTL13 (Bit 26) */
#define GPIOA_CTL_CTL13_Msk               (0xc000000UL)             /*!< CTL13 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL12_Pos               (24UL)                    /*!< CTL12 (Bit 24) */
#define GPIOA_CTL_CTL12_Msk               (0x3000000UL)             /*!< CTL12 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL11_Pos               (22UL)                    /*!< CTL11 (Bit 22) */
#define GPIOA_CTL_CTL11_Msk               (0xc00000UL)              /*!< CTL11 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL10_Pos               (20UL)                    /*!< CTL10 (Bit 20) */
#define GPIOA_CTL_CTL10_Msk               (0x300000UL)              /*!< CTL10 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL9_Pos                (18UL)                    /*!< CTL9 (Bit 18) */
#define GPIOA_CTL_CTL9_Msk                (0xc0000UL)               /*!< CTL9 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL8_Pos                (16UL)                    /*!< CTL8 (Bit 16) */
#define GPIOA_CTL_CTL8_Msk                (0x30000UL)               /*!< CTL8 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL7_Pos                (14UL)                    /*!< CTL7 (Bit 14) */
#define GPIOA_CTL_CTL7_Msk                (0xc000UL)                /*!< CTL7 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL6_Pos                (12UL)                    /*!< CTL6 (Bit 12) */
#define GPIOA_CTL_CTL6_Msk                (0x3000UL)                /*!< CTL6 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL5_Pos                (10UL)                    /*!< CTL5 (Bit 10) */
#define GPIOA_CTL_CTL5_Msk                (0xc00UL)                 /*!< CTL5 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL4_Pos                (8UL)                     /*!< CTL4 (Bit 8) */
#define GPIOA_CTL_CTL4_Msk                (0x300UL)                 /*!< CTL4 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL3_Pos                (6UL)                     /*!< CTL3 (Bit 6) */
#define GPIOA_CTL_CTL3_Msk                (0xc0UL)                  /*!< CTL3 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL2_Pos                (4UL)                     /*!< CTL2 (Bit 4) */
#define GPIOA_CTL_CTL2_Msk                (0x30UL)                  /*!< CTL2 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL1_Pos                (2UL)                     /*!< CTL1 (Bit 2) */
#define GPIOA_CTL_CTL1_Msk                (0xcUL)                   /*!< CTL1 (Bitfield-Mask: 0x03) */
#define GPIOA_CTL_CTL0_Pos                (0UL)                     /*!< CTL0 (Bit 0) */
#define GPIOA_CTL_CTL0_Msk                (0x3UL)                   /*!< CTL0 (Bitfield-Mask: 0x03) */
/* =========================================================  OMODE  ========================================================= */
#define GPIOA_OMODE_OM15_Pos              (15UL)                    /*!< OM15 (Bit 15) */
#define GPIOA_OMODE_OM15_Msk              (0x8000UL)                /*!< OM15 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM14_Pos              (14UL)                    /*!< OM14 (Bit 14) */
#define GPIOA_OMODE_OM14_Msk              (0x4000UL)                /*!< OM14 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM13_Pos              (13UL)                    /*!< OM13 (Bit 13) */
#define GPIOA_OMODE_OM13_Msk              (0x2000UL)                /*!< OM13 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM12_Pos              (12UL)                    /*!< OM12 (Bit 12) */
#define GPIOA_OMODE_OM12_Msk              (0x1000UL)                /*!< OM12 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM11_Pos              (11UL)                    /*!< OM11 (Bit 11) */
#define GPIOA_OMODE_OM11_Msk              (0x800UL)                 /*!< OM11 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM10_Pos              (10UL)                    /*!< OM10 (Bit 10) */
#define GPIOA_OMODE_OM10_Msk              (0x400UL)                 /*!< OM10 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM9_Pos               (9UL)                     /*!< OM9 (Bit 9) */
#define GPIOA_OMODE_OM9_Msk               (0x200UL)                 /*!< OM9 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM8_Pos               (8UL)                     /*!< OM8 (Bit 8) */
#define GPIOA_OMODE_OM8_Msk               (0x100UL)                 /*!< OM8 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM7_Pos               (7UL)                     /*!< OM7 (Bit 7) */
#define GPIOA_OMODE_OM7_Msk               (0x80UL)                  /*!< OM7 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM6_Pos               (6UL)                     /*!< OM6 (Bit 6) */
#define GPIOA_OMODE_OM6_Msk               (0x40UL)                  /*!< OM6 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM5_Pos               (5UL)                     /*!< OM5 (Bit 5) */
#define GPIOA_OMODE_OM5_Msk               (0x20UL)                  /*!< OM5 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM4_Pos               (4UL)                     /*!< OM4 (Bit 4) */
#define GPIOA_OMODE_OM4_Msk               (0x10UL)                  /*!< OM4 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM3_Pos               (3UL)                     /*!< OM3 (Bit 3) */
#define GPIOA_OMODE_OM3_Msk               (0x8UL)                   /*!< OM3 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM2_Pos               (2UL)                     /*!< OM2 (Bit 2) */
#define GPIOA_OMODE_OM2_Msk               (0x4UL)                   /*!< OM2 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM1_Pos               (1UL)                     /*!< OM1 (Bit 1) */
#define GPIOA_OMODE_OM1_Msk               (0x2UL)                   /*!< OM1 (Bitfield-Mask: 0x01) */
#define GPIOA_OMODE_OM0_Pos               (0UL)                     /*!< OM0 (Bit 0) */
#define GPIOA_OMODE_OM0_Msk               (0x1UL)                   /*!< OM0 (Bitfield-Mask: 0x01) */
/* =========================================================  OSPD  ========================================================== */
#define GPIOA_OSPD_OSPD15_Pos             (30UL)                    /*!< OSPD15 (Bit 30) */
#define GPIOA_OSPD_OSPD15_Msk             (0xc0000000UL)            /*!< OSPD15 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD14_Pos             (28UL)                    /*!< OSPD14 (Bit 28) */
#define GPIOA_OSPD_OSPD14_Msk             (0x30000000UL)            /*!< OSPD14 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD13_Pos             (26UL)                    /*!< OSPD13 (Bit 26) */
#define GPIOA_OSPD_OSPD13_Msk             (0xc000000UL)             /*!< OSPD13 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD12_Pos             (24UL)                    /*!< OSPD12 (Bit 24) */
#define GPIOA_OSPD_OSPD12_Msk             (0x3000000UL)             /*!< OSPD12 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD11_Pos             (22UL)                    /*!< OSPD11 (Bit 22) */
#define GPIOA_OSPD_OSPD11_Msk             (0xc00000UL)              /*!< OSPD11 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD10_Pos             (20UL)                    /*!< OSPD10 (Bit 20) */
#define GPIOA_OSPD_OSPD10_Msk             (0x300000UL)              /*!< OSPD10 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD9_Pos              (18UL)                    /*!< OSPD9 (Bit 18) */
#define GPIOA_OSPD_OSPD9_Msk              (0xc0000UL)               /*!< OSPD9 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD8_Pos              (16UL)                    /*!< OSPD8 (Bit 16) */
#define GPIOA_OSPD_OSPD8_Msk              (0x30000UL)               /*!< OSPD8 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD7_Pos              (14UL)                    /*!< OSPD7 (Bit 14) */
#define GPIOA_OSPD_OSPD7_Msk              (0xc000UL)                /*!< OSPD7 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD6_Pos              (12UL)                    /*!< OSPD6 (Bit 12) */
#define GPIOA_OSPD_OSPD6_Msk              (0x3000UL)                /*!< OSPD6 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD5_Pos              (10UL)                    /*!< OSPD5 (Bit 10) */
#define GPIOA_OSPD_OSPD5_Msk              (0xc00UL)                 /*!< OSPD5 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD4_Pos              (8UL)                     /*!< OSPD4 (Bit 8) */
#define GPIOA_OSPD_OSPD4_Msk              (0x300UL)                 /*!< OSPD4 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD3_Pos              (6UL)                     /*!< OSPD3 (Bit 6) */
#define GPIOA_OSPD_OSPD3_Msk              (0xc0UL)                  /*!< OSPD3 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD2_Pos              (4UL)                     /*!< OSPD2 (Bit 4) */
#define GPIOA_OSPD_OSPD2_Msk              (0x30UL)                  /*!< OSPD2 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD1_Pos              (2UL)                     /*!< OSPD1 (Bit 2) */
#define GPIOA_OSPD_OSPD1_Msk              (0xcUL)                   /*!< OSPD1 (Bitfield-Mask: 0x03) */
#define GPIOA_OSPD_OSPD0_Pos              (0UL)                     /*!< OSPD0 (Bit 0) */
#define GPIOA_OSPD_OSPD0_Msk              (0x3UL)                   /*!< OSPD0 (Bitfield-Mask: 0x03) */
/* ==========================================================  PUD  ========================================================== */
#define GPIOA_PUD_PUD15_Pos               (30UL)                    /*!< PUD15 (Bit 30) */
#define GPIOA_PUD_PUD15_Msk               (0xc0000000UL)            /*!< PUD15 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD14_Pos               (28UL)                    /*!< PUD14 (Bit 28) */
#define GPIOA_PUD_PUD14_Msk               (0x30000000UL)            /*!< PUD14 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD13_Pos               (26UL)                    /*!< PUD13 (Bit 26) */
#define GPIOA_PUD_PUD13_Msk               (0xc000000UL)             /*!< PUD13 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD12_Pos               (24UL)                    /*!< PUD12 (Bit 24) */
#define GPIOA_PUD_PUD12_Msk               (0x3000000UL)             /*!< PUD12 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD11_Pos               (22UL)                    /*!< PUD11 (Bit 22) */
#define GPIOA_PUD_PUD11_Msk               (0xc00000UL)              /*!< PUD11 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD10_Pos               (20UL)                    /*!< PUD10 (Bit 20) */
#define GPIOA_PUD_PUD10_Msk               (0x300000UL)              /*!< PUD10 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD9_Pos                (18UL)                    /*!< PUD9 (Bit 18) */
#define GPIOA_PUD_PUD9_Msk                (0xc0000UL)               /*!< PUD9 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD8_Pos                (16UL)                    /*!< PUD8 (Bit 16) */
#define GPIOA_PUD_PUD8_Msk                (0x30000UL)               /*!< PUD8 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD7_Pos                (14UL)                    /*!< PUD7 (Bit 14) */
#define GPIOA_PUD_PUD7_Msk                (0xc000UL)                /*!< PUD7 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD6_Pos                (12UL)                    /*!< PUD6 (Bit 12) */
#define GPIOA_PUD_PUD6_Msk                (0x3000UL)                /*!< PUD6 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD5_Pos                (10UL)                    /*!< PUD5 (Bit 10) */
#define GPIOA_PUD_PUD5_Msk                (0xc00UL)                 /*!< PUD5 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD4_Pos                (8UL)                     /*!< PUD4 (Bit 8) */
#define GPIOA_PUD_PUD4_Msk                (0x300UL)                 /*!< PUD4 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD3_Pos                (6UL)                     /*!< PUD3 (Bit 6) */
#define GPIOA_PUD_PUD3_Msk                (0xc0UL)                  /*!< PUD3 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD2_Pos                (4UL)                     /*!< PUD2 (Bit 4) */
#define GPIOA_PUD_PUD2_Msk                (0x30UL)                  /*!< PUD2 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD1_Pos                (2UL)                     /*!< PUD1 (Bit 2) */
#define GPIOA_PUD_PUD1_Msk                (0xcUL)                   /*!< PUD1 (Bitfield-Mask: 0x03) */
#define GPIOA_PUD_PUD0_Pos                (0UL)                     /*!< PUD0 (Bit 0) */
#define GPIOA_PUD_PUD0_Msk                (0x3UL)                   /*!< PUD0 (Bitfield-Mask: 0x03) */
/* =========================================================  ISTAT  ========================================================= */
#define GPIOA_ISTAT_ISTAT15_Pos           (15UL)                    /*!< ISTAT15 (Bit 15) */
#define GPIOA_ISTAT_ISTAT15_Msk           (0x8000UL)                /*!< ISTAT15 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT14_Pos           (14UL)                    /*!< ISTAT14 (Bit 14) */
#define GPIOA_ISTAT_ISTAT14_Msk           (0x4000UL)                /*!< ISTAT14 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT13_Pos           (13UL)                    /*!< ISTAT13 (Bit 13) */
#define GPIOA_ISTAT_ISTAT13_Msk           (0x2000UL)                /*!< ISTAT13 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT12_Pos           (12UL)                    /*!< ISTAT12 (Bit 12) */
#define GPIOA_ISTAT_ISTAT12_Msk           (0x1000UL)                /*!< ISTAT12 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT11_Pos           (11UL)                    /*!< ISTAT11 (Bit 11) */
#define GPIOA_ISTAT_ISTAT11_Msk           (0x800UL)                 /*!< ISTAT11 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT10_Pos           (10UL)                    /*!< ISTAT10 (Bit 10) */
#define GPIOA_ISTAT_ISTAT10_Msk           (0x400UL)                 /*!< ISTAT10 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT9_Pos            (9UL)                     /*!< ISTAT9 (Bit 9) */
#define GPIOA_ISTAT_ISTAT9_Msk            (0x200UL)                 /*!< ISTAT9 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT8_Pos            (8UL)                     /*!< ISTAT8 (Bit 8) */
#define GPIOA_ISTAT_ISTAT8_Msk            (0x100UL)                 /*!< ISTAT8 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT7_Pos            (7UL)                     /*!< ISTAT7 (Bit 7) */
#define GPIOA_ISTAT_ISTAT7_Msk            (0x80UL)                  /*!< ISTAT7 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT6_Pos            (6UL)                     /*!< ISTAT6 (Bit 6) */
#define GPIOA_ISTAT_ISTAT6_Msk            (0x40UL)                  /*!< ISTAT6 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT5_Pos            (5UL)                     /*!< ISTAT5 (Bit 5) */
#define GPIOA_ISTAT_ISTAT5_Msk            (0x20UL)                  /*!< ISTAT5 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT4_Pos            (4UL)                     /*!< ISTAT4 (Bit 4) */
#define GPIOA_ISTAT_ISTAT4_Msk            (0x10UL)                  /*!< ISTAT4 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT3_Pos            (3UL)                     /*!< ISTAT3 (Bit 3) */
#define GPIOA_ISTAT_ISTAT3_Msk            (0x8UL)                   /*!< ISTAT3 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT2_Pos            (2UL)                     /*!< ISTAT2 (Bit 2) */
#define GPIOA_ISTAT_ISTAT2_Msk            (0x4UL)                   /*!< ISTAT2 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT1_Pos            (1UL)                     /*!< ISTAT1 (Bit 1) */
#define GPIOA_ISTAT_ISTAT1_Msk            (0x2UL)                   /*!< ISTAT1 (Bitfield-Mask: 0x01) */
#define GPIOA_ISTAT_ISTAT0_Pos            (0UL)                     /*!< ISTAT0 (Bit 0) */
#define GPIOA_ISTAT_ISTAT0_Msk            (0x1UL)                   /*!< ISTAT0 (Bitfield-Mask: 0x01) */
/* =========================================================  OCTL  ========================================================== */
#define GPIOA_OCTL_OCTL15_Pos             (15UL)                    /*!< OCTL15 (Bit 15) */
#define GPIOA_OCTL_OCTL15_Msk             (0x8000UL)                /*!< OCTL15 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL14_Pos             (14UL)                    /*!< OCTL14 (Bit 14) */
#define GPIOA_OCTL_OCTL14_Msk             (0x4000UL)                /*!< OCTL14 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL13_Pos             (13UL)                    /*!< OCTL13 (Bit 13) */
#define GPIOA_OCTL_OCTL13_Msk             (0x2000UL)                /*!< OCTL13 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL12_Pos             (12UL)                    /*!< OCTL12 (Bit 12) */
#define GPIOA_OCTL_OCTL12_Msk             (0x1000UL)                /*!< OCTL12 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL11_Pos             (11UL)                    /*!< OCTL11 (Bit 11) */
#define GPIOA_OCTL_OCTL11_Msk             (0x800UL)                 /*!< OCTL11 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL10_Pos             (10UL)                    /*!< OCTL10 (Bit 10) */
#define GPIOA_OCTL_OCTL10_Msk             (0x400UL)                 /*!< OCTL10 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL9_Pos              (9UL)                     /*!< OCTL9 (Bit 9) */
#define GPIOA_OCTL_OCTL9_Msk              (0x200UL)                 /*!< OCTL9 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL8_Pos              (8UL)                     /*!< OCTL8 (Bit 8) */
#define GPIOA_OCTL_OCTL8_Msk              (0x100UL)                 /*!< OCTL8 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL7_Pos              (7UL)                     /*!< OCTL7 (Bit 7) */
#define GPIOA_OCTL_OCTL7_Msk              (0x80UL)                  /*!< OCTL7 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL6_Pos              (6UL)                     /*!< OCTL6 (Bit 6) */
#define GPIOA_OCTL_OCTL6_Msk              (0x40UL)                  /*!< OCTL6 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL5_Pos              (5UL)                     /*!< OCTL5 (Bit 5) */
#define GPIOA_OCTL_OCTL5_Msk              (0x20UL)                  /*!< OCTL5 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL4_Pos              (4UL)                     /*!< OCTL4 (Bit 4) */
#define GPIOA_OCTL_OCTL4_Msk              (0x10UL)                  /*!< OCTL4 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL3_Pos              (3UL)                     /*!< OCTL3 (Bit 3) */
#define GPIOA_OCTL_OCTL3_Msk              (0x8UL)                   /*!< OCTL3 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL2_Pos              (2UL)                     /*!< OCTL2 (Bit 2) */
#define GPIOA_OCTL_OCTL2_Msk              (0x4UL)                   /*!< OCTL2 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL1_Pos              (1UL)                     /*!< OCTL1 (Bit 1) */
#define GPIOA_OCTL_OCTL1_Msk              (0x2UL)                   /*!< OCTL1 (Bitfield-Mask: 0x01) */
#define GPIOA_OCTL_OCTL0_Pos              (0UL)                     /*!< OCTL0 (Bit 0) */
#define GPIOA_OCTL_OCTL0_Msk              (0x1UL)                   /*!< OCTL0 (Bitfield-Mask: 0x01) */
/* ==========================================================  BOP  ========================================================== */
#define GPIOA_BOP_CR15_Pos                (31UL)                    /*!< CR15 (Bit 31) */
#define GPIOA_BOP_CR15_Msk                (0x80000000UL)            /*!< CR15 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR14_Pos                (30UL)                    /*!< CR14 (Bit 30) */
#define GPIOA_BOP_CR14_Msk                (0x40000000UL)            /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR13_Pos                (29UL)                    /*!< CR13 (Bit 29) */
#define GPIOA_BOP_CR13_Msk                (0x20000000UL)            /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR12_Pos                (28UL)                    /*!< CR12 (Bit 28) */
#define GPIOA_BOP_CR12_Msk                (0x10000000UL)            /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR11_Pos                (27UL)                    /*!< CR11 (Bit 27) */
#define GPIOA_BOP_CR11_Msk                (0x8000000UL)             /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR10_Pos                (26UL)                    /*!< CR10 (Bit 26) */
#define GPIOA_BOP_CR10_Msk                (0x4000000UL)             /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR9_Pos                 (25UL)                    /*!< CR9 (Bit 25) */
#define GPIOA_BOP_CR9_Msk                 (0x2000000UL)             /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR8_Pos                 (24UL)                    /*!< CR8 (Bit 24) */
#define GPIOA_BOP_CR8_Msk                 (0x1000000UL)             /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR7_Pos                 (23UL)                    /*!< CR7 (Bit 23) */
#define GPIOA_BOP_CR7_Msk                 (0x800000UL)              /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR6_Pos                 (22UL)                    /*!< CR6 (Bit 22) */
#define GPIOA_BOP_CR6_Msk                 (0x400000UL)              /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR5_Pos                 (21UL)                    /*!< CR5 (Bit 21) */
#define GPIOA_BOP_CR5_Msk                 (0x200000UL)              /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR4_Pos                 (20UL)                    /*!< CR4 (Bit 20) */
#define GPIOA_BOP_CR4_Msk                 (0x100000UL)              /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR3_Pos                 (19UL)                    /*!< CR3 (Bit 19) */
#define GPIOA_BOP_CR3_Msk                 (0x80000UL)               /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR2_Pos                 (18UL)                    /*!< CR2 (Bit 18) */
#define GPIOA_BOP_CR2_Msk                 (0x40000UL)               /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR1_Pos                 (17UL)                    /*!< CR1 (Bit 17) */
#define GPIOA_BOP_CR1_Msk                 (0x20000UL)               /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_CR0_Pos                 (16UL)                    /*!< CR0 (Bit 16) */
#define GPIOA_BOP_CR0_Msk                 (0x10000UL)               /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP15_Pos               (15UL)                    /*!< BOP15 (Bit 15) */
#define GPIOA_BOP_BOP15_Msk               (0x8000UL)                /*!< BOP15 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP14_Pos               (14UL)                    /*!< BOP14 (Bit 14) */
#define GPIOA_BOP_BOP14_Msk               (0x4000UL)                /*!< BOP14 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP13_Pos               (13UL)                    /*!< BOP13 (Bit 13) */
#define GPIOA_BOP_BOP13_Msk               (0x2000UL)                /*!< BOP13 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP12_Pos               (12UL)                    /*!< BOP12 (Bit 12) */
#define GPIOA_BOP_BOP12_Msk               (0x1000UL)                /*!< BOP12 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP11_Pos               (11UL)                    /*!< BOP11 (Bit 11) */
#define GPIOA_BOP_BOP11_Msk               (0x800UL)                 /*!< BOP11 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP10_Pos               (10UL)                    /*!< BOP10 (Bit 10) */
#define GPIOA_BOP_BOP10_Msk               (0x400UL)                 /*!< BOP10 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP9_Pos                (9UL)                     /*!< BOP9 (Bit 9) */
#define GPIOA_BOP_BOP9_Msk                (0x200UL)                 /*!< BOP9 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP8_Pos                (8UL)                     /*!< BOP8 (Bit 8) */
#define GPIOA_BOP_BOP8_Msk                (0x100UL)                 /*!< BOP8 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP7_Pos                (7UL)                     /*!< BOP7 (Bit 7) */
#define GPIOA_BOP_BOP7_Msk                (0x80UL)                  /*!< BOP7 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP6_Pos                (6UL)                     /*!< BOP6 (Bit 6) */
#define GPIOA_BOP_BOP6_Msk                (0x40UL)                  /*!< BOP6 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP5_Pos                (5UL)                     /*!< BOP5 (Bit 5) */
#define GPIOA_BOP_BOP5_Msk                (0x20UL)                  /*!< BOP5 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP4_Pos                (4UL)                     /*!< BOP4 (Bit 4) */
#define GPIOA_BOP_BOP4_Msk                (0x10UL)                  /*!< BOP4 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP3_Pos                (3UL)                     /*!< BOP3 (Bit 3) */
#define GPIOA_BOP_BOP3_Msk                (0x8UL)                   /*!< BOP3 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP2_Pos                (2UL)                     /*!< BOP2 (Bit 2) */
#define GPIOA_BOP_BOP2_Msk                (0x4UL)                   /*!< BOP2 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP1_Pos                (1UL)                     /*!< BOP1 (Bit 1) */
#define GPIOA_BOP_BOP1_Msk                (0x2UL)                   /*!< BOP1 (Bitfield-Mask: 0x01) */
#define GPIOA_BOP_BOP0_Pos                (0UL)                     /*!< BOP0 (Bit 0) */
#define GPIOA_BOP_BOP0_Msk                (0x1UL)                   /*!< BOP0 (Bitfield-Mask: 0x01) */
/* =========================================================  LOCK  ========================================================== */
#define GPIOA_LOCK_LKK_Pos                (16UL)                    /*!< LKK (Bit 16) */
#define GPIOA_LOCK_LKK_Msk                (0x10000UL)               /*!< LKK (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK15_Pos               (15UL)                    /*!< LK15 (Bit 15) */
#define GPIOA_LOCK_LK15_Msk               (0x8000UL)                /*!< LK15 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK14_Pos               (14UL)                    /*!< LK14 (Bit 14) */
#define GPIOA_LOCK_LK14_Msk               (0x4000UL)                /*!< LK14 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK13_Pos               (13UL)                    /*!< LK13 (Bit 13) */
#define GPIOA_LOCK_LK13_Msk               (0x2000UL)                /*!< LK13 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK12_Pos               (12UL)                    /*!< LK12 (Bit 12) */
#define GPIOA_LOCK_LK12_Msk               (0x1000UL)                /*!< LK12 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK11_Pos               (11UL)                    /*!< LK11 (Bit 11) */
#define GPIOA_LOCK_LK11_Msk               (0x800UL)                 /*!< LK11 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK10_Pos               (10UL)                    /*!< LK10 (Bit 10) */
#define GPIOA_LOCK_LK10_Msk               (0x400UL)                 /*!< LK10 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK9_Pos                (9UL)                     /*!< LK9 (Bit 9) */
#define GPIOA_LOCK_LK9_Msk                (0x200UL)                 /*!< LK9 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK8_Pos                (8UL)                     /*!< LK8 (Bit 8) */
#define GPIOA_LOCK_LK8_Msk                (0x100UL)                 /*!< LK8 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK7_Pos                (7UL)                     /*!< LK7 (Bit 7) */
#define GPIOA_LOCK_LK7_Msk                (0x80UL)                  /*!< LK7 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK6_Pos                (6UL)                     /*!< LK6 (Bit 6) */
#define GPIOA_LOCK_LK6_Msk                (0x40UL)                  /*!< LK6 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK5_Pos                (5UL)                     /*!< LK5 (Bit 5) */
#define GPIOA_LOCK_LK5_Msk                (0x20UL)                  /*!< LK5 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK4_Pos                (4UL)                     /*!< LK4 (Bit 4) */
#define GPIOA_LOCK_LK4_Msk                (0x10UL)                  /*!< LK4 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK3_Pos                (3UL)                     /*!< LK3 (Bit 3) */
#define GPIOA_LOCK_LK3_Msk                (0x8UL)                   /*!< LK3 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK2_Pos                (2UL)                     /*!< LK2 (Bit 2) */
#define GPIOA_LOCK_LK2_Msk                (0x4UL)                   /*!< LK2 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK1_Pos                (1UL)                     /*!< LK1 (Bit 1) */
#define GPIOA_LOCK_LK1_Msk                (0x2UL)                   /*!< LK1 (Bitfield-Mask: 0x01) */
#define GPIOA_LOCK_LK0_Pos                (0UL)                     /*!< LK0 (Bit 0) */
#define GPIOA_LOCK_LK0_Msk                (0x1UL)                   /*!< LK0 (Bitfield-Mask: 0x01) */
/* ========================================================  AFSEL0  ========================================================= */
#define GPIOA_AFSEL0_SEL7_Pos             (28UL)                    /*!< SEL7 (Bit 28) */
#define GPIOA_AFSEL0_SEL7_Msk             (0xf0000000UL)            /*!< SEL7 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL0_SEL6_Pos             (24UL)                    /*!< SEL6 (Bit 24) */
#define GPIOA_AFSEL0_SEL6_Msk             (0xf000000UL)             /*!< SEL6 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL0_SEL5_Pos             (20UL)                    /*!< SEL5 (Bit 20) */
#define GPIOA_AFSEL0_SEL5_Msk             (0xf00000UL)              /*!< SEL5 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL0_SEL4_Pos             (16UL)                    /*!< SEL4 (Bit 16) */
#define GPIOA_AFSEL0_SEL4_Msk             (0xf0000UL)               /*!< SEL4 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL0_SEL3_Pos             (12UL)                    /*!< SEL3 (Bit 12) */
#define GPIOA_AFSEL0_SEL3_Msk             (0xf000UL)                /*!< SEL3 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL0_SEL2_Pos             (8UL)                     /*!< SEL2 (Bit 8) */
#define GPIOA_AFSEL0_SEL2_Msk             (0xf00UL)                 /*!< SEL2 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL0_SEL1_Pos             (4UL)                     /*!< SEL1 (Bit 4) */
#define GPIOA_AFSEL0_SEL1_Msk             (0xf0UL)                  /*!< SEL1 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL0_SEL0_Pos             (0UL)                     /*!< SEL0 (Bit 0) */
#define GPIOA_AFSEL0_SEL0_Msk             (0xfUL)                   /*!< SEL0 (Bitfield-Mask: 0x0f) */
/* ========================================================  AFSEL1  ========================================================= */
#define GPIOA_AFSEL1_SEL15_Pos            (28UL)                    /*!< SEL15 (Bit 28) */
#define GPIOA_AFSEL1_SEL15_Msk            (0xf0000000UL)            /*!< SEL15 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL1_SEL14_Pos            (24UL)                    /*!< SEL14 (Bit 24) */
#define GPIOA_AFSEL1_SEL14_Msk            (0xf000000UL)             /*!< SEL14 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL1_SEL13_Pos            (20UL)                    /*!< SEL13 (Bit 20) */
#define GPIOA_AFSEL1_SEL13_Msk            (0xf00000UL)              /*!< SEL13 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL1_SEL12_Pos            (16UL)                    /*!< SEL12 (Bit 16) */
#define GPIOA_AFSEL1_SEL12_Msk            (0xf0000UL)               /*!< SEL12 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL1_SEL11_Pos            (12UL)                    /*!< SEL11 (Bit 12) */
#define GPIOA_AFSEL1_SEL11_Msk            (0xf000UL)                /*!< SEL11 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL1_SEL10_Pos            (8UL)                     /*!< SEL10 (Bit 8) */
#define GPIOA_AFSEL1_SEL10_Msk            (0xf00UL)                 /*!< SEL10 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL1_SEL9_Pos             (4UL)                     /*!< SEL9 (Bit 4) */
#define GPIOA_AFSEL1_SEL9_Msk             (0xf0UL)                  /*!< SEL9 (Bitfield-Mask: 0x0f) */
#define GPIOA_AFSEL1_SEL8_Pos             (0UL)                     /*!< SEL8 (Bit 0) */
#define GPIOA_AFSEL1_SEL8_Msk             (0xfUL)                   /*!< SEL8 (Bitfield-Mask: 0x0f) */
/* ==========================================================  BC  =========================================================== */
#define GPIOA_BC_CR0_Pos                  (0UL)                     /*!< CR0 (Bit 0) */
#define GPIOA_BC_CR0_Msk                  (0x1UL)                   /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR1_Pos                  (1UL)                     /*!< CR1 (Bit 1) */
#define GPIOA_BC_CR1_Msk                  (0x2UL)                   /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR2_Pos                  (2UL)                     /*!< CR2 (Bit 2) */
#define GPIOA_BC_CR2_Msk                  (0x4UL)                   /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR3_Pos                  (3UL)                     /*!< CR3 (Bit 3) */
#define GPIOA_BC_CR3_Msk                  (0x8UL)                   /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR4_Pos                  (4UL)                     /*!< CR4 (Bit 4) */
#define GPIOA_BC_CR4_Msk                  (0x10UL)                  /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR5_Pos                  (5UL)                     /*!< CR5 (Bit 5) */
#define GPIOA_BC_CR5_Msk                  (0x20UL)                  /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR6_Pos                  (6UL)                     /*!< CR6 (Bit 6) */
#define GPIOA_BC_CR6_Msk                  (0x40UL)                  /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR7_Pos                  (7UL)                     /*!< CR7 (Bit 7) */
#define GPIOA_BC_CR7_Msk                  (0x80UL)                  /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR8_Pos                  (8UL)                     /*!< CR8 (Bit 8) */
#define GPIOA_BC_CR8_Msk                  (0x100UL)                 /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR9_Pos                  (9UL)                     /*!< CR9 (Bit 9) */
#define GPIOA_BC_CR9_Msk                  (0x200UL)                 /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR10_Pos                 (10UL)                    /*!< CR10 (Bit 10) */
#define GPIOA_BC_CR10_Msk                 (0x400UL)                 /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR11_Pos                 (11UL)                    /*!< CR11 (Bit 11) */
#define GPIOA_BC_CR11_Msk                 (0x800UL)                 /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR12_Pos                 (12UL)                    /*!< CR12 (Bit 12) */
#define GPIOA_BC_CR12_Msk                 (0x1000UL)                /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR13_Pos                 (13UL)                    /*!< CR13 (Bit 13) */
#define GPIOA_BC_CR13_Msk                 (0x2000UL)                /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR14_Pos                 (14UL)                    /*!< CR14 (Bit 14) */
#define GPIOA_BC_CR14_Msk                 (0x4000UL)                /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOA_BC_CR15_Pos                 (15UL)                    /*!< CR15 (Bit 15) */
#define GPIOA_BC_CR15_Msk                 (0x8000UL)                /*!< CR15 (Bitfield-Mask: 0x01) */
/* ==========================================================  TG  =========================================================== */
#define GPIOA_TG_TG0_Pos                  (0UL)                     /*!< TG0 (Bit 0) */
#define GPIOA_TG_TG0_Msk                  (0x1UL)                   /*!< TG0 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG1_Pos                  (1UL)                     /*!< TG1 (Bit 1) */
#define GPIOA_TG_TG1_Msk                  (0x2UL)                   /*!< TG1 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG2_Pos                  (2UL)                     /*!< TG2 (Bit 2) */
#define GPIOA_TG_TG2_Msk                  (0x4UL)                   /*!< TG2 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG3_Pos                  (3UL)                     /*!< TG3 (Bit 3) */
#define GPIOA_TG_TG3_Msk                  (0x8UL)                   /*!< TG3 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG4_Pos                  (4UL)                     /*!< TG4 (Bit 4) */
#define GPIOA_TG_TG4_Msk                  (0x10UL)                  /*!< TG4 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG5_Pos                  (5UL)                     /*!< TG5 (Bit 5) */
#define GPIOA_TG_TG5_Msk                  (0x20UL)                  /*!< TG5 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG6_Pos                  (6UL)                     /*!< TG6 (Bit 6) */
#define GPIOA_TG_TG6_Msk                  (0x40UL)                  /*!< TG6 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG7_Pos                  (7UL)                     /*!< TG7 (Bit 7) */
#define GPIOA_TG_TG7_Msk                  (0x80UL)                  /*!< TG7 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG8_Pos                  (8UL)                     /*!< TG8 (Bit 8) */
#define GPIOA_TG_TG8_Msk                  (0x100UL)                 /*!< TG8 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG9_Pos                  (9UL)                     /*!< TG9 (Bit 9) */
#define GPIOA_TG_TG9_Msk                  (0x200UL)                 /*!< TG9 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG10_Pos                 (10UL)                    /*!< TG10 (Bit 10) */
#define GPIOA_TG_TG10_Msk                 (0x400UL)                 /*!< TG10 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG11_Pos                 (11UL)                    /*!< TG11 (Bit 11) */
#define GPIOA_TG_TG11_Msk                 (0x800UL)                 /*!< TG11 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG12_Pos                 (12UL)                    /*!< TG12 (Bit 12) */
#define GPIOA_TG_TG12_Msk                 (0x1000UL)                /*!< TG12 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG13_Pos                 (13UL)                    /*!< TG13 (Bit 13) */
#define GPIOA_TG_TG13_Msk                 (0x2000UL)                /*!< TG13 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG14_Pos                 (14UL)                    /*!< TG14 (Bit 14) */
#define GPIOA_TG_TG14_Msk                 (0x4000UL)                /*!< TG14 (Bitfield-Mask: 0x01) */
#define GPIOA_TG_TG15_Pos                 (15UL)                    /*!< TG15 (Bit 15) */
#define GPIOA_TG_TG15_Msk                 (0x8000UL)                /*!< TG15 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           GPIOB                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define GPIOB_CTL_CTL15_Pos               (30UL)                    /*!< CTL15 (Bit 30) */
#define GPIOB_CTL_CTL15_Msk               (0xc0000000UL)            /*!< CTL15 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL14_Pos               (28UL)                    /*!< CTL14 (Bit 28) */
#define GPIOB_CTL_CTL14_Msk               (0x30000000UL)            /*!< CTL14 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL13_Pos               (26UL)                    /*!< CTL13 (Bit 26) */
#define GPIOB_CTL_CTL13_Msk               (0xc000000UL)             /*!< CTL13 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL12_Pos               (24UL)                    /*!< CTL12 (Bit 24) */
#define GPIOB_CTL_CTL12_Msk               (0x3000000UL)             /*!< CTL12 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL11_Pos               (22UL)                    /*!< CTL11 (Bit 22) */
#define GPIOB_CTL_CTL11_Msk               (0xc00000UL)              /*!< CTL11 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL10_Pos               (20UL)                    /*!< CTL10 (Bit 20) */
#define GPIOB_CTL_CTL10_Msk               (0x300000UL)              /*!< CTL10 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL9_Pos                (18UL)                    /*!< CTL9 (Bit 18) */
#define GPIOB_CTL_CTL9_Msk                (0xc0000UL)               /*!< CTL9 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL8_Pos                (16UL)                    /*!< CTL8 (Bit 16) */
#define GPIOB_CTL_CTL8_Msk                (0x30000UL)               /*!< CTL8 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL7_Pos                (14UL)                    /*!< CTL7 (Bit 14) */
#define GPIOB_CTL_CTL7_Msk                (0xc000UL)                /*!< CTL7 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL6_Pos                (12UL)                    /*!< CTL6 (Bit 12) */
#define GPIOB_CTL_CTL6_Msk                (0x3000UL)                /*!< CTL6 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL5_Pos                (10UL)                    /*!< CTL5 (Bit 10) */
#define GPIOB_CTL_CTL5_Msk                (0xc00UL)                 /*!< CTL5 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL4_Pos                (8UL)                     /*!< CTL4 (Bit 8) */
#define GPIOB_CTL_CTL4_Msk                (0x300UL)                 /*!< CTL4 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL3_Pos                (6UL)                     /*!< CTL3 (Bit 6) */
#define GPIOB_CTL_CTL3_Msk                (0xc0UL)                  /*!< CTL3 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL2_Pos                (4UL)                     /*!< CTL2 (Bit 4) */
#define GPIOB_CTL_CTL2_Msk                (0x30UL)                  /*!< CTL2 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL1_Pos                (2UL)                     /*!< CTL1 (Bit 2) */
#define GPIOB_CTL_CTL1_Msk                (0xcUL)                   /*!< CTL1 (Bitfield-Mask: 0x03) */
#define GPIOB_CTL_CTL0_Pos                (0UL)                     /*!< CTL0 (Bit 0) */
#define GPIOB_CTL_CTL0_Msk                (0x3UL)                   /*!< CTL0 (Bitfield-Mask: 0x03) */
/* =========================================================  OMODE  ========================================================= */
#define GPIOB_OMODE_OM15_Pos              (15UL)                    /*!< OM15 (Bit 15) */
#define GPIOB_OMODE_OM15_Msk              (0x8000UL)                /*!< OM15 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM14_Pos              (14UL)                    /*!< OM14 (Bit 14) */
#define GPIOB_OMODE_OM14_Msk              (0x4000UL)                /*!< OM14 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM13_Pos              (13UL)                    /*!< OM13 (Bit 13) */
#define GPIOB_OMODE_OM13_Msk              (0x2000UL)                /*!< OM13 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM12_Pos              (12UL)                    /*!< OM12 (Bit 12) */
#define GPIOB_OMODE_OM12_Msk              (0x1000UL)                /*!< OM12 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM11_Pos              (11UL)                    /*!< OM11 (Bit 11) */
#define GPIOB_OMODE_OM11_Msk              (0x800UL)                 /*!< OM11 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM10_Pos              (10UL)                    /*!< OM10 (Bit 10) */
#define GPIOB_OMODE_OM10_Msk              (0x400UL)                 /*!< OM10 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM9_Pos               (9UL)                     /*!< OM9 (Bit 9) */
#define GPIOB_OMODE_OM9_Msk               (0x200UL)                 /*!< OM9 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM8_Pos               (8UL)                     /*!< OM8 (Bit 8) */
#define GPIOB_OMODE_OM8_Msk               (0x100UL)                 /*!< OM8 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM7_Pos               (7UL)                     /*!< OM7 (Bit 7) */
#define GPIOB_OMODE_OM7_Msk               (0x80UL)                  /*!< OM7 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM6_Pos               (6UL)                     /*!< OM6 (Bit 6) */
#define GPIOB_OMODE_OM6_Msk               (0x40UL)                  /*!< OM6 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM5_Pos               (5UL)                     /*!< OM5 (Bit 5) */
#define GPIOB_OMODE_OM5_Msk               (0x20UL)                  /*!< OM5 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM4_Pos               (4UL)                     /*!< OM4 (Bit 4) */
#define GPIOB_OMODE_OM4_Msk               (0x10UL)                  /*!< OM4 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM3_Pos               (3UL)                     /*!< OM3 (Bit 3) */
#define GPIOB_OMODE_OM3_Msk               (0x8UL)                   /*!< OM3 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM2_Pos               (2UL)                     /*!< OM2 (Bit 2) */
#define GPIOB_OMODE_OM2_Msk               (0x4UL)                   /*!< OM2 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM1_Pos               (1UL)                     /*!< OM1 (Bit 1) */
#define GPIOB_OMODE_OM1_Msk               (0x2UL)                   /*!< OM1 (Bitfield-Mask: 0x01) */
#define GPIOB_OMODE_OM0_Pos               (0UL)                     /*!< OM0 (Bit 0) */
#define GPIOB_OMODE_OM0_Msk               (0x1UL)                   /*!< OM0 (Bitfield-Mask: 0x01) */
/* =========================================================  OSPD  ========================================================== */
#define GPIOB_OSPD_OSPD15_Pos             (30UL)                    /*!< OSPD15 (Bit 30) */
#define GPIOB_OSPD_OSPD15_Msk             (0xc0000000UL)            /*!< OSPD15 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD14_Pos             (28UL)                    /*!< OSPD14 (Bit 28) */
#define GPIOB_OSPD_OSPD14_Msk             (0x30000000UL)            /*!< OSPD14 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD13_Pos             (26UL)                    /*!< OSPD13 (Bit 26) */
#define GPIOB_OSPD_OSPD13_Msk             (0xc000000UL)             /*!< OSPD13 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD12_Pos             (24UL)                    /*!< OSPD12 (Bit 24) */
#define GPIOB_OSPD_OSPD12_Msk             (0x3000000UL)             /*!< OSPD12 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD11_Pos             (22UL)                    /*!< OSPD11 (Bit 22) */
#define GPIOB_OSPD_OSPD11_Msk             (0xc00000UL)              /*!< OSPD11 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD10_Pos             (20UL)                    /*!< OSPD10 (Bit 20) */
#define GPIOB_OSPD_OSPD10_Msk             (0x300000UL)              /*!< OSPD10 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD9_Pos              (18UL)                    /*!< OSPD9 (Bit 18) */
#define GPIOB_OSPD_OSPD9_Msk              (0xc0000UL)               /*!< OSPD9 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD8_Pos              (16UL)                    /*!< OSPD8 (Bit 16) */
#define GPIOB_OSPD_OSPD8_Msk              (0x30000UL)               /*!< OSPD8 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD7_Pos              (14UL)                    /*!< OSPD7 (Bit 14) */
#define GPIOB_OSPD_OSPD7_Msk              (0xc000UL)                /*!< OSPD7 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD6_Pos              (12UL)                    /*!< OSPD6 (Bit 12) */
#define GPIOB_OSPD_OSPD6_Msk              (0x3000UL)                /*!< OSPD6 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD5_Pos              (10UL)                    /*!< OSPD5 (Bit 10) */
#define GPIOB_OSPD_OSPD5_Msk              (0xc00UL)                 /*!< OSPD5 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD4_Pos              (8UL)                     /*!< OSPD4 (Bit 8) */
#define GPIOB_OSPD_OSPD4_Msk              (0x300UL)                 /*!< OSPD4 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD3_Pos              (6UL)                     /*!< OSPD3 (Bit 6) */
#define GPIOB_OSPD_OSPD3_Msk              (0xc0UL)                  /*!< OSPD3 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD2_Pos              (4UL)                     /*!< OSPD2 (Bit 4) */
#define GPIOB_OSPD_OSPD2_Msk              (0x30UL)                  /*!< OSPD2 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD1_Pos              (2UL)                     /*!< OSPD1 (Bit 2) */
#define GPIOB_OSPD_OSPD1_Msk              (0xcUL)                   /*!< OSPD1 (Bitfield-Mask: 0x03) */
#define GPIOB_OSPD_OSPD0_Pos              (0UL)                     /*!< OSPD0 (Bit 0) */
#define GPIOB_OSPD_OSPD0_Msk              (0x3UL)                   /*!< OSPD0 (Bitfield-Mask: 0x03) */
/* ==========================================================  PUD  ========================================================== */
#define GPIOB_PUD_PUD15_Pos               (30UL)                    /*!< PUD15 (Bit 30) */
#define GPIOB_PUD_PUD15_Msk               (0xc0000000UL)            /*!< PUD15 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD14_Pos               (28UL)                    /*!< PUD14 (Bit 28) */
#define GPIOB_PUD_PUD14_Msk               (0x30000000UL)            /*!< PUD14 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD13_Pos               (26UL)                    /*!< PUD13 (Bit 26) */
#define GPIOB_PUD_PUD13_Msk               (0xc000000UL)             /*!< PUD13 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD12_Pos               (24UL)                    /*!< PUD12 (Bit 24) */
#define GPIOB_PUD_PUD12_Msk               (0x3000000UL)             /*!< PUD12 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD11_Pos               (22UL)                    /*!< PUD11 (Bit 22) */
#define GPIOB_PUD_PUD11_Msk               (0xc00000UL)              /*!< PUD11 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD10_Pos               (20UL)                    /*!< PUD10 (Bit 20) */
#define GPIOB_PUD_PUD10_Msk               (0x300000UL)              /*!< PUD10 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD9_Pos                (18UL)                    /*!< PUD9 (Bit 18) */
#define GPIOB_PUD_PUD9_Msk                (0xc0000UL)               /*!< PUD9 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD8_Pos                (16UL)                    /*!< PUD8 (Bit 16) */
#define GPIOB_PUD_PUD8_Msk                (0x30000UL)               /*!< PUD8 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD7_Pos                (14UL)                    /*!< PUD7 (Bit 14) */
#define GPIOB_PUD_PUD7_Msk                (0xc000UL)                /*!< PUD7 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD6_Pos                (12UL)                    /*!< PUD6 (Bit 12) */
#define GPIOB_PUD_PUD6_Msk                (0x3000UL)                /*!< PUD6 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD5_Pos                (10UL)                    /*!< PUD5 (Bit 10) */
#define GPIOB_PUD_PUD5_Msk                (0xc00UL)                 /*!< PUD5 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD4_Pos                (8UL)                     /*!< PUD4 (Bit 8) */
#define GPIOB_PUD_PUD4_Msk                (0x300UL)                 /*!< PUD4 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD3_Pos                (6UL)                     /*!< PUD3 (Bit 6) */
#define GPIOB_PUD_PUD3_Msk                (0xc0UL)                  /*!< PUD3 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD2_Pos                (4UL)                     /*!< PUD2 (Bit 4) */
#define GPIOB_PUD_PUD2_Msk                (0x30UL)                  /*!< PUD2 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD1_Pos                (2UL)                     /*!< PUD1 (Bit 2) */
#define GPIOB_PUD_PUD1_Msk                (0xcUL)                   /*!< PUD1 (Bitfield-Mask: 0x03) */
#define GPIOB_PUD_PUD0_Pos                (0UL)                     /*!< PUD0 (Bit 0) */
#define GPIOB_PUD_PUD0_Msk                (0x3UL)                   /*!< PUD0 (Bitfield-Mask: 0x03) */
/* =========================================================  ISTAT  ========================================================= */
#define GPIOB_ISTAT_ISTAT15_Pos           (15UL)                    /*!< ISTAT15 (Bit 15) */
#define GPIOB_ISTAT_ISTAT15_Msk           (0x8000UL)                /*!< ISTAT15 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT14_Pos           (14UL)                    /*!< ISTAT14 (Bit 14) */
#define GPIOB_ISTAT_ISTAT14_Msk           (0x4000UL)                /*!< ISTAT14 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT13_Pos           (13UL)                    /*!< ISTAT13 (Bit 13) */
#define GPIOB_ISTAT_ISTAT13_Msk           (0x2000UL)                /*!< ISTAT13 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT12_Pos           (12UL)                    /*!< ISTAT12 (Bit 12) */
#define GPIOB_ISTAT_ISTAT12_Msk           (0x1000UL)                /*!< ISTAT12 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT11_Pos           (11UL)                    /*!< ISTAT11 (Bit 11) */
#define GPIOB_ISTAT_ISTAT11_Msk           (0x800UL)                 /*!< ISTAT11 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT10_Pos           (10UL)                    /*!< ISTAT10 (Bit 10) */
#define GPIOB_ISTAT_ISTAT10_Msk           (0x400UL)                 /*!< ISTAT10 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT9_Pos            (9UL)                     /*!< ISTAT9 (Bit 9) */
#define GPIOB_ISTAT_ISTAT9_Msk            (0x200UL)                 /*!< ISTAT9 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT8_Pos            (8UL)                     /*!< ISTAT8 (Bit 8) */
#define GPIOB_ISTAT_ISTAT8_Msk            (0x100UL)                 /*!< ISTAT8 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT7_Pos            (7UL)                     /*!< ISTAT7 (Bit 7) */
#define GPIOB_ISTAT_ISTAT7_Msk            (0x80UL)                  /*!< ISTAT7 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT6_Pos            (6UL)                     /*!< ISTAT6 (Bit 6) */
#define GPIOB_ISTAT_ISTAT6_Msk            (0x40UL)                  /*!< ISTAT6 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT5_Pos            (5UL)                     /*!< ISTAT5 (Bit 5) */
#define GPIOB_ISTAT_ISTAT5_Msk            (0x20UL)                  /*!< ISTAT5 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT4_Pos            (4UL)                     /*!< ISTAT4 (Bit 4) */
#define GPIOB_ISTAT_ISTAT4_Msk            (0x10UL)                  /*!< ISTAT4 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT3_Pos            (3UL)                     /*!< ISTAT3 (Bit 3) */
#define GPIOB_ISTAT_ISTAT3_Msk            (0x8UL)                   /*!< ISTAT3 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT2_Pos            (2UL)                     /*!< ISTAT2 (Bit 2) */
#define GPIOB_ISTAT_ISTAT2_Msk            (0x4UL)                   /*!< ISTAT2 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT1_Pos            (1UL)                     /*!< ISTAT1 (Bit 1) */
#define GPIOB_ISTAT_ISTAT1_Msk            (0x2UL)                   /*!< ISTAT1 (Bitfield-Mask: 0x01) */
#define GPIOB_ISTAT_ISTAT0_Pos            (0UL)                     /*!< ISTAT0 (Bit 0) */
#define GPIOB_ISTAT_ISTAT0_Msk            (0x1UL)                   /*!< ISTAT0 (Bitfield-Mask: 0x01) */
/* =========================================================  OCTL  ========================================================== */
#define GPIOB_OCTL_OCTL15_Pos             (15UL)                    /*!< OCTL15 (Bit 15) */
#define GPIOB_OCTL_OCTL15_Msk             (0x8000UL)                /*!< OCTL15 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL14_Pos             (14UL)                    /*!< OCTL14 (Bit 14) */
#define GPIOB_OCTL_OCTL14_Msk             (0x4000UL)                /*!< OCTL14 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL13_Pos             (13UL)                    /*!< OCTL13 (Bit 13) */
#define GPIOB_OCTL_OCTL13_Msk             (0x2000UL)                /*!< OCTL13 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL12_Pos             (12UL)                    /*!< OCTL12 (Bit 12) */
#define GPIOB_OCTL_OCTL12_Msk             (0x1000UL)                /*!< OCTL12 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL11_Pos             (11UL)                    /*!< OCTL11 (Bit 11) */
#define GPIOB_OCTL_OCTL11_Msk             (0x800UL)                 /*!< OCTL11 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL10_Pos             (10UL)                    /*!< OCTL10 (Bit 10) */
#define GPIOB_OCTL_OCTL10_Msk             (0x400UL)                 /*!< OCTL10 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL9_Pos              (9UL)                     /*!< OCTL9 (Bit 9) */
#define GPIOB_OCTL_OCTL9_Msk              (0x200UL)                 /*!< OCTL9 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL8_Pos              (8UL)                     /*!< OCTL8 (Bit 8) */
#define GPIOB_OCTL_OCTL8_Msk              (0x100UL)                 /*!< OCTL8 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL7_Pos              (7UL)                     /*!< OCTL7 (Bit 7) */
#define GPIOB_OCTL_OCTL7_Msk              (0x80UL)                  /*!< OCTL7 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL6_Pos              (6UL)                     /*!< OCTL6 (Bit 6) */
#define GPIOB_OCTL_OCTL6_Msk              (0x40UL)                  /*!< OCTL6 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL5_Pos              (5UL)                     /*!< OCTL5 (Bit 5) */
#define GPIOB_OCTL_OCTL5_Msk              (0x20UL)                  /*!< OCTL5 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL4_Pos              (4UL)                     /*!< OCTL4 (Bit 4) */
#define GPIOB_OCTL_OCTL4_Msk              (0x10UL)                  /*!< OCTL4 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL3_Pos              (3UL)                     /*!< OCTL3 (Bit 3) */
#define GPIOB_OCTL_OCTL3_Msk              (0x8UL)                   /*!< OCTL3 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL2_Pos              (2UL)                     /*!< OCTL2 (Bit 2) */
#define GPIOB_OCTL_OCTL2_Msk              (0x4UL)                   /*!< OCTL2 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL1_Pos              (1UL)                     /*!< OCTL1 (Bit 1) */
#define GPIOB_OCTL_OCTL1_Msk              (0x2UL)                   /*!< OCTL1 (Bitfield-Mask: 0x01) */
#define GPIOB_OCTL_OCTL0_Pos              (0UL)                     /*!< OCTL0 (Bit 0) */
#define GPIOB_OCTL_OCTL0_Msk              (0x1UL)                   /*!< OCTL0 (Bitfield-Mask: 0x01) */
/* ==========================================================  BOP  ========================================================== */
#define GPIOB_BOP_CR15_Pos                (31UL)                    /*!< CR15 (Bit 31) */
#define GPIOB_BOP_CR15_Msk                (0x80000000UL)            /*!< CR15 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR14_Pos                (30UL)                    /*!< CR14 (Bit 30) */
#define GPIOB_BOP_CR14_Msk                (0x40000000UL)            /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR13_Pos                (29UL)                    /*!< CR13 (Bit 29) */
#define GPIOB_BOP_CR13_Msk                (0x20000000UL)            /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR12_Pos                (28UL)                    /*!< CR12 (Bit 28) */
#define GPIOB_BOP_CR12_Msk                (0x10000000UL)            /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR11_Pos                (27UL)                    /*!< CR11 (Bit 27) */
#define GPIOB_BOP_CR11_Msk                (0x8000000UL)             /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR10_Pos                (26UL)                    /*!< CR10 (Bit 26) */
#define GPIOB_BOP_CR10_Msk                (0x4000000UL)             /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR9_Pos                 (25UL)                    /*!< CR9 (Bit 25) */
#define GPIOB_BOP_CR9_Msk                 (0x2000000UL)             /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR8_Pos                 (24UL)                    /*!< CR8 (Bit 24) */
#define GPIOB_BOP_CR8_Msk                 (0x1000000UL)             /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR7_Pos                 (23UL)                    /*!< CR7 (Bit 23) */
#define GPIOB_BOP_CR7_Msk                 (0x800000UL)              /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR6_Pos                 (22UL)                    /*!< CR6 (Bit 22) */
#define GPIOB_BOP_CR6_Msk                 (0x400000UL)              /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR5_Pos                 (21UL)                    /*!< CR5 (Bit 21) */
#define GPIOB_BOP_CR5_Msk                 (0x200000UL)              /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR4_Pos                 (20UL)                    /*!< CR4 (Bit 20) */
#define GPIOB_BOP_CR4_Msk                 (0x100000UL)              /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR3_Pos                 (19UL)                    /*!< CR3 (Bit 19) */
#define GPIOB_BOP_CR3_Msk                 (0x80000UL)               /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR2_Pos                 (18UL)                    /*!< CR2 (Bit 18) */
#define GPIOB_BOP_CR2_Msk                 (0x40000UL)               /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR1_Pos                 (17UL)                    /*!< CR1 (Bit 17) */
#define GPIOB_BOP_CR1_Msk                 (0x20000UL)               /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_CR0_Pos                 (16UL)                    /*!< CR0 (Bit 16) */
#define GPIOB_BOP_CR0_Msk                 (0x10000UL)               /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP15_Pos               (15UL)                    /*!< BOP15 (Bit 15) */
#define GPIOB_BOP_BOP15_Msk               (0x8000UL)                /*!< BOP15 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP14_Pos               (14UL)                    /*!< BOP14 (Bit 14) */
#define GPIOB_BOP_BOP14_Msk               (0x4000UL)                /*!< BOP14 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP13_Pos               (13UL)                    /*!< BOP13 (Bit 13) */
#define GPIOB_BOP_BOP13_Msk               (0x2000UL)                /*!< BOP13 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP12_Pos               (12UL)                    /*!< BOP12 (Bit 12) */
#define GPIOB_BOP_BOP12_Msk               (0x1000UL)                /*!< BOP12 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP11_Pos               (11UL)                    /*!< BOP11 (Bit 11) */
#define GPIOB_BOP_BOP11_Msk               (0x800UL)                 /*!< BOP11 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP10_Pos               (10UL)                    /*!< BOP10 (Bit 10) */
#define GPIOB_BOP_BOP10_Msk               (0x400UL)                 /*!< BOP10 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP9_Pos                (9UL)                     /*!< BOP9 (Bit 9) */
#define GPIOB_BOP_BOP9_Msk                (0x200UL)                 /*!< BOP9 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP8_Pos                (8UL)                     /*!< BOP8 (Bit 8) */
#define GPIOB_BOP_BOP8_Msk                (0x100UL)                 /*!< BOP8 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP7_Pos                (7UL)                     /*!< BOP7 (Bit 7) */
#define GPIOB_BOP_BOP7_Msk                (0x80UL)                  /*!< BOP7 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP6_Pos                (6UL)                     /*!< BOP6 (Bit 6) */
#define GPIOB_BOP_BOP6_Msk                (0x40UL)                  /*!< BOP6 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP5_Pos                (5UL)                     /*!< BOP5 (Bit 5) */
#define GPIOB_BOP_BOP5_Msk                (0x20UL)                  /*!< BOP5 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP4_Pos                (4UL)                     /*!< BOP4 (Bit 4) */
#define GPIOB_BOP_BOP4_Msk                (0x10UL)                  /*!< BOP4 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP3_Pos                (3UL)                     /*!< BOP3 (Bit 3) */
#define GPIOB_BOP_BOP3_Msk                (0x8UL)                   /*!< BOP3 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP2_Pos                (2UL)                     /*!< BOP2 (Bit 2) */
#define GPIOB_BOP_BOP2_Msk                (0x4UL)                   /*!< BOP2 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP1_Pos                (1UL)                     /*!< BOP1 (Bit 1) */
#define GPIOB_BOP_BOP1_Msk                (0x2UL)                   /*!< BOP1 (Bitfield-Mask: 0x01) */
#define GPIOB_BOP_BOP0_Pos                (0UL)                     /*!< BOP0 (Bit 0) */
#define GPIOB_BOP_BOP0_Msk                (0x1UL)                   /*!< BOP0 (Bitfield-Mask: 0x01) */
/* =========================================================  LOCK  ========================================================== */
#define GPIOB_LOCK_LKK_Pos                (16UL)                    /*!< LKK (Bit 16) */
#define GPIOB_LOCK_LKK_Msk                (0x10000UL)               /*!< LKK (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK15_Pos               (15UL)                    /*!< LK15 (Bit 15) */
#define GPIOB_LOCK_LK15_Msk               (0x8000UL)                /*!< LK15 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK14_Pos               (14UL)                    /*!< LK14 (Bit 14) */
#define GPIOB_LOCK_LK14_Msk               (0x4000UL)                /*!< LK14 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK13_Pos               (13UL)                    /*!< LK13 (Bit 13) */
#define GPIOB_LOCK_LK13_Msk               (0x2000UL)                /*!< LK13 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK12_Pos               (12UL)                    /*!< LK12 (Bit 12) */
#define GPIOB_LOCK_LK12_Msk               (0x1000UL)                /*!< LK12 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK11_Pos               (11UL)                    /*!< LK11 (Bit 11) */
#define GPIOB_LOCK_LK11_Msk               (0x800UL)                 /*!< LK11 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK10_Pos               (10UL)                    /*!< LK10 (Bit 10) */
#define GPIOB_LOCK_LK10_Msk               (0x400UL)                 /*!< LK10 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK9_Pos                (9UL)                     /*!< LK9 (Bit 9) */
#define GPIOB_LOCK_LK9_Msk                (0x200UL)                 /*!< LK9 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK8_Pos                (8UL)                     /*!< LK8 (Bit 8) */
#define GPIOB_LOCK_LK8_Msk                (0x100UL)                 /*!< LK8 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK7_Pos                (7UL)                     /*!< LK7 (Bit 7) */
#define GPIOB_LOCK_LK7_Msk                (0x80UL)                  /*!< LK7 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK6_Pos                (6UL)                     /*!< LK6 (Bit 6) */
#define GPIOB_LOCK_LK6_Msk                (0x40UL)                  /*!< LK6 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK5_Pos                (5UL)                     /*!< LK5 (Bit 5) */
#define GPIOB_LOCK_LK5_Msk                (0x20UL)                  /*!< LK5 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK4_Pos                (4UL)                     /*!< LK4 (Bit 4) */
#define GPIOB_LOCK_LK4_Msk                (0x10UL)                  /*!< LK4 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK3_Pos                (3UL)                     /*!< LK3 (Bit 3) */
#define GPIOB_LOCK_LK3_Msk                (0x8UL)                   /*!< LK3 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK2_Pos                (2UL)                     /*!< LK2 (Bit 2) */
#define GPIOB_LOCK_LK2_Msk                (0x4UL)                   /*!< LK2 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK1_Pos                (1UL)                     /*!< LK1 (Bit 1) */
#define GPIOB_LOCK_LK1_Msk                (0x2UL)                   /*!< LK1 (Bitfield-Mask: 0x01) */
#define GPIOB_LOCK_LK0_Pos                (0UL)                     /*!< LK0 (Bit 0) */
#define GPIOB_LOCK_LK0_Msk                (0x1UL)                   /*!< LK0 (Bitfield-Mask: 0x01) */
/* ========================================================  AFSEL0  ========================================================= */
#define GPIOB_AFSEL0_SEL7_Pos             (28UL)                    /*!< SEL7 (Bit 28) */
#define GPIOB_AFSEL0_SEL7_Msk             (0xf0000000UL)            /*!< SEL7 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL0_SEL6_Pos             (24UL)                    /*!< SEL6 (Bit 24) */
#define GPIOB_AFSEL0_SEL6_Msk             (0xf000000UL)             /*!< SEL6 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL0_SEL5_Pos             (20UL)                    /*!< SEL5 (Bit 20) */
#define GPIOB_AFSEL0_SEL5_Msk             (0xf00000UL)              /*!< SEL5 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL0_SEL4_Pos             (16UL)                    /*!< SEL4 (Bit 16) */
#define GPIOB_AFSEL0_SEL4_Msk             (0xf0000UL)               /*!< SEL4 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL0_SEL3_Pos             (12UL)                    /*!< SEL3 (Bit 12) */
#define GPIOB_AFSEL0_SEL3_Msk             (0xf000UL)                /*!< SEL3 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL0_SEL2_Pos             (8UL)                     /*!< SEL2 (Bit 8) */
#define GPIOB_AFSEL0_SEL2_Msk             (0xf00UL)                 /*!< SEL2 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL0_SEL1_Pos             (4UL)                     /*!< SEL1 (Bit 4) */
#define GPIOB_AFSEL0_SEL1_Msk             (0xf0UL)                  /*!< SEL1 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL0_SEL0_Pos             (0UL)                     /*!< SEL0 (Bit 0) */
#define GPIOB_AFSEL0_SEL0_Msk             (0xfUL)                   /*!< SEL0 (Bitfield-Mask: 0x0f) */
/* ========================================================  AFSEL1  ========================================================= */
#define GPIOB_AFSEL1_SEL15_Pos            (28UL)                    /*!< SEL15 (Bit 28) */
#define GPIOB_AFSEL1_SEL15_Msk            (0xf0000000UL)            /*!< SEL15 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL1_SEL14_Pos            (24UL)                    /*!< SEL14 (Bit 24) */
#define GPIOB_AFSEL1_SEL14_Msk            (0xf000000UL)             /*!< SEL14 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL1_SEL13_Pos            (20UL)                    /*!< SEL13 (Bit 20) */
#define GPIOB_AFSEL1_SEL13_Msk            (0xf00000UL)              /*!< SEL13 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL1_SEL12_Pos            (16UL)                    /*!< SEL12 (Bit 16) */
#define GPIOB_AFSEL1_SEL12_Msk            (0xf0000UL)               /*!< SEL12 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL1_SEL11_Pos            (12UL)                    /*!< SEL11 (Bit 12) */
#define GPIOB_AFSEL1_SEL11_Msk            (0xf000UL)                /*!< SEL11 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL1_SEL10_Pos            (8UL)                     /*!< SEL10 (Bit 8) */
#define GPIOB_AFSEL1_SEL10_Msk            (0xf00UL)                 /*!< SEL10 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL1_SEL9_Pos             (4UL)                     /*!< SEL9 (Bit 4) */
#define GPIOB_AFSEL1_SEL9_Msk             (0xf0UL)                  /*!< SEL9 (Bitfield-Mask: 0x0f) */
#define GPIOB_AFSEL1_SEL8_Pos             (0UL)                     /*!< SEL8 (Bit 0) */
#define GPIOB_AFSEL1_SEL8_Msk             (0xfUL)                   /*!< SEL8 (Bitfield-Mask: 0x0f) */
/* ==========================================================  BC  =========================================================== */
#define GPIOB_BC_CR0_Pos                  (0UL)                     /*!< CR0 (Bit 0) */
#define GPIOB_BC_CR0_Msk                  (0x1UL)                   /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR1_Pos                  (1UL)                     /*!< CR1 (Bit 1) */
#define GPIOB_BC_CR1_Msk                  (0x2UL)                   /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR2_Pos                  (2UL)                     /*!< CR2 (Bit 2) */
#define GPIOB_BC_CR2_Msk                  (0x4UL)                   /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR3_Pos                  (3UL)                     /*!< CR3 (Bit 3) */
#define GPIOB_BC_CR3_Msk                  (0x8UL)                   /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR4_Pos                  (4UL)                     /*!< CR4 (Bit 4) */
#define GPIOB_BC_CR4_Msk                  (0x10UL)                  /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR5_Pos                  (5UL)                     /*!< CR5 (Bit 5) */
#define GPIOB_BC_CR5_Msk                  (0x20UL)                  /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR6_Pos                  (6UL)                     /*!< CR6 (Bit 6) */
#define GPIOB_BC_CR6_Msk                  (0x40UL)                  /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR7_Pos                  (7UL)                     /*!< CR7 (Bit 7) */
#define GPIOB_BC_CR7_Msk                  (0x80UL)                  /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR8_Pos                  (8UL)                     /*!< CR8 (Bit 8) */
#define GPIOB_BC_CR8_Msk                  (0x100UL)                 /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR9_Pos                  (9UL)                     /*!< CR9 (Bit 9) */
#define GPIOB_BC_CR9_Msk                  (0x200UL)                 /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR10_Pos                 (10UL)                    /*!< CR10 (Bit 10) */
#define GPIOB_BC_CR10_Msk                 (0x400UL)                 /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR11_Pos                 (11UL)                    /*!< CR11 (Bit 11) */
#define GPIOB_BC_CR11_Msk                 (0x800UL)                 /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR12_Pos                 (12UL)                    /*!< CR12 (Bit 12) */
#define GPIOB_BC_CR12_Msk                 (0x1000UL)                /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR13_Pos                 (13UL)                    /*!< CR13 (Bit 13) */
#define GPIOB_BC_CR13_Msk                 (0x2000UL)                /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR14_Pos                 (14UL)                    /*!< CR14 (Bit 14) */
#define GPIOB_BC_CR14_Msk                 (0x4000UL)                /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOB_BC_CR15_Pos                 (15UL)                    /*!< CR15 (Bit 15) */
#define GPIOB_BC_CR15_Msk                 (0x8000UL)                /*!< CR15 (Bitfield-Mask: 0x01) */
/* ==========================================================  TG  =========================================================== */
#define GPIOB_TG_TG0_Pos                  (0UL)                     /*!< TG0 (Bit 0) */
#define GPIOB_TG_TG0_Msk                  (0x1UL)                   /*!< TG0 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG1_Pos                  (1UL)                     /*!< TG1 (Bit 1) */
#define GPIOB_TG_TG1_Msk                  (0x2UL)                   /*!< TG1 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG2_Pos                  (2UL)                     /*!< TG2 (Bit 2) */
#define GPIOB_TG_TG2_Msk                  (0x4UL)                   /*!< TG2 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG3_Pos                  (3UL)                     /*!< TG3 (Bit 3) */
#define GPIOB_TG_TG3_Msk                  (0x8UL)                   /*!< TG3 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG4_Pos                  (4UL)                     /*!< TG4 (Bit 4) */
#define GPIOB_TG_TG4_Msk                  (0x10UL)                  /*!< TG4 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG5_Pos                  (5UL)                     /*!< TG5 (Bit 5) */
#define GPIOB_TG_TG5_Msk                  (0x20UL)                  /*!< TG5 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG6_Pos                  (6UL)                     /*!< TG6 (Bit 6) */
#define GPIOB_TG_TG6_Msk                  (0x40UL)                  /*!< TG6 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG7_Pos                  (7UL)                     /*!< TG7 (Bit 7) */
#define GPIOB_TG_TG7_Msk                  (0x80UL)                  /*!< TG7 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG8_Pos                  (8UL)                     /*!< TG8 (Bit 8) */
#define GPIOB_TG_TG8_Msk                  (0x100UL)                 /*!< TG8 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG9_Pos                  (9UL)                     /*!< TG9 (Bit 9) */
#define GPIOB_TG_TG9_Msk                  (0x200UL)                 /*!< TG9 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG10_Pos                 (10UL)                    /*!< TG10 (Bit 10) */
#define GPIOB_TG_TG10_Msk                 (0x400UL)                 /*!< TG10 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG11_Pos                 (11UL)                    /*!< TG11 (Bit 11) */
#define GPIOB_TG_TG11_Msk                 (0x800UL)                 /*!< TG11 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG12_Pos                 (12UL)                    /*!< TG12 (Bit 12) */
#define GPIOB_TG_TG12_Msk                 (0x1000UL)                /*!< TG12 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG13_Pos                 (13UL)                    /*!< TG13 (Bit 13) */
#define GPIOB_TG_TG13_Msk                 (0x2000UL)                /*!< TG13 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG14_Pos                 (14UL)                    /*!< TG14 (Bit 14) */
#define GPIOB_TG_TG14_Msk                 (0x4000UL)                /*!< TG14 (Bitfield-Mask: 0x01) */
#define GPIOB_TG_TG15_Pos                 (15UL)                    /*!< TG15 (Bit 15) */
#define GPIOB_TG_TG15_Msk                 (0x8000UL)                /*!< TG15 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           GPIOC                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define GPIOC_CTL_CTL15_Pos               (30UL)                    /*!< CTL15 (Bit 30) */
#define GPIOC_CTL_CTL15_Msk               (0xc0000000UL)            /*!< CTL15 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL14_Pos               (28UL)                    /*!< CTL14 (Bit 28) */
#define GPIOC_CTL_CTL14_Msk               (0x30000000UL)            /*!< CTL14 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL13_Pos               (26UL)                    /*!< CTL13 (Bit 26) */
#define GPIOC_CTL_CTL13_Msk               (0xc000000UL)             /*!< CTL13 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL12_Pos               (24UL)                    /*!< CTL12 (Bit 24) */
#define GPIOC_CTL_CTL12_Msk               (0x3000000UL)             /*!< CTL12 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL11_Pos               (22UL)                    /*!< CTL11 (Bit 22) */
#define GPIOC_CTL_CTL11_Msk               (0xc00000UL)              /*!< CTL11 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL10_Pos               (20UL)                    /*!< CTL10 (Bit 20) */
#define GPIOC_CTL_CTL10_Msk               (0x300000UL)              /*!< CTL10 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL9_Pos                (18UL)                    /*!< CTL9 (Bit 18) */
#define GPIOC_CTL_CTL9_Msk                (0xc0000UL)               /*!< CTL9 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL8_Pos                (16UL)                    /*!< CTL8 (Bit 16) */
#define GPIOC_CTL_CTL8_Msk                (0x30000UL)               /*!< CTL8 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL7_Pos                (14UL)                    /*!< CTL7 (Bit 14) */
#define GPIOC_CTL_CTL7_Msk                (0xc000UL)                /*!< CTL7 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL6_Pos                (12UL)                    /*!< CTL6 (Bit 12) */
#define GPIOC_CTL_CTL6_Msk                (0x3000UL)                /*!< CTL6 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL5_Pos                (10UL)                    /*!< CTL5 (Bit 10) */
#define GPIOC_CTL_CTL5_Msk                (0xc00UL)                 /*!< CTL5 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL4_Pos                (8UL)                     /*!< CTL4 (Bit 8) */
#define GPIOC_CTL_CTL4_Msk                (0x300UL)                 /*!< CTL4 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL3_Pos                (6UL)                     /*!< CTL3 (Bit 6) */
#define GPIOC_CTL_CTL3_Msk                (0xc0UL)                  /*!< CTL3 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL2_Pos                (4UL)                     /*!< CTL2 (Bit 4) */
#define GPIOC_CTL_CTL2_Msk                (0x30UL)                  /*!< CTL2 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL1_Pos                (2UL)                     /*!< CTL1 (Bit 2) */
#define GPIOC_CTL_CTL1_Msk                (0xcUL)                   /*!< CTL1 (Bitfield-Mask: 0x03) */
#define GPIOC_CTL_CTL0_Pos                (0UL)                     /*!< CTL0 (Bit 0) */
#define GPIOC_CTL_CTL0_Msk                (0x3UL)                   /*!< CTL0 (Bitfield-Mask: 0x03) */
/* =========================================================  OMODE  ========================================================= */
#define GPIOC_OMODE_OM15_Pos              (15UL)                    /*!< OM15 (Bit 15) */
#define GPIOC_OMODE_OM15_Msk              (0x8000UL)                /*!< OM15 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM14_Pos              (14UL)                    /*!< OM14 (Bit 14) */
#define GPIOC_OMODE_OM14_Msk              (0x4000UL)                /*!< OM14 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM13_Pos              (13UL)                    /*!< OM13 (Bit 13) */
#define GPIOC_OMODE_OM13_Msk              (0x2000UL)                /*!< OM13 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM12_Pos              (12UL)                    /*!< OM12 (Bit 12) */
#define GPIOC_OMODE_OM12_Msk              (0x1000UL)                /*!< OM12 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM11_Pos              (11UL)                    /*!< OM11 (Bit 11) */
#define GPIOC_OMODE_OM11_Msk              (0x800UL)                 /*!< OM11 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM10_Pos              (10UL)                    /*!< OM10 (Bit 10) */
#define GPIOC_OMODE_OM10_Msk              (0x400UL)                 /*!< OM10 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM9_Pos               (9UL)                     /*!< OM9 (Bit 9) */
#define GPIOC_OMODE_OM9_Msk               (0x200UL)                 /*!< OM9 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM8_Pos               (8UL)                     /*!< OM8 (Bit 8) */
#define GPIOC_OMODE_OM8_Msk               (0x100UL)                 /*!< OM8 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM7_Pos               (7UL)                     /*!< OM7 (Bit 7) */
#define GPIOC_OMODE_OM7_Msk               (0x80UL)                  /*!< OM7 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM6_Pos               (6UL)                     /*!< OM6 (Bit 6) */
#define GPIOC_OMODE_OM6_Msk               (0x40UL)                  /*!< OM6 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM5_Pos               (5UL)                     /*!< OM5 (Bit 5) */
#define GPIOC_OMODE_OM5_Msk               (0x20UL)                  /*!< OM5 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM4_Pos               (4UL)                     /*!< OM4 (Bit 4) */
#define GPIOC_OMODE_OM4_Msk               (0x10UL)                  /*!< OM4 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM3_Pos               (3UL)                     /*!< OM3 (Bit 3) */
#define GPIOC_OMODE_OM3_Msk               (0x8UL)                   /*!< OM3 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM2_Pos               (2UL)                     /*!< OM2 (Bit 2) */
#define GPIOC_OMODE_OM2_Msk               (0x4UL)                   /*!< OM2 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM1_Pos               (1UL)                     /*!< OM1 (Bit 1) */
#define GPIOC_OMODE_OM1_Msk               (0x2UL)                   /*!< OM1 (Bitfield-Mask: 0x01) */
#define GPIOC_OMODE_OM0_Pos               (0UL)                     /*!< OM0 (Bit 0) */
#define GPIOC_OMODE_OM0_Msk               (0x1UL)                   /*!< OM0 (Bitfield-Mask: 0x01) */
/* =========================================================  OSPD  ========================================================== */
#define GPIOC_OSPD_OSPD15_Pos             (30UL)                    /*!< OSPD15 (Bit 30) */
#define GPIOC_OSPD_OSPD15_Msk             (0xc0000000UL)            /*!< OSPD15 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD14_Pos             (28UL)                    /*!< OSPD14 (Bit 28) */
#define GPIOC_OSPD_OSPD14_Msk             (0x30000000UL)            /*!< OSPD14 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD13_Pos             (26UL)                    /*!< OSPD13 (Bit 26) */
#define GPIOC_OSPD_OSPD13_Msk             (0xc000000UL)             /*!< OSPD13 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD12_Pos             (24UL)                    /*!< OSPD12 (Bit 24) */
#define GPIOC_OSPD_OSPD12_Msk             (0x3000000UL)             /*!< OSPD12 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD11_Pos             (22UL)                    /*!< OSPD11 (Bit 22) */
#define GPIOC_OSPD_OSPD11_Msk             (0xc00000UL)              /*!< OSPD11 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD10_Pos             (20UL)                    /*!< OSPD10 (Bit 20) */
#define GPIOC_OSPD_OSPD10_Msk             (0x300000UL)              /*!< OSPD10 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD9_Pos              (18UL)                    /*!< OSPD9 (Bit 18) */
#define GPIOC_OSPD_OSPD9_Msk              (0xc0000UL)               /*!< OSPD9 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD8_Pos              (16UL)                    /*!< OSPD8 (Bit 16) */
#define GPIOC_OSPD_OSPD8_Msk              (0x30000UL)               /*!< OSPD8 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD7_Pos              (14UL)                    /*!< OSPD7 (Bit 14) */
#define GPIOC_OSPD_OSPD7_Msk              (0xc000UL)                /*!< OSPD7 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD6_Pos              (12UL)                    /*!< OSPD6 (Bit 12) */
#define GPIOC_OSPD_OSPD6_Msk              (0x3000UL)                /*!< OSPD6 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD5_Pos              (10UL)                    /*!< OSPD5 (Bit 10) */
#define GPIOC_OSPD_OSPD5_Msk              (0xc00UL)                 /*!< OSPD5 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD4_Pos              (8UL)                     /*!< OSPD4 (Bit 8) */
#define GPIOC_OSPD_OSPD4_Msk              (0x300UL)                 /*!< OSPD4 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD3_Pos              (6UL)                     /*!< OSPD3 (Bit 6) */
#define GPIOC_OSPD_OSPD3_Msk              (0xc0UL)                  /*!< OSPD3 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD2_Pos              (4UL)                     /*!< OSPD2 (Bit 4) */
#define GPIOC_OSPD_OSPD2_Msk              (0x30UL)                  /*!< OSPD2 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD1_Pos              (2UL)                     /*!< OSPD1 (Bit 2) */
#define GPIOC_OSPD_OSPD1_Msk              (0xcUL)                   /*!< OSPD1 (Bitfield-Mask: 0x03) */
#define GPIOC_OSPD_OSPD0_Pos              (0UL)                     /*!< OSPD0 (Bit 0) */
#define GPIOC_OSPD_OSPD0_Msk              (0x3UL)                   /*!< OSPD0 (Bitfield-Mask: 0x03) */
/* ==========================================================  PUD  ========================================================== */
#define GPIOC_PUD_PUD15_Pos               (30UL)                    /*!< PUD15 (Bit 30) */
#define GPIOC_PUD_PUD15_Msk               (0xc0000000UL)            /*!< PUD15 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD14_Pos               (28UL)                    /*!< PUD14 (Bit 28) */
#define GPIOC_PUD_PUD14_Msk               (0x30000000UL)            /*!< PUD14 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD13_Pos               (26UL)                    /*!< PUD13 (Bit 26) */
#define GPIOC_PUD_PUD13_Msk               (0xc000000UL)             /*!< PUD13 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD12_Pos               (24UL)                    /*!< PUD12 (Bit 24) */
#define GPIOC_PUD_PUD12_Msk               (0x3000000UL)             /*!< PUD12 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD11_Pos               (22UL)                    /*!< PUD11 (Bit 22) */
#define GPIOC_PUD_PUD11_Msk               (0xc00000UL)              /*!< PUD11 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD10_Pos               (20UL)                    /*!< PUD10 (Bit 20) */
#define GPIOC_PUD_PUD10_Msk               (0x300000UL)              /*!< PUD10 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD9_Pos                (18UL)                    /*!< PUD9 (Bit 18) */
#define GPIOC_PUD_PUD9_Msk                (0xc0000UL)               /*!< PUD9 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD8_Pos                (16UL)                    /*!< PUD8 (Bit 16) */
#define GPIOC_PUD_PUD8_Msk                (0x30000UL)               /*!< PUD8 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD7_Pos                (14UL)                    /*!< PUD7 (Bit 14) */
#define GPIOC_PUD_PUD7_Msk                (0xc000UL)                /*!< PUD7 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD6_Pos                (12UL)                    /*!< PUD6 (Bit 12) */
#define GPIOC_PUD_PUD6_Msk                (0x3000UL)                /*!< PUD6 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD5_Pos                (10UL)                    /*!< PUD5 (Bit 10) */
#define GPIOC_PUD_PUD5_Msk                (0xc00UL)                 /*!< PUD5 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD4_Pos                (8UL)                     /*!< PUD4 (Bit 8) */
#define GPIOC_PUD_PUD4_Msk                (0x300UL)                 /*!< PUD4 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD3_Pos                (6UL)                     /*!< PUD3 (Bit 6) */
#define GPIOC_PUD_PUD3_Msk                (0xc0UL)                  /*!< PUD3 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD2_Pos                (4UL)                     /*!< PUD2 (Bit 4) */
#define GPIOC_PUD_PUD2_Msk                (0x30UL)                  /*!< PUD2 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD1_Pos                (2UL)                     /*!< PUD1 (Bit 2) */
#define GPIOC_PUD_PUD1_Msk                (0xcUL)                   /*!< PUD1 (Bitfield-Mask: 0x03) */
#define GPIOC_PUD_PUD0_Pos                (0UL)                     /*!< PUD0 (Bit 0) */
#define GPIOC_PUD_PUD0_Msk                (0x3UL)                   /*!< PUD0 (Bitfield-Mask: 0x03) */
/* =========================================================  ISTAT  ========================================================= */
#define GPIOC_ISTAT_ISTAT15_Pos           (15UL)                    /*!< ISTAT15 (Bit 15) */
#define GPIOC_ISTAT_ISTAT15_Msk           (0x8000UL)                /*!< ISTAT15 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT14_Pos           (14UL)                    /*!< ISTAT14 (Bit 14) */
#define GPIOC_ISTAT_ISTAT14_Msk           (0x4000UL)                /*!< ISTAT14 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT13_Pos           (13UL)                    /*!< ISTAT13 (Bit 13) */
#define GPIOC_ISTAT_ISTAT13_Msk           (0x2000UL)                /*!< ISTAT13 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT12_Pos           (12UL)                    /*!< ISTAT12 (Bit 12) */
#define GPIOC_ISTAT_ISTAT12_Msk           (0x1000UL)                /*!< ISTAT12 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT11_Pos           (11UL)                    /*!< ISTAT11 (Bit 11) */
#define GPIOC_ISTAT_ISTAT11_Msk           (0x800UL)                 /*!< ISTAT11 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT10_Pos           (10UL)                    /*!< ISTAT10 (Bit 10) */
#define GPIOC_ISTAT_ISTAT10_Msk           (0x400UL)                 /*!< ISTAT10 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT9_Pos            (9UL)                     /*!< ISTAT9 (Bit 9) */
#define GPIOC_ISTAT_ISTAT9_Msk            (0x200UL)                 /*!< ISTAT9 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT8_Pos            (8UL)                     /*!< ISTAT8 (Bit 8) */
#define GPIOC_ISTAT_ISTAT8_Msk            (0x100UL)                 /*!< ISTAT8 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT7_Pos            (7UL)                     /*!< ISTAT7 (Bit 7) */
#define GPIOC_ISTAT_ISTAT7_Msk            (0x80UL)                  /*!< ISTAT7 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT6_Pos            (6UL)                     /*!< ISTAT6 (Bit 6) */
#define GPIOC_ISTAT_ISTAT6_Msk            (0x40UL)                  /*!< ISTAT6 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT5_Pos            (5UL)                     /*!< ISTAT5 (Bit 5) */
#define GPIOC_ISTAT_ISTAT5_Msk            (0x20UL)                  /*!< ISTAT5 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT4_Pos            (4UL)                     /*!< ISTAT4 (Bit 4) */
#define GPIOC_ISTAT_ISTAT4_Msk            (0x10UL)                  /*!< ISTAT4 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT3_Pos            (3UL)                     /*!< ISTAT3 (Bit 3) */
#define GPIOC_ISTAT_ISTAT3_Msk            (0x8UL)                   /*!< ISTAT3 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT2_Pos            (2UL)                     /*!< ISTAT2 (Bit 2) */
#define GPIOC_ISTAT_ISTAT2_Msk            (0x4UL)                   /*!< ISTAT2 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT1_Pos            (1UL)                     /*!< ISTAT1 (Bit 1) */
#define GPIOC_ISTAT_ISTAT1_Msk            (0x2UL)                   /*!< ISTAT1 (Bitfield-Mask: 0x01) */
#define GPIOC_ISTAT_ISTAT0_Pos            (0UL)                     /*!< ISTAT0 (Bit 0) */
#define GPIOC_ISTAT_ISTAT0_Msk            (0x1UL)                   /*!< ISTAT0 (Bitfield-Mask: 0x01) */
/* =========================================================  OCTL  ========================================================== */
#define GPIOC_OCTL_OCTL15_Pos             (15UL)                    /*!< OCTL15 (Bit 15) */
#define GPIOC_OCTL_OCTL15_Msk             (0x8000UL)                /*!< OCTL15 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL14_Pos             (14UL)                    /*!< OCTL14 (Bit 14) */
#define GPIOC_OCTL_OCTL14_Msk             (0x4000UL)                /*!< OCTL14 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL13_Pos             (13UL)                    /*!< OCTL13 (Bit 13) */
#define GPIOC_OCTL_OCTL13_Msk             (0x2000UL)                /*!< OCTL13 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL12_Pos             (12UL)                    /*!< OCTL12 (Bit 12) */
#define GPIOC_OCTL_OCTL12_Msk             (0x1000UL)                /*!< OCTL12 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL11_Pos             (11UL)                    /*!< OCTL11 (Bit 11) */
#define GPIOC_OCTL_OCTL11_Msk             (0x800UL)                 /*!< OCTL11 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL10_Pos             (10UL)                    /*!< OCTL10 (Bit 10) */
#define GPIOC_OCTL_OCTL10_Msk             (0x400UL)                 /*!< OCTL10 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL9_Pos              (9UL)                     /*!< OCTL9 (Bit 9) */
#define GPIOC_OCTL_OCTL9_Msk              (0x200UL)                 /*!< OCTL9 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL8_Pos              (8UL)                     /*!< OCTL8 (Bit 8) */
#define GPIOC_OCTL_OCTL8_Msk              (0x100UL)                 /*!< OCTL8 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL7_Pos              (7UL)                     /*!< OCTL7 (Bit 7) */
#define GPIOC_OCTL_OCTL7_Msk              (0x80UL)                  /*!< OCTL7 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL6_Pos              (6UL)                     /*!< OCTL6 (Bit 6) */
#define GPIOC_OCTL_OCTL6_Msk              (0x40UL)                  /*!< OCTL6 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL5_Pos              (5UL)                     /*!< OCTL5 (Bit 5) */
#define GPIOC_OCTL_OCTL5_Msk              (0x20UL)                  /*!< OCTL5 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL4_Pos              (4UL)                     /*!< OCTL4 (Bit 4) */
#define GPIOC_OCTL_OCTL4_Msk              (0x10UL)                  /*!< OCTL4 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL3_Pos              (3UL)                     /*!< OCTL3 (Bit 3) */
#define GPIOC_OCTL_OCTL3_Msk              (0x8UL)                   /*!< OCTL3 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL2_Pos              (2UL)                     /*!< OCTL2 (Bit 2) */
#define GPIOC_OCTL_OCTL2_Msk              (0x4UL)                   /*!< OCTL2 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL1_Pos              (1UL)                     /*!< OCTL1 (Bit 1) */
#define GPIOC_OCTL_OCTL1_Msk              (0x2UL)                   /*!< OCTL1 (Bitfield-Mask: 0x01) */
#define GPIOC_OCTL_OCTL0_Pos              (0UL)                     /*!< OCTL0 (Bit 0) */
#define GPIOC_OCTL_OCTL0_Msk              (0x1UL)                   /*!< OCTL0 (Bitfield-Mask: 0x01) */
/* ==========================================================  BOP  ========================================================== */
#define GPIOC_BOP_CR15_Pos                (31UL)                    /*!< CR15 (Bit 31) */
#define GPIOC_BOP_CR15_Msk                (0x80000000UL)            /*!< CR15 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR14_Pos                (30UL)                    /*!< CR14 (Bit 30) */
#define GPIOC_BOP_CR14_Msk                (0x40000000UL)            /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR13_Pos                (29UL)                    /*!< CR13 (Bit 29) */
#define GPIOC_BOP_CR13_Msk                (0x20000000UL)            /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR12_Pos                (28UL)                    /*!< CR12 (Bit 28) */
#define GPIOC_BOP_CR12_Msk                (0x10000000UL)            /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR11_Pos                (27UL)                    /*!< CR11 (Bit 27) */
#define GPIOC_BOP_CR11_Msk                (0x8000000UL)             /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR10_Pos                (26UL)                    /*!< CR10 (Bit 26) */
#define GPIOC_BOP_CR10_Msk                (0x4000000UL)             /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR9_Pos                 (25UL)                    /*!< CR9 (Bit 25) */
#define GPIOC_BOP_CR9_Msk                 (0x2000000UL)             /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR8_Pos                 (24UL)                    /*!< CR8 (Bit 24) */
#define GPIOC_BOP_CR8_Msk                 (0x1000000UL)             /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR7_Pos                 (23UL)                    /*!< CR7 (Bit 23) */
#define GPIOC_BOP_CR7_Msk                 (0x800000UL)              /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR6_Pos                 (22UL)                    /*!< CR6 (Bit 22) */
#define GPIOC_BOP_CR6_Msk                 (0x400000UL)              /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR5_Pos                 (21UL)                    /*!< CR5 (Bit 21) */
#define GPIOC_BOP_CR5_Msk                 (0x200000UL)              /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR4_Pos                 (20UL)                    /*!< CR4 (Bit 20) */
#define GPIOC_BOP_CR4_Msk                 (0x100000UL)              /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR3_Pos                 (19UL)                    /*!< CR3 (Bit 19) */
#define GPIOC_BOP_CR3_Msk                 (0x80000UL)               /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR2_Pos                 (18UL)                    /*!< CR2 (Bit 18) */
#define GPIOC_BOP_CR2_Msk                 (0x40000UL)               /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR1_Pos                 (17UL)                    /*!< CR1 (Bit 17) */
#define GPIOC_BOP_CR1_Msk                 (0x20000UL)               /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_CR0_Pos                 (16UL)                    /*!< CR0 (Bit 16) */
#define GPIOC_BOP_CR0_Msk                 (0x10000UL)               /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP15_Pos               (15UL)                    /*!< BOP15 (Bit 15) */
#define GPIOC_BOP_BOP15_Msk               (0x8000UL)                /*!< BOP15 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP14_Pos               (14UL)                    /*!< BOP14 (Bit 14) */
#define GPIOC_BOP_BOP14_Msk               (0x4000UL)                /*!< BOP14 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP13_Pos               (13UL)                    /*!< BOP13 (Bit 13) */
#define GPIOC_BOP_BOP13_Msk               (0x2000UL)                /*!< BOP13 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP12_Pos               (12UL)                    /*!< BOP12 (Bit 12) */
#define GPIOC_BOP_BOP12_Msk               (0x1000UL)                /*!< BOP12 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP11_Pos               (11UL)                    /*!< BOP11 (Bit 11) */
#define GPIOC_BOP_BOP11_Msk               (0x800UL)                 /*!< BOP11 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP10_Pos               (10UL)                    /*!< BOP10 (Bit 10) */
#define GPIOC_BOP_BOP10_Msk               (0x400UL)                 /*!< BOP10 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP9_Pos                (9UL)                     /*!< BOP9 (Bit 9) */
#define GPIOC_BOP_BOP9_Msk                (0x200UL)                 /*!< BOP9 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP8_Pos                (8UL)                     /*!< BOP8 (Bit 8) */
#define GPIOC_BOP_BOP8_Msk                (0x100UL)                 /*!< BOP8 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP7_Pos                (7UL)                     /*!< BOP7 (Bit 7) */
#define GPIOC_BOP_BOP7_Msk                (0x80UL)                  /*!< BOP7 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP6_Pos                (6UL)                     /*!< BOP6 (Bit 6) */
#define GPIOC_BOP_BOP6_Msk                (0x40UL)                  /*!< BOP6 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP5_Pos                (5UL)                     /*!< BOP5 (Bit 5) */
#define GPIOC_BOP_BOP5_Msk                (0x20UL)                  /*!< BOP5 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP4_Pos                (4UL)                     /*!< BOP4 (Bit 4) */
#define GPIOC_BOP_BOP4_Msk                (0x10UL)                  /*!< BOP4 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP3_Pos                (3UL)                     /*!< BOP3 (Bit 3) */
#define GPIOC_BOP_BOP3_Msk                (0x8UL)                   /*!< BOP3 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP2_Pos                (2UL)                     /*!< BOP2 (Bit 2) */
#define GPIOC_BOP_BOP2_Msk                (0x4UL)                   /*!< BOP2 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP1_Pos                (1UL)                     /*!< BOP1 (Bit 1) */
#define GPIOC_BOP_BOP1_Msk                (0x2UL)                   /*!< BOP1 (Bitfield-Mask: 0x01) */
#define GPIOC_BOP_BOP0_Pos                (0UL)                     /*!< BOP0 (Bit 0) */
#define GPIOC_BOP_BOP0_Msk                (0x1UL)                   /*!< BOP0 (Bitfield-Mask: 0x01) */
/* =========================================================  LOCK  ========================================================== */
#define GPIOC_LOCK_LKK_Pos                (16UL)                    /*!< LKK (Bit 16) */
#define GPIOC_LOCK_LKK_Msk                (0x10000UL)               /*!< LKK (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK15_Pos               (15UL)                    /*!< LK15 (Bit 15) */
#define GPIOC_LOCK_LK15_Msk               (0x8000UL)                /*!< LK15 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK14_Pos               (14UL)                    /*!< LK14 (Bit 14) */
#define GPIOC_LOCK_LK14_Msk               (0x4000UL)                /*!< LK14 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK13_Pos               (13UL)                    /*!< LK13 (Bit 13) */
#define GPIOC_LOCK_LK13_Msk               (0x2000UL)                /*!< LK13 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK12_Pos               (12UL)                    /*!< LK12 (Bit 12) */
#define GPIOC_LOCK_LK12_Msk               (0x1000UL)                /*!< LK12 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK11_Pos               (11UL)                    /*!< LK11 (Bit 11) */
#define GPIOC_LOCK_LK11_Msk               (0x800UL)                 /*!< LK11 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK10_Pos               (10UL)                    /*!< LK10 (Bit 10) */
#define GPIOC_LOCK_LK10_Msk               (0x400UL)                 /*!< LK10 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK9_Pos                (9UL)                     /*!< LK9 (Bit 9) */
#define GPIOC_LOCK_LK9_Msk                (0x200UL)                 /*!< LK9 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK8_Pos                (8UL)                     /*!< LK8 (Bit 8) */
#define GPIOC_LOCK_LK8_Msk                (0x100UL)                 /*!< LK8 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK7_Pos                (7UL)                     /*!< LK7 (Bit 7) */
#define GPIOC_LOCK_LK7_Msk                (0x80UL)                  /*!< LK7 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK6_Pos                (6UL)                     /*!< LK6 (Bit 6) */
#define GPIOC_LOCK_LK6_Msk                (0x40UL)                  /*!< LK6 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK5_Pos                (5UL)                     /*!< LK5 (Bit 5) */
#define GPIOC_LOCK_LK5_Msk                (0x20UL)                  /*!< LK5 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK4_Pos                (4UL)                     /*!< LK4 (Bit 4) */
#define GPIOC_LOCK_LK4_Msk                (0x10UL)                  /*!< LK4 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK3_Pos                (3UL)                     /*!< LK3 (Bit 3) */
#define GPIOC_LOCK_LK3_Msk                (0x8UL)                   /*!< LK3 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK2_Pos                (2UL)                     /*!< LK2 (Bit 2) */
#define GPIOC_LOCK_LK2_Msk                (0x4UL)                   /*!< LK2 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK1_Pos                (1UL)                     /*!< LK1 (Bit 1) */
#define GPIOC_LOCK_LK1_Msk                (0x2UL)                   /*!< LK1 (Bitfield-Mask: 0x01) */
#define GPIOC_LOCK_LK0_Pos                (0UL)                     /*!< LK0 (Bit 0) */
#define GPIOC_LOCK_LK0_Msk                (0x1UL)                   /*!< LK0 (Bitfield-Mask: 0x01) */
/* ========================================================  AFSEL0  ========================================================= */
#define GPIOC_AFSEL0_SEL7_Pos             (28UL)                    /*!< SEL7 (Bit 28) */
#define GPIOC_AFSEL0_SEL7_Msk             (0xf0000000UL)            /*!< SEL7 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL0_SEL6_Pos             (24UL)                    /*!< SEL6 (Bit 24) */
#define GPIOC_AFSEL0_SEL6_Msk             (0xf000000UL)             /*!< SEL6 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL0_SEL5_Pos             (20UL)                    /*!< SEL5 (Bit 20) */
#define GPIOC_AFSEL0_SEL5_Msk             (0xf00000UL)              /*!< SEL5 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL0_SEL4_Pos             (16UL)                    /*!< SEL4 (Bit 16) */
#define GPIOC_AFSEL0_SEL4_Msk             (0xf0000UL)               /*!< SEL4 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL0_SEL3_Pos             (12UL)                    /*!< SEL3 (Bit 12) */
#define GPIOC_AFSEL0_SEL3_Msk             (0xf000UL)                /*!< SEL3 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL0_SEL2_Pos             (8UL)                     /*!< SEL2 (Bit 8) */
#define GPIOC_AFSEL0_SEL2_Msk             (0xf00UL)                 /*!< SEL2 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL0_SEL1_Pos             (4UL)                     /*!< SEL1 (Bit 4) */
#define GPIOC_AFSEL0_SEL1_Msk             (0xf0UL)                  /*!< SEL1 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL0_SEL0_Pos             (0UL)                     /*!< SEL0 (Bit 0) */
#define GPIOC_AFSEL0_SEL0_Msk             (0xfUL)                   /*!< SEL0 (Bitfield-Mask: 0x0f) */
/* ========================================================  AFSEL1  ========================================================= */
#define GPIOC_AFSEL1_SEL15_Pos            (28UL)                    /*!< SEL15 (Bit 28) */
#define GPIOC_AFSEL1_SEL15_Msk            (0xf0000000UL)            /*!< SEL15 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL1_SEL14_Pos            (24UL)                    /*!< SEL14 (Bit 24) */
#define GPIOC_AFSEL1_SEL14_Msk            (0xf000000UL)             /*!< SEL14 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL1_SEL13_Pos            (20UL)                    /*!< SEL13 (Bit 20) */
#define GPIOC_AFSEL1_SEL13_Msk            (0xf00000UL)              /*!< SEL13 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL1_SEL12_Pos            (16UL)                    /*!< SEL12 (Bit 16) */
#define GPIOC_AFSEL1_SEL12_Msk            (0xf0000UL)               /*!< SEL12 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL1_SEL11_Pos            (12UL)                    /*!< SEL11 (Bit 12) */
#define GPIOC_AFSEL1_SEL11_Msk            (0xf000UL)                /*!< SEL11 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL1_SEL10_Pos            (8UL)                     /*!< SEL10 (Bit 8) */
#define GPIOC_AFSEL1_SEL10_Msk            (0xf00UL)                 /*!< SEL10 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL1_SEL9_Pos             (4UL)                     /*!< SEL9 (Bit 4) */
#define GPIOC_AFSEL1_SEL9_Msk             (0xf0UL)                  /*!< SEL9 (Bitfield-Mask: 0x0f) */
#define GPIOC_AFSEL1_SEL8_Pos             (0UL)                     /*!< SEL8 (Bit 0) */
#define GPIOC_AFSEL1_SEL8_Msk             (0xfUL)                   /*!< SEL8 (Bitfield-Mask: 0x0f) */
/* ==========================================================  BC  =========================================================== */
#define GPIOC_BC_CR0_Pos                  (0UL)                     /*!< CR0 (Bit 0) */
#define GPIOC_BC_CR0_Msk                  (0x1UL)                   /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR1_Pos                  (1UL)                     /*!< CR1 (Bit 1) */
#define GPIOC_BC_CR1_Msk                  (0x2UL)                   /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR2_Pos                  (2UL)                     /*!< CR2 (Bit 2) */
#define GPIOC_BC_CR2_Msk                  (0x4UL)                   /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR3_Pos                  (3UL)                     /*!< CR3 (Bit 3) */
#define GPIOC_BC_CR3_Msk                  (0x8UL)                   /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR4_Pos                  (4UL)                     /*!< CR4 (Bit 4) */
#define GPIOC_BC_CR4_Msk                  (0x10UL)                  /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR5_Pos                  (5UL)                     /*!< CR5 (Bit 5) */
#define GPIOC_BC_CR5_Msk                  (0x20UL)                  /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR6_Pos                  (6UL)                     /*!< CR6 (Bit 6) */
#define GPIOC_BC_CR6_Msk                  (0x40UL)                  /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR7_Pos                  (7UL)                     /*!< CR7 (Bit 7) */
#define GPIOC_BC_CR7_Msk                  (0x80UL)                  /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR8_Pos                  (8UL)                     /*!< CR8 (Bit 8) */
#define GPIOC_BC_CR8_Msk                  (0x100UL)                 /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR9_Pos                  (9UL)                     /*!< CR9 (Bit 9) */
#define GPIOC_BC_CR9_Msk                  (0x200UL)                 /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR10_Pos                 (10UL)                    /*!< CR10 (Bit 10) */
#define GPIOC_BC_CR10_Msk                 (0x400UL)                 /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR11_Pos                 (11UL)                    /*!< CR11 (Bit 11) */
#define GPIOC_BC_CR11_Msk                 (0x800UL)                 /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR12_Pos                 (12UL)                    /*!< CR12 (Bit 12) */
#define GPIOC_BC_CR12_Msk                 (0x1000UL)                /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR13_Pos                 (13UL)                    /*!< CR13 (Bit 13) */
#define GPIOC_BC_CR13_Msk                 (0x2000UL)                /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR14_Pos                 (14UL)                    /*!< CR14 (Bit 14) */
#define GPIOC_BC_CR14_Msk                 (0x4000UL)                /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOC_BC_CR15_Pos                 (15UL)                    /*!< CR15 (Bit 15) */
#define GPIOC_BC_CR15_Msk                 (0x8000UL)                /*!< CR15 (Bitfield-Mask: 0x01) */
/* ==========================================================  TG  =========================================================== */
#define GPIOC_TG_TG0_Pos                  (0UL)                     /*!< TG0 (Bit 0) */
#define GPIOC_TG_TG0_Msk                  (0x1UL)                   /*!< TG0 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG1_Pos                  (1UL)                     /*!< TG1 (Bit 1) */
#define GPIOC_TG_TG1_Msk                  (0x2UL)                   /*!< TG1 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG2_Pos                  (2UL)                     /*!< TG2 (Bit 2) */
#define GPIOC_TG_TG2_Msk                  (0x4UL)                   /*!< TG2 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG3_Pos                  (3UL)                     /*!< TG3 (Bit 3) */
#define GPIOC_TG_TG3_Msk                  (0x8UL)                   /*!< TG3 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG4_Pos                  (4UL)                     /*!< TG4 (Bit 4) */
#define GPIOC_TG_TG4_Msk                  (0x10UL)                  /*!< TG4 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG5_Pos                  (5UL)                     /*!< TG5 (Bit 5) */
#define GPIOC_TG_TG5_Msk                  (0x20UL)                  /*!< TG5 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG6_Pos                  (6UL)                     /*!< TG6 (Bit 6) */
#define GPIOC_TG_TG6_Msk                  (0x40UL)                  /*!< TG6 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG7_Pos                  (7UL)                     /*!< TG7 (Bit 7) */
#define GPIOC_TG_TG7_Msk                  (0x80UL)                  /*!< TG7 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG8_Pos                  (8UL)                     /*!< TG8 (Bit 8) */
#define GPIOC_TG_TG8_Msk                  (0x100UL)                 /*!< TG8 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG9_Pos                  (9UL)                     /*!< TG9 (Bit 9) */
#define GPIOC_TG_TG9_Msk                  (0x200UL)                 /*!< TG9 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG10_Pos                 (10UL)                    /*!< TG10 (Bit 10) */
#define GPIOC_TG_TG10_Msk                 (0x400UL)                 /*!< TG10 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG11_Pos                 (11UL)                    /*!< TG11 (Bit 11) */
#define GPIOC_TG_TG11_Msk                 (0x800UL)                 /*!< TG11 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG12_Pos                 (12UL)                    /*!< TG12 (Bit 12) */
#define GPIOC_TG_TG12_Msk                 (0x1000UL)                /*!< TG12 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG13_Pos                 (13UL)                    /*!< TG13 (Bit 13) */
#define GPIOC_TG_TG13_Msk                 (0x2000UL)                /*!< TG13 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG14_Pos                 (14UL)                    /*!< TG14 (Bit 14) */
#define GPIOC_TG_TG14_Msk                 (0x4000UL)                /*!< TG14 (Bitfield-Mask: 0x01) */
#define GPIOC_TG_TG15_Pos                 (15UL)                    /*!< TG15 (Bit 15) */
#define GPIOC_TG_TG15_Msk                 (0x8000UL)                /*!< TG15 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           GPIOD                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define GPIOD_CTL_CTL15_Pos               (30UL)                    /*!< CTL15 (Bit 30) */
#define GPIOD_CTL_CTL15_Msk               (0xc0000000UL)            /*!< CTL15 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL14_Pos               (28UL)                    /*!< CTL14 (Bit 28) */
#define GPIOD_CTL_CTL14_Msk               (0x30000000UL)            /*!< CTL14 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL13_Pos               (26UL)                    /*!< CTL13 (Bit 26) */
#define GPIOD_CTL_CTL13_Msk               (0xc000000UL)             /*!< CTL13 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL12_Pos               (24UL)                    /*!< CTL12 (Bit 24) */
#define GPIOD_CTL_CTL12_Msk               (0x3000000UL)             /*!< CTL12 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL11_Pos               (22UL)                    /*!< CTL11 (Bit 22) */
#define GPIOD_CTL_CTL11_Msk               (0xc00000UL)              /*!< CTL11 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL10_Pos               (20UL)                    /*!< CTL10 (Bit 20) */
#define GPIOD_CTL_CTL10_Msk               (0x300000UL)              /*!< CTL10 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL9_Pos                (18UL)                    /*!< CTL9 (Bit 18) */
#define GPIOD_CTL_CTL9_Msk                (0xc0000UL)               /*!< CTL9 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL8_Pos                (16UL)                    /*!< CTL8 (Bit 16) */
#define GPIOD_CTL_CTL8_Msk                (0x30000UL)               /*!< CTL8 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL7_Pos                (14UL)                    /*!< CTL7 (Bit 14) */
#define GPIOD_CTL_CTL7_Msk                (0xc000UL)                /*!< CTL7 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL6_Pos                (12UL)                    /*!< CTL6 (Bit 12) */
#define GPIOD_CTL_CTL6_Msk                (0x3000UL)                /*!< CTL6 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL5_Pos                (10UL)                    /*!< CTL5 (Bit 10) */
#define GPIOD_CTL_CTL5_Msk                (0xc00UL)                 /*!< CTL5 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL4_Pos                (8UL)                     /*!< CTL4 (Bit 8) */
#define GPIOD_CTL_CTL4_Msk                (0x300UL)                 /*!< CTL4 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL3_Pos                (6UL)                     /*!< CTL3 (Bit 6) */
#define GPIOD_CTL_CTL3_Msk                (0xc0UL)                  /*!< CTL3 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL2_Pos                (4UL)                     /*!< CTL2 (Bit 4) */
#define GPIOD_CTL_CTL2_Msk                (0x30UL)                  /*!< CTL2 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL1_Pos                (2UL)                     /*!< CTL1 (Bit 2) */
#define GPIOD_CTL_CTL1_Msk                (0xcUL)                   /*!< CTL1 (Bitfield-Mask: 0x03) */
#define GPIOD_CTL_CTL0_Pos                (0UL)                     /*!< CTL0 (Bit 0) */
#define GPIOD_CTL_CTL0_Msk                (0x3UL)                   /*!< CTL0 (Bitfield-Mask: 0x03) */
/* =========================================================  OMODE  ========================================================= */
#define GPIOD_OMODE_OM15_Pos              (15UL)                    /*!< OM15 (Bit 15) */
#define GPIOD_OMODE_OM15_Msk              (0x8000UL)                /*!< OM15 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM14_Pos              (14UL)                    /*!< OM14 (Bit 14) */
#define GPIOD_OMODE_OM14_Msk              (0x4000UL)                /*!< OM14 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM13_Pos              (13UL)                    /*!< OM13 (Bit 13) */
#define GPIOD_OMODE_OM13_Msk              (0x2000UL)                /*!< OM13 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM12_Pos              (12UL)                    /*!< OM12 (Bit 12) */
#define GPIOD_OMODE_OM12_Msk              (0x1000UL)                /*!< OM12 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM11_Pos              (11UL)                    /*!< OM11 (Bit 11) */
#define GPIOD_OMODE_OM11_Msk              (0x800UL)                 /*!< OM11 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM10_Pos              (10UL)                    /*!< OM10 (Bit 10) */
#define GPIOD_OMODE_OM10_Msk              (0x400UL)                 /*!< OM10 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM9_Pos               (9UL)                     /*!< OM9 (Bit 9) */
#define GPIOD_OMODE_OM9_Msk               (0x200UL)                 /*!< OM9 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM8_Pos               (8UL)                     /*!< OM8 (Bit 8) */
#define GPIOD_OMODE_OM8_Msk               (0x100UL)                 /*!< OM8 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM7_Pos               (7UL)                     /*!< OM7 (Bit 7) */
#define GPIOD_OMODE_OM7_Msk               (0x80UL)                  /*!< OM7 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM6_Pos               (6UL)                     /*!< OM6 (Bit 6) */
#define GPIOD_OMODE_OM6_Msk               (0x40UL)                  /*!< OM6 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM5_Pos               (5UL)                     /*!< OM5 (Bit 5) */
#define GPIOD_OMODE_OM5_Msk               (0x20UL)                  /*!< OM5 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM4_Pos               (4UL)                     /*!< OM4 (Bit 4) */
#define GPIOD_OMODE_OM4_Msk               (0x10UL)                  /*!< OM4 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM3_Pos               (3UL)                     /*!< OM3 (Bit 3) */
#define GPIOD_OMODE_OM3_Msk               (0x8UL)                   /*!< OM3 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM2_Pos               (2UL)                     /*!< OM2 (Bit 2) */
#define GPIOD_OMODE_OM2_Msk               (0x4UL)                   /*!< OM2 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM1_Pos               (1UL)                     /*!< OM1 (Bit 1) */
#define GPIOD_OMODE_OM1_Msk               (0x2UL)                   /*!< OM1 (Bitfield-Mask: 0x01) */
#define GPIOD_OMODE_OM0_Pos               (0UL)                     /*!< OM0 (Bit 0) */
#define GPIOD_OMODE_OM0_Msk               (0x1UL)                   /*!< OM0 (Bitfield-Mask: 0x01) */
/* =========================================================  OSPD  ========================================================== */
#define GPIOD_OSPD_OSPD15_Pos             (30UL)                    /*!< OSPD15 (Bit 30) */
#define GPIOD_OSPD_OSPD15_Msk             (0xc0000000UL)            /*!< OSPD15 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD14_Pos             (28UL)                    /*!< OSPD14 (Bit 28) */
#define GPIOD_OSPD_OSPD14_Msk             (0x30000000UL)            /*!< OSPD14 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD13_Pos             (26UL)                    /*!< OSPD13 (Bit 26) */
#define GPIOD_OSPD_OSPD13_Msk             (0xc000000UL)             /*!< OSPD13 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD12_Pos             (24UL)                    /*!< OSPD12 (Bit 24) */
#define GPIOD_OSPD_OSPD12_Msk             (0x3000000UL)             /*!< OSPD12 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD11_Pos             (22UL)                    /*!< OSPD11 (Bit 22) */
#define GPIOD_OSPD_OSPD11_Msk             (0xc00000UL)              /*!< OSPD11 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD10_Pos             (20UL)                    /*!< OSPD10 (Bit 20) */
#define GPIOD_OSPD_OSPD10_Msk             (0x300000UL)              /*!< OSPD10 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD9_Pos              (18UL)                    /*!< OSPD9 (Bit 18) */
#define GPIOD_OSPD_OSPD9_Msk              (0xc0000UL)               /*!< OSPD9 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD8_Pos              (16UL)                    /*!< OSPD8 (Bit 16) */
#define GPIOD_OSPD_OSPD8_Msk              (0x30000UL)               /*!< OSPD8 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD7_Pos              (14UL)                    /*!< OSPD7 (Bit 14) */
#define GPIOD_OSPD_OSPD7_Msk              (0xc000UL)                /*!< OSPD7 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD6_Pos              (12UL)                    /*!< OSPD6 (Bit 12) */
#define GPIOD_OSPD_OSPD6_Msk              (0x3000UL)                /*!< OSPD6 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD5_Pos              (10UL)                    /*!< OSPD5 (Bit 10) */
#define GPIOD_OSPD_OSPD5_Msk              (0xc00UL)                 /*!< OSPD5 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD4_Pos              (8UL)                     /*!< OSPD4 (Bit 8) */
#define GPIOD_OSPD_OSPD4_Msk              (0x300UL)                 /*!< OSPD4 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD3_Pos              (6UL)                     /*!< OSPD3 (Bit 6) */
#define GPIOD_OSPD_OSPD3_Msk              (0xc0UL)                  /*!< OSPD3 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD2_Pos              (4UL)                     /*!< OSPD2 (Bit 4) */
#define GPIOD_OSPD_OSPD2_Msk              (0x30UL)                  /*!< OSPD2 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD1_Pos              (2UL)                     /*!< OSPD1 (Bit 2) */
#define GPIOD_OSPD_OSPD1_Msk              (0xcUL)                   /*!< OSPD1 (Bitfield-Mask: 0x03) */
#define GPIOD_OSPD_OSPD0_Pos              (0UL)                     /*!< OSPD0 (Bit 0) */
#define GPIOD_OSPD_OSPD0_Msk              (0x3UL)                   /*!< OSPD0 (Bitfield-Mask: 0x03) */
/* ==========================================================  PUD  ========================================================== */
#define GPIOD_PUD_PUD15_Pos               (30UL)                    /*!< PUD15 (Bit 30) */
#define GPIOD_PUD_PUD15_Msk               (0xc0000000UL)            /*!< PUD15 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD14_Pos               (28UL)                    /*!< PUD14 (Bit 28) */
#define GPIOD_PUD_PUD14_Msk               (0x30000000UL)            /*!< PUD14 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD13_Pos               (26UL)                    /*!< PUD13 (Bit 26) */
#define GPIOD_PUD_PUD13_Msk               (0xc000000UL)             /*!< PUD13 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD12_Pos               (24UL)                    /*!< PUD12 (Bit 24) */
#define GPIOD_PUD_PUD12_Msk               (0x3000000UL)             /*!< PUD12 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD11_Pos               (22UL)                    /*!< PUD11 (Bit 22) */
#define GPIOD_PUD_PUD11_Msk               (0xc00000UL)              /*!< PUD11 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD10_Pos               (20UL)                    /*!< PUD10 (Bit 20) */
#define GPIOD_PUD_PUD10_Msk               (0x300000UL)              /*!< PUD10 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD9_Pos                (18UL)                    /*!< PUD9 (Bit 18) */
#define GPIOD_PUD_PUD9_Msk                (0xc0000UL)               /*!< PUD9 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD8_Pos                (16UL)                    /*!< PUD8 (Bit 16) */
#define GPIOD_PUD_PUD8_Msk                (0x30000UL)               /*!< PUD8 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD7_Pos                (14UL)                    /*!< PUD7 (Bit 14) */
#define GPIOD_PUD_PUD7_Msk                (0xc000UL)                /*!< PUD7 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD6_Pos                (12UL)                    /*!< PUD6 (Bit 12) */
#define GPIOD_PUD_PUD6_Msk                (0x3000UL)                /*!< PUD6 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD5_Pos                (10UL)                    /*!< PUD5 (Bit 10) */
#define GPIOD_PUD_PUD5_Msk                (0xc00UL)                 /*!< PUD5 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD4_Pos                (8UL)                     /*!< PUD4 (Bit 8) */
#define GPIOD_PUD_PUD4_Msk                (0x300UL)                 /*!< PUD4 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD3_Pos                (6UL)                     /*!< PUD3 (Bit 6) */
#define GPIOD_PUD_PUD3_Msk                (0xc0UL)                  /*!< PUD3 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD2_Pos                (4UL)                     /*!< PUD2 (Bit 4) */
#define GPIOD_PUD_PUD2_Msk                (0x30UL)                  /*!< PUD2 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD1_Pos                (2UL)                     /*!< PUD1 (Bit 2) */
#define GPIOD_PUD_PUD1_Msk                (0xcUL)                   /*!< PUD1 (Bitfield-Mask: 0x03) */
#define GPIOD_PUD_PUD0_Pos                (0UL)                     /*!< PUD0 (Bit 0) */
#define GPIOD_PUD_PUD0_Msk                (0x3UL)                   /*!< PUD0 (Bitfield-Mask: 0x03) */
/* =========================================================  ISTAT  ========================================================= */
#define GPIOD_ISTAT_ISTAT15_Pos           (15UL)                    /*!< ISTAT15 (Bit 15) */
#define GPIOD_ISTAT_ISTAT15_Msk           (0x8000UL)                /*!< ISTAT15 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT14_Pos           (14UL)                    /*!< ISTAT14 (Bit 14) */
#define GPIOD_ISTAT_ISTAT14_Msk           (0x4000UL)                /*!< ISTAT14 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT13_Pos           (13UL)                    /*!< ISTAT13 (Bit 13) */
#define GPIOD_ISTAT_ISTAT13_Msk           (0x2000UL)                /*!< ISTAT13 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT12_Pos           (12UL)                    /*!< ISTAT12 (Bit 12) */
#define GPIOD_ISTAT_ISTAT12_Msk           (0x1000UL)                /*!< ISTAT12 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT11_Pos           (11UL)                    /*!< ISTAT11 (Bit 11) */
#define GPIOD_ISTAT_ISTAT11_Msk           (0x800UL)                 /*!< ISTAT11 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT10_Pos           (10UL)                    /*!< ISTAT10 (Bit 10) */
#define GPIOD_ISTAT_ISTAT10_Msk           (0x400UL)                 /*!< ISTAT10 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT9_Pos            (9UL)                     /*!< ISTAT9 (Bit 9) */
#define GPIOD_ISTAT_ISTAT9_Msk            (0x200UL)                 /*!< ISTAT9 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT8_Pos            (8UL)                     /*!< ISTAT8 (Bit 8) */
#define GPIOD_ISTAT_ISTAT8_Msk            (0x100UL)                 /*!< ISTAT8 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT7_Pos            (7UL)                     /*!< ISTAT7 (Bit 7) */
#define GPIOD_ISTAT_ISTAT7_Msk            (0x80UL)                  /*!< ISTAT7 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT6_Pos            (6UL)                     /*!< ISTAT6 (Bit 6) */
#define GPIOD_ISTAT_ISTAT6_Msk            (0x40UL)                  /*!< ISTAT6 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT5_Pos            (5UL)                     /*!< ISTAT5 (Bit 5) */
#define GPIOD_ISTAT_ISTAT5_Msk            (0x20UL)                  /*!< ISTAT5 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT4_Pos            (4UL)                     /*!< ISTAT4 (Bit 4) */
#define GPIOD_ISTAT_ISTAT4_Msk            (0x10UL)                  /*!< ISTAT4 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT3_Pos            (3UL)                     /*!< ISTAT3 (Bit 3) */
#define GPIOD_ISTAT_ISTAT3_Msk            (0x8UL)                   /*!< ISTAT3 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT2_Pos            (2UL)                     /*!< ISTAT2 (Bit 2) */
#define GPIOD_ISTAT_ISTAT2_Msk            (0x4UL)                   /*!< ISTAT2 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT1_Pos            (1UL)                     /*!< ISTAT1 (Bit 1) */
#define GPIOD_ISTAT_ISTAT1_Msk            (0x2UL)                   /*!< ISTAT1 (Bitfield-Mask: 0x01) */
#define GPIOD_ISTAT_ISTAT0_Pos            (0UL)                     /*!< ISTAT0 (Bit 0) */
#define GPIOD_ISTAT_ISTAT0_Msk            (0x1UL)                   /*!< ISTAT0 (Bitfield-Mask: 0x01) */
/* =========================================================  OCTL  ========================================================== */
#define GPIOD_OCTL_OCTL15_Pos             (15UL)                    /*!< OCTL15 (Bit 15) */
#define GPIOD_OCTL_OCTL15_Msk             (0x8000UL)                /*!< OCTL15 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL14_Pos             (14UL)                    /*!< OCTL14 (Bit 14) */
#define GPIOD_OCTL_OCTL14_Msk             (0x4000UL)                /*!< OCTL14 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL13_Pos             (13UL)                    /*!< OCTL13 (Bit 13) */
#define GPIOD_OCTL_OCTL13_Msk             (0x2000UL)                /*!< OCTL13 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL12_Pos             (12UL)                    /*!< OCTL12 (Bit 12) */
#define GPIOD_OCTL_OCTL12_Msk             (0x1000UL)                /*!< OCTL12 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL11_Pos             (11UL)                    /*!< OCTL11 (Bit 11) */
#define GPIOD_OCTL_OCTL11_Msk             (0x800UL)                 /*!< OCTL11 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL10_Pos             (10UL)                    /*!< OCTL10 (Bit 10) */
#define GPIOD_OCTL_OCTL10_Msk             (0x400UL)                 /*!< OCTL10 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL9_Pos              (9UL)                     /*!< OCTL9 (Bit 9) */
#define GPIOD_OCTL_OCTL9_Msk              (0x200UL)                 /*!< OCTL9 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL8_Pos              (8UL)                     /*!< OCTL8 (Bit 8) */
#define GPIOD_OCTL_OCTL8_Msk              (0x100UL)                 /*!< OCTL8 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL7_Pos              (7UL)                     /*!< OCTL7 (Bit 7) */
#define GPIOD_OCTL_OCTL7_Msk              (0x80UL)                  /*!< OCTL7 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL6_Pos              (6UL)                     /*!< OCTL6 (Bit 6) */
#define GPIOD_OCTL_OCTL6_Msk              (0x40UL)                  /*!< OCTL6 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL5_Pos              (5UL)                     /*!< OCTL5 (Bit 5) */
#define GPIOD_OCTL_OCTL5_Msk              (0x20UL)                  /*!< OCTL5 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL4_Pos              (4UL)                     /*!< OCTL4 (Bit 4) */
#define GPIOD_OCTL_OCTL4_Msk              (0x10UL)                  /*!< OCTL4 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL3_Pos              (3UL)                     /*!< OCTL3 (Bit 3) */
#define GPIOD_OCTL_OCTL3_Msk              (0x8UL)                   /*!< OCTL3 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL2_Pos              (2UL)                     /*!< OCTL2 (Bit 2) */
#define GPIOD_OCTL_OCTL2_Msk              (0x4UL)                   /*!< OCTL2 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL1_Pos              (1UL)                     /*!< OCTL1 (Bit 1) */
#define GPIOD_OCTL_OCTL1_Msk              (0x2UL)                   /*!< OCTL1 (Bitfield-Mask: 0x01) */
#define GPIOD_OCTL_OCTL0_Pos              (0UL)                     /*!< OCTL0 (Bit 0) */
#define GPIOD_OCTL_OCTL0_Msk              (0x1UL)                   /*!< OCTL0 (Bitfield-Mask: 0x01) */
/* ==========================================================  BOP  ========================================================== */
#define GPIOD_BOP_CR15_Pos                (31UL)                    /*!< CR15 (Bit 31) */
#define GPIOD_BOP_CR15_Msk                (0x80000000UL)            /*!< CR15 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR14_Pos                (30UL)                    /*!< CR14 (Bit 30) */
#define GPIOD_BOP_CR14_Msk                (0x40000000UL)            /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR13_Pos                (29UL)                    /*!< CR13 (Bit 29) */
#define GPIOD_BOP_CR13_Msk                (0x20000000UL)            /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR12_Pos                (28UL)                    /*!< CR12 (Bit 28) */
#define GPIOD_BOP_CR12_Msk                (0x10000000UL)            /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR11_Pos                (27UL)                    /*!< CR11 (Bit 27) */
#define GPIOD_BOP_CR11_Msk                (0x8000000UL)             /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR10_Pos                (26UL)                    /*!< CR10 (Bit 26) */
#define GPIOD_BOP_CR10_Msk                (0x4000000UL)             /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR9_Pos                 (25UL)                    /*!< CR9 (Bit 25) */
#define GPIOD_BOP_CR9_Msk                 (0x2000000UL)             /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR8_Pos                 (24UL)                    /*!< CR8 (Bit 24) */
#define GPIOD_BOP_CR8_Msk                 (0x1000000UL)             /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR7_Pos                 (23UL)                    /*!< CR7 (Bit 23) */
#define GPIOD_BOP_CR7_Msk                 (0x800000UL)              /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR6_Pos                 (22UL)                    /*!< CR6 (Bit 22) */
#define GPIOD_BOP_CR6_Msk                 (0x400000UL)              /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR5_Pos                 (21UL)                    /*!< CR5 (Bit 21) */
#define GPIOD_BOP_CR5_Msk                 (0x200000UL)              /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR4_Pos                 (20UL)                    /*!< CR4 (Bit 20) */
#define GPIOD_BOP_CR4_Msk                 (0x100000UL)              /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR3_Pos                 (19UL)                    /*!< CR3 (Bit 19) */
#define GPIOD_BOP_CR3_Msk                 (0x80000UL)               /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR2_Pos                 (18UL)                    /*!< CR2 (Bit 18) */
#define GPIOD_BOP_CR2_Msk                 (0x40000UL)               /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR1_Pos                 (17UL)                    /*!< CR1 (Bit 17) */
#define GPIOD_BOP_CR1_Msk                 (0x20000UL)               /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_CR0_Pos                 (16UL)                    /*!< CR0 (Bit 16) */
#define GPIOD_BOP_CR0_Msk                 (0x10000UL)               /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP15_Pos               (15UL)                    /*!< BOP15 (Bit 15) */
#define GPIOD_BOP_BOP15_Msk               (0x8000UL)                /*!< BOP15 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP14_Pos               (14UL)                    /*!< BOP14 (Bit 14) */
#define GPIOD_BOP_BOP14_Msk               (0x4000UL)                /*!< BOP14 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP13_Pos               (13UL)                    /*!< BOP13 (Bit 13) */
#define GPIOD_BOP_BOP13_Msk               (0x2000UL)                /*!< BOP13 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP12_Pos               (12UL)                    /*!< BOP12 (Bit 12) */
#define GPIOD_BOP_BOP12_Msk               (0x1000UL)                /*!< BOP12 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP11_Pos               (11UL)                    /*!< BOP11 (Bit 11) */
#define GPIOD_BOP_BOP11_Msk               (0x800UL)                 /*!< BOP11 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP10_Pos               (10UL)                    /*!< BOP10 (Bit 10) */
#define GPIOD_BOP_BOP10_Msk               (0x400UL)                 /*!< BOP10 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP9_Pos                (9UL)                     /*!< BOP9 (Bit 9) */
#define GPIOD_BOP_BOP9_Msk                (0x200UL)                 /*!< BOP9 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP8_Pos                (8UL)                     /*!< BOP8 (Bit 8) */
#define GPIOD_BOP_BOP8_Msk                (0x100UL)                 /*!< BOP8 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP7_Pos                (7UL)                     /*!< BOP7 (Bit 7) */
#define GPIOD_BOP_BOP7_Msk                (0x80UL)                  /*!< BOP7 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP6_Pos                (6UL)                     /*!< BOP6 (Bit 6) */
#define GPIOD_BOP_BOP6_Msk                (0x40UL)                  /*!< BOP6 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP5_Pos                (5UL)                     /*!< BOP5 (Bit 5) */
#define GPIOD_BOP_BOP5_Msk                (0x20UL)                  /*!< BOP5 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP4_Pos                (4UL)                     /*!< BOP4 (Bit 4) */
#define GPIOD_BOP_BOP4_Msk                (0x10UL)                  /*!< BOP4 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP3_Pos                (3UL)                     /*!< BOP3 (Bit 3) */
#define GPIOD_BOP_BOP3_Msk                (0x8UL)                   /*!< BOP3 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP2_Pos                (2UL)                     /*!< BOP2 (Bit 2) */
#define GPIOD_BOP_BOP2_Msk                (0x4UL)                   /*!< BOP2 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP1_Pos                (1UL)                     /*!< BOP1 (Bit 1) */
#define GPIOD_BOP_BOP1_Msk                (0x2UL)                   /*!< BOP1 (Bitfield-Mask: 0x01) */
#define GPIOD_BOP_BOP0_Pos                (0UL)                     /*!< BOP0 (Bit 0) */
#define GPIOD_BOP_BOP0_Msk                (0x1UL)                   /*!< BOP0 (Bitfield-Mask: 0x01) */
/* =========================================================  LOCK  ========================================================== */
#define GPIOD_LOCK_LKK_Pos                (16UL)                    /*!< LKK (Bit 16) */
#define GPIOD_LOCK_LKK_Msk                (0x10000UL)               /*!< LKK (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK15_Pos               (15UL)                    /*!< LK15 (Bit 15) */
#define GPIOD_LOCK_LK15_Msk               (0x8000UL)                /*!< LK15 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK14_Pos               (14UL)                    /*!< LK14 (Bit 14) */
#define GPIOD_LOCK_LK14_Msk               (0x4000UL)                /*!< LK14 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK13_Pos               (13UL)                    /*!< LK13 (Bit 13) */
#define GPIOD_LOCK_LK13_Msk               (0x2000UL)                /*!< LK13 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK12_Pos               (12UL)                    /*!< LK12 (Bit 12) */
#define GPIOD_LOCK_LK12_Msk               (0x1000UL)                /*!< LK12 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK11_Pos               (11UL)                    /*!< LK11 (Bit 11) */
#define GPIOD_LOCK_LK11_Msk               (0x800UL)                 /*!< LK11 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK10_Pos               (10UL)                    /*!< LK10 (Bit 10) */
#define GPIOD_LOCK_LK10_Msk               (0x400UL)                 /*!< LK10 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK9_Pos                (9UL)                     /*!< LK9 (Bit 9) */
#define GPIOD_LOCK_LK9_Msk                (0x200UL)                 /*!< LK9 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK8_Pos                (8UL)                     /*!< LK8 (Bit 8) */
#define GPIOD_LOCK_LK8_Msk                (0x100UL)                 /*!< LK8 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK7_Pos                (7UL)                     /*!< LK7 (Bit 7) */
#define GPIOD_LOCK_LK7_Msk                (0x80UL)                  /*!< LK7 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK6_Pos                (6UL)                     /*!< LK6 (Bit 6) */
#define GPIOD_LOCK_LK6_Msk                (0x40UL)                  /*!< LK6 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK5_Pos                (5UL)                     /*!< LK5 (Bit 5) */
#define GPIOD_LOCK_LK5_Msk                (0x20UL)                  /*!< LK5 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK4_Pos                (4UL)                     /*!< LK4 (Bit 4) */
#define GPIOD_LOCK_LK4_Msk                (0x10UL)                  /*!< LK4 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK3_Pos                (3UL)                     /*!< LK3 (Bit 3) */
#define GPIOD_LOCK_LK3_Msk                (0x8UL)                   /*!< LK3 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK2_Pos                (2UL)                     /*!< LK2 (Bit 2) */
#define GPIOD_LOCK_LK2_Msk                (0x4UL)                   /*!< LK2 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK1_Pos                (1UL)                     /*!< LK1 (Bit 1) */
#define GPIOD_LOCK_LK1_Msk                (0x2UL)                   /*!< LK1 (Bitfield-Mask: 0x01) */
#define GPIOD_LOCK_LK0_Pos                (0UL)                     /*!< LK0 (Bit 0) */
#define GPIOD_LOCK_LK0_Msk                (0x1UL)                   /*!< LK0 (Bitfield-Mask: 0x01) */
/* ========================================================  AFSEL0  ========================================================= */
#define GPIOD_AFSEL0_SEL7_Pos             (28UL)                    /*!< SEL7 (Bit 28) */
#define GPIOD_AFSEL0_SEL7_Msk             (0xf0000000UL)            /*!< SEL7 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL0_SEL6_Pos             (24UL)                    /*!< SEL6 (Bit 24) */
#define GPIOD_AFSEL0_SEL6_Msk             (0xf000000UL)             /*!< SEL6 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL0_SEL5_Pos             (20UL)                    /*!< SEL5 (Bit 20) */
#define GPIOD_AFSEL0_SEL5_Msk             (0xf00000UL)              /*!< SEL5 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL0_SEL4_Pos             (16UL)                    /*!< SEL4 (Bit 16) */
#define GPIOD_AFSEL0_SEL4_Msk             (0xf0000UL)               /*!< SEL4 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL0_SEL3_Pos             (12UL)                    /*!< SEL3 (Bit 12) */
#define GPIOD_AFSEL0_SEL3_Msk             (0xf000UL)                /*!< SEL3 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL0_SEL2_Pos             (8UL)                     /*!< SEL2 (Bit 8) */
#define GPIOD_AFSEL0_SEL2_Msk             (0xf00UL)                 /*!< SEL2 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL0_SEL1_Pos             (4UL)                     /*!< SEL1 (Bit 4) */
#define GPIOD_AFSEL0_SEL1_Msk             (0xf0UL)                  /*!< SEL1 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL0_SEL0_Pos             (0UL)                     /*!< SEL0 (Bit 0) */
#define GPIOD_AFSEL0_SEL0_Msk             (0xfUL)                   /*!< SEL0 (Bitfield-Mask: 0x0f) */
/* ========================================================  AFSEL1  ========================================================= */
#define GPIOD_AFSEL1_SEL15_Pos            (28UL)                    /*!< SEL15 (Bit 28) */
#define GPIOD_AFSEL1_SEL15_Msk            (0xf0000000UL)            /*!< SEL15 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL1_SEL14_Pos            (24UL)                    /*!< SEL14 (Bit 24) */
#define GPIOD_AFSEL1_SEL14_Msk            (0xf000000UL)             /*!< SEL14 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL1_SEL13_Pos            (20UL)                    /*!< SEL13 (Bit 20) */
#define GPIOD_AFSEL1_SEL13_Msk            (0xf00000UL)              /*!< SEL13 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL1_SEL12_Pos            (16UL)                    /*!< SEL12 (Bit 16) */
#define GPIOD_AFSEL1_SEL12_Msk            (0xf0000UL)               /*!< SEL12 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL1_SEL11_Pos            (12UL)                    /*!< SEL11 (Bit 12) */
#define GPIOD_AFSEL1_SEL11_Msk            (0xf000UL)                /*!< SEL11 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL1_SEL10_Pos            (8UL)                     /*!< SEL10 (Bit 8) */
#define GPIOD_AFSEL1_SEL10_Msk            (0xf00UL)                 /*!< SEL10 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL1_SEL9_Pos             (4UL)                     /*!< SEL9 (Bit 4) */
#define GPIOD_AFSEL1_SEL9_Msk             (0xf0UL)                  /*!< SEL9 (Bitfield-Mask: 0x0f) */
#define GPIOD_AFSEL1_SEL8_Pos             (0UL)                     /*!< SEL8 (Bit 0) */
#define GPIOD_AFSEL1_SEL8_Msk             (0xfUL)                   /*!< SEL8 (Bitfield-Mask: 0x0f) */
/* ==========================================================  BC  =========================================================== */
#define GPIOD_BC_CR0_Pos                  (0UL)                     /*!< CR0 (Bit 0) */
#define GPIOD_BC_CR0_Msk                  (0x1UL)                   /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR1_Pos                  (1UL)                     /*!< CR1 (Bit 1) */
#define GPIOD_BC_CR1_Msk                  (0x2UL)                   /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR2_Pos                  (2UL)                     /*!< CR2 (Bit 2) */
#define GPIOD_BC_CR2_Msk                  (0x4UL)                   /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR3_Pos                  (3UL)                     /*!< CR3 (Bit 3) */
#define GPIOD_BC_CR3_Msk                  (0x8UL)                   /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR4_Pos                  (4UL)                     /*!< CR4 (Bit 4) */
#define GPIOD_BC_CR4_Msk                  (0x10UL)                  /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR5_Pos                  (5UL)                     /*!< CR5 (Bit 5) */
#define GPIOD_BC_CR5_Msk                  (0x20UL)                  /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR6_Pos                  (6UL)                     /*!< CR6 (Bit 6) */
#define GPIOD_BC_CR6_Msk                  (0x40UL)                  /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR7_Pos                  (7UL)                     /*!< CR7 (Bit 7) */
#define GPIOD_BC_CR7_Msk                  (0x80UL)                  /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR8_Pos                  (8UL)                     /*!< CR8 (Bit 8) */
#define GPIOD_BC_CR8_Msk                  (0x100UL)                 /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR9_Pos                  (9UL)                     /*!< CR9 (Bit 9) */
#define GPIOD_BC_CR9_Msk                  (0x200UL)                 /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR10_Pos                 (10UL)                    /*!< CR10 (Bit 10) */
#define GPIOD_BC_CR10_Msk                 (0x400UL)                 /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR11_Pos                 (11UL)                    /*!< CR11 (Bit 11) */
#define GPIOD_BC_CR11_Msk                 (0x800UL)                 /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR12_Pos                 (12UL)                    /*!< CR12 (Bit 12) */
#define GPIOD_BC_CR12_Msk                 (0x1000UL)                /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR13_Pos                 (13UL)                    /*!< CR13 (Bit 13) */
#define GPIOD_BC_CR13_Msk                 (0x2000UL)                /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR14_Pos                 (14UL)                    /*!< CR14 (Bit 14) */
#define GPIOD_BC_CR14_Msk                 (0x4000UL)                /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOD_BC_CR15_Pos                 (15UL)                    /*!< CR15 (Bit 15) */
#define GPIOD_BC_CR15_Msk                 (0x8000UL)                /*!< CR15 (Bitfield-Mask: 0x01) */
/* ==========================================================  TG  =========================================================== */
#define GPIOD_TG_TG0_Pos                  (0UL)                     /*!< TG0 (Bit 0) */
#define GPIOD_TG_TG0_Msk                  (0x1UL)                   /*!< TG0 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG1_Pos                  (1UL)                     /*!< TG1 (Bit 1) */
#define GPIOD_TG_TG1_Msk                  (0x2UL)                   /*!< TG1 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG2_Pos                  (2UL)                     /*!< TG2 (Bit 2) */
#define GPIOD_TG_TG2_Msk                  (0x4UL)                   /*!< TG2 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG3_Pos                  (3UL)                     /*!< TG3 (Bit 3) */
#define GPIOD_TG_TG3_Msk                  (0x8UL)                   /*!< TG3 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG4_Pos                  (4UL)                     /*!< TG4 (Bit 4) */
#define GPIOD_TG_TG4_Msk                  (0x10UL)                  /*!< TG4 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG5_Pos                  (5UL)                     /*!< TG5 (Bit 5) */
#define GPIOD_TG_TG5_Msk                  (0x20UL)                  /*!< TG5 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG6_Pos                  (6UL)                     /*!< TG6 (Bit 6) */
#define GPIOD_TG_TG6_Msk                  (0x40UL)                  /*!< TG6 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG7_Pos                  (7UL)                     /*!< TG7 (Bit 7) */
#define GPIOD_TG_TG7_Msk                  (0x80UL)                  /*!< TG7 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG8_Pos                  (8UL)                     /*!< TG8 (Bit 8) */
#define GPIOD_TG_TG8_Msk                  (0x100UL)                 /*!< TG8 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG9_Pos                  (9UL)                     /*!< TG9 (Bit 9) */
#define GPIOD_TG_TG9_Msk                  (0x200UL)                 /*!< TG9 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG10_Pos                 (10UL)                    /*!< TG10 (Bit 10) */
#define GPIOD_TG_TG10_Msk                 (0x400UL)                 /*!< TG10 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG11_Pos                 (11UL)                    /*!< TG11 (Bit 11) */
#define GPIOD_TG_TG11_Msk                 (0x800UL)                 /*!< TG11 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG12_Pos                 (12UL)                    /*!< TG12 (Bit 12) */
#define GPIOD_TG_TG12_Msk                 (0x1000UL)                /*!< TG12 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG13_Pos                 (13UL)                    /*!< TG13 (Bit 13) */
#define GPIOD_TG_TG13_Msk                 (0x2000UL)                /*!< TG13 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG14_Pos                 (14UL)                    /*!< TG14 (Bit 14) */
#define GPIOD_TG_TG14_Msk                 (0x4000UL)                /*!< TG14 (Bitfield-Mask: 0x01) */
#define GPIOD_TG_TG15_Pos                 (15UL)                    /*!< TG15 (Bit 15) */
#define GPIOD_TG_TG15_Msk                 (0x8000UL)                /*!< TG15 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           GPIOE                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define GPIOE_CTL_CTL15_Pos               (30UL)                    /*!< CTL15 (Bit 30) */
#define GPIOE_CTL_CTL15_Msk               (0xc0000000UL)            /*!< CTL15 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL14_Pos               (28UL)                    /*!< CTL14 (Bit 28) */
#define GPIOE_CTL_CTL14_Msk               (0x30000000UL)            /*!< CTL14 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL13_Pos               (26UL)                    /*!< CTL13 (Bit 26) */
#define GPIOE_CTL_CTL13_Msk               (0xc000000UL)             /*!< CTL13 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL12_Pos               (24UL)                    /*!< CTL12 (Bit 24) */
#define GPIOE_CTL_CTL12_Msk               (0x3000000UL)             /*!< CTL12 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL11_Pos               (22UL)                    /*!< CTL11 (Bit 22) */
#define GPIOE_CTL_CTL11_Msk               (0xc00000UL)              /*!< CTL11 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL10_Pos               (20UL)                    /*!< CTL10 (Bit 20) */
#define GPIOE_CTL_CTL10_Msk               (0x300000UL)              /*!< CTL10 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL9_Pos                (18UL)                    /*!< CTL9 (Bit 18) */
#define GPIOE_CTL_CTL9_Msk                (0xc0000UL)               /*!< CTL9 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL8_Pos                (16UL)                    /*!< CTL8 (Bit 16) */
#define GPIOE_CTL_CTL8_Msk                (0x30000UL)               /*!< CTL8 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL7_Pos                (14UL)                    /*!< CTL7 (Bit 14) */
#define GPIOE_CTL_CTL7_Msk                (0xc000UL)                /*!< CTL7 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL6_Pos                (12UL)                    /*!< CTL6 (Bit 12) */
#define GPIOE_CTL_CTL6_Msk                (0x3000UL)                /*!< CTL6 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL5_Pos                (10UL)                    /*!< CTL5 (Bit 10) */
#define GPIOE_CTL_CTL5_Msk                (0xc00UL)                 /*!< CTL5 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL4_Pos                (8UL)                     /*!< CTL4 (Bit 8) */
#define GPIOE_CTL_CTL4_Msk                (0x300UL)                 /*!< CTL4 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL3_Pos                (6UL)                     /*!< CTL3 (Bit 6) */
#define GPIOE_CTL_CTL3_Msk                (0xc0UL)                  /*!< CTL3 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL2_Pos                (4UL)                     /*!< CTL2 (Bit 4) */
#define GPIOE_CTL_CTL2_Msk                (0x30UL)                  /*!< CTL2 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL1_Pos                (2UL)                     /*!< CTL1 (Bit 2) */
#define GPIOE_CTL_CTL1_Msk                (0xcUL)                   /*!< CTL1 (Bitfield-Mask: 0x03) */
#define GPIOE_CTL_CTL0_Pos                (0UL)                     /*!< CTL0 (Bit 0) */
#define GPIOE_CTL_CTL0_Msk                (0x3UL)                   /*!< CTL0 (Bitfield-Mask: 0x03) */
/* =========================================================  OMODE  ========================================================= */
#define GPIOE_OMODE_OM15_Pos              (15UL)                    /*!< OM15 (Bit 15) */
#define GPIOE_OMODE_OM15_Msk              (0x8000UL)                /*!< OM15 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM14_Pos              (14UL)                    /*!< OM14 (Bit 14) */
#define GPIOE_OMODE_OM14_Msk              (0x4000UL)                /*!< OM14 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM13_Pos              (13UL)                    /*!< OM13 (Bit 13) */
#define GPIOE_OMODE_OM13_Msk              (0x2000UL)                /*!< OM13 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM12_Pos              (12UL)                    /*!< OM12 (Bit 12) */
#define GPIOE_OMODE_OM12_Msk              (0x1000UL)                /*!< OM12 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM11_Pos              (11UL)                    /*!< OM11 (Bit 11) */
#define GPIOE_OMODE_OM11_Msk              (0x800UL)                 /*!< OM11 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM10_Pos              (10UL)                    /*!< OM10 (Bit 10) */
#define GPIOE_OMODE_OM10_Msk              (0x400UL)                 /*!< OM10 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM9_Pos               (9UL)                     /*!< OM9 (Bit 9) */
#define GPIOE_OMODE_OM9_Msk               (0x200UL)                 /*!< OM9 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM8_Pos               (8UL)                     /*!< OM8 (Bit 8) */
#define GPIOE_OMODE_OM8_Msk               (0x100UL)                 /*!< OM8 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM7_Pos               (7UL)                     /*!< OM7 (Bit 7) */
#define GPIOE_OMODE_OM7_Msk               (0x80UL)                  /*!< OM7 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM6_Pos               (6UL)                     /*!< OM6 (Bit 6) */
#define GPIOE_OMODE_OM6_Msk               (0x40UL)                  /*!< OM6 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM5_Pos               (5UL)                     /*!< OM5 (Bit 5) */
#define GPIOE_OMODE_OM5_Msk               (0x20UL)                  /*!< OM5 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM4_Pos               (4UL)                     /*!< OM4 (Bit 4) */
#define GPIOE_OMODE_OM4_Msk               (0x10UL)                  /*!< OM4 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM3_Pos               (3UL)                     /*!< OM3 (Bit 3) */
#define GPIOE_OMODE_OM3_Msk               (0x8UL)                   /*!< OM3 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM2_Pos               (2UL)                     /*!< OM2 (Bit 2) */
#define GPIOE_OMODE_OM2_Msk               (0x4UL)                   /*!< OM2 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM1_Pos               (1UL)                     /*!< OM1 (Bit 1) */
#define GPIOE_OMODE_OM1_Msk               (0x2UL)                   /*!< OM1 (Bitfield-Mask: 0x01) */
#define GPIOE_OMODE_OM0_Pos               (0UL)                     /*!< OM0 (Bit 0) */
#define GPIOE_OMODE_OM0_Msk               (0x1UL)                   /*!< OM0 (Bitfield-Mask: 0x01) */
/* =========================================================  OSPD  ========================================================== */
#define GPIOE_OSPD_OSPD15_Pos             (30UL)                    /*!< OSPD15 (Bit 30) */
#define GPIOE_OSPD_OSPD15_Msk             (0xc0000000UL)            /*!< OSPD15 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD14_Pos             (28UL)                    /*!< OSPD14 (Bit 28) */
#define GPIOE_OSPD_OSPD14_Msk             (0x30000000UL)            /*!< OSPD14 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD13_Pos             (26UL)                    /*!< OSPD13 (Bit 26) */
#define GPIOE_OSPD_OSPD13_Msk             (0xc000000UL)             /*!< OSPD13 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD12_Pos             (24UL)                    /*!< OSPD12 (Bit 24) */
#define GPIOE_OSPD_OSPD12_Msk             (0x3000000UL)             /*!< OSPD12 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD11_Pos             (22UL)                    /*!< OSPD11 (Bit 22) */
#define GPIOE_OSPD_OSPD11_Msk             (0xc00000UL)              /*!< OSPD11 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD10_Pos             (20UL)                    /*!< OSPD10 (Bit 20) */
#define GPIOE_OSPD_OSPD10_Msk             (0x300000UL)              /*!< OSPD10 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD9_Pos              (18UL)                    /*!< OSPD9 (Bit 18) */
#define GPIOE_OSPD_OSPD9_Msk              (0xc0000UL)               /*!< OSPD9 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD8_Pos              (16UL)                    /*!< OSPD8 (Bit 16) */
#define GPIOE_OSPD_OSPD8_Msk              (0x30000UL)               /*!< OSPD8 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD7_Pos              (14UL)                    /*!< OSPD7 (Bit 14) */
#define GPIOE_OSPD_OSPD7_Msk              (0xc000UL)                /*!< OSPD7 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD6_Pos              (12UL)                    /*!< OSPD6 (Bit 12) */
#define GPIOE_OSPD_OSPD6_Msk              (0x3000UL)                /*!< OSPD6 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD5_Pos              (10UL)                    /*!< OSPD5 (Bit 10) */
#define GPIOE_OSPD_OSPD5_Msk              (0xc00UL)                 /*!< OSPD5 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD4_Pos              (8UL)                     /*!< OSPD4 (Bit 8) */
#define GPIOE_OSPD_OSPD4_Msk              (0x300UL)                 /*!< OSPD4 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD3_Pos              (6UL)                     /*!< OSPD3 (Bit 6) */
#define GPIOE_OSPD_OSPD3_Msk              (0xc0UL)                  /*!< OSPD3 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD2_Pos              (4UL)                     /*!< OSPD2 (Bit 4) */
#define GPIOE_OSPD_OSPD2_Msk              (0x30UL)                  /*!< OSPD2 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD1_Pos              (2UL)                     /*!< OSPD1 (Bit 2) */
#define GPIOE_OSPD_OSPD1_Msk              (0xcUL)                   /*!< OSPD1 (Bitfield-Mask: 0x03) */
#define GPIOE_OSPD_OSPD0_Pos              (0UL)                     /*!< OSPD0 (Bit 0) */
#define GPIOE_OSPD_OSPD0_Msk              (0x3UL)                   /*!< OSPD0 (Bitfield-Mask: 0x03) */
/* ==========================================================  PUD  ========================================================== */
#define GPIOE_PUD_PUD15_Pos               (30UL)                    /*!< PUD15 (Bit 30) */
#define GPIOE_PUD_PUD15_Msk               (0xc0000000UL)            /*!< PUD15 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD14_Pos               (28UL)                    /*!< PUD14 (Bit 28) */
#define GPIOE_PUD_PUD14_Msk               (0x30000000UL)            /*!< PUD14 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD13_Pos               (26UL)                    /*!< PUD13 (Bit 26) */
#define GPIOE_PUD_PUD13_Msk               (0xc000000UL)             /*!< PUD13 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD12_Pos               (24UL)                    /*!< PUD12 (Bit 24) */
#define GPIOE_PUD_PUD12_Msk               (0x3000000UL)             /*!< PUD12 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD11_Pos               (22UL)                    /*!< PUD11 (Bit 22) */
#define GPIOE_PUD_PUD11_Msk               (0xc00000UL)              /*!< PUD11 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD10_Pos               (20UL)                    /*!< PUD10 (Bit 20) */
#define GPIOE_PUD_PUD10_Msk               (0x300000UL)              /*!< PUD10 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD9_Pos                (18UL)                    /*!< PUD9 (Bit 18) */
#define GPIOE_PUD_PUD9_Msk                (0xc0000UL)               /*!< PUD9 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD8_Pos                (16UL)                    /*!< PUD8 (Bit 16) */
#define GPIOE_PUD_PUD8_Msk                (0x30000UL)               /*!< PUD8 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD7_Pos                (14UL)                    /*!< PUD7 (Bit 14) */
#define GPIOE_PUD_PUD7_Msk                (0xc000UL)                /*!< PUD7 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD6_Pos                (12UL)                    /*!< PUD6 (Bit 12) */
#define GPIOE_PUD_PUD6_Msk                (0x3000UL)                /*!< PUD6 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD5_Pos                (10UL)                    /*!< PUD5 (Bit 10) */
#define GPIOE_PUD_PUD5_Msk                (0xc00UL)                 /*!< PUD5 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD4_Pos                (8UL)                     /*!< PUD4 (Bit 8) */
#define GPIOE_PUD_PUD4_Msk                (0x300UL)                 /*!< PUD4 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD3_Pos                (6UL)                     /*!< PUD3 (Bit 6) */
#define GPIOE_PUD_PUD3_Msk                (0xc0UL)                  /*!< PUD3 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD2_Pos                (4UL)                     /*!< PUD2 (Bit 4) */
#define GPIOE_PUD_PUD2_Msk                (0x30UL)                  /*!< PUD2 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD1_Pos                (2UL)                     /*!< PUD1 (Bit 2) */
#define GPIOE_PUD_PUD1_Msk                (0xcUL)                   /*!< PUD1 (Bitfield-Mask: 0x03) */
#define GPIOE_PUD_PUD0_Pos                (0UL)                     /*!< PUD0 (Bit 0) */
#define GPIOE_PUD_PUD0_Msk                (0x3UL)                   /*!< PUD0 (Bitfield-Mask: 0x03) */
/* =========================================================  ISTAT  ========================================================= */
#define GPIOE_ISTAT_ISTAT15_Pos           (15UL)                    /*!< ISTAT15 (Bit 15) */
#define GPIOE_ISTAT_ISTAT15_Msk           (0x8000UL)                /*!< ISTAT15 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT14_Pos           (14UL)                    /*!< ISTAT14 (Bit 14) */
#define GPIOE_ISTAT_ISTAT14_Msk           (0x4000UL)                /*!< ISTAT14 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT13_Pos           (13UL)                    /*!< ISTAT13 (Bit 13) */
#define GPIOE_ISTAT_ISTAT13_Msk           (0x2000UL)                /*!< ISTAT13 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT12_Pos           (12UL)                    /*!< ISTAT12 (Bit 12) */
#define GPIOE_ISTAT_ISTAT12_Msk           (0x1000UL)                /*!< ISTAT12 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT11_Pos           (11UL)                    /*!< ISTAT11 (Bit 11) */
#define GPIOE_ISTAT_ISTAT11_Msk           (0x800UL)                 /*!< ISTAT11 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT10_Pos           (10UL)                    /*!< ISTAT10 (Bit 10) */
#define GPIOE_ISTAT_ISTAT10_Msk           (0x400UL)                 /*!< ISTAT10 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT9_Pos            (9UL)                     /*!< ISTAT9 (Bit 9) */
#define GPIOE_ISTAT_ISTAT9_Msk            (0x200UL)                 /*!< ISTAT9 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT8_Pos            (8UL)                     /*!< ISTAT8 (Bit 8) */
#define GPIOE_ISTAT_ISTAT8_Msk            (0x100UL)                 /*!< ISTAT8 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT7_Pos            (7UL)                     /*!< ISTAT7 (Bit 7) */
#define GPIOE_ISTAT_ISTAT7_Msk            (0x80UL)                  /*!< ISTAT7 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT6_Pos            (6UL)                     /*!< ISTAT6 (Bit 6) */
#define GPIOE_ISTAT_ISTAT6_Msk            (0x40UL)                  /*!< ISTAT6 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT5_Pos            (5UL)                     /*!< ISTAT5 (Bit 5) */
#define GPIOE_ISTAT_ISTAT5_Msk            (0x20UL)                  /*!< ISTAT5 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT4_Pos            (4UL)                     /*!< ISTAT4 (Bit 4) */
#define GPIOE_ISTAT_ISTAT4_Msk            (0x10UL)                  /*!< ISTAT4 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT3_Pos            (3UL)                     /*!< ISTAT3 (Bit 3) */
#define GPIOE_ISTAT_ISTAT3_Msk            (0x8UL)                   /*!< ISTAT3 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT2_Pos            (2UL)                     /*!< ISTAT2 (Bit 2) */
#define GPIOE_ISTAT_ISTAT2_Msk            (0x4UL)                   /*!< ISTAT2 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT1_Pos            (1UL)                     /*!< ISTAT1 (Bit 1) */
#define GPIOE_ISTAT_ISTAT1_Msk            (0x2UL)                   /*!< ISTAT1 (Bitfield-Mask: 0x01) */
#define GPIOE_ISTAT_ISTAT0_Pos            (0UL)                     /*!< ISTAT0 (Bit 0) */
#define GPIOE_ISTAT_ISTAT0_Msk            (0x1UL)                   /*!< ISTAT0 (Bitfield-Mask: 0x01) */
/* =========================================================  OCTL  ========================================================== */
#define GPIOE_OCTL_OCTL15_Pos             (15UL)                    /*!< OCTL15 (Bit 15) */
#define GPIOE_OCTL_OCTL15_Msk             (0x8000UL)                /*!< OCTL15 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL14_Pos             (14UL)                    /*!< OCTL14 (Bit 14) */
#define GPIOE_OCTL_OCTL14_Msk             (0x4000UL)                /*!< OCTL14 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL13_Pos             (13UL)                    /*!< OCTL13 (Bit 13) */
#define GPIOE_OCTL_OCTL13_Msk             (0x2000UL)                /*!< OCTL13 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL12_Pos             (12UL)                    /*!< OCTL12 (Bit 12) */
#define GPIOE_OCTL_OCTL12_Msk             (0x1000UL)                /*!< OCTL12 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL11_Pos             (11UL)                    /*!< OCTL11 (Bit 11) */
#define GPIOE_OCTL_OCTL11_Msk             (0x800UL)                 /*!< OCTL11 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL10_Pos             (10UL)                    /*!< OCTL10 (Bit 10) */
#define GPIOE_OCTL_OCTL10_Msk             (0x400UL)                 /*!< OCTL10 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL9_Pos              (9UL)                     /*!< OCTL9 (Bit 9) */
#define GPIOE_OCTL_OCTL9_Msk              (0x200UL)                 /*!< OCTL9 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL8_Pos              (8UL)                     /*!< OCTL8 (Bit 8) */
#define GPIOE_OCTL_OCTL8_Msk              (0x100UL)                 /*!< OCTL8 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL7_Pos              (7UL)                     /*!< OCTL7 (Bit 7) */
#define GPIOE_OCTL_OCTL7_Msk              (0x80UL)                  /*!< OCTL7 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL6_Pos              (6UL)                     /*!< OCTL6 (Bit 6) */
#define GPIOE_OCTL_OCTL6_Msk              (0x40UL)                  /*!< OCTL6 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL5_Pos              (5UL)                     /*!< OCTL5 (Bit 5) */
#define GPIOE_OCTL_OCTL5_Msk              (0x20UL)                  /*!< OCTL5 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL4_Pos              (4UL)                     /*!< OCTL4 (Bit 4) */
#define GPIOE_OCTL_OCTL4_Msk              (0x10UL)                  /*!< OCTL4 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL3_Pos              (3UL)                     /*!< OCTL3 (Bit 3) */
#define GPIOE_OCTL_OCTL3_Msk              (0x8UL)                   /*!< OCTL3 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL2_Pos              (2UL)                     /*!< OCTL2 (Bit 2) */
#define GPIOE_OCTL_OCTL2_Msk              (0x4UL)                   /*!< OCTL2 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL1_Pos              (1UL)                     /*!< OCTL1 (Bit 1) */
#define GPIOE_OCTL_OCTL1_Msk              (0x2UL)                   /*!< OCTL1 (Bitfield-Mask: 0x01) */
#define GPIOE_OCTL_OCTL0_Pos              (0UL)                     /*!< OCTL0 (Bit 0) */
#define GPIOE_OCTL_OCTL0_Msk              (0x1UL)                   /*!< OCTL0 (Bitfield-Mask: 0x01) */
/* ==========================================================  BOP  ========================================================== */
#define GPIOE_BOP_CR15_Pos                (31UL)                    /*!< CR15 (Bit 31) */
#define GPIOE_BOP_CR15_Msk                (0x80000000UL)            /*!< CR15 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR14_Pos                (30UL)                    /*!< CR14 (Bit 30) */
#define GPIOE_BOP_CR14_Msk                (0x40000000UL)            /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR13_Pos                (29UL)                    /*!< CR13 (Bit 29) */
#define GPIOE_BOP_CR13_Msk                (0x20000000UL)            /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR12_Pos                (28UL)                    /*!< CR12 (Bit 28) */
#define GPIOE_BOP_CR12_Msk                (0x10000000UL)            /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR11_Pos                (27UL)                    /*!< CR11 (Bit 27) */
#define GPIOE_BOP_CR11_Msk                (0x8000000UL)             /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR10_Pos                (26UL)                    /*!< CR10 (Bit 26) */
#define GPIOE_BOP_CR10_Msk                (0x4000000UL)             /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR9_Pos                 (25UL)                    /*!< CR9 (Bit 25) */
#define GPIOE_BOP_CR9_Msk                 (0x2000000UL)             /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR8_Pos                 (24UL)                    /*!< CR8 (Bit 24) */
#define GPIOE_BOP_CR8_Msk                 (0x1000000UL)             /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR7_Pos                 (23UL)                    /*!< CR7 (Bit 23) */
#define GPIOE_BOP_CR7_Msk                 (0x800000UL)              /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR6_Pos                 (22UL)                    /*!< CR6 (Bit 22) */
#define GPIOE_BOP_CR6_Msk                 (0x400000UL)              /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR5_Pos                 (21UL)                    /*!< CR5 (Bit 21) */
#define GPIOE_BOP_CR5_Msk                 (0x200000UL)              /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR4_Pos                 (20UL)                    /*!< CR4 (Bit 20) */
#define GPIOE_BOP_CR4_Msk                 (0x100000UL)              /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR3_Pos                 (19UL)                    /*!< CR3 (Bit 19) */
#define GPIOE_BOP_CR3_Msk                 (0x80000UL)               /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR2_Pos                 (18UL)                    /*!< CR2 (Bit 18) */
#define GPIOE_BOP_CR2_Msk                 (0x40000UL)               /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR1_Pos                 (17UL)                    /*!< CR1 (Bit 17) */
#define GPIOE_BOP_CR1_Msk                 (0x20000UL)               /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_CR0_Pos                 (16UL)                    /*!< CR0 (Bit 16) */
#define GPIOE_BOP_CR0_Msk                 (0x10000UL)               /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP15_Pos               (15UL)                    /*!< BOP15 (Bit 15) */
#define GPIOE_BOP_BOP15_Msk               (0x8000UL)                /*!< BOP15 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP14_Pos               (14UL)                    /*!< BOP14 (Bit 14) */
#define GPIOE_BOP_BOP14_Msk               (0x4000UL)                /*!< BOP14 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP13_Pos               (13UL)                    /*!< BOP13 (Bit 13) */
#define GPIOE_BOP_BOP13_Msk               (0x2000UL)                /*!< BOP13 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP12_Pos               (12UL)                    /*!< BOP12 (Bit 12) */
#define GPIOE_BOP_BOP12_Msk               (0x1000UL)                /*!< BOP12 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP11_Pos               (11UL)                    /*!< BOP11 (Bit 11) */
#define GPIOE_BOP_BOP11_Msk               (0x800UL)                 /*!< BOP11 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP10_Pos               (10UL)                    /*!< BOP10 (Bit 10) */
#define GPIOE_BOP_BOP10_Msk               (0x400UL)                 /*!< BOP10 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP9_Pos                (9UL)                     /*!< BOP9 (Bit 9) */
#define GPIOE_BOP_BOP9_Msk                (0x200UL)                 /*!< BOP9 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP8_Pos                (8UL)                     /*!< BOP8 (Bit 8) */
#define GPIOE_BOP_BOP8_Msk                (0x100UL)                 /*!< BOP8 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP7_Pos                (7UL)                     /*!< BOP7 (Bit 7) */
#define GPIOE_BOP_BOP7_Msk                (0x80UL)                  /*!< BOP7 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP6_Pos                (6UL)                     /*!< BOP6 (Bit 6) */
#define GPIOE_BOP_BOP6_Msk                (0x40UL)                  /*!< BOP6 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP5_Pos                (5UL)                     /*!< BOP5 (Bit 5) */
#define GPIOE_BOP_BOP5_Msk                (0x20UL)                  /*!< BOP5 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP4_Pos                (4UL)                     /*!< BOP4 (Bit 4) */
#define GPIOE_BOP_BOP4_Msk                (0x10UL)                  /*!< BOP4 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP3_Pos                (3UL)                     /*!< BOP3 (Bit 3) */
#define GPIOE_BOP_BOP3_Msk                (0x8UL)                   /*!< BOP3 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP2_Pos                (2UL)                     /*!< BOP2 (Bit 2) */
#define GPIOE_BOP_BOP2_Msk                (0x4UL)                   /*!< BOP2 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP1_Pos                (1UL)                     /*!< BOP1 (Bit 1) */
#define GPIOE_BOP_BOP1_Msk                (0x2UL)                   /*!< BOP1 (Bitfield-Mask: 0x01) */
#define GPIOE_BOP_BOP0_Pos                (0UL)                     /*!< BOP0 (Bit 0) */
#define GPIOE_BOP_BOP0_Msk                (0x1UL)                   /*!< BOP0 (Bitfield-Mask: 0x01) */
/* =========================================================  LOCK  ========================================================== */
#define GPIOE_LOCK_LKK_Pos                (16UL)                    /*!< LKK (Bit 16) */
#define GPIOE_LOCK_LKK_Msk                (0x10000UL)               /*!< LKK (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK15_Pos               (15UL)                    /*!< LK15 (Bit 15) */
#define GPIOE_LOCK_LK15_Msk               (0x8000UL)                /*!< LK15 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK14_Pos               (14UL)                    /*!< LK14 (Bit 14) */
#define GPIOE_LOCK_LK14_Msk               (0x4000UL)                /*!< LK14 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK13_Pos               (13UL)                    /*!< LK13 (Bit 13) */
#define GPIOE_LOCK_LK13_Msk               (0x2000UL)                /*!< LK13 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK12_Pos               (12UL)                    /*!< LK12 (Bit 12) */
#define GPIOE_LOCK_LK12_Msk               (0x1000UL)                /*!< LK12 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK11_Pos               (11UL)                    /*!< LK11 (Bit 11) */
#define GPIOE_LOCK_LK11_Msk               (0x800UL)                 /*!< LK11 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK10_Pos               (10UL)                    /*!< LK10 (Bit 10) */
#define GPIOE_LOCK_LK10_Msk               (0x400UL)                 /*!< LK10 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK9_Pos                (9UL)                     /*!< LK9 (Bit 9) */
#define GPIOE_LOCK_LK9_Msk                (0x200UL)                 /*!< LK9 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK8_Pos                (8UL)                     /*!< LK8 (Bit 8) */
#define GPIOE_LOCK_LK8_Msk                (0x100UL)                 /*!< LK8 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK7_Pos                (7UL)                     /*!< LK7 (Bit 7) */
#define GPIOE_LOCK_LK7_Msk                (0x80UL)                  /*!< LK7 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK6_Pos                (6UL)                     /*!< LK6 (Bit 6) */
#define GPIOE_LOCK_LK6_Msk                (0x40UL)                  /*!< LK6 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK5_Pos                (5UL)                     /*!< LK5 (Bit 5) */
#define GPIOE_LOCK_LK5_Msk                (0x20UL)                  /*!< LK5 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK4_Pos                (4UL)                     /*!< LK4 (Bit 4) */
#define GPIOE_LOCK_LK4_Msk                (0x10UL)                  /*!< LK4 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK3_Pos                (3UL)                     /*!< LK3 (Bit 3) */
#define GPIOE_LOCK_LK3_Msk                (0x8UL)                   /*!< LK3 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK2_Pos                (2UL)                     /*!< LK2 (Bit 2) */
#define GPIOE_LOCK_LK2_Msk                (0x4UL)                   /*!< LK2 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK1_Pos                (1UL)                     /*!< LK1 (Bit 1) */
#define GPIOE_LOCK_LK1_Msk                (0x2UL)                   /*!< LK1 (Bitfield-Mask: 0x01) */
#define GPIOE_LOCK_LK0_Pos                (0UL)                     /*!< LK0 (Bit 0) */
#define GPIOE_LOCK_LK0_Msk                (0x1UL)                   /*!< LK0 (Bitfield-Mask: 0x01) */
/* ========================================================  AFSEL0  ========================================================= */
#define GPIOE_AFSEL0_SEL7_Pos             (28UL)                    /*!< SEL7 (Bit 28) */
#define GPIOE_AFSEL0_SEL7_Msk             (0xf0000000UL)            /*!< SEL7 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL0_SEL6_Pos             (24UL)                    /*!< SEL6 (Bit 24) */
#define GPIOE_AFSEL0_SEL6_Msk             (0xf000000UL)             /*!< SEL6 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL0_SEL5_Pos             (20UL)                    /*!< SEL5 (Bit 20) */
#define GPIOE_AFSEL0_SEL5_Msk             (0xf00000UL)              /*!< SEL5 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL0_SEL4_Pos             (16UL)                    /*!< SEL4 (Bit 16) */
#define GPIOE_AFSEL0_SEL4_Msk             (0xf0000UL)               /*!< SEL4 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL0_SEL3_Pos             (12UL)                    /*!< SEL3 (Bit 12) */
#define GPIOE_AFSEL0_SEL3_Msk             (0xf000UL)                /*!< SEL3 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL0_SEL2_Pos             (8UL)                     /*!< SEL2 (Bit 8) */
#define GPIOE_AFSEL0_SEL2_Msk             (0xf00UL)                 /*!< SEL2 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL0_SEL1_Pos             (4UL)                     /*!< SEL1 (Bit 4) */
#define GPIOE_AFSEL0_SEL1_Msk             (0xf0UL)                  /*!< SEL1 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL0_SEL0_Pos             (0UL)                     /*!< SEL0 (Bit 0) */
#define GPIOE_AFSEL0_SEL0_Msk             (0xfUL)                   /*!< SEL0 (Bitfield-Mask: 0x0f) */
/* ========================================================  AFSEL1  ========================================================= */
#define GPIOE_AFSEL1_SEL15_Pos            (28UL)                    /*!< SEL15 (Bit 28) */
#define GPIOE_AFSEL1_SEL15_Msk            (0xf0000000UL)            /*!< SEL15 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL1_SEL14_Pos            (24UL)                    /*!< SEL14 (Bit 24) */
#define GPIOE_AFSEL1_SEL14_Msk            (0xf000000UL)             /*!< SEL14 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL1_SEL13_Pos            (20UL)                    /*!< SEL13 (Bit 20) */
#define GPIOE_AFSEL1_SEL13_Msk            (0xf00000UL)              /*!< SEL13 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL1_SEL12_Pos            (16UL)                    /*!< SEL12 (Bit 16) */
#define GPIOE_AFSEL1_SEL12_Msk            (0xf0000UL)               /*!< SEL12 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL1_SEL11_Pos            (12UL)                    /*!< SEL11 (Bit 12) */
#define GPIOE_AFSEL1_SEL11_Msk            (0xf000UL)                /*!< SEL11 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL1_SEL10_Pos            (8UL)                     /*!< SEL10 (Bit 8) */
#define GPIOE_AFSEL1_SEL10_Msk            (0xf00UL)                 /*!< SEL10 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL1_SEL9_Pos             (4UL)                     /*!< SEL9 (Bit 4) */
#define GPIOE_AFSEL1_SEL9_Msk             (0xf0UL)                  /*!< SEL9 (Bitfield-Mask: 0x0f) */
#define GPIOE_AFSEL1_SEL8_Pos             (0UL)                     /*!< SEL8 (Bit 0) */
#define GPIOE_AFSEL1_SEL8_Msk             (0xfUL)                   /*!< SEL8 (Bitfield-Mask: 0x0f) */
/* ==========================================================  BC  =========================================================== */
#define GPIOE_BC_CR0_Pos                  (0UL)                     /*!< CR0 (Bit 0) */
#define GPIOE_BC_CR0_Msk                  (0x1UL)                   /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR1_Pos                  (1UL)                     /*!< CR1 (Bit 1) */
#define GPIOE_BC_CR1_Msk                  (0x2UL)                   /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR2_Pos                  (2UL)                     /*!< CR2 (Bit 2) */
#define GPIOE_BC_CR2_Msk                  (0x4UL)                   /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR3_Pos                  (3UL)                     /*!< CR3 (Bit 3) */
#define GPIOE_BC_CR3_Msk                  (0x8UL)                   /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR4_Pos                  (4UL)                     /*!< CR4 (Bit 4) */
#define GPIOE_BC_CR4_Msk                  (0x10UL)                  /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR5_Pos                  (5UL)                     /*!< CR5 (Bit 5) */
#define GPIOE_BC_CR5_Msk                  (0x20UL)                  /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR6_Pos                  (6UL)                     /*!< CR6 (Bit 6) */
#define GPIOE_BC_CR6_Msk                  (0x40UL)                  /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR7_Pos                  (7UL)                     /*!< CR7 (Bit 7) */
#define GPIOE_BC_CR7_Msk                  (0x80UL)                  /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR8_Pos                  (8UL)                     /*!< CR8 (Bit 8) */
#define GPIOE_BC_CR8_Msk                  (0x100UL)                 /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR9_Pos                  (9UL)                     /*!< CR9 (Bit 9) */
#define GPIOE_BC_CR9_Msk                  (0x200UL)                 /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR10_Pos                 (10UL)                    /*!< CR10 (Bit 10) */
#define GPIOE_BC_CR10_Msk                 (0x400UL)                 /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR11_Pos                 (11UL)                    /*!< CR11 (Bit 11) */
#define GPIOE_BC_CR11_Msk                 (0x800UL)                 /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR12_Pos                 (12UL)                    /*!< CR12 (Bit 12) */
#define GPIOE_BC_CR12_Msk                 (0x1000UL)                /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR13_Pos                 (13UL)                    /*!< CR13 (Bit 13) */
#define GPIOE_BC_CR13_Msk                 (0x2000UL)                /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR14_Pos                 (14UL)                    /*!< CR14 (Bit 14) */
#define GPIOE_BC_CR14_Msk                 (0x4000UL)                /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOE_BC_CR15_Pos                 (15UL)                    /*!< CR15 (Bit 15) */
#define GPIOE_BC_CR15_Msk                 (0x8000UL)                /*!< CR15 (Bitfield-Mask: 0x01) */
/* ==========================================================  TG  =========================================================== */
#define GPIOE_TG_TG0_Pos                  (0UL)                     /*!< TG0 (Bit 0) */
#define GPIOE_TG_TG0_Msk                  (0x1UL)                   /*!< TG0 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG1_Pos                  (1UL)                     /*!< TG1 (Bit 1) */
#define GPIOE_TG_TG1_Msk                  (0x2UL)                   /*!< TG1 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG2_Pos                  (2UL)                     /*!< TG2 (Bit 2) */
#define GPIOE_TG_TG2_Msk                  (0x4UL)                   /*!< TG2 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG3_Pos                  (3UL)                     /*!< TG3 (Bit 3) */
#define GPIOE_TG_TG3_Msk                  (0x8UL)                   /*!< TG3 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG4_Pos                  (4UL)                     /*!< TG4 (Bit 4) */
#define GPIOE_TG_TG4_Msk                  (0x10UL)                  /*!< TG4 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG5_Pos                  (5UL)                     /*!< TG5 (Bit 5) */
#define GPIOE_TG_TG5_Msk                  (0x20UL)                  /*!< TG5 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG6_Pos                  (6UL)                     /*!< TG6 (Bit 6) */
#define GPIOE_TG_TG6_Msk                  (0x40UL)                  /*!< TG6 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG7_Pos                  (7UL)                     /*!< TG7 (Bit 7) */
#define GPIOE_TG_TG7_Msk                  (0x80UL)                  /*!< TG7 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG8_Pos                  (8UL)                     /*!< TG8 (Bit 8) */
#define GPIOE_TG_TG8_Msk                  (0x100UL)                 /*!< TG8 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG9_Pos                  (9UL)                     /*!< TG9 (Bit 9) */
#define GPIOE_TG_TG9_Msk                  (0x200UL)                 /*!< TG9 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG10_Pos                 (10UL)                    /*!< TG10 (Bit 10) */
#define GPIOE_TG_TG10_Msk                 (0x400UL)                 /*!< TG10 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG11_Pos                 (11UL)                    /*!< TG11 (Bit 11) */
#define GPIOE_TG_TG11_Msk                 (0x800UL)                 /*!< TG11 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG12_Pos                 (12UL)                    /*!< TG12 (Bit 12) */
#define GPIOE_TG_TG12_Msk                 (0x1000UL)                /*!< TG12 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG13_Pos                 (13UL)                    /*!< TG13 (Bit 13) */
#define GPIOE_TG_TG13_Msk                 (0x2000UL)                /*!< TG13 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG14_Pos                 (14UL)                    /*!< TG14 (Bit 14) */
#define GPIOE_TG_TG14_Msk                 (0x4000UL)                /*!< TG14 (Bitfield-Mask: 0x01) */
#define GPIOE_TG_TG15_Pos                 (15UL)                    /*!< TG15 (Bit 15) */
#define GPIOE_TG_TG15_Msk                 (0x8000UL)                /*!< TG15 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           GPIOF                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define GPIOF_CTL_CTL15_Pos               (30UL)                    /*!< CTL15 (Bit 30) */
#define GPIOF_CTL_CTL15_Msk               (0xc0000000UL)            /*!< CTL15 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL14_Pos               (28UL)                    /*!< CTL14 (Bit 28) */
#define GPIOF_CTL_CTL14_Msk               (0x30000000UL)            /*!< CTL14 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL13_Pos               (26UL)                    /*!< CTL13 (Bit 26) */
#define GPIOF_CTL_CTL13_Msk               (0xc000000UL)             /*!< CTL13 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL12_Pos               (24UL)                    /*!< CTL12 (Bit 24) */
#define GPIOF_CTL_CTL12_Msk               (0x3000000UL)             /*!< CTL12 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL11_Pos               (22UL)                    /*!< CTL11 (Bit 22) */
#define GPIOF_CTL_CTL11_Msk               (0xc00000UL)              /*!< CTL11 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL10_Pos               (20UL)                    /*!< CTL10 (Bit 20) */
#define GPIOF_CTL_CTL10_Msk               (0x300000UL)              /*!< CTL10 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL9_Pos                (18UL)                    /*!< CTL9 (Bit 18) */
#define GPIOF_CTL_CTL9_Msk                (0xc0000UL)               /*!< CTL9 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL8_Pos                (16UL)                    /*!< CTL8 (Bit 16) */
#define GPIOF_CTL_CTL8_Msk                (0x30000UL)               /*!< CTL8 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL7_Pos                (14UL)                    /*!< CTL7 (Bit 14) */
#define GPIOF_CTL_CTL7_Msk                (0xc000UL)                /*!< CTL7 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL6_Pos                (12UL)                    /*!< CTL6 (Bit 12) */
#define GPIOF_CTL_CTL6_Msk                (0x3000UL)                /*!< CTL6 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL5_Pos                (10UL)                    /*!< CTL5 (Bit 10) */
#define GPIOF_CTL_CTL5_Msk                (0xc00UL)                 /*!< CTL5 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL4_Pos                (8UL)                     /*!< CTL4 (Bit 8) */
#define GPIOF_CTL_CTL4_Msk                (0x300UL)                 /*!< CTL4 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL3_Pos                (6UL)                     /*!< CTL3 (Bit 6) */
#define GPIOF_CTL_CTL3_Msk                (0xc0UL)                  /*!< CTL3 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL2_Pos                (4UL)                     /*!< CTL2 (Bit 4) */
#define GPIOF_CTL_CTL2_Msk                (0x30UL)                  /*!< CTL2 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL1_Pos                (2UL)                     /*!< CTL1 (Bit 2) */
#define GPIOF_CTL_CTL1_Msk                (0xcUL)                   /*!< CTL1 (Bitfield-Mask: 0x03) */
#define GPIOF_CTL_CTL0_Pos                (0UL)                     /*!< CTL0 (Bit 0) */
#define GPIOF_CTL_CTL0_Msk                (0x3UL)                   /*!< CTL0 (Bitfield-Mask: 0x03) */
/* =========================================================  OMODE  ========================================================= */
#define GPIOF_OMODE_OM15_Pos              (15UL)                    /*!< OM15 (Bit 15) */
#define GPIOF_OMODE_OM15_Msk              (0x8000UL)                /*!< OM15 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM14_Pos              (14UL)                    /*!< OM14 (Bit 14) */
#define GPIOF_OMODE_OM14_Msk              (0x4000UL)                /*!< OM14 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM13_Pos              (13UL)                    /*!< OM13 (Bit 13) */
#define GPIOF_OMODE_OM13_Msk              (0x2000UL)                /*!< OM13 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM12_Pos              (12UL)                    /*!< OM12 (Bit 12) */
#define GPIOF_OMODE_OM12_Msk              (0x1000UL)                /*!< OM12 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM11_Pos              (11UL)                    /*!< OM11 (Bit 11) */
#define GPIOF_OMODE_OM11_Msk              (0x800UL)                 /*!< OM11 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM10_Pos              (10UL)                    /*!< OM10 (Bit 10) */
#define GPIOF_OMODE_OM10_Msk              (0x400UL)                 /*!< OM10 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM9_Pos               (9UL)                     /*!< OM9 (Bit 9) */
#define GPIOF_OMODE_OM9_Msk               (0x200UL)                 /*!< OM9 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM8_Pos               (8UL)                     /*!< OM8 (Bit 8) */
#define GPIOF_OMODE_OM8_Msk               (0x100UL)                 /*!< OM8 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM7_Pos               (7UL)                     /*!< OM7 (Bit 7) */
#define GPIOF_OMODE_OM7_Msk               (0x80UL)                  /*!< OM7 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM6_Pos               (6UL)                     /*!< OM6 (Bit 6) */
#define GPIOF_OMODE_OM6_Msk               (0x40UL)                  /*!< OM6 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM5_Pos               (5UL)                     /*!< OM5 (Bit 5) */
#define GPIOF_OMODE_OM5_Msk               (0x20UL)                  /*!< OM5 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM4_Pos               (4UL)                     /*!< OM4 (Bit 4) */
#define GPIOF_OMODE_OM4_Msk               (0x10UL)                  /*!< OM4 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM3_Pos               (3UL)                     /*!< OM3 (Bit 3) */
#define GPIOF_OMODE_OM3_Msk               (0x8UL)                   /*!< OM3 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM2_Pos               (2UL)                     /*!< OM2 (Bit 2) */
#define GPIOF_OMODE_OM2_Msk               (0x4UL)                   /*!< OM2 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM1_Pos               (1UL)                     /*!< OM1 (Bit 1) */
#define GPIOF_OMODE_OM1_Msk               (0x2UL)                   /*!< OM1 (Bitfield-Mask: 0x01) */
#define GPIOF_OMODE_OM0_Pos               (0UL)                     /*!< OM0 (Bit 0) */
#define GPIOF_OMODE_OM0_Msk               (0x1UL)                   /*!< OM0 (Bitfield-Mask: 0x01) */
/* =========================================================  OSPD  ========================================================== */
#define GPIOF_OSPD_OSPD15_Pos             (30UL)                    /*!< OSPD15 (Bit 30) */
#define GPIOF_OSPD_OSPD15_Msk             (0xc0000000UL)            /*!< OSPD15 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD14_Pos             (28UL)                    /*!< OSPD14 (Bit 28) */
#define GPIOF_OSPD_OSPD14_Msk             (0x30000000UL)            /*!< OSPD14 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD13_Pos             (26UL)                    /*!< OSPD13 (Bit 26) */
#define GPIOF_OSPD_OSPD13_Msk             (0xc000000UL)             /*!< OSPD13 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD12_Pos             (24UL)                    /*!< OSPD12 (Bit 24) */
#define GPIOF_OSPD_OSPD12_Msk             (0x3000000UL)             /*!< OSPD12 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD11_Pos             (22UL)                    /*!< OSPD11 (Bit 22) */
#define GPIOF_OSPD_OSPD11_Msk             (0xc00000UL)              /*!< OSPD11 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD10_Pos             (20UL)                    /*!< OSPD10 (Bit 20) */
#define GPIOF_OSPD_OSPD10_Msk             (0x300000UL)              /*!< OSPD10 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD9_Pos              (18UL)                    /*!< OSPD9 (Bit 18) */
#define GPIOF_OSPD_OSPD9_Msk              (0xc0000UL)               /*!< OSPD9 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD8_Pos              (16UL)                    /*!< OSPD8 (Bit 16) */
#define GPIOF_OSPD_OSPD8_Msk              (0x30000UL)               /*!< OSPD8 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD7_Pos              (14UL)                    /*!< OSPD7 (Bit 14) */
#define GPIOF_OSPD_OSPD7_Msk              (0xc000UL)                /*!< OSPD7 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD6_Pos              (12UL)                    /*!< OSPD6 (Bit 12) */
#define GPIOF_OSPD_OSPD6_Msk              (0x3000UL)                /*!< OSPD6 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD5_Pos              (10UL)                    /*!< OSPD5 (Bit 10) */
#define GPIOF_OSPD_OSPD5_Msk              (0xc00UL)                 /*!< OSPD5 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD4_Pos              (8UL)                     /*!< OSPD4 (Bit 8) */
#define GPIOF_OSPD_OSPD4_Msk              (0x300UL)                 /*!< OSPD4 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD3_Pos              (6UL)                     /*!< OSPD3 (Bit 6) */
#define GPIOF_OSPD_OSPD3_Msk              (0xc0UL)                  /*!< OSPD3 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD2_Pos              (4UL)                     /*!< OSPD2 (Bit 4) */
#define GPIOF_OSPD_OSPD2_Msk              (0x30UL)                  /*!< OSPD2 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD1_Pos              (2UL)                     /*!< OSPD1 (Bit 2) */
#define GPIOF_OSPD_OSPD1_Msk              (0xcUL)                   /*!< OSPD1 (Bitfield-Mask: 0x03) */
#define GPIOF_OSPD_OSPD0_Pos              (0UL)                     /*!< OSPD0 (Bit 0) */
#define GPIOF_OSPD_OSPD0_Msk              (0x3UL)                   /*!< OSPD0 (Bitfield-Mask: 0x03) */
/* ==========================================================  PUD  ========================================================== */
#define GPIOF_PUD_PUD15_Pos               (30UL)                    /*!< PUD15 (Bit 30) */
#define GPIOF_PUD_PUD15_Msk               (0xc0000000UL)            /*!< PUD15 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD14_Pos               (28UL)                    /*!< PUD14 (Bit 28) */
#define GPIOF_PUD_PUD14_Msk               (0x30000000UL)            /*!< PUD14 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD13_Pos               (26UL)                    /*!< PUD13 (Bit 26) */
#define GPIOF_PUD_PUD13_Msk               (0xc000000UL)             /*!< PUD13 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD12_Pos               (24UL)                    /*!< PUD12 (Bit 24) */
#define GPIOF_PUD_PUD12_Msk               (0x3000000UL)             /*!< PUD12 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD11_Pos               (22UL)                    /*!< PUD11 (Bit 22) */
#define GPIOF_PUD_PUD11_Msk               (0xc00000UL)              /*!< PUD11 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD10_Pos               (20UL)                    /*!< PUD10 (Bit 20) */
#define GPIOF_PUD_PUD10_Msk               (0x300000UL)              /*!< PUD10 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD9_Pos                (18UL)                    /*!< PUD9 (Bit 18) */
#define GPIOF_PUD_PUD9_Msk                (0xc0000UL)               /*!< PUD9 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD8_Pos                (16UL)                    /*!< PUD8 (Bit 16) */
#define GPIOF_PUD_PUD8_Msk                (0x30000UL)               /*!< PUD8 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD7_Pos                (14UL)                    /*!< PUD7 (Bit 14) */
#define GPIOF_PUD_PUD7_Msk                (0xc000UL)                /*!< PUD7 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD6_Pos                (12UL)                    /*!< PUD6 (Bit 12) */
#define GPIOF_PUD_PUD6_Msk                (0x3000UL)                /*!< PUD6 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD5_Pos                (10UL)                    /*!< PUD5 (Bit 10) */
#define GPIOF_PUD_PUD5_Msk                (0xc00UL)                 /*!< PUD5 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD4_Pos                (8UL)                     /*!< PUD4 (Bit 8) */
#define GPIOF_PUD_PUD4_Msk                (0x300UL)                 /*!< PUD4 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD3_Pos                (6UL)                     /*!< PUD3 (Bit 6) */
#define GPIOF_PUD_PUD3_Msk                (0xc0UL)                  /*!< PUD3 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD2_Pos                (4UL)                     /*!< PUD2 (Bit 4) */
#define GPIOF_PUD_PUD2_Msk                (0x30UL)                  /*!< PUD2 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD1_Pos                (2UL)                     /*!< PUD1 (Bit 2) */
#define GPIOF_PUD_PUD1_Msk                (0xcUL)                   /*!< PUD1 (Bitfield-Mask: 0x03) */
#define GPIOF_PUD_PUD0_Pos                (0UL)                     /*!< PUD0 (Bit 0) */
#define GPIOF_PUD_PUD0_Msk                (0x3UL)                   /*!< PUD0 (Bitfield-Mask: 0x03) */
/* =========================================================  ISTAT  ========================================================= */
#define GPIOF_ISTAT_ISTAT15_Pos           (15UL)                    /*!< ISTAT15 (Bit 15) */
#define GPIOF_ISTAT_ISTAT15_Msk           (0x8000UL)                /*!< ISTAT15 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT14_Pos           (14UL)                    /*!< ISTAT14 (Bit 14) */
#define GPIOF_ISTAT_ISTAT14_Msk           (0x4000UL)                /*!< ISTAT14 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT13_Pos           (13UL)                    /*!< ISTAT13 (Bit 13) */
#define GPIOF_ISTAT_ISTAT13_Msk           (0x2000UL)                /*!< ISTAT13 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT12_Pos           (12UL)                    /*!< ISTAT12 (Bit 12) */
#define GPIOF_ISTAT_ISTAT12_Msk           (0x1000UL)                /*!< ISTAT12 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT11_Pos           (11UL)                    /*!< ISTAT11 (Bit 11) */
#define GPIOF_ISTAT_ISTAT11_Msk           (0x800UL)                 /*!< ISTAT11 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT10_Pos           (10UL)                    /*!< ISTAT10 (Bit 10) */
#define GPIOF_ISTAT_ISTAT10_Msk           (0x400UL)                 /*!< ISTAT10 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT9_Pos            (9UL)                     /*!< ISTAT9 (Bit 9) */
#define GPIOF_ISTAT_ISTAT9_Msk            (0x200UL)                 /*!< ISTAT9 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT8_Pos            (8UL)                     /*!< ISTAT8 (Bit 8) */
#define GPIOF_ISTAT_ISTAT8_Msk            (0x100UL)                 /*!< ISTAT8 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT7_Pos            (7UL)                     /*!< ISTAT7 (Bit 7) */
#define GPIOF_ISTAT_ISTAT7_Msk            (0x80UL)                  /*!< ISTAT7 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT6_Pos            (6UL)                     /*!< ISTAT6 (Bit 6) */
#define GPIOF_ISTAT_ISTAT6_Msk            (0x40UL)                  /*!< ISTAT6 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT5_Pos            (5UL)                     /*!< ISTAT5 (Bit 5) */
#define GPIOF_ISTAT_ISTAT5_Msk            (0x20UL)                  /*!< ISTAT5 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT4_Pos            (4UL)                     /*!< ISTAT4 (Bit 4) */
#define GPIOF_ISTAT_ISTAT4_Msk            (0x10UL)                  /*!< ISTAT4 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT3_Pos            (3UL)                     /*!< ISTAT3 (Bit 3) */
#define GPIOF_ISTAT_ISTAT3_Msk            (0x8UL)                   /*!< ISTAT3 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT2_Pos            (2UL)                     /*!< ISTAT2 (Bit 2) */
#define GPIOF_ISTAT_ISTAT2_Msk            (0x4UL)                   /*!< ISTAT2 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT1_Pos            (1UL)                     /*!< ISTAT1 (Bit 1) */
#define GPIOF_ISTAT_ISTAT1_Msk            (0x2UL)                   /*!< ISTAT1 (Bitfield-Mask: 0x01) */
#define GPIOF_ISTAT_ISTAT0_Pos            (0UL)                     /*!< ISTAT0 (Bit 0) */
#define GPIOF_ISTAT_ISTAT0_Msk            (0x1UL)                   /*!< ISTAT0 (Bitfield-Mask: 0x01) */
/* =========================================================  OCTL  ========================================================== */
#define GPIOF_OCTL_OCTL15_Pos             (15UL)                    /*!< OCTL15 (Bit 15) */
#define GPIOF_OCTL_OCTL15_Msk             (0x8000UL)                /*!< OCTL15 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL14_Pos             (14UL)                    /*!< OCTL14 (Bit 14) */
#define GPIOF_OCTL_OCTL14_Msk             (0x4000UL)                /*!< OCTL14 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL13_Pos             (13UL)                    /*!< OCTL13 (Bit 13) */
#define GPIOF_OCTL_OCTL13_Msk             (0x2000UL)                /*!< OCTL13 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL12_Pos             (12UL)                    /*!< OCTL12 (Bit 12) */
#define GPIOF_OCTL_OCTL12_Msk             (0x1000UL)                /*!< OCTL12 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL11_Pos             (11UL)                    /*!< OCTL11 (Bit 11) */
#define GPIOF_OCTL_OCTL11_Msk             (0x800UL)                 /*!< OCTL11 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL10_Pos             (10UL)                    /*!< OCTL10 (Bit 10) */
#define GPIOF_OCTL_OCTL10_Msk             (0x400UL)                 /*!< OCTL10 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL9_Pos              (9UL)                     /*!< OCTL9 (Bit 9) */
#define GPIOF_OCTL_OCTL9_Msk              (0x200UL)                 /*!< OCTL9 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL8_Pos              (8UL)                     /*!< OCTL8 (Bit 8) */
#define GPIOF_OCTL_OCTL8_Msk              (0x100UL)                 /*!< OCTL8 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL7_Pos              (7UL)                     /*!< OCTL7 (Bit 7) */
#define GPIOF_OCTL_OCTL7_Msk              (0x80UL)                  /*!< OCTL7 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL6_Pos              (6UL)                     /*!< OCTL6 (Bit 6) */
#define GPIOF_OCTL_OCTL6_Msk              (0x40UL)                  /*!< OCTL6 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL5_Pos              (5UL)                     /*!< OCTL5 (Bit 5) */
#define GPIOF_OCTL_OCTL5_Msk              (0x20UL)                  /*!< OCTL5 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL4_Pos              (4UL)                     /*!< OCTL4 (Bit 4) */
#define GPIOF_OCTL_OCTL4_Msk              (0x10UL)                  /*!< OCTL4 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL3_Pos              (3UL)                     /*!< OCTL3 (Bit 3) */
#define GPIOF_OCTL_OCTL3_Msk              (0x8UL)                   /*!< OCTL3 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL2_Pos              (2UL)                     /*!< OCTL2 (Bit 2) */
#define GPIOF_OCTL_OCTL2_Msk              (0x4UL)                   /*!< OCTL2 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL1_Pos              (1UL)                     /*!< OCTL1 (Bit 1) */
#define GPIOF_OCTL_OCTL1_Msk              (0x2UL)                   /*!< OCTL1 (Bitfield-Mask: 0x01) */
#define GPIOF_OCTL_OCTL0_Pos              (0UL)                     /*!< OCTL0 (Bit 0) */
#define GPIOF_OCTL_OCTL0_Msk              (0x1UL)                   /*!< OCTL0 (Bitfield-Mask: 0x01) */
/* ==========================================================  BOP  ========================================================== */
#define GPIOF_BOP_CR15_Pos                (31UL)                    /*!< CR15 (Bit 31) */
#define GPIOF_BOP_CR15_Msk                (0x80000000UL)            /*!< CR15 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR14_Pos                (30UL)                    /*!< CR14 (Bit 30) */
#define GPIOF_BOP_CR14_Msk                (0x40000000UL)            /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR13_Pos                (29UL)                    /*!< CR13 (Bit 29) */
#define GPIOF_BOP_CR13_Msk                (0x20000000UL)            /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR12_Pos                (28UL)                    /*!< CR12 (Bit 28) */
#define GPIOF_BOP_CR12_Msk                (0x10000000UL)            /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR11_Pos                (27UL)                    /*!< CR11 (Bit 27) */
#define GPIOF_BOP_CR11_Msk                (0x8000000UL)             /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR10_Pos                (26UL)                    /*!< CR10 (Bit 26) */
#define GPIOF_BOP_CR10_Msk                (0x4000000UL)             /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR9_Pos                 (25UL)                    /*!< CR9 (Bit 25) */
#define GPIOF_BOP_CR9_Msk                 (0x2000000UL)             /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR8_Pos                 (24UL)                    /*!< CR8 (Bit 24) */
#define GPIOF_BOP_CR8_Msk                 (0x1000000UL)             /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR7_Pos                 (23UL)                    /*!< CR7 (Bit 23) */
#define GPIOF_BOP_CR7_Msk                 (0x800000UL)              /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR6_Pos                 (22UL)                    /*!< CR6 (Bit 22) */
#define GPIOF_BOP_CR6_Msk                 (0x400000UL)              /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR5_Pos                 (21UL)                    /*!< CR5 (Bit 21) */
#define GPIOF_BOP_CR5_Msk                 (0x200000UL)              /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR4_Pos                 (20UL)                    /*!< CR4 (Bit 20) */
#define GPIOF_BOP_CR4_Msk                 (0x100000UL)              /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR3_Pos                 (19UL)                    /*!< CR3 (Bit 19) */
#define GPIOF_BOP_CR3_Msk                 (0x80000UL)               /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR2_Pos                 (18UL)                    /*!< CR2 (Bit 18) */
#define GPIOF_BOP_CR2_Msk                 (0x40000UL)               /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR1_Pos                 (17UL)                    /*!< CR1 (Bit 17) */
#define GPIOF_BOP_CR1_Msk                 (0x20000UL)               /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_CR0_Pos                 (16UL)                    /*!< CR0 (Bit 16) */
#define GPIOF_BOP_CR0_Msk                 (0x10000UL)               /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP15_Pos               (15UL)                    /*!< BOP15 (Bit 15) */
#define GPIOF_BOP_BOP15_Msk               (0x8000UL)                /*!< BOP15 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP14_Pos               (14UL)                    /*!< BOP14 (Bit 14) */
#define GPIOF_BOP_BOP14_Msk               (0x4000UL)                /*!< BOP14 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP13_Pos               (13UL)                    /*!< BOP13 (Bit 13) */
#define GPIOF_BOP_BOP13_Msk               (0x2000UL)                /*!< BOP13 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP12_Pos               (12UL)                    /*!< BOP12 (Bit 12) */
#define GPIOF_BOP_BOP12_Msk               (0x1000UL)                /*!< BOP12 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP11_Pos               (11UL)                    /*!< BOP11 (Bit 11) */
#define GPIOF_BOP_BOP11_Msk               (0x800UL)                 /*!< BOP11 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP10_Pos               (10UL)                    /*!< BOP10 (Bit 10) */
#define GPIOF_BOP_BOP10_Msk               (0x400UL)                 /*!< BOP10 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP9_Pos                (9UL)                     /*!< BOP9 (Bit 9) */
#define GPIOF_BOP_BOP9_Msk                (0x200UL)                 /*!< BOP9 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP8_Pos                (8UL)                     /*!< BOP8 (Bit 8) */
#define GPIOF_BOP_BOP8_Msk                (0x100UL)                 /*!< BOP8 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP7_Pos                (7UL)                     /*!< BOP7 (Bit 7) */
#define GPIOF_BOP_BOP7_Msk                (0x80UL)                  /*!< BOP7 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP6_Pos                (6UL)                     /*!< BOP6 (Bit 6) */
#define GPIOF_BOP_BOP6_Msk                (0x40UL)                  /*!< BOP6 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP5_Pos                (5UL)                     /*!< BOP5 (Bit 5) */
#define GPIOF_BOP_BOP5_Msk                (0x20UL)                  /*!< BOP5 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP4_Pos                (4UL)                     /*!< BOP4 (Bit 4) */
#define GPIOF_BOP_BOP4_Msk                (0x10UL)                  /*!< BOP4 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP3_Pos                (3UL)                     /*!< BOP3 (Bit 3) */
#define GPIOF_BOP_BOP3_Msk                (0x8UL)                   /*!< BOP3 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP2_Pos                (2UL)                     /*!< BOP2 (Bit 2) */
#define GPIOF_BOP_BOP2_Msk                (0x4UL)                   /*!< BOP2 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP1_Pos                (1UL)                     /*!< BOP1 (Bit 1) */
#define GPIOF_BOP_BOP1_Msk                (0x2UL)                   /*!< BOP1 (Bitfield-Mask: 0x01) */
#define GPIOF_BOP_BOP0_Pos                (0UL)                     /*!< BOP0 (Bit 0) */
#define GPIOF_BOP_BOP0_Msk                (0x1UL)                   /*!< BOP0 (Bitfield-Mask: 0x01) */
/* =========================================================  LOCK  ========================================================== */
#define GPIOF_LOCK_LKK_Pos                (16UL)                    /*!< LKK (Bit 16) */
#define GPIOF_LOCK_LKK_Msk                (0x10000UL)               /*!< LKK (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK15_Pos               (15UL)                    /*!< LK15 (Bit 15) */
#define GPIOF_LOCK_LK15_Msk               (0x8000UL)                /*!< LK15 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK14_Pos               (14UL)                    /*!< LK14 (Bit 14) */
#define GPIOF_LOCK_LK14_Msk               (0x4000UL)                /*!< LK14 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK13_Pos               (13UL)                    /*!< LK13 (Bit 13) */
#define GPIOF_LOCK_LK13_Msk               (0x2000UL)                /*!< LK13 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK12_Pos               (12UL)                    /*!< LK12 (Bit 12) */
#define GPIOF_LOCK_LK12_Msk               (0x1000UL)                /*!< LK12 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK11_Pos               (11UL)                    /*!< LK11 (Bit 11) */
#define GPIOF_LOCK_LK11_Msk               (0x800UL)                 /*!< LK11 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK10_Pos               (10UL)                    /*!< LK10 (Bit 10) */
#define GPIOF_LOCK_LK10_Msk               (0x400UL)                 /*!< LK10 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK9_Pos                (9UL)                     /*!< LK9 (Bit 9) */
#define GPIOF_LOCK_LK9_Msk                (0x200UL)                 /*!< LK9 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK8_Pos                (8UL)                     /*!< LK8 (Bit 8) */
#define GPIOF_LOCK_LK8_Msk                (0x100UL)                 /*!< LK8 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK7_Pos                (7UL)                     /*!< LK7 (Bit 7) */
#define GPIOF_LOCK_LK7_Msk                (0x80UL)                  /*!< LK7 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK6_Pos                (6UL)                     /*!< LK6 (Bit 6) */
#define GPIOF_LOCK_LK6_Msk                (0x40UL)                  /*!< LK6 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK5_Pos                (5UL)                     /*!< LK5 (Bit 5) */
#define GPIOF_LOCK_LK5_Msk                (0x20UL)                  /*!< LK5 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK4_Pos                (4UL)                     /*!< LK4 (Bit 4) */
#define GPIOF_LOCK_LK4_Msk                (0x10UL)                  /*!< LK4 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK3_Pos                (3UL)                     /*!< LK3 (Bit 3) */
#define GPIOF_LOCK_LK3_Msk                (0x8UL)                   /*!< LK3 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK2_Pos                (2UL)                     /*!< LK2 (Bit 2) */
#define GPIOF_LOCK_LK2_Msk                (0x4UL)                   /*!< LK2 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK1_Pos                (1UL)                     /*!< LK1 (Bit 1) */
#define GPIOF_LOCK_LK1_Msk                (0x2UL)                   /*!< LK1 (Bitfield-Mask: 0x01) */
#define GPIOF_LOCK_LK0_Pos                (0UL)                     /*!< LK0 (Bit 0) */
#define GPIOF_LOCK_LK0_Msk                (0x1UL)                   /*!< LK0 (Bitfield-Mask: 0x01) */
/* ========================================================  AFSEL0  ========================================================= */
#define GPIOF_AFSEL0_SEL7_Pos             (28UL)                    /*!< SEL7 (Bit 28) */
#define GPIOF_AFSEL0_SEL7_Msk             (0xf0000000UL)            /*!< SEL7 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL0_SEL6_Pos             (24UL)                    /*!< SEL6 (Bit 24) */
#define GPIOF_AFSEL0_SEL6_Msk             (0xf000000UL)             /*!< SEL6 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL0_SEL5_Pos             (20UL)                    /*!< SEL5 (Bit 20) */
#define GPIOF_AFSEL0_SEL5_Msk             (0xf00000UL)              /*!< SEL5 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL0_SEL4_Pos             (16UL)                    /*!< SEL4 (Bit 16) */
#define GPIOF_AFSEL0_SEL4_Msk             (0xf0000UL)               /*!< SEL4 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL0_SEL3_Pos             (12UL)                    /*!< SEL3 (Bit 12) */
#define GPIOF_AFSEL0_SEL3_Msk             (0xf000UL)                /*!< SEL3 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL0_SEL2_Pos             (8UL)                     /*!< SEL2 (Bit 8) */
#define GPIOF_AFSEL0_SEL2_Msk             (0xf00UL)                 /*!< SEL2 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL0_SEL1_Pos             (4UL)                     /*!< SEL1 (Bit 4) */
#define GPIOF_AFSEL0_SEL1_Msk             (0xf0UL)                  /*!< SEL1 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL0_SEL0_Pos             (0UL)                     /*!< SEL0 (Bit 0) */
#define GPIOF_AFSEL0_SEL0_Msk             (0xfUL)                   /*!< SEL0 (Bitfield-Mask: 0x0f) */
/* ========================================================  AFSEL1  ========================================================= */
#define GPIOF_AFSEL1_SEL15_Pos            (28UL)                    /*!< SEL15 (Bit 28) */
#define GPIOF_AFSEL1_SEL15_Msk            (0xf0000000UL)            /*!< SEL15 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL1_SEL14_Pos            (24UL)                    /*!< SEL14 (Bit 24) */
#define GPIOF_AFSEL1_SEL14_Msk            (0xf000000UL)             /*!< SEL14 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL1_SEL13_Pos            (20UL)                    /*!< SEL13 (Bit 20) */
#define GPIOF_AFSEL1_SEL13_Msk            (0xf00000UL)              /*!< SEL13 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL1_SEL12_Pos            (16UL)                    /*!< SEL12 (Bit 16) */
#define GPIOF_AFSEL1_SEL12_Msk            (0xf0000UL)               /*!< SEL12 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL1_SEL11_Pos            (12UL)                    /*!< SEL11 (Bit 12) */
#define GPIOF_AFSEL1_SEL11_Msk            (0xf000UL)                /*!< SEL11 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL1_SEL10_Pos            (8UL)                     /*!< SEL10 (Bit 8) */
#define GPIOF_AFSEL1_SEL10_Msk            (0xf00UL)                 /*!< SEL10 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL1_SEL9_Pos             (4UL)                     /*!< SEL9 (Bit 4) */
#define GPIOF_AFSEL1_SEL9_Msk             (0xf0UL)                  /*!< SEL9 (Bitfield-Mask: 0x0f) */
#define GPIOF_AFSEL1_SEL8_Pos             (0UL)                     /*!< SEL8 (Bit 0) */
#define GPIOF_AFSEL1_SEL8_Msk             (0xfUL)                   /*!< SEL8 (Bitfield-Mask: 0x0f) */
/* ==========================================================  BC  =========================================================== */
#define GPIOF_BC_CR0_Pos                  (0UL)                     /*!< CR0 (Bit 0) */
#define GPIOF_BC_CR0_Msk                  (0x1UL)                   /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR1_Pos                  (1UL)                     /*!< CR1 (Bit 1) */
#define GPIOF_BC_CR1_Msk                  (0x2UL)                   /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR2_Pos                  (2UL)                     /*!< CR2 (Bit 2) */
#define GPIOF_BC_CR2_Msk                  (0x4UL)                   /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR3_Pos                  (3UL)                     /*!< CR3 (Bit 3) */
#define GPIOF_BC_CR3_Msk                  (0x8UL)                   /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR4_Pos                  (4UL)                     /*!< CR4 (Bit 4) */
#define GPIOF_BC_CR4_Msk                  (0x10UL)                  /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR5_Pos                  (5UL)                     /*!< CR5 (Bit 5) */
#define GPIOF_BC_CR5_Msk                  (0x20UL)                  /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR6_Pos                  (6UL)                     /*!< CR6 (Bit 6) */
#define GPIOF_BC_CR6_Msk                  (0x40UL)                  /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR7_Pos                  (7UL)                     /*!< CR7 (Bit 7) */
#define GPIOF_BC_CR7_Msk                  (0x80UL)                  /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR8_Pos                  (8UL)                     /*!< CR8 (Bit 8) */
#define GPIOF_BC_CR8_Msk                  (0x100UL)                 /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR9_Pos                  (9UL)                     /*!< CR9 (Bit 9) */
#define GPIOF_BC_CR9_Msk                  (0x200UL)                 /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR10_Pos                 (10UL)                    /*!< CR10 (Bit 10) */
#define GPIOF_BC_CR10_Msk                 (0x400UL)                 /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR11_Pos                 (11UL)                    /*!< CR11 (Bit 11) */
#define GPIOF_BC_CR11_Msk                 (0x800UL)                 /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR12_Pos                 (12UL)                    /*!< CR12 (Bit 12) */
#define GPIOF_BC_CR12_Msk                 (0x1000UL)                /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR13_Pos                 (13UL)                    /*!< CR13 (Bit 13) */
#define GPIOF_BC_CR13_Msk                 (0x2000UL)                /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR14_Pos                 (14UL)                    /*!< CR14 (Bit 14) */
#define GPIOF_BC_CR14_Msk                 (0x4000UL)                /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOF_BC_CR15_Pos                 (15UL)                    /*!< CR15 (Bit 15) */
#define GPIOF_BC_CR15_Msk                 (0x8000UL)                /*!< CR15 (Bitfield-Mask: 0x01) */
/* ==========================================================  TG  =========================================================== */
#define GPIOF_TG_TG0_Pos                  (0UL)                     /*!< TG0 (Bit 0) */
#define GPIOF_TG_TG0_Msk                  (0x1UL)                   /*!< TG0 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG1_Pos                  (1UL)                     /*!< TG1 (Bit 1) */
#define GPIOF_TG_TG1_Msk                  (0x2UL)                   /*!< TG1 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG2_Pos                  (2UL)                     /*!< TG2 (Bit 2) */
#define GPIOF_TG_TG2_Msk                  (0x4UL)                   /*!< TG2 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG3_Pos                  (3UL)                     /*!< TG3 (Bit 3) */
#define GPIOF_TG_TG3_Msk                  (0x8UL)                   /*!< TG3 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG4_Pos                  (4UL)                     /*!< TG4 (Bit 4) */
#define GPIOF_TG_TG4_Msk                  (0x10UL)                  /*!< TG4 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG5_Pos                  (5UL)                     /*!< TG5 (Bit 5) */
#define GPIOF_TG_TG5_Msk                  (0x20UL)                  /*!< TG5 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG6_Pos                  (6UL)                     /*!< TG6 (Bit 6) */
#define GPIOF_TG_TG6_Msk                  (0x40UL)                  /*!< TG6 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG7_Pos                  (7UL)                     /*!< TG7 (Bit 7) */
#define GPIOF_TG_TG7_Msk                  (0x80UL)                  /*!< TG7 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG8_Pos                  (8UL)                     /*!< TG8 (Bit 8) */
#define GPIOF_TG_TG8_Msk                  (0x100UL)                 /*!< TG8 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG9_Pos                  (9UL)                     /*!< TG9 (Bit 9) */
#define GPIOF_TG_TG9_Msk                  (0x200UL)                 /*!< TG9 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG10_Pos                 (10UL)                    /*!< TG10 (Bit 10) */
#define GPIOF_TG_TG10_Msk                 (0x400UL)                 /*!< TG10 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG11_Pos                 (11UL)                    /*!< TG11 (Bit 11) */
#define GPIOF_TG_TG11_Msk                 (0x800UL)                 /*!< TG11 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG12_Pos                 (12UL)                    /*!< TG12 (Bit 12) */
#define GPIOF_TG_TG12_Msk                 (0x1000UL)                /*!< TG12 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG13_Pos                 (13UL)                    /*!< TG13 (Bit 13) */
#define GPIOF_TG_TG13_Msk                 (0x2000UL)                /*!< TG13 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG14_Pos                 (14UL)                    /*!< TG14 (Bit 14) */
#define GPIOF_TG_TG14_Msk                 (0x4000UL)                /*!< TG14 (Bitfield-Mask: 0x01) */
#define GPIOF_TG_TG15_Pos                 (15UL)                    /*!< TG15 (Bit 15) */
#define GPIOF_TG_TG15_Msk                 (0x8000UL)                /*!< TG15 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           GPIOG                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define GPIOG_CTL_CTL15_Pos               (30UL)                    /*!< CTL15 (Bit 30) */
#define GPIOG_CTL_CTL15_Msk               (0xc0000000UL)            /*!< CTL15 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL14_Pos               (28UL)                    /*!< CTL14 (Bit 28) */
#define GPIOG_CTL_CTL14_Msk               (0x30000000UL)            /*!< CTL14 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL13_Pos               (26UL)                    /*!< CTL13 (Bit 26) */
#define GPIOG_CTL_CTL13_Msk               (0xc000000UL)             /*!< CTL13 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL12_Pos               (24UL)                    /*!< CTL12 (Bit 24) */
#define GPIOG_CTL_CTL12_Msk               (0x3000000UL)             /*!< CTL12 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL11_Pos               (22UL)                    /*!< CTL11 (Bit 22) */
#define GPIOG_CTL_CTL11_Msk               (0xc00000UL)              /*!< CTL11 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL10_Pos               (20UL)                    /*!< CTL10 (Bit 20) */
#define GPIOG_CTL_CTL10_Msk               (0x300000UL)              /*!< CTL10 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL9_Pos                (18UL)                    /*!< CTL9 (Bit 18) */
#define GPIOG_CTL_CTL9_Msk                (0xc0000UL)               /*!< CTL9 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL8_Pos                (16UL)                    /*!< CTL8 (Bit 16) */
#define GPIOG_CTL_CTL8_Msk                (0x30000UL)               /*!< CTL8 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL7_Pos                (14UL)                    /*!< CTL7 (Bit 14) */
#define GPIOG_CTL_CTL7_Msk                (0xc000UL)                /*!< CTL7 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL6_Pos                (12UL)                    /*!< CTL6 (Bit 12) */
#define GPIOG_CTL_CTL6_Msk                (0x3000UL)                /*!< CTL6 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL5_Pos                (10UL)                    /*!< CTL5 (Bit 10) */
#define GPIOG_CTL_CTL5_Msk                (0xc00UL)                 /*!< CTL5 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL4_Pos                (8UL)                     /*!< CTL4 (Bit 8) */
#define GPIOG_CTL_CTL4_Msk                (0x300UL)                 /*!< CTL4 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL3_Pos                (6UL)                     /*!< CTL3 (Bit 6) */
#define GPIOG_CTL_CTL3_Msk                (0xc0UL)                  /*!< CTL3 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL2_Pos                (4UL)                     /*!< CTL2 (Bit 4) */
#define GPIOG_CTL_CTL2_Msk                (0x30UL)                  /*!< CTL2 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL1_Pos                (2UL)                     /*!< CTL1 (Bit 2) */
#define GPIOG_CTL_CTL1_Msk                (0xcUL)                   /*!< CTL1 (Bitfield-Mask: 0x03) */
#define GPIOG_CTL_CTL0_Pos                (0UL)                     /*!< CTL0 (Bit 0) */
#define GPIOG_CTL_CTL0_Msk                (0x3UL)                   /*!< CTL0 (Bitfield-Mask: 0x03) */
/* =========================================================  OMODE  ========================================================= */
#define GPIOG_OMODE_OM15_Pos              (15UL)                    /*!< OM15 (Bit 15) */
#define GPIOG_OMODE_OM15_Msk              (0x8000UL)                /*!< OM15 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM14_Pos              (14UL)                    /*!< OM14 (Bit 14) */
#define GPIOG_OMODE_OM14_Msk              (0x4000UL)                /*!< OM14 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM13_Pos              (13UL)                    /*!< OM13 (Bit 13) */
#define GPIOG_OMODE_OM13_Msk              (0x2000UL)                /*!< OM13 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM12_Pos              (12UL)                    /*!< OM12 (Bit 12) */
#define GPIOG_OMODE_OM12_Msk              (0x1000UL)                /*!< OM12 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM11_Pos              (11UL)                    /*!< OM11 (Bit 11) */
#define GPIOG_OMODE_OM11_Msk              (0x800UL)                 /*!< OM11 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM10_Pos              (10UL)                    /*!< OM10 (Bit 10) */
#define GPIOG_OMODE_OM10_Msk              (0x400UL)                 /*!< OM10 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM9_Pos               (9UL)                     /*!< OM9 (Bit 9) */
#define GPIOG_OMODE_OM9_Msk               (0x200UL)                 /*!< OM9 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM8_Pos               (8UL)                     /*!< OM8 (Bit 8) */
#define GPIOG_OMODE_OM8_Msk               (0x100UL)                 /*!< OM8 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM7_Pos               (7UL)                     /*!< OM7 (Bit 7) */
#define GPIOG_OMODE_OM7_Msk               (0x80UL)                  /*!< OM7 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM6_Pos               (6UL)                     /*!< OM6 (Bit 6) */
#define GPIOG_OMODE_OM6_Msk               (0x40UL)                  /*!< OM6 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM5_Pos               (5UL)                     /*!< OM5 (Bit 5) */
#define GPIOG_OMODE_OM5_Msk               (0x20UL)                  /*!< OM5 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM4_Pos               (4UL)                     /*!< OM4 (Bit 4) */
#define GPIOG_OMODE_OM4_Msk               (0x10UL)                  /*!< OM4 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM3_Pos               (3UL)                     /*!< OM3 (Bit 3) */
#define GPIOG_OMODE_OM3_Msk               (0x8UL)                   /*!< OM3 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM2_Pos               (2UL)                     /*!< OM2 (Bit 2) */
#define GPIOG_OMODE_OM2_Msk               (0x4UL)                   /*!< OM2 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM1_Pos               (1UL)                     /*!< OM1 (Bit 1) */
#define GPIOG_OMODE_OM1_Msk               (0x2UL)                   /*!< OM1 (Bitfield-Mask: 0x01) */
#define GPIOG_OMODE_OM0_Pos               (0UL)                     /*!< OM0 (Bit 0) */
#define GPIOG_OMODE_OM0_Msk               (0x1UL)                   /*!< OM0 (Bitfield-Mask: 0x01) */
/* =========================================================  OSPD  ========================================================== */
#define GPIOG_OSPD_OSPD15_Pos             (30UL)                    /*!< OSPD15 (Bit 30) */
#define GPIOG_OSPD_OSPD15_Msk             (0xc0000000UL)            /*!< OSPD15 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD14_Pos             (28UL)                    /*!< OSPD14 (Bit 28) */
#define GPIOG_OSPD_OSPD14_Msk             (0x30000000UL)            /*!< OSPD14 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD13_Pos             (26UL)                    /*!< OSPD13 (Bit 26) */
#define GPIOG_OSPD_OSPD13_Msk             (0xc000000UL)             /*!< OSPD13 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD12_Pos             (24UL)                    /*!< OSPD12 (Bit 24) */
#define GPIOG_OSPD_OSPD12_Msk             (0x3000000UL)             /*!< OSPD12 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD11_Pos             (22UL)                    /*!< OSPD11 (Bit 22) */
#define GPIOG_OSPD_OSPD11_Msk             (0xc00000UL)              /*!< OSPD11 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD10_Pos             (20UL)                    /*!< OSPD10 (Bit 20) */
#define GPIOG_OSPD_OSPD10_Msk             (0x300000UL)              /*!< OSPD10 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD9_Pos              (18UL)                    /*!< OSPD9 (Bit 18) */
#define GPIOG_OSPD_OSPD9_Msk              (0xc0000UL)               /*!< OSPD9 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD8_Pos              (16UL)                    /*!< OSPD8 (Bit 16) */
#define GPIOG_OSPD_OSPD8_Msk              (0x30000UL)               /*!< OSPD8 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD7_Pos              (14UL)                    /*!< OSPD7 (Bit 14) */
#define GPIOG_OSPD_OSPD7_Msk              (0xc000UL)                /*!< OSPD7 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD6_Pos              (12UL)                    /*!< OSPD6 (Bit 12) */
#define GPIOG_OSPD_OSPD6_Msk              (0x3000UL)                /*!< OSPD6 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD5_Pos              (10UL)                    /*!< OSPD5 (Bit 10) */
#define GPIOG_OSPD_OSPD5_Msk              (0xc00UL)                 /*!< OSPD5 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD4_Pos              (8UL)                     /*!< OSPD4 (Bit 8) */
#define GPIOG_OSPD_OSPD4_Msk              (0x300UL)                 /*!< OSPD4 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD3_Pos              (6UL)                     /*!< OSPD3 (Bit 6) */
#define GPIOG_OSPD_OSPD3_Msk              (0xc0UL)                  /*!< OSPD3 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD2_Pos              (4UL)                     /*!< OSPD2 (Bit 4) */
#define GPIOG_OSPD_OSPD2_Msk              (0x30UL)                  /*!< OSPD2 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD1_Pos              (2UL)                     /*!< OSPD1 (Bit 2) */
#define GPIOG_OSPD_OSPD1_Msk              (0xcUL)                   /*!< OSPD1 (Bitfield-Mask: 0x03) */
#define GPIOG_OSPD_OSPD0_Pos              (0UL)                     /*!< OSPD0 (Bit 0) */
#define GPIOG_OSPD_OSPD0_Msk              (0x3UL)                   /*!< OSPD0 (Bitfield-Mask: 0x03) */
/* ==========================================================  PUD  ========================================================== */
#define GPIOG_PUD_PUD15_Pos               (30UL)                    /*!< PUD15 (Bit 30) */
#define GPIOG_PUD_PUD15_Msk               (0xc0000000UL)            /*!< PUD15 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD14_Pos               (28UL)                    /*!< PUD14 (Bit 28) */
#define GPIOG_PUD_PUD14_Msk               (0x30000000UL)            /*!< PUD14 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD13_Pos               (26UL)                    /*!< PUD13 (Bit 26) */
#define GPIOG_PUD_PUD13_Msk               (0xc000000UL)             /*!< PUD13 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD12_Pos               (24UL)                    /*!< PUD12 (Bit 24) */
#define GPIOG_PUD_PUD12_Msk               (0x3000000UL)             /*!< PUD12 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD11_Pos               (22UL)                    /*!< PUD11 (Bit 22) */
#define GPIOG_PUD_PUD11_Msk               (0xc00000UL)              /*!< PUD11 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD10_Pos               (20UL)                    /*!< PUD10 (Bit 20) */
#define GPIOG_PUD_PUD10_Msk               (0x300000UL)              /*!< PUD10 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD9_Pos                (18UL)                    /*!< PUD9 (Bit 18) */
#define GPIOG_PUD_PUD9_Msk                (0xc0000UL)               /*!< PUD9 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD8_Pos                (16UL)                    /*!< PUD8 (Bit 16) */
#define GPIOG_PUD_PUD8_Msk                (0x30000UL)               /*!< PUD8 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD7_Pos                (14UL)                    /*!< PUD7 (Bit 14) */
#define GPIOG_PUD_PUD7_Msk                (0xc000UL)                /*!< PUD7 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD6_Pos                (12UL)                    /*!< PUD6 (Bit 12) */
#define GPIOG_PUD_PUD6_Msk                (0x3000UL)                /*!< PUD6 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD5_Pos                (10UL)                    /*!< PUD5 (Bit 10) */
#define GPIOG_PUD_PUD5_Msk                (0xc00UL)                 /*!< PUD5 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD4_Pos                (8UL)                     /*!< PUD4 (Bit 8) */
#define GPIOG_PUD_PUD4_Msk                (0x300UL)                 /*!< PUD4 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD3_Pos                (6UL)                     /*!< PUD3 (Bit 6) */
#define GPIOG_PUD_PUD3_Msk                (0xc0UL)                  /*!< PUD3 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD2_Pos                (4UL)                     /*!< PUD2 (Bit 4) */
#define GPIOG_PUD_PUD2_Msk                (0x30UL)                  /*!< PUD2 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD1_Pos                (2UL)                     /*!< PUD1 (Bit 2) */
#define GPIOG_PUD_PUD1_Msk                (0xcUL)                   /*!< PUD1 (Bitfield-Mask: 0x03) */
#define GPIOG_PUD_PUD0_Pos                (0UL)                     /*!< PUD0 (Bit 0) */
#define GPIOG_PUD_PUD0_Msk                (0x3UL)                   /*!< PUD0 (Bitfield-Mask: 0x03) */
/* =========================================================  ISTAT  ========================================================= */
#define GPIOG_ISTAT_ISTAT15_Pos           (15UL)                    /*!< ISTAT15 (Bit 15) */
#define GPIOG_ISTAT_ISTAT15_Msk           (0x8000UL)                /*!< ISTAT15 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT14_Pos           (14UL)                    /*!< ISTAT14 (Bit 14) */
#define GPIOG_ISTAT_ISTAT14_Msk           (0x4000UL)                /*!< ISTAT14 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT13_Pos           (13UL)                    /*!< ISTAT13 (Bit 13) */
#define GPIOG_ISTAT_ISTAT13_Msk           (0x2000UL)                /*!< ISTAT13 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT12_Pos           (12UL)                    /*!< ISTAT12 (Bit 12) */
#define GPIOG_ISTAT_ISTAT12_Msk           (0x1000UL)                /*!< ISTAT12 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT11_Pos           (11UL)                    /*!< ISTAT11 (Bit 11) */
#define GPIOG_ISTAT_ISTAT11_Msk           (0x800UL)                 /*!< ISTAT11 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT10_Pos           (10UL)                    /*!< ISTAT10 (Bit 10) */
#define GPIOG_ISTAT_ISTAT10_Msk           (0x400UL)                 /*!< ISTAT10 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT9_Pos            (9UL)                     /*!< ISTAT9 (Bit 9) */
#define GPIOG_ISTAT_ISTAT9_Msk            (0x200UL)                 /*!< ISTAT9 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT8_Pos            (8UL)                     /*!< ISTAT8 (Bit 8) */
#define GPIOG_ISTAT_ISTAT8_Msk            (0x100UL)                 /*!< ISTAT8 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT7_Pos            (7UL)                     /*!< ISTAT7 (Bit 7) */
#define GPIOG_ISTAT_ISTAT7_Msk            (0x80UL)                  /*!< ISTAT7 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT6_Pos            (6UL)                     /*!< ISTAT6 (Bit 6) */
#define GPIOG_ISTAT_ISTAT6_Msk            (0x40UL)                  /*!< ISTAT6 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT5_Pos            (5UL)                     /*!< ISTAT5 (Bit 5) */
#define GPIOG_ISTAT_ISTAT5_Msk            (0x20UL)                  /*!< ISTAT5 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT4_Pos            (4UL)                     /*!< ISTAT4 (Bit 4) */
#define GPIOG_ISTAT_ISTAT4_Msk            (0x10UL)                  /*!< ISTAT4 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT3_Pos            (3UL)                     /*!< ISTAT3 (Bit 3) */
#define GPIOG_ISTAT_ISTAT3_Msk            (0x8UL)                   /*!< ISTAT3 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT2_Pos            (2UL)                     /*!< ISTAT2 (Bit 2) */
#define GPIOG_ISTAT_ISTAT2_Msk            (0x4UL)                   /*!< ISTAT2 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT1_Pos            (1UL)                     /*!< ISTAT1 (Bit 1) */
#define GPIOG_ISTAT_ISTAT1_Msk            (0x2UL)                   /*!< ISTAT1 (Bitfield-Mask: 0x01) */
#define GPIOG_ISTAT_ISTAT0_Pos            (0UL)                     /*!< ISTAT0 (Bit 0) */
#define GPIOG_ISTAT_ISTAT0_Msk            (0x1UL)                   /*!< ISTAT0 (Bitfield-Mask: 0x01) */
/* =========================================================  OCTL  ========================================================== */
#define GPIOG_OCTL_OCTL15_Pos             (15UL)                    /*!< OCTL15 (Bit 15) */
#define GPIOG_OCTL_OCTL15_Msk             (0x8000UL)                /*!< OCTL15 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL14_Pos             (14UL)                    /*!< OCTL14 (Bit 14) */
#define GPIOG_OCTL_OCTL14_Msk             (0x4000UL)                /*!< OCTL14 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL13_Pos             (13UL)                    /*!< OCTL13 (Bit 13) */
#define GPIOG_OCTL_OCTL13_Msk             (0x2000UL)                /*!< OCTL13 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL12_Pos             (12UL)                    /*!< OCTL12 (Bit 12) */
#define GPIOG_OCTL_OCTL12_Msk             (0x1000UL)                /*!< OCTL12 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL11_Pos             (11UL)                    /*!< OCTL11 (Bit 11) */
#define GPIOG_OCTL_OCTL11_Msk             (0x800UL)                 /*!< OCTL11 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL10_Pos             (10UL)                    /*!< OCTL10 (Bit 10) */
#define GPIOG_OCTL_OCTL10_Msk             (0x400UL)                 /*!< OCTL10 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL9_Pos              (9UL)                     /*!< OCTL9 (Bit 9) */
#define GPIOG_OCTL_OCTL9_Msk              (0x200UL)                 /*!< OCTL9 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL8_Pos              (8UL)                     /*!< OCTL8 (Bit 8) */
#define GPIOG_OCTL_OCTL8_Msk              (0x100UL)                 /*!< OCTL8 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL7_Pos              (7UL)                     /*!< OCTL7 (Bit 7) */
#define GPIOG_OCTL_OCTL7_Msk              (0x80UL)                  /*!< OCTL7 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL6_Pos              (6UL)                     /*!< OCTL6 (Bit 6) */
#define GPIOG_OCTL_OCTL6_Msk              (0x40UL)                  /*!< OCTL6 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL5_Pos              (5UL)                     /*!< OCTL5 (Bit 5) */
#define GPIOG_OCTL_OCTL5_Msk              (0x20UL)                  /*!< OCTL5 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL4_Pos              (4UL)                     /*!< OCTL4 (Bit 4) */
#define GPIOG_OCTL_OCTL4_Msk              (0x10UL)                  /*!< OCTL4 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL3_Pos              (3UL)                     /*!< OCTL3 (Bit 3) */
#define GPIOG_OCTL_OCTL3_Msk              (0x8UL)                   /*!< OCTL3 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL2_Pos              (2UL)                     /*!< OCTL2 (Bit 2) */
#define GPIOG_OCTL_OCTL2_Msk              (0x4UL)                   /*!< OCTL2 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL1_Pos              (1UL)                     /*!< OCTL1 (Bit 1) */
#define GPIOG_OCTL_OCTL1_Msk              (0x2UL)                   /*!< OCTL1 (Bitfield-Mask: 0x01) */
#define GPIOG_OCTL_OCTL0_Pos              (0UL)                     /*!< OCTL0 (Bit 0) */
#define GPIOG_OCTL_OCTL0_Msk              (0x1UL)                   /*!< OCTL0 (Bitfield-Mask: 0x01) */
/* ==========================================================  BOP  ========================================================== */
#define GPIOG_BOP_CR15_Pos                (31UL)                    /*!< CR15 (Bit 31) */
#define GPIOG_BOP_CR15_Msk                (0x80000000UL)            /*!< CR15 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR14_Pos                (30UL)                    /*!< CR14 (Bit 30) */
#define GPIOG_BOP_CR14_Msk                (0x40000000UL)            /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR13_Pos                (29UL)                    /*!< CR13 (Bit 29) */
#define GPIOG_BOP_CR13_Msk                (0x20000000UL)            /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR12_Pos                (28UL)                    /*!< CR12 (Bit 28) */
#define GPIOG_BOP_CR12_Msk                (0x10000000UL)            /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR11_Pos                (27UL)                    /*!< CR11 (Bit 27) */
#define GPIOG_BOP_CR11_Msk                (0x8000000UL)             /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR10_Pos                (26UL)                    /*!< CR10 (Bit 26) */
#define GPIOG_BOP_CR10_Msk                (0x4000000UL)             /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR9_Pos                 (25UL)                    /*!< CR9 (Bit 25) */
#define GPIOG_BOP_CR9_Msk                 (0x2000000UL)             /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR8_Pos                 (24UL)                    /*!< CR8 (Bit 24) */
#define GPIOG_BOP_CR8_Msk                 (0x1000000UL)             /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR7_Pos                 (23UL)                    /*!< CR7 (Bit 23) */
#define GPIOG_BOP_CR7_Msk                 (0x800000UL)              /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR6_Pos                 (22UL)                    /*!< CR6 (Bit 22) */
#define GPIOG_BOP_CR6_Msk                 (0x400000UL)              /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR5_Pos                 (21UL)                    /*!< CR5 (Bit 21) */
#define GPIOG_BOP_CR5_Msk                 (0x200000UL)              /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR4_Pos                 (20UL)                    /*!< CR4 (Bit 20) */
#define GPIOG_BOP_CR4_Msk                 (0x100000UL)              /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR3_Pos                 (19UL)                    /*!< CR3 (Bit 19) */
#define GPIOG_BOP_CR3_Msk                 (0x80000UL)               /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR2_Pos                 (18UL)                    /*!< CR2 (Bit 18) */
#define GPIOG_BOP_CR2_Msk                 (0x40000UL)               /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR1_Pos                 (17UL)                    /*!< CR1 (Bit 17) */
#define GPIOG_BOP_CR1_Msk                 (0x20000UL)               /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_CR0_Pos                 (16UL)                    /*!< CR0 (Bit 16) */
#define GPIOG_BOP_CR0_Msk                 (0x10000UL)               /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP15_Pos               (15UL)                    /*!< BOP15 (Bit 15) */
#define GPIOG_BOP_BOP15_Msk               (0x8000UL)                /*!< BOP15 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP14_Pos               (14UL)                    /*!< BOP14 (Bit 14) */
#define GPIOG_BOP_BOP14_Msk               (0x4000UL)                /*!< BOP14 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP13_Pos               (13UL)                    /*!< BOP13 (Bit 13) */
#define GPIOG_BOP_BOP13_Msk               (0x2000UL)                /*!< BOP13 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP12_Pos               (12UL)                    /*!< BOP12 (Bit 12) */
#define GPIOG_BOP_BOP12_Msk               (0x1000UL)                /*!< BOP12 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP11_Pos               (11UL)                    /*!< BOP11 (Bit 11) */
#define GPIOG_BOP_BOP11_Msk               (0x800UL)                 /*!< BOP11 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP10_Pos               (10UL)                    /*!< BOP10 (Bit 10) */
#define GPIOG_BOP_BOP10_Msk               (0x400UL)                 /*!< BOP10 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP9_Pos                (9UL)                     /*!< BOP9 (Bit 9) */
#define GPIOG_BOP_BOP9_Msk                (0x200UL)                 /*!< BOP9 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP8_Pos                (8UL)                     /*!< BOP8 (Bit 8) */
#define GPIOG_BOP_BOP8_Msk                (0x100UL)                 /*!< BOP8 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP7_Pos                (7UL)                     /*!< BOP7 (Bit 7) */
#define GPIOG_BOP_BOP7_Msk                (0x80UL)                  /*!< BOP7 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP6_Pos                (6UL)                     /*!< BOP6 (Bit 6) */
#define GPIOG_BOP_BOP6_Msk                (0x40UL)                  /*!< BOP6 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP5_Pos                (5UL)                     /*!< BOP5 (Bit 5) */
#define GPIOG_BOP_BOP5_Msk                (0x20UL)                  /*!< BOP5 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP4_Pos                (4UL)                     /*!< BOP4 (Bit 4) */
#define GPIOG_BOP_BOP4_Msk                (0x10UL)                  /*!< BOP4 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP3_Pos                (3UL)                     /*!< BOP3 (Bit 3) */
#define GPIOG_BOP_BOP3_Msk                (0x8UL)                   /*!< BOP3 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP2_Pos                (2UL)                     /*!< BOP2 (Bit 2) */
#define GPIOG_BOP_BOP2_Msk                (0x4UL)                   /*!< BOP2 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP1_Pos                (1UL)                     /*!< BOP1 (Bit 1) */
#define GPIOG_BOP_BOP1_Msk                (0x2UL)                   /*!< BOP1 (Bitfield-Mask: 0x01) */
#define GPIOG_BOP_BOP0_Pos                (0UL)                     /*!< BOP0 (Bit 0) */
#define GPIOG_BOP_BOP0_Msk                (0x1UL)                   /*!< BOP0 (Bitfield-Mask: 0x01) */
/* =========================================================  LOCK  ========================================================== */
#define GPIOG_LOCK_LKK_Pos                (16UL)                    /*!< LKK (Bit 16) */
#define GPIOG_LOCK_LKK_Msk                (0x10000UL)               /*!< LKK (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK15_Pos               (15UL)                    /*!< LK15 (Bit 15) */
#define GPIOG_LOCK_LK15_Msk               (0x8000UL)                /*!< LK15 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK14_Pos               (14UL)                    /*!< LK14 (Bit 14) */
#define GPIOG_LOCK_LK14_Msk               (0x4000UL)                /*!< LK14 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK13_Pos               (13UL)                    /*!< LK13 (Bit 13) */
#define GPIOG_LOCK_LK13_Msk               (0x2000UL)                /*!< LK13 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK12_Pos               (12UL)                    /*!< LK12 (Bit 12) */
#define GPIOG_LOCK_LK12_Msk               (0x1000UL)                /*!< LK12 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK11_Pos               (11UL)                    /*!< LK11 (Bit 11) */
#define GPIOG_LOCK_LK11_Msk               (0x800UL)                 /*!< LK11 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK10_Pos               (10UL)                    /*!< LK10 (Bit 10) */
#define GPIOG_LOCK_LK10_Msk               (0x400UL)                 /*!< LK10 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK9_Pos                (9UL)                     /*!< LK9 (Bit 9) */
#define GPIOG_LOCK_LK9_Msk                (0x200UL)                 /*!< LK9 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK8_Pos                (8UL)                     /*!< LK8 (Bit 8) */
#define GPIOG_LOCK_LK8_Msk                (0x100UL)                 /*!< LK8 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK7_Pos                (7UL)                     /*!< LK7 (Bit 7) */
#define GPIOG_LOCK_LK7_Msk                (0x80UL)                  /*!< LK7 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK6_Pos                (6UL)                     /*!< LK6 (Bit 6) */
#define GPIOG_LOCK_LK6_Msk                (0x40UL)                  /*!< LK6 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK5_Pos                (5UL)                     /*!< LK5 (Bit 5) */
#define GPIOG_LOCK_LK5_Msk                (0x20UL)                  /*!< LK5 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK4_Pos                (4UL)                     /*!< LK4 (Bit 4) */
#define GPIOG_LOCK_LK4_Msk                (0x10UL)                  /*!< LK4 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK3_Pos                (3UL)                     /*!< LK3 (Bit 3) */
#define GPIOG_LOCK_LK3_Msk                (0x8UL)                   /*!< LK3 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK2_Pos                (2UL)                     /*!< LK2 (Bit 2) */
#define GPIOG_LOCK_LK2_Msk                (0x4UL)                   /*!< LK2 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK1_Pos                (1UL)                     /*!< LK1 (Bit 1) */
#define GPIOG_LOCK_LK1_Msk                (0x2UL)                   /*!< LK1 (Bitfield-Mask: 0x01) */
#define GPIOG_LOCK_LK0_Pos                (0UL)                     /*!< LK0 (Bit 0) */
#define GPIOG_LOCK_LK0_Msk                (0x1UL)                   /*!< LK0 (Bitfield-Mask: 0x01) */
/* ========================================================  AFSEL0  ========================================================= */
#define GPIOG_AFSEL0_SEL7_Pos             (28UL)                    /*!< SEL7 (Bit 28) */
#define GPIOG_AFSEL0_SEL7_Msk             (0xf0000000UL)            /*!< SEL7 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL0_SEL6_Pos             (24UL)                    /*!< SEL6 (Bit 24) */
#define GPIOG_AFSEL0_SEL6_Msk             (0xf000000UL)             /*!< SEL6 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL0_SEL5_Pos             (20UL)                    /*!< SEL5 (Bit 20) */
#define GPIOG_AFSEL0_SEL5_Msk             (0xf00000UL)              /*!< SEL5 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL0_SEL4_Pos             (16UL)                    /*!< SEL4 (Bit 16) */
#define GPIOG_AFSEL0_SEL4_Msk             (0xf0000UL)               /*!< SEL4 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL0_SEL3_Pos             (12UL)                    /*!< SEL3 (Bit 12) */
#define GPIOG_AFSEL0_SEL3_Msk             (0xf000UL)                /*!< SEL3 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL0_SEL2_Pos             (8UL)                     /*!< SEL2 (Bit 8) */
#define GPIOG_AFSEL0_SEL2_Msk             (0xf00UL)                 /*!< SEL2 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL0_SEL1_Pos             (4UL)                     /*!< SEL1 (Bit 4) */
#define GPIOG_AFSEL0_SEL1_Msk             (0xf0UL)                  /*!< SEL1 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL0_SEL0_Pos             (0UL)                     /*!< SEL0 (Bit 0) */
#define GPIOG_AFSEL0_SEL0_Msk             (0xfUL)                   /*!< SEL0 (Bitfield-Mask: 0x0f) */
/* ========================================================  AFSEL1  ========================================================= */
#define GPIOG_AFSEL1_SEL15_Pos            (28UL)                    /*!< SEL15 (Bit 28) */
#define GPIOG_AFSEL1_SEL15_Msk            (0xf0000000UL)            /*!< SEL15 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL1_SEL14_Pos            (24UL)                    /*!< SEL14 (Bit 24) */
#define GPIOG_AFSEL1_SEL14_Msk            (0xf000000UL)             /*!< SEL14 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL1_SEL13_Pos            (20UL)                    /*!< SEL13 (Bit 20) */
#define GPIOG_AFSEL1_SEL13_Msk            (0xf00000UL)              /*!< SEL13 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL1_SEL12_Pos            (16UL)                    /*!< SEL12 (Bit 16) */
#define GPIOG_AFSEL1_SEL12_Msk            (0xf0000UL)               /*!< SEL12 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL1_SEL11_Pos            (12UL)                    /*!< SEL11 (Bit 12) */
#define GPIOG_AFSEL1_SEL11_Msk            (0xf000UL)                /*!< SEL11 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL1_SEL10_Pos            (8UL)                     /*!< SEL10 (Bit 8) */
#define GPIOG_AFSEL1_SEL10_Msk            (0xf00UL)                 /*!< SEL10 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL1_SEL9_Pos             (4UL)                     /*!< SEL9 (Bit 4) */
#define GPIOG_AFSEL1_SEL9_Msk             (0xf0UL)                  /*!< SEL9 (Bitfield-Mask: 0x0f) */
#define GPIOG_AFSEL1_SEL8_Pos             (0UL)                     /*!< SEL8 (Bit 0) */
#define GPIOG_AFSEL1_SEL8_Msk             (0xfUL)                   /*!< SEL8 (Bitfield-Mask: 0x0f) */
/* ==========================================================  BC  =========================================================== */
#define GPIOG_BC_CR0_Pos                  (0UL)                     /*!< CR0 (Bit 0) */
#define GPIOG_BC_CR0_Msk                  (0x1UL)                   /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR1_Pos                  (1UL)                     /*!< CR1 (Bit 1) */
#define GPIOG_BC_CR1_Msk                  (0x2UL)                   /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR2_Pos                  (2UL)                     /*!< CR2 (Bit 2) */
#define GPIOG_BC_CR2_Msk                  (0x4UL)                   /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR3_Pos                  (3UL)                     /*!< CR3 (Bit 3) */
#define GPIOG_BC_CR3_Msk                  (0x8UL)                   /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR4_Pos                  (4UL)                     /*!< CR4 (Bit 4) */
#define GPIOG_BC_CR4_Msk                  (0x10UL)                  /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR5_Pos                  (5UL)                     /*!< CR5 (Bit 5) */
#define GPIOG_BC_CR5_Msk                  (0x20UL)                  /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR6_Pos                  (6UL)                     /*!< CR6 (Bit 6) */
#define GPIOG_BC_CR6_Msk                  (0x40UL)                  /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR7_Pos                  (7UL)                     /*!< CR7 (Bit 7) */
#define GPIOG_BC_CR7_Msk                  (0x80UL)                  /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR8_Pos                  (8UL)                     /*!< CR8 (Bit 8) */
#define GPIOG_BC_CR8_Msk                  (0x100UL)                 /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR9_Pos                  (9UL)                     /*!< CR9 (Bit 9) */
#define GPIOG_BC_CR9_Msk                  (0x200UL)                 /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR10_Pos                 (10UL)                    /*!< CR10 (Bit 10) */
#define GPIOG_BC_CR10_Msk                 (0x400UL)                 /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR11_Pos                 (11UL)                    /*!< CR11 (Bit 11) */
#define GPIOG_BC_CR11_Msk                 (0x800UL)                 /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR12_Pos                 (12UL)                    /*!< CR12 (Bit 12) */
#define GPIOG_BC_CR12_Msk                 (0x1000UL)                /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR13_Pos                 (13UL)                    /*!< CR13 (Bit 13) */
#define GPIOG_BC_CR13_Msk                 (0x2000UL)                /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR14_Pos                 (14UL)                    /*!< CR14 (Bit 14) */
#define GPIOG_BC_CR14_Msk                 (0x4000UL)                /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOG_BC_CR15_Pos                 (15UL)                    /*!< CR15 (Bit 15) */
#define GPIOG_BC_CR15_Msk                 (0x8000UL)                /*!< CR15 (Bitfield-Mask: 0x01) */
/* ==========================================================  TG  =========================================================== */
#define GPIOG_TG_TG0_Pos                  (0UL)                     /*!< TG0 (Bit 0) */
#define GPIOG_TG_TG0_Msk                  (0x1UL)                   /*!< TG0 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG1_Pos                  (1UL)                     /*!< TG1 (Bit 1) */
#define GPIOG_TG_TG1_Msk                  (0x2UL)                   /*!< TG1 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG2_Pos                  (2UL)                     /*!< TG2 (Bit 2) */
#define GPIOG_TG_TG2_Msk                  (0x4UL)                   /*!< TG2 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG3_Pos                  (3UL)                     /*!< TG3 (Bit 3) */
#define GPIOG_TG_TG3_Msk                  (0x8UL)                   /*!< TG3 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG4_Pos                  (4UL)                     /*!< TG4 (Bit 4) */
#define GPIOG_TG_TG4_Msk                  (0x10UL)                  /*!< TG4 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG5_Pos                  (5UL)                     /*!< TG5 (Bit 5) */
#define GPIOG_TG_TG5_Msk                  (0x20UL)                  /*!< TG5 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG6_Pos                  (6UL)                     /*!< TG6 (Bit 6) */
#define GPIOG_TG_TG6_Msk                  (0x40UL)                  /*!< TG6 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG7_Pos                  (7UL)                     /*!< TG7 (Bit 7) */
#define GPIOG_TG_TG7_Msk                  (0x80UL)                  /*!< TG7 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG8_Pos                  (8UL)                     /*!< TG8 (Bit 8) */
#define GPIOG_TG_TG8_Msk                  (0x100UL)                 /*!< TG8 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG9_Pos                  (9UL)                     /*!< TG9 (Bit 9) */
#define GPIOG_TG_TG9_Msk                  (0x200UL)                 /*!< TG9 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG10_Pos                 (10UL)                    /*!< TG10 (Bit 10) */
#define GPIOG_TG_TG10_Msk                 (0x400UL)                 /*!< TG10 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG11_Pos                 (11UL)                    /*!< TG11 (Bit 11) */
#define GPIOG_TG_TG11_Msk                 (0x800UL)                 /*!< TG11 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG12_Pos                 (12UL)                    /*!< TG12 (Bit 12) */
#define GPIOG_TG_TG12_Msk                 (0x1000UL)                /*!< TG12 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG13_Pos                 (13UL)                    /*!< TG13 (Bit 13) */
#define GPIOG_TG_TG13_Msk                 (0x2000UL)                /*!< TG13 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG14_Pos                 (14UL)                    /*!< TG14 (Bit 14) */
#define GPIOG_TG_TG14_Msk                 (0x4000UL)                /*!< TG14 (Bitfield-Mask: 0x01) */
#define GPIOG_TG_TG15_Pos                 (15UL)                    /*!< TG15 (Bit 15) */
#define GPIOG_TG_TG15_Msk                 (0x8000UL)                /*!< TG15 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           GPIOH                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define GPIOH_CTL_CTL15_Pos               (30UL)                    /*!< CTL15 (Bit 30) */
#define GPIOH_CTL_CTL15_Msk               (0xc0000000UL)            /*!< CTL15 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL14_Pos               (28UL)                    /*!< CTL14 (Bit 28) */
#define GPIOH_CTL_CTL14_Msk               (0x30000000UL)            /*!< CTL14 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL13_Pos               (26UL)                    /*!< CTL13 (Bit 26) */
#define GPIOH_CTL_CTL13_Msk               (0xc000000UL)             /*!< CTL13 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL12_Pos               (24UL)                    /*!< CTL12 (Bit 24) */
#define GPIOH_CTL_CTL12_Msk               (0x3000000UL)             /*!< CTL12 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL11_Pos               (22UL)                    /*!< CTL11 (Bit 22) */
#define GPIOH_CTL_CTL11_Msk               (0xc00000UL)              /*!< CTL11 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL10_Pos               (20UL)                    /*!< CTL10 (Bit 20) */
#define GPIOH_CTL_CTL10_Msk               (0x300000UL)              /*!< CTL10 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL9_Pos                (18UL)                    /*!< CTL9 (Bit 18) */
#define GPIOH_CTL_CTL9_Msk                (0xc0000UL)               /*!< CTL9 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL8_Pos                (16UL)                    /*!< CTL8 (Bit 16) */
#define GPIOH_CTL_CTL8_Msk                (0x30000UL)               /*!< CTL8 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL7_Pos                (14UL)                    /*!< CTL7 (Bit 14) */
#define GPIOH_CTL_CTL7_Msk                (0xc000UL)                /*!< CTL7 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL6_Pos                (12UL)                    /*!< CTL6 (Bit 12) */
#define GPIOH_CTL_CTL6_Msk                (0x3000UL)                /*!< CTL6 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL5_Pos                (10UL)                    /*!< CTL5 (Bit 10) */
#define GPIOH_CTL_CTL5_Msk                (0xc00UL)                 /*!< CTL5 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL4_Pos                (8UL)                     /*!< CTL4 (Bit 8) */
#define GPIOH_CTL_CTL4_Msk                (0x300UL)                 /*!< CTL4 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL3_Pos                (6UL)                     /*!< CTL3 (Bit 6) */
#define GPIOH_CTL_CTL3_Msk                (0xc0UL)                  /*!< CTL3 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL2_Pos                (4UL)                     /*!< CTL2 (Bit 4) */
#define GPIOH_CTL_CTL2_Msk                (0x30UL)                  /*!< CTL2 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL1_Pos                (2UL)                     /*!< CTL1 (Bit 2) */
#define GPIOH_CTL_CTL1_Msk                (0xcUL)                   /*!< CTL1 (Bitfield-Mask: 0x03) */
#define GPIOH_CTL_CTL0_Pos                (0UL)                     /*!< CTL0 (Bit 0) */
#define GPIOH_CTL_CTL0_Msk                (0x3UL)                   /*!< CTL0 (Bitfield-Mask: 0x03) */
/* =========================================================  OMODE  ========================================================= */
#define GPIOH_OMODE_OM15_Pos              (15UL)                    /*!< OM15 (Bit 15) */
#define GPIOH_OMODE_OM15_Msk              (0x8000UL)                /*!< OM15 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM14_Pos              (14UL)                    /*!< OM14 (Bit 14) */
#define GPIOH_OMODE_OM14_Msk              (0x4000UL)                /*!< OM14 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM13_Pos              (13UL)                    /*!< OM13 (Bit 13) */
#define GPIOH_OMODE_OM13_Msk              (0x2000UL)                /*!< OM13 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM12_Pos              (12UL)                    /*!< OM12 (Bit 12) */
#define GPIOH_OMODE_OM12_Msk              (0x1000UL)                /*!< OM12 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM11_Pos              (11UL)                    /*!< OM11 (Bit 11) */
#define GPIOH_OMODE_OM11_Msk              (0x800UL)                 /*!< OM11 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM10_Pos              (10UL)                    /*!< OM10 (Bit 10) */
#define GPIOH_OMODE_OM10_Msk              (0x400UL)                 /*!< OM10 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM9_Pos               (9UL)                     /*!< OM9 (Bit 9) */
#define GPIOH_OMODE_OM9_Msk               (0x200UL)                 /*!< OM9 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM8_Pos               (8UL)                     /*!< OM8 (Bit 8) */
#define GPIOH_OMODE_OM8_Msk               (0x100UL)                 /*!< OM8 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM7_Pos               (7UL)                     /*!< OM7 (Bit 7) */
#define GPIOH_OMODE_OM7_Msk               (0x80UL)                  /*!< OM7 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM6_Pos               (6UL)                     /*!< OM6 (Bit 6) */
#define GPIOH_OMODE_OM6_Msk               (0x40UL)                  /*!< OM6 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM5_Pos               (5UL)                     /*!< OM5 (Bit 5) */
#define GPIOH_OMODE_OM5_Msk               (0x20UL)                  /*!< OM5 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM4_Pos               (4UL)                     /*!< OM4 (Bit 4) */
#define GPIOH_OMODE_OM4_Msk               (0x10UL)                  /*!< OM4 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM3_Pos               (3UL)                     /*!< OM3 (Bit 3) */
#define GPIOH_OMODE_OM3_Msk               (0x8UL)                   /*!< OM3 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM2_Pos               (2UL)                     /*!< OM2 (Bit 2) */
#define GPIOH_OMODE_OM2_Msk               (0x4UL)                   /*!< OM2 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM1_Pos               (1UL)                     /*!< OM1 (Bit 1) */
#define GPIOH_OMODE_OM1_Msk               (0x2UL)                   /*!< OM1 (Bitfield-Mask: 0x01) */
#define GPIOH_OMODE_OM0_Pos               (0UL)                     /*!< OM0 (Bit 0) */
#define GPIOH_OMODE_OM0_Msk               (0x1UL)                   /*!< OM0 (Bitfield-Mask: 0x01) */
/* =========================================================  OSPD  ========================================================== */
#define GPIOH_OSPD_OSPD15_Pos             (30UL)                    /*!< OSPD15 (Bit 30) */
#define GPIOH_OSPD_OSPD15_Msk             (0xc0000000UL)            /*!< OSPD15 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD14_Pos             (28UL)                    /*!< OSPD14 (Bit 28) */
#define GPIOH_OSPD_OSPD14_Msk             (0x30000000UL)            /*!< OSPD14 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD13_Pos             (26UL)                    /*!< OSPD13 (Bit 26) */
#define GPIOH_OSPD_OSPD13_Msk             (0xc000000UL)             /*!< OSPD13 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD12_Pos             (24UL)                    /*!< OSPD12 (Bit 24) */
#define GPIOH_OSPD_OSPD12_Msk             (0x3000000UL)             /*!< OSPD12 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD11_Pos             (22UL)                    /*!< OSPD11 (Bit 22) */
#define GPIOH_OSPD_OSPD11_Msk             (0xc00000UL)              /*!< OSPD11 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD10_Pos             (20UL)                    /*!< OSPD10 (Bit 20) */
#define GPIOH_OSPD_OSPD10_Msk             (0x300000UL)              /*!< OSPD10 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD9_Pos              (18UL)                    /*!< OSPD9 (Bit 18) */
#define GPIOH_OSPD_OSPD9_Msk              (0xc0000UL)               /*!< OSPD9 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD8_Pos              (16UL)                    /*!< OSPD8 (Bit 16) */
#define GPIOH_OSPD_OSPD8_Msk              (0x30000UL)               /*!< OSPD8 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD7_Pos              (14UL)                    /*!< OSPD7 (Bit 14) */
#define GPIOH_OSPD_OSPD7_Msk              (0xc000UL)                /*!< OSPD7 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD6_Pos              (12UL)                    /*!< OSPD6 (Bit 12) */
#define GPIOH_OSPD_OSPD6_Msk              (0x3000UL)                /*!< OSPD6 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD5_Pos              (10UL)                    /*!< OSPD5 (Bit 10) */
#define GPIOH_OSPD_OSPD5_Msk              (0xc00UL)                 /*!< OSPD5 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD4_Pos              (8UL)                     /*!< OSPD4 (Bit 8) */
#define GPIOH_OSPD_OSPD4_Msk              (0x300UL)                 /*!< OSPD4 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD3_Pos              (6UL)                     /*!< OSPD3 (Bit 6) */
#define GPIOH_OSPD_OSPD3_Msk              (0xc0UL)                  /*!< OSPD3 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD2_Pos              (4UL)                     /*!< OSPD2 (Bit 4) */
#define GPIOH_OSPD_OSPD2_Msk              (0x30UL)                  /*!< OSPD2 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD1_Pos              (2UL)                     /*!< OSPD1 (Bit 2) */
#define GPIOH_OSPD_OSPD1_Msk              (0xcUL)                   /*!< OSPD1 (Bitfield-Mask: 0x03) */
#define GPIOH_OSPD_OSPD0_Pos              (0UL)                     /*!< OSPD0 (Bit 0) */
#define GPIOH_OSPD_OSPD0_Msk              (0x3UL)                   /*!< OSPD0 (Bitfield-Mask: 0x03) */
/* ==========================================================  PUD  ========================================================== */
#define GPIOH_PUD_PUD15_Pos               (30UL)                    /*!< PUD15 (Bit 30) */
#define GPIOH_PUD_PUD15_Msk               (0xc0000000UL)            /*!< PUD15 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD14_Pos               (28UL)                    /*!< PUD14 (Bit 28) */
#define GPIOH_PUD_PUD14_Msk               (0x30000000UL)            /*!< PUD14 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD13_Pos               (26UL)                    /*!< PUD13 (Bit 26) */
#define GPIOH_PUD_PUD13_Msk               (0xc000000UL)             /*!< PUD13 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD12_Pos               (24UL)                    /*!< PUD12 (Bit 24) */
#define GPIOH_PUD_PUD12_Msk               (0x3000000UL)             /*!< PUD12 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD11_Pos               (22UL)                    /*!< PUD11 (Bit 22) */
#define GPIOH_PUD_PUD11_Msk               (0xc00000UL)              /*!< PUD11 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD10_Pos               (20UL)                    /*!< PUD10 (Bit 20) */
#define GPIOH_PUD_PUD10_Msk               (0x300000UL)              /*!< PUD10 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD9_Pos                (18UL)                    /*!< PUD9 (Bit 18) */
#define GPIOH_PUD_PUD9_Msk                (0xc0000UL)               /*!< PUD9 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD8_Pos                (16UL)                    /*!< PUD8 (Bit 16) */
#define GPIOH_PUD_PUD8_Msk                (0x30000UL)               /*!< PUD8 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD7_Pos                (14UL)                    /*!< PUD7 (Bit 14) */
#define GPIOH_PUD_PUD7_Msk                (0xc000UL)                /*!< PUD7 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD6_Pos                (12UL)                    /*!< PUD6 (Bit 12) */
#define GPIOH_PUD_PUD6_Msk                (0x3000UL)                /*!< PUD6 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD5_Pos                (10UL)                    /*!< PUD5 (Bit 10) */
#define GPIOH_PUD_PUD5_Msk                (0xc00UL)                 /*!< PUD5 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD4_Pos                (8UL)                     /*!< PUD4 (Bit 8) */
#define GPIOH_PUD_PUD4_Msk                (0x300UL)                 /*!< PUD4 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD3_Pos                (6UL)                     /*!< PUD3 (Bit 6) */
#define GPIOH_PUD_PUD3_Msk                (0xc0UL)                  /*!< PUD3 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD2_Pos                (4UL)                     /*!< PUD2 (Bit 4) */
#define GPIOH_PUD_PUD2_Msk                (0x30UL)                  /*!< PUD2 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD1_Pos                (2UL)                     /*!< PUD1 (Bit 2) */
#define GPIOH_PUD_PUD1_Msk                (0xcUL)                   /*!< PUD1 (Bitfield-Mask: 0x03) */
#define GPIOH_PUD_PUD0_Pos                (0UL)                     /*!< PUD0 (Bit 0) */
#define GPIOH_PUD_PUD0_Msk                (0x3UL)                   /*!< PUD0 (Bitfield-Mask: 0x03) */
/* =========================================================  ISTAT  ========================================================= */
#define GPIOH_ISTAT_ISTAT15_Pos           (15UL)                    /*!< ISTAT15 (Bit 15) */
#define GPIOH_ISTAT_ISTAT15_Msk           (0x8000UL)                /*!< ISTAT15 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT14_Pos           (14UL)                    /*!< ISTAT14 (Bit 14) */
#define GPIOH_ISTAT_ISTAT14_Msk           (0x4000UL)                /*!< ISTAT14 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT13_Pos           (13UL)                    /*!< ISTAT13 (Bit 13) */
#define GPIOH_ISTAT_ISTAT13_Msk           (0x2000UL)                /*!< ISTAT13 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT12_Pos           (12UL)                    /*!< ISTAT12 (Bit 12) */
#define GPIOH_ISTAT_ISTAT12_Msk           (0x1000UL)                /*!< ISTAT12 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT11_Pos           (11UL)                    /*!< ISTAT11 (Bit 11) */
#define GPIOH_ISTAT_ISTAT11_Msk           (0x800UL)                 /*!< ISTAT11 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT10_Pos           (10UL)                    /*!< ISTAT10 (Bit 10) */
#define GPIOH_ISTAT_ISTAT10_Msk           (0x400UL)                 /*!< ISTAT10 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT9_Pos            (9UL)                     /*!< ISTAT9 (Bit 9) */
#define GPIOH_ISTAT_ISTAT9_Msk            (0x200UL)                 /*!< ISTAT9 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT8_Pos            (8UL)                     /*!< ISTAT8 (Bit 8) */
#define GPIOH_ISTAT_ISTAT8_Msk            (0x100UL)                 /*!< ISTAT8 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT7_Pos            (7UL)                     /*!< ISTAT7 (Bit 7) */
#define GPIOH_ISTAT_ISTAT7_Msk            (0x80UL)                  /*!< ISTAT7 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT6_Pos            (6UL)                     /*!< ISTAT6 (Bit 6) */
#define GPIOH_ISTAT_ISTAT6_Msk            (0x40UL)                  /*!< ISTAT6 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT5_Pos            (5UL)                     /*!< ISTAT5 (Bit 5) */
#define GPIOH_ISTAT_ISTAT5_Msk            (0x20UL)                  /*!< ISTAT5 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT4_Pos            (4UL)                     /*!< ISTAT4 (Bit 4) */
#define GPIOH_ISTAT_ISTAT4_Msk            (0x10UL)                  /*!< ISTAT4 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT3_Pos            (3UL)                     /*!< ISTAT3 (Bit 3) */
#define GPIOH_ISTAT_ISTAT3_Msk            (0x8UL)                   /*!< ISTAT3 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT2_Pos            (2UL)                     /*!< ISTAT2 (Bit 2) */
#define GPIOH_ISTAT_ISTAT2_Msk            (0x4UL)                   /*!< ISTAT2 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT1_Pos            (1UL)                     /*!< ISTAT1 (Bit 1) */
#define GPIOH_ISTAT_ISTAT1_Msk            (0x2UL)                   /*!< ISTAT1 (Bitfield-Mask: 0x01) */
#define GPIOH_ISTAT_ISTAT0_Pos            (0UL)                     /*!< ISTAT0 (Bit 0) */
#define GPIOH_ISTAT_ISTAT0_Msk            (0x1UL)                   /*!< ISTAT0 (Bitfield-Mask: 0x01) */
/* =========================================================  OCTL  ========================================================== */
#define GPIOH_OCTL_OCTL15_Pos             (15UL)                    /*!< OCTL15 (Bit 15) */
#define GPIOH_OCTL_OCTL15_Msk             (0x8000UL)                /*!< OCTL15 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL14_Pos             (14UL)                    /*!< OCTL14 (Bit 14) */
#define GPIOH_OCTL_OCTL14_Msk             (0x4000UL)                /*!< OCTL14 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL13_Pos             (13UL)                    /*!< OCTL13 (Bit 13) */
#define GPIOH_OCTL_OCTL13_Msk             (0x2000UL)                /*!< OCTL13 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL12_Pos             (12UL)                    /*!< OCTL12 (Bit 12) */
#define GPIOH_OCTL_OCTL12_Msk             (0x1000UL)                /*!< OCTL12 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL11_Pos             (11UL)                    /*!< OCTL11 (Bit 11) */
#define GPIOH_OCTL_OCTL11_Msk             (0x800UL)                 /*!< OCTL11 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL10_Pos             (10UL)                    /*!< OCTL10 (Bit 10) */
#define GPIOH_OCTL_OCTL10_Msk             (0x400UL)                 /*!< OCTL10 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL9_Pos              (9UL)                     /*!< OCTL9 (Bit 9) */
#define GPIOH_OCTL_OCTL9_Msk              (0x200UL)                 /*!< OCTL9 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL8_Pos              (8UL)                     /*!< OCTL8 (Bit 8) */
#define GPIOH_OCTL_OCTL8_Msk              (0x100UL)                 /*!< OCTL8 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL7_Pos              (7UL)                     /*!< OCTL7 (Bit 7) */
#define GPIOH_OCTL_OCTL7_Msk              (0x80UL)                  /*!< OCTL7 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL6_Pos              (6UL)                     /*!< OCTL6 (Bit 6) */
#define GPIOH_OCTL_OCTL6_Msk              (0x40UL)                  /*!< OCTL6 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL5_Pos              (5UL)                     /*!< OCTL5 (Bit 5) */
#define GPIOH_OCTL_OCTL5_Msk              (0x20UL)                  /*!< OCTL5 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL4_Pos              (4UL)                     /*!< OCTL4 (Bit 4) */
#define GPIOH_OCTL_OCTL4_Msk              (0x10UL)                  /*!< OCTL4 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL3_Pos              (3UL)                     /*!< OCTL3 (Bit 3) */
#define GPIOH_OCTL_OCTL3_Msk              (0x8UL)                   /*!< OCTL3 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL2_Pos              (2UL)                     /*!< OCTL2 (Bit 2) */
#define GPIOH_OCTL_OCTL2_Msk              (0x4UL)                   /*!< OCTL2 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL1_Pos              (1UL)                     /*!< OCTL1 (Bit 1) */
#define GPIOH_OCTL_OCTL1_Msk              (0x2UL)                   /*!< OCTL1 (Bitfield-Mask: 0x01) */
#define GPIOH_OCTL_OCTL0_Pos              (0UL)                     /*!< OCTL0 (Bit 0) */
#define GPIOH_OCTL_OCTL0_Msk              (0x1UL)                   /*!< OCTL0 (Bitfield-Mask: 0x01) */
/* ==========================================================  BOP  ========================================================== */
#define GPIOH_BOP_CR15_Pos                (31UL)                    /*!< CR15 (Bit 31) */
#define GPIOH_BOP_CR15_Msk                (0x80000000UL)            /*!< CR15 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR14_Pos                (30UL)                    /*!< CR14 (Bit 30) */
#define GPIOH_BOP_CR14_Msk                (0x40000000UL)            /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR13_Pos                (29UL)                    /*!< CR13 (Bit 29) */
#define GPIOH_BOP_CR13_Msk                (0x20000000UL)            /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR12_Pos                (28UL)                    /*!< CR12 (Bit 28) */
#define GPIOH_BOP_CR12_Msk                (0x10000000UL)            /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR11_Pos                (27UL)                    /*!< CR11 (Bit 27) */
#define GPIOH_BOP_CR11_Msk                (0x8000000UL)             /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR10_Pos                (26UL)                    /*!< CR10 (Bit 26) */
#define GPIOH_BOP_CR10_Msk                (0x4000000UL)             /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR9_Pos                 (25UL)                    /*!< CR9 (Bit 25) */
#define GPIOH_BOP_CR9_Msk                 (0x2000000UL)             /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR8_Pos                 (24UL)                    /*!< CR8 (Bit 24) */
#define GPIOH_BOP_CR8_Msk                 (0x1000000UL)             /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR7_Pos                 (23UL)                    /*!< CR7 (Bit 23) */
#define GPIOH_BOP_CR7_Msk                 (0x800000UL)              /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR6_Pos                 (22UL)                    /*!< CR6 (Bit 22) */
#define GPIOH_BOP_CR6_Msk                 (0x400000UL)              /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR5_Pos                 (21UL)                    /*!< CR5 (Bit 21) */
#define GPIOH_BOP_CR5_Msk                 (0x200000UL)              /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR4_Pos                 (20UL)                    /*!< CR4 (Bit 20) */
#define GPIOH_BOP_CR4_Msk                 (0x100000UL)              /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR3_Pos                 (19UL)                    /*!< CR3 (Bit 19) */
#define GPIOH_BOP_CR3_Msk                 (0x80000UL)               /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR2_Pos                 (18UL)                    /*!< CR2 (Bit 18) */
#define GPIOH_BOP_CR2_Msk                 (0x40000UL)               /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR1_Pos                 (17UL)                    /*!< CR1 (Bit 17) */
#define GPIOH_BOP_CR1_Msk                 (0x20000UL)               /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_CR0_Pos                 (16UL)                    /*!< CR0 (Bit 16) */
#define GPIOH_BOP_CR0_Msk                 (0x10000UL)               /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP15_Pos               (15UL)                    /*!< BOP15 (Bit 15) */
#define GPIOH_BOP_BOP15_Msk               (0x8000UL)                /*!< BOP15 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP14_Pos               (14UL)                    /*!< BOP14 (Bit 14) */
#define GPIOH_BOP_BOP14_Msk               (0x4000UL)                /*!< BOP14 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP13_Pos               (13UL)                    /*!< BOP13 (Bit 13) */
#define GPIOH_BOP_BOP13_Msk               (0x2000UL)                /*!< BOP13 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP12_Pos               (12UL)                    /*!< BOP12 (Bit 12) */
#define GPIOH_BOP_BOP12_Msk               (0x1000UL)                /*!< BOP12 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP11_Pos               (11UL)                    /*!< BOP11 (Bit 11) */
#define GPIOH_BOP_BOP11_Msk               (0x800UL)                 /*!< BOP11 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP10_Pos               (10UL)                    /*!< BOP10 (Bit 10) */
#define GPIOH_BOP_BOP10_Msk               (0x400UL)                 /*!< BOP10 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP9_Pos                (9UL)                     /*!< BOP9 (Bit 9) */
#define GPIOH_BOP_BOP9_Msk                (0x200UL)                 /*!< BOP9 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP8_Pos                (8UL)                     /*!< BOP8 (Bit 8) */
#define GPIOH_BOP_BOP8_Msk                (0x100UL)                 /*!< BOP8 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP7_Pos                (7UL)                     /*!< BOP7 (Bit 7) */
#define GPIOH_BOP_BOP7_Msk                (0x80UL)                  /*!< BOP7 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP6_Pos                (6UL)                     /*!< BOP6 (Bit 6) */
#define GPIOH_BOP_BOP6_Msk                (0x40UL)                  /*!< BOP6 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP5_Pos                (5UL)                     /*!< BOP5 (Bit 5) */
#define GPIOH_BOP_BOP5_Msk                (0x20UL)                  /*!< BOP5 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP4_Pos                (4UL)                     /*!< BOP4 (Bit 4) */
#define GPIOH_BOP_BOP4_Msk                (0x10UL)                  /*!< BOP4 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP3_Pos                (3UL)                     /*!< BOP3 (Bit 3) */
#define GPIOH_BOP_BOP3_Msk                (0x8UL)                   /*!< BOP3 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP2_Pos                (2UL)                     /*!< BOP2 (Bit 2) */
#define GPIOH_BOP_BOP2_Msk                (0x4UL)                   /*!< BOP2 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP1_Pos                (1UL)                     /*!< BOP1 (Bit 1) */
#define GPIOH_BOP_BOP1_Msk                (0x2UL)                   /*!< BOP1 (Bitfield-Mask: 0x01) */
#define GPIOH_BOP_BOP0_Pos                (0UL)                     /*!< BOP0 (Bit 0) */
#define GPIOH_BOP_BOP0_Msk                (0x1UL)                   /*!< BOP0 (Bitfield-Mask: 0x01) */
/* =========================================================  LOCK  ========================================================== */
#define GPIOH_LOCK_LKK_Pos                (16UL)                    /*!< LKK (Bit 16) */
#define GPIOH_LOCK_LKK_Msk                (0x10000UL)               /*!< LKK (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK15_Pos               (15UL)                    /*!< LK15 (Bit 15) */
#define GPIOH_LOCK_LK15_Msk               (0x8000UL)                /*!< LK15 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK14_Pos               (14UL)                    /*!< LK14 (Bit 14) */
#define GPIOH_LOCK_LK14_Msk               (0x4000UL)                /*!< LK14 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK13_Pos               (13UL)                    /*!< LK13 (Bit 13) */
#define GPIOH_LOCK_LK13_Msk               (0x2000UL)                /*!< LK13 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK12_Pos               (12UL)                    /*!< LK12 (Bit 12) */
#define GPIOH_LOCK_LK12_Msk               (0x1000UL)                /*!< LK12 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK11_Pos               (11UL)                    /*!< LK11 (Bit 11) */
#define GPIOH_LOCK_LK11_Msk               (0x800UL)                 /*!< LK11 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK10_Pos               (10UL)                    /*!< LK10 (Bit 10) */
#define GPIOH_LOCK_LK10_Msk               (0x400UL)                 /*!< LK10 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK9_Pos                (9UL)                     /*!< LK9 (Bit 9) */
#define GPIOH_LOCK_LK9_Msk                (0x200UL)                 /*!< LK9 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK8_Pos                (8UL)                     /*!< LK8 (Bit 8) */
#define GPIOH_LOCK_LK8_Msk                (0x100UL)                 /*!< LK8 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK7_Pos                (7UL)                     /*!< LK7 (Bit 7) */
#define GPIOH_LOCK_LK7_Msk                (0x80UL)                  /*!< LK7 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK6_Pos                (6UL)                     /*!< LK6 (Bit 6) */
#define GPIOH_LOCK_LK6_Msk                (0x40UL)                  /*!< LK6 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK5_Pos                (5UL)                     /*!< LK5 (Bit 5) */
#define GPIOH_LOCK_LK5_Msk                (0x20UL)                  /*!< LK5 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK4_Pos                (4UL)                     /*!< LK4 (Bit 4) */
#define GPIOH_LOCK_LK4_Msk                (0x10UL)                  /*!< LK4 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK3_Pos                (3UL)                     /*!< LK3 (Bit 3) */
#define GPIOH_LOCK_LK3_Msk                (0x8UL)                   /*!< LK3 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK2_Pos                (2UL)                     /*!< LK2 (Bit 2) */
#define GPIOH_LOCK_LK2_Msk                (0x4UL)                   /*!< LK2 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK1_Pos                (1UL)                     /*!< LK1 (Bit 1) */
#define GPIOH_LOCK_LK1_Msk                (0x2UL)                   /*!< LK1 (Bitfield-Mask: 0x01) */
#define GPIOH_LOCK_LK0_Pos                (0UL)                     /*!< LK0 (Bit 0) */
#define GPIOH_LOCK_LK0_Msk                (0x1UL)                   /*!< LK0 (Bitfield-Mask: 0x01) */
/* ========================================================  AFSEL0  ========================================================= */
#define GPIOH_AFSEL0_SEL7_Pos             (28UL)                    /*!< SEL7 (Bit 28) */
#define GPIOH_AFSEL0_SEL7_Msk             (0xf0000000UL)            /*!< SEL7 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL0_SEL6_Pos             (24UL)                    /*!< SEL6 (Bit 24) */
#define GPIOH_AFSEL0_SEL6_Msk             (0xf000000UL)             /*!< SEL6 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL0_SEL5_Pos             (20UL)                    /*!< SEL5 (Bit 20) */
#define GPIOH_AFSEL0_SEL5_Msk             (0xf00000UL)              /*!< SEL5 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL0_SEL4_Pos             (16UL)                    /*!< SEL4 (Bit 16) */
#define GPIOH_AFSEL0_SEL4_Msk             (0xf0000UL)               /*!< SEL4 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL0_SEL3_Pos             (12UL)                    /*!< SEL3 (Bit 12) */
#define GPIOH_AFSEL0_SEL3_Msk             (0xf000UL)                /*!< SEL3 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL0_SEL2_Pos             (8UL)                     /*!< SEL2 (Bit 8) */
#define GPIOH_AFSEL0_SEL2_Msk             (0xf00UL)                 /*!< SEL2 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL0_SEL1_Pos             (4UL)                     /*!< SEL1 (Bit 4) */
#define GPIOH_AFSEL0_SEL1_Msk             (0xf0UL)                  /*!< SEL1 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL0_SEL0_Pos             (0UL)                     /*!< SEL0 (Bit 0) */
#define GPIOH_AFSEL0_SEL0_Msk             (0xfUL)                   /*!< SEL0 (Bitfield-Mask: 0x0f) */
/* ========================================================  AFSEL1  ========================================================= */
#define GPIOH_AFSEL1_SEL15_Pos            (28UL)                    /*!< SEL15 (Bit 28) */
#define GPIOH_AFSEL1_SEL15_Msk            (0xf0000000UL)            /*!< SEL15 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL1_SEL14_Pos            (24UL)                    /*!< SEL14 (Bit 24) */
#define GPIOH_AFSEL1_SEL14_Msk            (0xf000000UL)             /*!< SEL14 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL1_SEL13_Pos            (20UL)                    /*!< SEL13 (Bit 20) */
#define GPIOH_AFSEL1_SEL13_Msk            (0xf00000UL)              /*!< SEL13 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL1_SEL12_Pos            (16UL)                    /*!< SEL12 (Bit 16) */
#define GPIOH_AFSEL1_SEL12_Msk            (0xf0000UL)               /*!< SEL12 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL1_SEL11_Pos            (12UL)                    /*!< SEL11 (Bit 12) */
#define GPIOH_AFSEL1_SEL11_Msk            (0xf000UL)                /*!< SEL11 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL1_SEL10_Pos            (8UL)                     /*!< SEL10 (Bit 8) */
#define GPIOH_AFSEL1_SEL10_Msk            (0xf00UL)                 /*!< SEL10 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL1_SEL9_Pos             (4UL)                     /*!< SEL9 (Bit 4) */
#define GPIOH_AFSEL1_SEL9_Msk             (0xf0UL)                  /*!< SEL9 (Bitfield-Mask: 0x0f) */
#define GPIOH_AFSEL1_SEL8_Pos             (0UL)                     /*!< SEL8 (Bit 0) */
#define GPIOH_AFSEL1_SEL8_Msk             (0xfUL)                   /*!< SEL8 (Bitfield-Mask: 0x0f) */
/* ==========================================================  BC  =========================================================== */
#define GPIOH_BC_CR0_Pos                  (0UL)                     /*!< CR0 (Bit 0) */
#define GPIOH_BC_CR0_Msk                  (0x1UL)                   /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR1_Pos                  (1UL)                     /*!< CR1 (Bit 1) */
#define GPIOH_BC_CR1_Msk                  (0x2UL)                   /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR2_Pos                  (2UL)                     /*!< CR2 (Bit 2) */
#define GPIOH_BC_CR2_Msk                  (0x4UL)                   /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR3_Pos                  (3UL)                     /*!< CR3 (Bit 3) */
#define GPIOH_BC_CR3_Msk                  (0x8UL)                   /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR4_Pos                  (4UL)                     /*!< CR4 (Bit 4) */
#define GPIOH_BC_CR4_Msk                  (0x10UL)                  /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR5_Pos                  (5UL)                     /*!< CR5 (Bit 5) */
#define GPIOH_BC_CR5_Msk                  (0x20UL)                  /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR6_Pos                  (6UL)                     /*!< CR6 (Bit 6) */
#define GPIOH_BC_CR6_Msk                  (0x40UL)                  /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR7_Pos                  (7UL)                     /*!< CR7 (Bit 7) */
#define GPIOH_BC_CR7_Msk                  (0x80UL)                  /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR8_Pos                  (8UL)                     /*!< CR8 (Bit 8) */
#define GPIOH_BC_CR8_Msk                  (0x100UL)                 /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR9_Pos                  (9UL)                     /*!< CR9 (Bit 9) */
#define GPIOH_BC_CR9_Msk                  (0x200UL)                 /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR10_Pos                 (10UL)                    /*!< CR10 (Bit 10) */
#define GPIOH_BC_CR10_Msk                 (0x400UL)                 /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR11_Pos                 (11UL)                    /*!< CR11 (Bit 11) */
#define GPIOH_BC_CR11_Msk                 (0x800UL)                 /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR12_Pos                 (12UL)                    /*!< CR12 (Bit 12) */
#define GPIOH_BC_CR12_Msk                 (0x1000UL)                /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR13_Pos                 (13UL)                    /*!< CR13 (Bit 13) */
#define GPIOH_BC_CR13_Msk                 (0x2000UL)                /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR14_Pos                 (14UL)                    /*!< CR14 (Bit 14) */
#define GPIOH_BC_CR14_Msk                 (0x4000UL)                /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOH_BC_CR15_Pos                 (15UL)                    /*!< CR15 (Bit 15) */
#define GPIOH_BC_CR15_Msk                 (0x8000UL)                /*!< CR15 (Bitfield-Mask: 0x01) */
/* ==========================================================  TG  =========================================================== */
#define GPIOH_TG_TG0_Pos                  (0UL)                     /*!< TG0 (Bit 0) */
#define GPIOH_TG_TG0_Msk                  (0x1UL)                   /*!< TG0 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG1_Pos                  (1UL)                     /*!< TG1 (Bit 1) */
#define GPIOH_TG_TG1_Msk                  (0x2UL)                   /*!< TG1 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG2_Pos                  (2UL)                     /*!< TG2 (Bit 2) */
#define GPIOH_TG_TG2_Msk                  (0x4UL)                   /*!< TG2 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG3_Pos                  (3UL)                     /*!< TG3 (Bit 3) */
#define GPIOH_TG_TG3_Msk                  (0x8UL)                   /*!< TG3 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG4_Pos                  (4UL)                     /*!< TG4 (Bit 4) */
#define GPIOH_TG_TG4_Msk                  (0x10UL)                  /*!< TG4 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG5_Pos                  (5UL)                     /*!< TG5 (Bit 5) */
#define GPIOH_TG_TG5_Msk                  (0x20UL)                  /*!< TG5 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG6_Pos                  (6UL)                     /*!< TG6 (Bit 6) */
#define GPIOH_TG_TG6_Msk                  (0x40UL)                  /*!< TG6 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG7_Pos                  (7UL)                     /*!< TG7 (Bit 7) */
#define GPIOH_TG_TG7_Msk                  (0x80UL)                  /*!< TG7 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG8_Pos                  (8UL)                     /*!< TG8 (Bit 8) */
#define GPIOH_TG_TG8_Msk                  (0x100UL)                 /*!< TG8 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG9_Pos                  (9UL)                     /*!< TG9 (Bit 9) */
#define GPIOH_TG_TG9_Msk                  (0x200UL)                 /*!< TG9 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG10_Pos                 (10UL)                    /*!< TG10 (Bit 10) */
#define GPIOH_TG_TG10_Msk                 (0x400UL)                 /*!< TG10 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG11_Pos                 (11UL)                    /*!< TG11 (Bit 11) */
#define GPIOH_TG_TG11_Msk                 (0x800UL)                 /*!< TG11 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG12_Pos                 (12UL)                    /*!< TG12 (Bit 12) */
#define GPIOH_TG_TG12_Msk                 (0x1000UL)                /*!< TG12 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG13_Pos                 (13UL)                    /*!< TG13 (Bit 13) */
#define GPIOH_TG_TG13_Msk                 (0x2000UL)                /*!< TG13 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG14_Pos                 (14UL)                    /*!< TG14 (Bit 14) */
#define GPIOH_TG_TG14_Msk                 (0x4000UL)                /*!< TG14 (Bitfield-Mask: 0x01) */
#define GPIOH_TG_TG15_Pos                 (15UL)                    /*!< TG15 (Bit 15) */
#define GPIOH_TG_TG15_Msk                 (0x8000UL)                /*!< TG15 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           GPIOI                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define GPIOI_CTL_CTL15_Pos               (30UL)                    /*!< CTL15 (Bit 30) */
#define GPIOI_CTL_CTL15_Msk               (0xc0000000UL)            /*!< CTL15 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL14_Pos               (28UL)                    /*!< CTL14 (Bit 28) */
#define GPIOI_CTL_CTL14_Msk               (0x30000000UL)            /*!< CTL14 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL13_Pos               (26UL)                    /*!< CTL13 (Bit 26) */
#define GPIOI_CTL_CTL13_Msk               (0xc000000UL)             /*!< CTL13 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL12_Pos               (24UL)                    /*!< CTL12 (Bit 24) */
#define GPIOI_CTL_CTL12_Msk               (0x3000000UL)             /*!< CTL12 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL11_Pos               (22UL)                    /*!< CTL11 (Bit 22) */
#define GPIOI_CTL_CTL11_Msk               (0xc00000UL)              /*!< CTL11 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL10_Pos               (20UL)                    /*!< CTL10 (Bit 20) */
#define GPIOI_CTL_CTL10_Msk               (0x300000UL)              /*!< CTL10 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL9_Pos                (18UL)                    /*!< CTL9 (Bit 18) */
#define GPIOI_CTL_CTL9_Msk                (0xc0000UL)               /*!< CTL9 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL8_Pos                (16UL)                    /*!< CTL8 (Bit 16) */
#define GPIOI_CTL_CTL8_Msk                (0x30000UL)               /*!< CTL8 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL7_Pos                (14UL)                    /*!< CTL7 (Bit 14) */
#define GPIOI_CTL_CTL7_Msk                (0xc000UL)                /*!< CTL7 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL6_Pos                (12UL)                    /*!< CTL6 (Bit 12) */
#define GPIOI_CTL_CTL6_Msk                (0x3000UL)                /*!< CTL6 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL5_Pos                (10UL)                    /*!< CTL5 (Bit 10) */
#define GPIOI_CTL_CTL5_Msk                (0xc00UL)                 /*!< CTL5 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL4_Pos                (8UL)                     /*!< CTL4 (Bit 8) */
#define GPIOI_CTL_CTL4_Msk                (0x300UL)                 /*!< CTL4 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL3_Pos                (6UL)                     /*!< CTL3 (Bit 6) */
#define GPIOI_CTL_CTL3_Msk                (0xc0UL)                  /*!< CTL3 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL2_Pos                (4UL)                     /*!< CTL2 (Bit 4) */
#define GPIOI_CTL_CTL2_Msk                (0x30UL)                  /*!< CTL2 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL1_Pos                (2UL)                     /*!< CTL1 (Bit 2) */
#define GPIOI_CTL_CTL1_Msk                (0xcUL)                   /*!< CTL1 (Bitfield-Mask: 0x03) */
#define GPIOI_CTL_CTL0_Pos                (0UL)                     /*!< CTL0 (Bit 0) */
#define GPIOI_CTL_CTL0_Msk                (0x3UL)                   /*!< CTL0 (Bitfield-Mask: 0x03) */
/* =========================================================  OMODE  ========================================================= */
#define GPIOI_OMODE_OM15_Pos              (15UL)                    /*!< OM15 (Bit 15) */
#define GPIOI_OMODE_OM15_Msk              (0x8000UL)                /*!< OM15 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM14_Pos              (14UL)                    /*!< OM14 (Bit 14) */
#define GPIOI_OMODE_OM14_Msk              (0x4000UL)                /*!< OM14 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM13_Pos              (13UL)                    /*!< OM13 (Bit 13) */
#define GPIOI_OMODE_OM13_Msk              (0x2000UL)                /*!< OM13 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM12_Pos              (12UL)                    /*!< OM12 (Bit 12) */
#define GPIOI_OMODE_OM12_Msk              (0x1000UL)                /*!< OM12 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM11_Pos              (11UL)                    /*!< OM11 (Bit 11) */
#define GPIOI_OMODE_OM11_Msk              (0x800UL)                 /*!< OM11 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM10_Pos              (10UL)                    /*!< OM10 (Bit 10) */
#define GPIOI_OMODE_OM10_Msk              (0x400UL)                 /*!< OM10 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM9_Pos               (9UL)                     /*!< OM9 (Bit 9) */
#define GPIOI_OMODE_OM9_Msk               (0x200UL)                 /*!< OM9 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM8_Pos               (8UL)                     /*!< OM8 (Bit 8) */
#define GPIOI_OMODE_OM8_Msk               (0x100UL)                 /*!< OM8 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM7_Pos               (7UL)                     /*!< OM7 (Bit 7) */
#define GPIOI_OMODE_OM7_Msk               (0x80UL)                  /*!< OM7 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM6_Pos               (6UL)                     /*!< OM6 (Bit 6) */
#define GPIOI_OMODE_OM6_Msk               (0x40UL)                  /*!< OM6 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM5_Pos               (5UL)                     /*!< OM5 (Bit 5) */
#define GPIOI_OMODE_OM5_Msk               (0x20UL)                  /*!< OM5 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM4_Pos               (4UL)                     /*!< OM4 (Bit 4) */
#define GPIOI_OMODE_OM4_Msk               (0x10UL)                  /*!< OM4 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM3_Pos               (3UL)                     /*!< OM3 (Bit 3) */
#define GPIOI_OMODE_OM3_Msk               (0x8UL)                   /*!< OM3 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM2_Pos               (2UL)                     /*!< OM2 (Bit 2) */
#define GPIOI_OMODE_OM2_Msk               (0x4UL)                   /*!< OM2 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM1_Pos               (1UL)                     /*!< OM1 (Bit 1) */
#define GPIOI_OMODE_OM1_Msk               (0x2UL)                   /*!< OM1 (Bitfield-Mask: 0x01) */
#define GPIOI_OMODE_OM0_Pos               (0UL)                     /*!< OM0 (Bit 0) */
#define GPIOI_OMODE_OM0_Msk               (0x1UL)                   /*!< OM0 (Bitfield-Mask: 0x01) */
/* =========================================================  OSPD  ========================================================== */
#define GPIOI_OSPD_OSPD15_Pos             (30UL)                    /*!< OSPD15 (Bit 30) */
#define GPIOI_OSPD_OSPD15_Msk             (0xc0000000UL)            /*!< OSPD15 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD14_Pos             (28UL)                    /*!< OSPD14 (Bit 28) */
#define GPIOI_OSPD_OSPD14_Msk             (0x30000000UL)            /*!< OSPD14 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD13_Pos             (26UL)                    /*!< OSPD13 (Bit 26) */
#define GPIOI_OSPD_OSPD13_Msk             (0xc000000UL)             /*!< OSPD13 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD12_Pos             (24UL)                    /*!< OSPD12 (Bit 24) */
#define GPIOI_OSPD_OSPD12_Msk             (0x3000000UL)             /*!< OSPD12 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD11_Pos             (22UL)                    /*!< OSPD11 (Bit 22) */
#define GPIOI_OSPD_OSPD11_Msk             (0xc00000UL)              /*!< OSPD11 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD10_Pos             (20UL)                    /*!< OSPD10 (Bit 20) */
#define GPIOI_OSPD_OSPD10_Msk             (0x300000UL)              /*!< OSPD10 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD9_Pos              (18UL)                    /*!< OSPD9 (Bit 18) */
#define GPIOI_OSPD_OSPD9_Msk              (0xc0000UL)               /*!< OSPD9 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD8_Pos              (16UL)                    /*!< OSPD8 (Bit 16) */
#define GPIOI_OSPD_OSPD8_Msk              (0x30000UL)               /*!< OSPD8 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD7_Pos              (14UL)                    /*!< OSPD7 (Bit 14) */
#define GPIOI_OSPD_OSPD7_Msk              (0xc000UL)                /*!< OSPD7 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD6_Pos              (12UL)                    /*!< OSPD6 (Bit 12) */
#define GPIOI_OSPD_OSPD6_Msk              (0x3000UL)                /*!< OSPD6 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD5_Pos              (10UL)                    /*!< OSPD5 (Bit 10) */
#define GPIOI_OSPD_OSPD5_Msk              (0xc00UL)                 /*!< OSPD5 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD4_Pos              (8UL)                     /*!< OSPD4 (Bit 8) */
#define GPIOI_OSPD_OSPD4_Msk              (0x300UL)                 /*!< OSPD4 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD3_Pos              (6UL)                     /*!< OSPD3 (Bit 6) */
#define GPIOI_OSPD_OSPD3_Msk              (0xc0UL)                  /*!< OSPD3 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD2_Pos              (4UL)                     /*!< OSPD2 (Bit 4) */
#define GPIOI_OSPD_OSPD2_Msk              (0x30UL)                  /*!< OSPD2 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD1_Pos              (2UL)                     /*!< OSPD1 (Bit 2) */
#define GPIOI_OSPD_OSPD1_Msk              (0xcUL)                   /*!< OSPD1 (Bitfield-Mask: 0x03) */
#define GPIOI_OSPD_OSPD0_Pos              (0UL)                     /*!< OSPD0 (Bit 0) */
#define GPIOI_OSPD_OSPD0_Msk              (0x3UL)                   /*!< OSPD0 (Bitfield-Mask: 0x03) */
/* ==========================================================  PUD  ========================================================== */
#define GPIOI_PUD_PUD15_Pos               (30UL)                    /*!< PUD15 (Bit 30) */
#define GPIOI_PUD_PUD15_Msk               (0xc0000000UL)            /*!< PUD15 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD14_Pos               (28UL)                    /*!< PUD14 (Bit 28) */
#define GPIOI_PUD_PUD14_Msk               (0x30000000UL)            /*!< PUD14 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD13_Pos               (26UL)                    /*!< PUD13 (Bit 26) */
#define GPIOI_PUD_PUD13_Msk               (0xc000000UL)             /*!< PUD13 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD12_Pos               (24UL)                    /*!< PUD12 (Bit 24) */
#define GPIOI_PUD_PUD12_Msk               (0x3000000UL)             /*!< PUD12 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD11_Pos               (22UL)                    /*!< PUD11 (Bit 22) */
#define GPIOI_PUD_PUD11_Msk               (0xc00000UL)              /*!< PUD11 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD10_Pos               (20UL)                    /*!< PUD10 (Bit 20) */
#define GPIOI_PUD_PUD10_Msk               (0x300000UL)              /*!< PUD10 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD9_Pos                (18UL)                    /*!< PUD9 (Bit 18) */
#define GPIOI_PUD_PUD9_Msk                (0xc0000UL)               /*!< PUD9 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD8_Pos                (16UL)                    /*!< PUD8 (Bit 16) */
#define GPIOI_PUD_PUD8_Msk                (0x30000UL)               /*!< PUD8 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD7_Pos                (14UL)                    /*!< PUD7 (Bit 14) */
#define GPIOI_PUD_PUD7_Msk                (0xc000UL)                /*!< PUD7 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD6_Pos                (12UL)                    /*!< PUD6 (Bit 12) */
#define GPIOI_PUD_PUD6_Msk                (0x3000UL)                /*!< PUD6 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD5_Pos                (10UL)                    /*!< PUD5 (Bit 10) */
#define GPIOI_PUD_PUD5_Msk                (0xc00UL)                 /*!< PUD5 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD4_Pos                (8UL)                     /*!< PUD4 (Bit 8) */
#define GPIOI_PUD_PUD4_Msk                (0x300UL)                 /*!< PUD4 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD3_Pos                (6UL)                     /*!< PUD3 (Bit 6) */
#define GPIOI_PUD_PUD3_Msk                (0xc0UL)                  /*!< PUD3 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD2_Pos                (4UL)                     /*!< PUD2 (Bit 4) */
#define GPIOI_PUD_PUD2_Msk                (0x30UL)                  /*!< PUD2 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD1_Pos                (2UL)                     /*!< PUD1 (Bit 2) */
#define GPIOI_PUD_PUD1_Msk                (0xcUL)                   /*!< PUD1 (Bitfield-Mask: 0x03) */
#define GPIOI_PUD_PUD0_Pos                (0UL)                     /*!< PUD0 (Bit 0) */
#define GPIOI_PUD_PUD0_Msk                (0x3UL)                   /*!< PUD0 (Bitfield-Mask: 0x03) */
/* =========================================================  ISTAT  ========================================================= */
#define GPIOI_ISTAT_ISTAT15_Pos           (15UL)                    /*!< ISTAT15 (Bit 15) */
#define GPIOI_ISTAT_ISTAT15_Msk           (0x8000UL)                /*!< ISTAT15 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT14_Pos           (14UL)                    /*!< ISTAT14 (Bit 14) */
#define GPIOI_ISTAT_ISTAT14_Msk           (0x4000UL)                /*!< ISTAT14 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT13_Pos           (13UL)                    /*!< ISTAT13 (Bit 13) */
#define GPIOI_ISTAT_ISTAT13_Msk           (0x2000UL)                /*!< ISTAT13 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT12_Pos           (12UL)                    /*!< ISTAT12 (Bit 12) */
#define GPIOI_ISTAT_ISTAT12_Msk           (0x1000UL)                /*!< ISTAT12 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT11_Pos           (11UL)                    /*!< ISTAT11 (Bit 11) */
#define GPIOI_ISTAT_ISTAT11_Msk           (0x800UL)                 /*!< ISTAT11 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT10_Pos           (10UL)                    /*!< ISTAT10 (Bit 10) */
#define GPIOI_ISTAT_ISTAT10_Msk           (0x400UL)                 /*!< ISTAT10 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT9_Pos            (9UL)                     /*!< ISTAT9 (Bit 9) */
#define GPIOI_ISTAT_ISTAT9_Msk            (0x200UL)                 /*!< ISTAT9 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT8_Pos            (8UL)                     /*!< ISTAT8 (Bit 8) */
#define GPIOI_ISTAT_ISTAT8_Msk            (0x100UL)                 /*!< ISTAT8 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT7_Pos            (7UL)                     /*!< ISTAT7 (Bit 7) */
#define GPIOI_ISTAT_ISTAT7_Msk            (0x80UL)                  /*!< ISTAT7 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT6_Pos            (6UL)                     /*!< ISTAT6 (Bit 6) */
#define GPIOI_ISTAT_ISTAT6_Msk            (0x40UL)                  /*!< ISTAT6 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT5_Pos            (5UL)                     /*!< ISTAT5 (Bit 5) */
#define GPIOI_ISTAT_ISTAT5_Msk            (0x20UL)                  /*!< ISTAT5 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT4_Pos            (4UL)                     /*!< ISTAT4 (Bit 4) */
#define GPIOI_ISTAT_ISTAT4_Msk            (0x10UL)                  /*!< ISTAT4 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT3_Pos            (3UL)                     /*!< ISTAT3 (Bit 3) */
#define GPIOI_ISTAT_ISTAT3_Msk            (0x8UL)                   /*!< ISTAT3 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT2_Pos            (2UL)                     /*!< ISTAT2 (Bit 2) */
#define GPIOI_ISTAT_ISTAT2_Msk            (0x4UL)                   /*!< ISTAT2 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT1_Pos            (1UL)                     /*!< ISTAT1 (Bit 1) */
#define GPIOI_ISTAT_ISTAT1_Msk            (0x2UL)                   /*!< ISTAT1 (Bitfield-Mask: 0x01) */
#define GPIOI_ISTAT_ISTAT0_Pos            (0UL)                     /*!< ISTAT0 (Bit 0) */
#define GPIOI_ISTAT_ISTAT0_Msk            (0x1UL)                   /*!< ISTAT0 (Bitfield-Mask: 0x01) */
/* =========================================================  OCTL  ========================================================== */
#define GPIOI_OCTL_OCTL15_Pos             (15UL)                    /*!< OCTL15 (Bit 15) */
#define GPIOI_OCTL_OCTL15_Msk             (0x8000UL)                /*!< OCTL15 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL14_Pos             (14UL)                    /*!< OCTL14 (Bit 14) */
#define GPIOI_OCTL_OCTL14_Msk             (0x4000UL)                /*!< OCTL14 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL13_Pos             (13UL)                    /*!< OCTL13 (Bit 13) */
#define GPIOI_OCTL_OCTL13_Msk             (0x2000UL)                /*!< OCTL13 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL12_Pos             (12UL)                    /*!< OCTL12 (Bit 12) */
#define GPIOI_OCTL_OCTL12_Msk             (0x1000UL)                /*!< OCTL12 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL11_Pos             (11UL)                    /*!< OCTL11 (Bit 11) */
#define GPIOI_OCTL_OCTL11_Msk             (0x800UL)                 /*!< OCTL11 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL10_Pos             (10UL)                    /*!< OCTL10 (Bit 10) */
#define GPIOI_OCTL_OCTL10_Msk             (0x400UL)                 /*!< OCTL10 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL9_Pos              (9UL)                     /*!< OCTL9 (Bit 9) */
#define GPIOI_OCTL_OCTL9_Msk              (0x200UL)                 /*!< OCTL9 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL8_Pos              (8UL)                     /*!< OCTL8 (Bit 8) */
#define GPIOI_OCTL_OCTL8_Msk              (0x100UL)                 /*!< OCTL8 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL7_Pos              (7UL)                     /*!< OCTL7 (Bit 7) */
#define GPIOI_OCTL_OCTL7_Msk              (0x80UL)                  /*!< OCTL7 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL6_Pos              (6UL)                     /*!< OCTL6 (Bit 6) */
#define GPIOI_OCTL_OCTL6_Msk              (0x40UL)                  /*!< OCTL6 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL5_Pos              (5UL)                     /*!< OCTL5 (Bit 5) */
#define GPIOI_OCTL_OCTL5_Msk              (0x20UL)                  /*!< OCTL5 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL4_Pos              (4UL)                     /*!< OCTL4 (Bit 4) */
#define GPIOI_OCTL_OCTL4_Msk              (0x10UL)                  /*!< OCTL4 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL3_Pos              (3UL)                     /*!< OCTL3 (Bit 3) */
#define GPIOI_OCTL_OCTL3_Msk              (0x8UL)                   /*!< OCTL3 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL2_Pos              (2UL)                     /*!< OCTL2 (Bit 2) */
#define GPIOI_OCTL_OCTL2_Msk              (0x4UL)                   /*!< OCTL2 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL1_Pos              (1UL)                     /*!< OCTL1 (Bit 1) */
#define GPIOI_OCTL_OCTL1_Msk              (0x2UL)                   /*!< OCTL1 (Bitfield-Mask: 0x01) */
#define GPIOI_OCTL_OCTL0_Pos              (0UL)                     /*!< OCTL0 (Bit 0) */
#define GPIOI_OCTL_OCTL0_Msk              (0x1UL)                   /*!< OCTL0 (Bitfield-Mask: 0x01) */
/* ==========================================================  BOP  ========================================================== */
#define GPIOI_BOP_CR15_Pos                (31UL)                    /*!< CR15 (Bit 31) */
#define GPIOI_BOP_CR15_Msk                (0x80000000UL)            /*!< CR15 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR14_Pos                (30UL)                    /*!< CR14 (Bit 30) */
#define GPIOI_BOP_CR14_Msk                (0x40000000UL)            /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR13_Pos                (29UL)                    /*!< CR13 (Bit 29) */
#define GPIOI_BOP_CR13_Msk                (0x20000000UL)            /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR12_Pos                (28UL)                    /*!< CR12 (Bit 28) */
#define GPIOI_BOP_CR12_Msk                (0x10000000UL)            /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR11_Pos                (27UL)                    /*!< CR11 (Bit 27) */
#define GPIOI_BOP_CR11_Msk                (0x8000000UL)             /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR10_Pos                (26UL)                    /*!< CR10 (Bit 26) */
#define GPIOI_BOP_CR10_Msk                (0x4000000UL)             /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR9_Pos                 (25UL)                    /*!< CR9 (Bit 25) */
#define GPIOI_BOP_CR9_Msk                 (0x2000000UL)             /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR8_Pos                 (24UL)                    /*!< CR8 (Bit 24) */
#define GPIOI_BOP_CR8_Msk                 (0x1000000UL)             /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR7_Pos                 (23UL)                    /*!< CR7 (Bit 23) */
#define GPIOI_BOP_CR7_Msk                 (0x800000UL)              /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR6_Pos                 (22UL)                    /*!< CR6 (Bit 22) */
#define GPIOI_BOP_CR6_Msk                 (0x400000UL)              /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR5_Pos                 (21UL)                    /*!< CR5 (Bit 21) */
#define GPIOI_BOP_CR5_Msk                 (0x200000UL)              /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR4_Pos                 (20UL)                    /*!< CR4 (Bit 20) */
#define GPIOI_BOP_CR4_Msk                 (0x100000UL)              /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR3_Pos                 (19UL)                    /*!< CR3 (Bit 19) */
#define GPIOI_BOP_CR3_Msk                 (0x80000UL)               /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR2_Pos                 (18UL)                    /*!< CR2 (Bit 18) */
#define GPIOI_BOP_CR2_Msk                 (0x40000UL)               /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR1_Pos                 (17UL)                    /*!< CR1 (Bit 17) */
#define GPIOI_BOP_CR1_Msk                 (0x20000UL)               /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_CR0_Pos                 (16UL)                    /*!< CR0 (Bit 16) */
#define GPIOI_BOP_CR0_Msk                 (0x10000UL)               /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP15_Pos               (15UL)                    /*!< BOP15 (Bit 15) */
#define GPIOI_BOP_BOP15_Msk               (0x8000UL)                /*!< BOP15 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP14_Pos               (14UL)                    /*!< BOP14 (Bit 14) */
#define GPIOI_BOP_BOP14_Msk               (0x4000UL)                /*!< BOP14 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP13_Pos               (13UL)                    /*!< BOP13 (Bit 13) */
#define GPIOI_BOP_BOP13_Msk               (0x2000UL)                /*!< BOP13 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP12_Pos               (12UL)                    /*!< BOP12 (Bit 12) */
#define GPIOI_BOP_BOP12_Msk               (0x1000UL)                /*!< BOP12 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP11_Pos               (11UL)                    /*!< BOP11 (Bit 11) */
#define GPIOI_BOP_BOP11_Msk               (0x800UL)                 /*!< BOP11 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP10_Pos               (10UL)                    /*!< BOP10 (Bit 10) */
#define GPIOI_BOP_BOP10_Msk               (0x400UL)                 /*!< BOP10 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP9_Pos                (9UL)                     /*!< BOP9 (Bit 9) */
#define GPIOI_BOP_BOP9_Msk                (0x200UL)                 /*!< BOP9 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP8_Pos                (8UL)                     /*!< BOP8 (Bit 8) */
#define GPIOI_BOP_BOP8_Msk                (0x100UL)                 /*!< BOP8 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP7_Pos                (7UL)                     /*!< BOP7 (Bit 7) */
#define GPIOI_BOP_BOP7_Msk                (0x80UL)                  /*!< BOP7 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP6_Pos                (6UL)                     /*!< BOP6 (Bit 6) */
#define GPIOI_BOP_BOP6_Msk                (0x40UL)                  /*!< BOP6 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP5_Pos                (5UL)                     /*!< BOP5 (Bit 5) */
#define GPIOI_BOP_BOP5_Msk                (0x20UL)                  /*!< BOP5 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP4_Pos                (4UL)                     /*!< BOP4 (Bit 4) */
#define GPIOI_BOP_BOP4_Msk                (0x10UL)                  /*!< BOP4 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP3_Pos                (3UL)                     /*!< BOP3 (Bit 3) */
#define GPIOI_BOP_BOP3_Msk                (0x8UL)                   /*!< BOP3 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP2_Pos                (2UL)                     /*!< BOP2 (Bit 2) */
#define GPIOI_BOP_BOP2_Msk                (0x4UL)                   /*!< BOP2 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP1_Pos                (1UL)                     /*!< BOP1 (Bit 1) */
#define GPIOI_BOP_BOP1_Msk                (0x2UL)                   /*!< BOP1 (Bitfield-Mask: 0x01) */
#define GPIOI_BOP_BOP0_Pos                (0UL)                     /*!< BOP0 (Bit 0) */
#define GPIOI_BOP_BOP0_Msk                (0x1UL)                   /*!< BOP0 (Bitfield-Mask: 0x01) */
/* =========================================================  LOCK  ========================================================== */
#define GPIOI_LOCK_LKK_Pos                (16UL)                    /*!< LKK (Bit 16) */
#define GPIOI_LOCK_LKK_Msk                (0x10000UL)               /*!< LKK (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK15_Pos               (15UL)                    /*!< LK15 (Bit 15) */
#define GPIOI_LOCK_LK15_Msk               (0x8000UL)                /*!< LK15 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK14_Pos               (14UL)                    /*!< LK14 (Bit 14) */
#define GPIOI_LOCK_LK14_Msk               (0x4000UL)                /*!< LK14 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK13_Pos               (13UL)                    /*!< LK13 (Bit 13) */
#define GPIOI_LOCK_LK13_Msk               (0x2000UL)                /*!< LK13 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK12_Pos               (12UL)                    /*!< LK12 (Bit 12) */
#define GPIOI_LOCK_LK12_Msk               (0x1000UL)                /*!< LK12 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK11_Pos               (11UL)                    /*!< LK11 (Bit 11) */
#define GPIOI_LOCK_LK11_Msk               (0x800UL)                 /*!< LK11 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK10_Pos               (10UL)                    /*!< LK10 (Bit 10) */
#define GPIOI_LOCK_LK10_Msk               (0x400UL)                 /*!< LK10 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK9_Pos                (9UL)                     /*!< LK9 (Bit 9) */
#define GPIOI_LOCK_LK9_Msk                (0x200UL)                 /*!< LK9 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK8_Pos                (8UL)                     /*!< LK8 (Bit 8) */
#define GPIOI_LOCK_LK8_Msk                (0x100UL)                 /*!< LK8 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK7_Pos                (7UL)                     /*!< LK7 (Bit 7) */
#define GPIOI_LOCK_LK7_Msk                (0x80UL)                  /*!< LK7 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK6_Pos                (6UL)                     /*!< LK6 (Bit 6) */
#define GPIOI_LOCK_LK6_Msk                (0x40UL)                  /*!< LK6 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK5_Pos                (5UL)                     /*!< LK5 (Bit 5) */
#define GPIOI_LOCK_LK5_Msk                (0x20UL)                  /*!< LK5 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK4_Pos                (4UL)                     /*!< LK4 (Bit 4) */
#define GPIOI_LOCK_LK4_Msk                (0x10UL)                  /*!< LK4 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK3_Pos                (3UL)                     /*!< LK3 (Bit 3) */
#define GPIOI_LOCK_LK3_Msk                (0x8UL)                   /*!< LK3 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK2_Pos                (2UL)                     /*!< LK2 (Bit 2) */
#define GPIOI_LOCK_LK2_Msk                (0x4UL)                   /*!< LK2 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK1_Pos                (1UL)                     /*!< LK1 (Bit 1) */
#define GPIOI_LOCK_LK1_Msk                (0x2UL)                   /*!< LK1 (Bitfield-Mask: 0x01) */
#define GPIOI_LOCK_LK0_Pos                (0UL)                     /*!< LK0 (Bit 0) */
#define GPIOI_LOCK_LK0_Msk                (0x1UL)                   /*!< LK0 (Bitfield-Mask: 0x01) */
/* ========================================================  AFSEL0  ========================================================= */
#define GPIOI_AFSEL0_SEL7_Pos             (28UL)                    /*!< SEL7 (Bit 28) */
#define GPIOI_AFSEL0_SEL7_Msk             (0xf0000000UL)            /*!< SEL7 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL0_SEL6_Pos             (24UL)                    /*!< SEL6 (Bit 24) */
#define GPIOI_AFSEL0_SEL6_Msk             (0xf000000UL)             /*!< SEL6 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL0_SEL5_Pos             (20UL)                    /*!< SEL5 (Bit 20) */
#define GPIOI_AFSEL0_SEL5_Msk             (0xf00000UL)              /*!< SEL5 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL0_SEL4_Pos             (16UL)                    /*!< SEL4 (Bit 16) */
#define GPIOI_AFSEL0_SEL4_Msk             (0xf0000UL)               /*!< SEL4 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL0_SEL3_Pos             (12UL)                    /*!< SEL3 (Bit 12) */
#define GPIOI_AFSEL0_SEL3_Msk             (0xf000UL)                /*!< SEL3 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL0_SEL2_Pos             (8UL)                     /*!< SEL2 (Bit 8) */
#define GPIOI_AFSEL0_SEL2_Msk             (0xf00UL)                 /*!< SEL2 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL0_SEL1_Pos             (4UL)                     /*!< SEL1 (Bit 4) */
#define GPIOI_AFSEL0_SEL1_Msk             (0xf0UL)                  /*!< SEL1 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL0_SEL0_Pos             (0UL)                     /*!< SEL0 (Bit 0) */
#define GPIOI_AFSEL0_SEL0_Msk             (0xfUL)                   /*!< SEL0 (Bitfield-Mask: 0x0f) */
/* ========================================================  AFSEL1  ========================================================= */
#define GPIOI_AFSEL1_SEL15_Pos            (28UL)                    /*!< SEL15 (Bit 28) */
#define GPIOI_AFSEL1_SEL15_Msk            (0xf0000000UL)            /*!< SEL15 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL1_SEL14_Pos            (24UL)                    /*!< SEL14 (Bit 24) */
#define GPIOI_AFSEL1_SEL14_Msk            (0xf000000UL)             /*!< SEL14 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL1_SEL13_Pos            (20UL)                    /*!< SEL13 (Bit 20) */
#define GPIOI_AFSEL1_SEL13_Msk            (0xf00000UL)              /*!< SEL13 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL1_SEL12_Pos            (16UL)                    /*!< SEL12 (Bit 16) */
#define GPIOI_AFSEL1_SEL12_Msk            (0xf0000UL)               /*!< SEL12 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL1_SEL11_Pos            (12UL)                    /*!< SEL11 (Bit 12) */
#define GPIOI_AFSEL1_SEL11_Msk            (0xf000UL)                /*!< SEL11 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL1_SEL10_Pos            (8UL)                     /*!< SEL10 (Bit 8) */
#define GPIOI_AFSEL1_SEL10_Msk            (0xf00UL)                 /*!< SEL10 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL1_SEL9_Pos             (4UL)                     /*!< SEL9 (Bit 4) */
#define GPIOI_AFSEL1_SEL9_Msk             (0xf0UL)                  /*!< SEL9 (Bitfield-Mask: 0x0f) */
#define GPIOI_AFSEL1_SEL8_Pos             (0UL)                     /*!< SEL8 (Bit 0) */
#define GPIOI_AFSEL1_SEL8_Msk             (0xfUL)                   /*!< SEL8 (Bitfield-Mask: 0x0f) */
/* ==========================================================  BC  =========================================================== */
#define GPIOI_BC_CR0_Pos                  (0UL)                     /*!< CR0 (Bit 0) */
#define GPIOI_BC_CR0_Msk                  (0x1UL)                   /*!< CR0 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR1_Pos                  (1UL)                     /*!< CR1 (Bit 1) */
#define GPIOI_BC_CR1_Msk                  (0x2UL)                   /*!< CR1 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR2_Pos                  (2UL)                     /*!< CR2 (Bit 2) */
#define GPIOI_BC_CR2_Msk                  (0x4UL)                   /*!< CR2 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR3_Pos                  (3UL)                     /*!< CR3 (Bit 3) */
#define GPIOI_BC_CR3_Msk                  (0x8UL)                   /*!< CR3 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR4_Pos                  (4UL)                     /*!< CR4 (Bit 4) */
#define GPIOI_BC_CR4_Msk                  (0x10UL)                  /*!< CR4 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR5_Pos                  (5UL)                     /*!< CR5 (Bit 5) */
#define GPIOI_BC_CR5_Msk                  (0x20UL)                  /*!< CR5 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR6_Pos                  (6UL)                     /*!< CR6 (Bit 6) */
#define GPIOI_BC_CR6_Msk                  (0x40UL)                  /*!< CR6 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR7_Pos                  (7UL)                     /*!< CR7 (Bit 7) */
#define GPIOI_BC_CR7_Msk                  (0x80UL)                  /*!< CR7 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR8_Pos                  (8UL)                     /*!< CR8 (Bit 8) */
#define GPIOI_BC_CR8_Msk                  (0x100UL)                 /*!< CR8 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR9_Pos                  (9UL)                     /*!< CR9 (Bit 9) */
#define GPIOI_BC_CR9_Msk                  (0x200UL)                 /*!< CR9 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR10_Pos                 (10UL)                    /*!< CR10 (Bit 10) */
#define GPIOI_BC_CR10_Msk                 (0x400UL)                 /*!< CR10 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR11_Pos                 (11UL)                    /*!< CR11 (Bit 11) */
#define GPIOI_BC_CR11_Msk                 (0x800UL)                 /*!< CR11 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR12_Pos                 (12UL)                    /*!< CR12 (Bit 12) */
#define GPIOI_BC_CR12_Msk                 (0x1000UL)                /*!< CR12 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR13_Pos                 (13UL)                    /*!< CR13 (Bit 13) */
#define GPIOI_BC_CR13_Msk                 (0x2000UL)                /*!< CR13 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR14_Pos                 (14UL)                    /*!< CR14 (Bit 14) */
#define GPIOI_BC_CR14_Msk                 (0x4000UL)                /*!< CR14 (Bitfield-Mask: 0x01) */
#define GPIOI_BC_CR15_Pos                 (15UL)                    /*!< CR15 (Bit 15) */
#define GPIOI_BC_CR15_Msk                 (0x8000UL)                /*!< CR15 (Bitfield-Mask: 0x01) */
/* ==========================================================  TG  =========================================================== */
#define GPIOI_TG_TG0_Pos                  (0UL)                     /*!< TG0 (Bit 0) */
#define GPIOI_TG_TG0_Msk                  (0x1UL)                   /*!< TG0 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG1_Pos                  (1UL)                     /*!< TG1 (Bit 1) */
#define GPIOI_TG_TG1_Msk                  (0x2UL)                   /*!< TG1 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG2_Pos                  (2UL)                     /*!< TG2 (Bit 2) */
#define GPIOI_TG_TG2_Msk                  (0x4UL)                   /*!< TG2 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG3_Pos                  (3UL)                     /*!< TG3 (Bit 3) */
#define GPIOI_TG_TG3_Msk                  (0x8UL)                   /*!< TG3 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG4_Pos                  (4UL)                     /*!< TG4 (Bit 4) */
#define GPIOI_TG_TG4_Msk                  (0x10UL)                  /*!< TG4 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG5_Pos                  (5UL)                     /*!< TG5 (Bit 5) */
#define GPIOI_TG_TG5_Msk                  (0x20UL)                  /*!< TG5 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG6_Pos                  (6UL)                     /*!< TG6 (Bit 6) */
#define GPIOI_TG_TG6_Msk                  (0x40UL)                  /*!< TG6 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG7_Pos                  (7UL)                     /*!< TG7 (Bit 7) */
#define GPIOI_TG_TG7_Msk                  (0x80UL)                  /*!< TG7 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG8_Pos                  (8UL)                     /*!< TG8 (Bit 8) */
#define GPIOI_TG_TG8_Msk                  (0x100UL)                 /*!< TG8 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG9_Pos                  (9UL)                     /*!< TG9 (Bit 9) */
#define GPIOI_TG_TG9_Msk                  (0x200UL)                 /*!< TG9 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG10_Pos                 (10UL)                    /*!< TG10 (Bit 10) */
#define GPIOI_TG_TG10_Msk                 (0x400UL)                 /*!< TG10 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG11_Pos                 (11UL)                    /*!< TG11 (Bit 11) */
#define GPIOI_TG_TG11_Msk                 (0x800UL)                 /*!< TG11 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG12_Pos                 (12UL)                    /*!< TG12 (Bit 12) */
#define GPIOI_TG_TG12_Msk                 (0x1000UL)                /*!< TG12 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG13_Pos                 (13UL)                    /*!< TG13 (Bit 13) */
#define GPIOI_TG_TG13_Msk                 (0x2000UL)                /*!< TG13 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG14_Pos                 (14UL)                    /*!< TG14 (Bit 14) */
#define GPIOI_TG_TG14_Msk                 (0x4000UL)                /*!< TG14 (Bitfield-Mask: 0x01) */
#define GPIOI_TG_TG15_Pos                 (15UL)                    /*!< TG15 (Bit 15) */
#define GPIOI_TG_TG15_Msk                 (0x8000UL)                /*!< TG15 (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define I2C0_CTL0_SRESET_Pos              (15UL)                    /*!< SRESET (Bit 15) */
#define I2C0_CTL0_SRESET_Msk              (0x8000UL)                /*!< SRESET (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_SALT_Pos                (13UL)                    /*!< SALT (Bit 13) */
#define I2C0_CTL0_SALT_Msk                (0x2000UL)                /*!< SALT (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_PECTRANS_Pos            (12UL)                    /*!< PECTRANS (Bit 12) */
#define I2C0_CTL0_PECTRANS_Msk            (0x1000UL)                /*!< PECTRANS (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_POAP_Pos                (11UL)                    /*!< POAP (Bit 11) */
#define I2C0_CTL0_POAP_Msk                (0x800UL)                 /*!< POAP (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_ACKEN_Pos               (10UL)                    /*!< ACKEN (Bit 10) */
#define I2C0_CTL0_ACKEN_Msk               (0x400UL)                 /*!< ACKEN (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_STOP_Pos                (9UL)                     /*!< STOP (Bit 9) */
#define I2C0_CTL0_STOP_Msk                (0x200UL)                 /*!< STOP (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_START_Pos               (8UL)                     /*!< START (Bit 8) */
#define I2C0_CTL0_START_Msk               (0x100UL)                 /*!< START (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_DISSTRC_Pos             (7UL)                     /*!< DISSTRC (Bit 7) */
#define I2C0_CTL0_DISSTRC_Msk             (0x80UL)                  /*!< DISSTRC (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_GCEN_Pos                (6UL)                     /*!< GCEN (Bit 6) */
#define I2C0_CTL0_GCEN_Msk                (0x40UL)                  /*!< GCEN (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_PECEN_Pos               (5UL)                     /*!< PECEN (Bit 5) */
#define I2C0_CTL0_PECEN_Msk               (0x20UL)                  /*!< PECEN (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_ARPEN_Pos               (4UL)                     /*!< ARPEN (Bit 4) */
#define I2C0_CTL0_ARPEN_Msk               (0x10UL)                  /*!< ARPEN (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_SMBSEL_Pos              (3UL)                     /*!< SMBSEL (Bit 3) */
#define I2C0_CTL0_SMBSEL_Msk              (0x8UL)                   /*!< SMBSEL (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_SMBEN_Pos               (1UL)                     /*!< SMBEN (Bit 1) */
#define I2C0_CTL0_SMBEN_Msk               (0x2UL)                   /*!< SMBEN (Bitfield-Mask: 0x01) */
#define I2C0_CTL0_I2CEN_Pos               (0UL)                     /*!< I2CEN (Bit 0) */
#define I2C0_CTL0_I2CEN_Msk               (0x1UL)                   /*!< I2CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define I2C0_CTL1_DMALST_Pos              (12UL)                    /*!< DMALST (Bit 12) */
#define I2C0_CTL1_DMALST_Msk              (0x1000UL)                /*!< DMALST (Bitfield-Mask: 0x01) */
#define I2C0_CTL1_DMAON_Pos               (11UL)                    /*!< DMAON (Bit 11) */
#define I2C0_CTL1_DMAON_Msk               (0x800UL)                 /*!< DMAON (Bitfield-Mask: 0x01) */
#define I2C0_CTL1_BUFIE_Pos               (10UL)                    /*!< BUFIE (Bit 10) */
#define I2C0_CTL1_BUFIE_Msk               (0x400UL)                 /*!< BUFIE (Bitfield-Mask: 0x01) */
#define I2C0_CTL1_EVIE_Pos                (9UL)                     /*!< EVIE (Bit 9) */
#define I2C0_CTL1_EVIE_Msk                (0x200UL)                 /*!< EVIE (Bitfield-Mask: 0x01) */
#define I2C0_CTL1_ERRIE_Pos               (8UL)                     /*!< ERRIE (Bit 8) */
#define I2C0_CTL1_ERRIE_Msk               (0x100UL)                 /*!< ERRIE (Bitfield-Mask: 0x01) */
#define I2C0_CTL1_I2CCLK_Pos              (0UL)                     /*!< I2CCLK (Bit 0) */
#define I2C0_CTL1_I2CCLK_Msk              (0x3fUL)                  /*!< I2CCLK (Bitfield-Mask: 0x3f) */
/* ========================================================  SADDR0  ========================================================= */
#define I2C0_SADDR0_ADDFORMAT_Pos         (15UL)                    /*!< ADDFORMAT (Bit 15) */
#define I2C0_SADDR0_ADDFORMAT_Msk         (0x8000UL)                /*!< ADDFORMAT (Bitfield-Mask: 0x01) */
#define I2C0_SADDR0_ADDRESS9_8_Pos        (8UL)                     /*!< ADDRESS9_8 (Bit 8) */
#define I2C0_SADDR0_ADDRESS9_8_Msk        (0x300UL)                 /*!< ADDRESS9_8 (Bitfield-Mask: 0x03) */
#define I2C0_SADDR0_ADDRESS7_1_Pos        (1UL)                     /*!< ADDRESS7_1 (Bit 1) */
#define I2C0_SADDR0_ADDRESS7_1_Msk        (0xfeUL)                  /*!< ADDRESS7_1 (Bitfield-Mask: 0x7f) */
#define I2C0_SADDR0_ADDRESS0_Pos          (0UL)                     /*!< ADDRESS0 (Bit 0) */
#define I2C0_SADDR0_ADDRESS0_Msk          (0x1UL)                   /*!< ADDRESS0 (Bitfield-Mask: 0x01) */
/* ========================================================  SADDR1  ========================================================= */
#define I2C0_SADDR1_ADDRESS2_Pos          (1UL)                     /*!< ADDRESS2 (Bit 1) */
#define I2C0_SADDR1_ADDRESS2_Msk          (0xfeUL)                  /*!< ADDRESS2 (Bitfield-Mask: 0x7f) */
#define I2C0_SADDR1_DUADEN_Pos            (0UL)                     /*!< DUADEN (Bit 0) */
#define I2C0_SADDR1_DUADEN_Msk            (0x1UL)                   /*!< DUADEN (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define I2C0_DATA_TRB_Pos                 (0UL)                     /*!< TRB (Bit 0) */
#define I2C0_DATA_TRB_Msk                 (0xffUL)                  /*!< TRB (Bitfield-Mask: 0xff) */
/* =========================================================  STAT0  ========================================================= */
#define I2C0_STAT0_SMBALT_Pos             (15UL)                    /*!< SMBALT (Bit 15) */
#define I2C0_STAT0_SMBALT_Msk             (0x8000UL)                /*!< SMBALT (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_SMBTO_Pos              (14UL)                    /*!< SMBTO (Bit 14) */
#define I2C0_STAT0_SMBTO_Msk              (0x4000UL)                /*!< SMBTO (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_PECERR_Pos             (12UL)                    /*!< PECERR (Bit 12) */
#define I2C0_STAT0_PECERR_Msk             (0x1000UL)                /*!< PECERR (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_OUERR_Pos              (11UL)                    /*!< OUERR (Bit 11) */
#define I2C0_STAT0_OUERR_Msk              (0x800UL)                 /*!< OUERR (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_AERR_Pos               (10UL)                    /*!< AERR (Bit 10) */
#define I2C0_STAT0_AERR_Msk               (0x400UL)                 /*!< AERR (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_LOSTARB_Pos            (9UL)                     /*!< LOSTARB (Bit 9) */
#define I2C0_STAT0_LOSTARB_Msk            (0x200UL)                 /*!< LOSTARB (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_BERR_Pos               (8UL)                     /*!< BERR (Bit 8) */
#define I2C0_STAT0_BERR_Msk               (0x100UL)                 /*!< BERR (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_TBE_Pos                (7UL)                     /*!< TBE (Bit 7) */
#define I2C0_STAT0_TBE_Msk                (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_RBNE_Pos               (6UL)                     /*!< RBNE (Bit 6) */
#define I2C0_STAT0_RBNE_Msk               (0x40UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_STPDET_Pos             (4UL)                     /*!< STPDET (Bit 4) */
#define I2C0_STAT0_STPDET_Msk             (0x10UL)                  /*!< STPDET (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_ADD10SEND_Pos          (3UL)                     /*!< ADD10SEND (Bit 3) */
#define I2C0_STAT0_ADD10SEND_Msk          (0x8UL)                   /*!< ADD10SEND (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_BTC_Pos                (2UL)                     /*!< BTC (Bit 2) */
#define I2C0_STAT0_BTC_Msk                (0x4UL)                   /*!< BTC (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_ADDSEND_Pos            (1UL)                     /*!< ADDSEND (Bit 1) */
#define I2C0_STAT0_ADDSEND_Msk            (0x2UL)                   /*!< ADDSEND (Bitfield-Mask: 0x01) */
#define I2C0_STAT0_SBSEND_Pos             (0UL)                     /*!< SBSEND (Bit 0) */
#define I2C0_STAT0_SBSEND_Msk             (0x1UL)                   /*!< SBSEND (Bitfield-Mask: 0x01) */
/* =========================================================  STAT1  ========================================================= */
#define I2C0_STAT1_ECV_Pos                (8UL)                     /*!< ECV (Bit 8) */
#define I2C0_STAT1_ECV_Msk                (0xff00UL)                /*!< ECV (Bitfield-Mask: 0xff) */
#define I2C0_STAT1_DUMODF_Pos             (7UL)                     /*!< DUMODF (Bit 7) */
#define I2C0_STAT1_DUMODF_Msk             (0x80UL)                  /*!< DUMODF (Bitfield-Mask: 0x01) */
#define I2C0_STAT1_HSTSMB_Pos             (6UL)                     /*!< HSTSMB (Bit 6) */
#define I2C0_STAT1_HSTSMB_Msk             (0x40UL)                  /*!< HSTSMB (Bitfield-Mask: 0x01) */
#define I2C0_STAT1_DEFSMB_Pos             (5UL)                     /*!< DEFSMB (Bit 5) */
#define I2C0_STAT1_DEFSMB_Msk             (0x20UL)                  /*!< DEFSMB (Bitfield-Mask: 0x01) */
#define I2C0_STAT1_RXGC_Pos               (4UL)                     /*!< RXGC (Bit 4) */
#define I2C0_STAT1_RXGC_Msk               (0x10UL)                  /*!< RXGC (Bitfield-Mask: 0x01) */
#define I2C0_STAT1_TRS_Pos                (2UL)                     /*!< TRS (Bit 2) */
#define I2C0_STAT1_TRS_Msk                (0x4UL)                   /*!< TRS (Bitfield-Mask: 0x01) */
#define I2C0_STAT1_I2CBSY_Pos             (1UL)                     /*!< I2CBSY (Bit 1) */
#define I2C0_STAT1_I2CBSY_Msk             (0x2UL)                   /*!< I2CBSY (Bitfield-Mask: 0x01) */
#define I2C0_STAT1_MASTER_Pos             (0UL)                     /*!< MASTER (Bit 0) */
#define I2C0_STAT1_MASTER_Msk             (0x1UL)                   /*!< MASTER (Bitfield-Mask: 0x01) */
/* =========================================================  CKCFG  ========================================================= */
#define I2C0_CKCFG_FAST_Pos               (15UL)                    /*!< FAST (Bit 15) */
#define I2C0_CKCFG_FAST_Msk               (0x8000UL)                /*!< FAST (Bitfield-Mask: 0x01) */
#define I2C0_CKCFG_DTCY_Pos               (14UL)                    /*!< DTCY (Bit 14) */
#define I2C0_CKCFG_DTCY_Msk               (0x4000UL)                /*!< DTCY (Bitfield-Mask: 0x01) */
#define I2C0_CKCFG_CLKC_Pos               (0UL)                     /*!< CLKC (Bit 0) */
#define I2C0_CKCFG_CLKC_Msk               (0xfffUL)                 /*!< CLKC (Bitfield-Mask: 0xfff) */
/* ==========================================================  RT  =========================================================== */
#define I2C0_RT_RISETIME_Pos              (0UL)                     /*!< RISETIME (Bit 0) */
#define I2C0_RT_RISETIME_Msk              (0x3fUL)                  /*!< RISETIME (Bitfield-Mask: 0x3f) */
/* =========================================================  FCTL  ========================================================== */
#define I2C0_FCTL_AFD_Pos                 (4UL)                     /*!< AFD (Bit 4) */
#define I2C0_FCTL_AFD_Msk                 (0x10UL)                  /*!< AFD (Bitfield-Mask: 0x01) */
#define I2C0_FCTL_DF_Pos                  (0UL)                     /*!< DF (Bit 0) */
#define I2C0_FCTL_DF_Msk                  (0xfUL)                   /*!< DF (Bitfield-Mask: 0x0f) */
/* =========================================================  SAMCS  ========================================================= */
#define I2C0_SAMCS_SAMEN_Pos              (0UL)                     /*!< SAMEN (Bit 0) */
#define I2C0_SAMCS_SAMEN_Msk              (0x1UL)                   /*!< SAMEN (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_STOEN_Pos              (1UL)                     /*!< STOEN (Bit 1) */
#define I2C0_SAMCS_STOEN_Msk              (0x2UL)                   /*!< STOEN (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_TFFIE_Pos              (4UL)                     /*!< TFFIE (Bit 4) */
#define I2C0_SAMCS_TFFIE_Msk              (0x10UL)                  /*!< TFFIE (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_TFRIE_Pos              (5UL)                     /*!< TFRIE (Bit 5) */
#define I2C0_SAMCS_TFRIE_Msk              (0x20UL)                  /*!< TFRIE (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_RFFIE_Pos              (6UL)                     /*!< RFFIE (Bit 6) */
#define I2C0_SAMCS_RFFIE_Msk              (0x40UL)                  /*!< RFFIE (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_RFRIE_Pos              (7UL)                     /*!< RFRIE (Bit 7) */
#define I2C0_SAMCS_RFRIE_Msk              (0x80UL)                  /*!< RFRIE (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_TXF_Pos                (8UL)                     /*!< TXF (Bit 8) */
#define I2C0_SAMCS_TXF_Msk                (0x100UL)                 /*!< TXF (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_RXF_Pos                (9UL)                     /*!< RXF (Bit 9) */
#define I2C0_SAMCS_RXF_Msk                (0x200UL)                 /*!< RXF (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_TFF_Pos                (12UL)                    /*!< TFF (Bit 12) */
#define I2C0_SAMCS_TFF_Msk                (0x1000UL)                /*!< TFF (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_TFR_Pos                (13UL)                    /*!< TFR (Bit 13) */
#define I2C0_SAMCS_TFR_Msk                (0x2000UL)                /*!< TFR (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_RFF_Pos                (14UL)                    /*!< RFF (Bit 14) */
#define I2C0_SAMCS_RFF_Msk                (0x4000UL)                /*!< RFF (Bitfield-Mask: 0x01) */
#define I2C0_SAMCS_RFR_Pos                (15UL)                    /*!< RFR (Bit 15) */
#define I2C0_SAMCS_RFR_Msk                (0x8000UL)                /*!< RFR (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define I2C1_CTL0_SRESET_Pos              (15UL)                    /*!< SRESET (Bit 15) */
#define I2C1_CTL0_SRESET_Msk              (0x8000UL)                /*!< SRESET (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_SALT_Pos                (13UL)                    /*!< SALT (Bit 13) */
#define I2C1_CTL0_SALT_Msk                (0x2000UL)                /*!< SALT (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_PECTRANS_Pos            (12UL)                    /*!< PECTRANS (Bit 12) */
#define I2C1_CTL0_PECTRANS_Msk            (0x1000UL)                /*!< PECTRANS (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_POAP_Pos                (11UL)                    /*!< POAP (Bit 11) */
#define I2C1_CTL0_POAP_Msk                (0x800UL)                 /*!< POAP (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_ACKEN_Pos               (10UL)                    /*!< ACKEN (Bit 10) */
#define I2C1_CTL0_ACKEN_Msk               (0x400UL)                 /*!< ACKEN (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_STOP_Pos                (9UL)                     /*!< STOP (Bit 9) */
#define I2C1_CTL0_STOP_Msk                (0x200UL)                 /*!< STOP (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_START_Pos               (8UL)                     /*!< START (Bit 8) */
#define I2C1_CTL0_START_Msk               (0x100UL)                 /*!< START (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_DISSTRC_Pos             (7UL)                     /*!< DISSTRC (Bit 7) */
#define I2C1_CTL0_DISSTRC_Msk             (0x80UL)                  /*!< DISSTRC (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_GCEN_Pos                (6UL)                     /*!< GCEN (Bit 6) */
#define I2C1_CTL0_GCEN_Msk                (0x40UL)                  /*!< GCEN (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_PECEN_Pos               (5UL)                     /*!< PECEN (Bit 5) */
#define I2C1_CTL0_PECEN_Msk               (0x20UL)                  /*!< PECEN (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_ARPEN_Pos               (4UL)                     /*!< ARPEN (Bit 4) */
#define I2C1_CTL0_ARPEN_Msk               (0x10UL)                  /*!< ARPEN (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_SMBSEL_Pos              (3UL)                     /*!< SMBSEL (Bit 3) */
#define I2C1_CTL0_SMBSEL_Msk              (0x8UL)                   /*!< SMBSEL (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_SMBEN_Pos               (1UL)                     /*!< SMBEN (Bit 1) */
#define I2C1_CTL0_SMBEN_Msk               (0x2UL)                   /*!< SMBEN (Bitfield-Mask: 0x01) */
#define I2C1_CTL0_I2CEN_Pos               (0UL)                     /*!< I2CEN (Bit 0) */
#define I2C1_CTL0_I2CEN_Msk               (0x1UL)                   /*!< I2CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define I2C1_CTL1_DMALST_Pos              (12UL)                    /*!< DMALST (Bit 12) */
#define I2C1_CTL1_DMALST_Msk              (0x1000UL)                /*!< DMALST (Bitfield-Mask: 0x01) */
#define I2C1_CTL1_DMAON_Pos               (11UL)                    /*!< DMAON (Bit 11) */
#define I2C1_CTL1_DMAON_Msk               (0x800UL)                 /*!< DMAON (Bitfield-Mask: 0x01) */
#define I2C1_CTL1_BUFIE_Pos               (10UL)                    /*!< BUFIE (Bit 10) */
#define I2C1_CTL1_BUFIE_Msk               (0x400UL)                 /*!< BUFIE (Bitfield-Mask: 0x01) */
#define I2C1_CTL1_EVIE_Pos                (9UL)                     /*!< EVIE (Bit 9) */
#define I2C1_CTL1_EVIE_Msk                (0x200UL)                 /*!< EVIE (Bitfield-Mask: 0x01) */
#define I2C1_CTL1_ERRIE_Pos               (8UL)                     /*!< ERRIE (Bit 8) */
#define I2C1_CTL1_ERRIE_Msk               (0x100UL)                 /*!< ERRIE (Bitfield-Mask: 0x01) */
#define I2C1_CTL1_I2CCLK_Pos              (0UL)                     /*!< I2CCLK (Bit 0) */
#define I2C1_CTL1_I2CCLK_Msk              (0x3fUL)                  /*!< I2CCLK (Bitfield-Mask: 0x3f) */
/* ========================================================  SADDR0  ========================================================= */
#define I2C1_SADDR0_ADDFORMAT_Pos         (15UL)                    /*!< ADDFORMAT (Bit 15) */
#define I2C1_SADDR0_ADDFORMAT_Msk         (0x8000UL)                /*!< ADDFORMAT (Bitfield-Mask: 0x01) */
#define I2C1_SADDR0_ADDRESS9_8_Pos        (8UL)                     /*!< ADDRESS9_8 (Bit 8) */
#define I2C1_SADDR0_ADDRESS9_8_Msk        (0x300UL)                 /*!< ADDRESS9_8 (Bitfield-Mask: 0x03) */
#define I2C1_SADDR0_ADDRESS7_1_Pos        (1UL)                     /*!< ADDRESS7_1 (Bit 1) */
#define I2C1_SADDR0_ADDRESS7_1_Msk        (0xfeUL)                  /*!< ADDRESS7_1 (Bitfield-Mask: 0x7f) */
#define I2C1_SADDR0_ADDRESS0_Pos          (0UL)                     /*!< ADDRESS0 (Bit 0) */
#define I2C1_SADDR0_ADDRESS0_Msk          (0x1UL)                   /*!< ADDRESS0 (Bitfield-Mask: 0x01) */
/* ========================================================  SADDR1  ========================================================= */
#define I2C1_SADDR1_ADDRESS2_Pos          (1UL)                     /*!< ADDRESS2 (Bit 1) */
#define I2C1_SADDR1_ADDRESS2_Msk          (0xfeUL)                  /*!< ADDRESS2 (Bitfield-Mask: 0x7f) */
#define I2C1_SADDR1_DUADEN_Pos            (0UL)                     /*!< DUADEN (Bit 0) */
#define I2C1_SADDR1_DUADEN_Msk            (0x1UL)                   /*!< DUADEN (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define I2C1_DATA_TRB_Pos                 (0UL)                     /*!< TRB (Bit 0) */
#define I2C1_DATA_TRB_Msk                 (0xffUL)                  /*!< TRB (Bitfield-Mask: 0xff) */
/* =========================================================  STAT0  ========================================================= */
#define I2C1_STAT0_SMBALT_Pos             (15UL)                    /*!< SMBALT (Bit 15) */
#define I2C1_STAT0_SMBALT_Msk             (0x8000UL)                /*!< SMBALT (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_SMBTO_Pos              (14UL)                    /*!< SMBTO (Bit 14) */
#define I2C1_STAT0_SMBTO_Msk              (0x4000UL)                /*!< SMBTO (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_PECERR_Pos             (12UL)                    /*!< PECERR (Bit 12) */
#define I2C1_STAT0_PECERR_Msk             (0x1000UL)                /*!< PECERR (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_OUERR_Pos              (11UL)                    /*!< OUERR (Bit 11) */
#define I2C1_STAT0_OUERR_Msk              (0x800UL)                 /*!< OUERR (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_AERR_Pos               (10UL)                    /*!< AERR (Bit 10) */
#define I2C1_STAT0_AERR_Msk               (0x400UL)                 /*!< AERR (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_LOSTARB_Pos            (9UL)                     /*!< LOSTARB (Bit 9) */
#define I2C1_STAT0_LOSTARB_Msk            (0x200UL)                 /*!< LOSTARB (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_BERR_Pos               (8UL)                     /*!< BERR (Bit 8) */
#define I2C1_STAT0_BERR_Msk               (0x100UL)                 /*!< BERR (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_TBE_Pos                (7UL)                     /*!< TBE (Bit 7) */
#define I2C1_STAT0_TBE_Msk                (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_RBNE_Pos               (6UL)                     /*!< RBNE (Bit 6) */
#define I2C1_STAT0_RBNE_Msk               (0x40UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_STPDET_Pos             (4UL)                     /*!< STPDET (Bit 4) */
#define I2C1_STAT0_STPDET_Msk             (0x10UL)                  /*!< STPDET (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_ADD10SEND_Pos          (3UL)                     /*!< ADD10SEND (Bit 3) */
#define I2C1_STAT0_ADD10SEND_Msk          (0x8UL)                   /*!< ADD10SEND (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_BTC_Pos                (2UL)                     /*!< BTC (Bit 2) */
#define I2C1_STAT0_BTC_Msk                (0x4UL)                   /*!< BTC (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_ADDSEND_Pos            (1UL)                     /*!< ADDSEND (Bit 1) */
#define I2C1_STAT0_ADDSEND_Msk            (0x2UL)                   /*!< ADDSEND (Bitfield-Mask: 0x01) */
#define I2C1_STAT0_SBSEND_Pos             (0UL)                     /*!< SBSEND (Bit 0) */
#define I2C1_STAT0_SBSEND_Msk             (0x1UL)                   /*!< SBSEND (Bitfield-Mask: 0x01) */
/* =========================================================  STAT1  ========================================================= */
#define I2C1_STAT1_ECV_Pos                (8UL)                     /*!< ECV (Bit 8) */
#define I2C1_STAT1_ECV_Msk                (0xff00UL)                /*!< ECV (Bitfield-Mask: 0xff) */
#define I2C1_STAT1_DUMODF_Pos             (7UL)                     /*!< DUMODF (Bit 7) */
#define I2C1_STAT1_DUMODF_Msk             (0x80UL)                  /*!< DUMODF (Bitfield-Mask: 0x01) */
#define I2C1_STAT1_HSTSMB_Pos             (6UL)                     /*!< HSTSMB (Bit 6) */
#define I2C1_STAT1_HSTSMB_Msk             (0x40UL)                  /*!< HSTSMB (Bitfield-Mask: 0x01) */
#define I2C1_STAT1_DEFSMB_Pos             (5UL)                     /*!< DEFSMB (Bit 5) */
#define I2C1_STAT1_DEFSMB_Msk             (0x20UL)                  /*!< DEFSMB (Bitfield-Mask: 0x01) */
#define I2C1_STAT1_RXGC_Pos               (4UL)                     /*!< RXGC (Bit 4) */
#define I2C1_STAT1_RXGC_Msk               (0x10UL)                  /*!< RXGC (Bitfield-Mask: 0x01) */
#define I2C1_STAT1_TRS_Pos                (2UL)                     /*!< TRS (Bit 2) */
#define I2C1_STAT1_TRS_Msk                (0x4UL)                   /*!< TRS (Bitfield-Mask: 0x01) */
#define I2C1_STAT1_I2CBSY_Pos             (1UL)                     /*!< I2CBSY (Bit 1) */
#define I2C1_STAT1_I2CBSY_Msk             (0x2UL)                   /*!< I2CBSY (Bitfield-Mask: 0x01) */
#define I2C1_STAT1_MASTER_Pos             (0UL)                     /*!< MASTER (Bit 0) */
#define I2C1_STAT1_MASTER_Msk             (0x1UL)                   /*!< MASTER (Bitfield-Mask: 0x01) */
/* =========================================================  CKCFG  ========================================================= */
#define I2C1_CKCFG_FAST_Pos               (15UL)                    /*!< FAST (Bit 15) */
#define I2C1_CKCFG_FAST_Msk               (0x8000UL)                /*!< FAST (Bitfield-Mask: 0x01) */
#define I2C1_CKCFG_DTCY_Pos               (14UL)                    /*!< DTCY (Bit 14) */
#define I2C1_CKCFG_DTCY_Msk               (0x4000UL)                /*!< DTCY (Bitfield-Mask: 0x01) */
#define I2C1_CKCFG_CLKC_Pos               (0UL)                     /*!< CLKC (Bit 0) */
#define I2C1_CKCFG_CLKC_Msk               (0xfffUL)                 /*!< CLKC (Bitfield-Mask: 0xfff) */
/* ==========================================================  RT  =========================================================== */
#define I2C1_RT_RISETIME_Pos              (0UL)                     /*!< RISETIME (Bit 0) */
#define I2C1_RT_RISETIME_Msk              (0x3fUL)                  /*!< RISETIME (Bitfield-Mask: 0x3f) */
/* =========================================================  FCTL  ========================================================== */
#define I2C1_FCTL_AFD_Pos                 (4UL)                     /*!< AFD (Bit 4) */
#define I2C1_FCTL_AFD_Msk                 (0x10UL)                  /*!< AFD (Bitfield-Mask: 0x01) */
#define I2C1_FCTL_DF_Pos                  (0UL)                     /*!< DF (Bit 0) */
#define I2C1_FCTL_DF_Msk                  (0xfUL)                   /*!< DF (Bitfield-Mask: 0x0f) */
/* =========================================================  SAMCS  ========================================================= */
#define I2C1_SAMCS_SAMEN_Pos              (0UL)                     /*!< SAMEN (Bit 0) */
#define I2C1_SAMCS_SAMEN_Msk              (0x1UL)                   /*!< SAMEN (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_STOEN_Pos              (1UL)                     /*!< STOEN (Bit 1) */
#define I2C1_SAMCS_STOEN_Msk              (0x2UL)                   /*!< STOEN (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_TFFIE_Pos              (4UL)                     /*!< TFFIE (Bit 4) */
#define I2C1_SAMCS_TFFIE_Msk              (0x10UL)                  /*!< TFFIE (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_TFRIE_Pos              (5UL)                     /*!< TFRIE (Bit 5) */
#define I2C1_SAMCS_TFRIE_Msk              (0x20UL)                  /*!< TFRIE (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_RFFIE_Pos              (6UL)                     /*!< RFFIE (Bit 6) */
#define I2C1_SAMCS_RFFIE_Msk              (0x40UL)                  /*!< RFFIE (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_RFRIE_Pos              (7UL)                     /*!< RFRIE (Bit 7) */
#define I2C1_SAMCS_RFRIE_Msk              (0x80UL)                  /*!< RFRIE (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_TXF_Pos                (8UL)                     /*!< TXF (Bit 8) */
#define I2C1_SAMCS_TXF_Msk                (0x100UL)                 /*!< TXF (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_RXF_Pos                (9UL)                     /*!< RXF (Bit 9) */
#define I2C1_SAMCS_RXF_Msk                (0x200UL)                 /*!< RXF (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_TFF_Pos                (12UL)                    /*!< TFF (Bit 12) */
#define I2C1_SAMCS_TFF_Msk                (0x1000UL)                /*!< TFF (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_TFR_Pos                (13UL)                    /*!< TFR (Bit 13) */
#define I2C1_SAMCS_TFR_Msk                (0x2000UL)                /*!< TFR (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_RFF_Pos                (14UL)                    /*!< RFF (Bit 14) */
#define I2C1_SAMCS_RFF_Msk                (0x4000UL)                /*!< RFF (Bitfield-Mask: 0x01) */
#define I2C1_SAMCS_RFR_Pos                (15UL)                    /*!< RFR (Bit 15) */
#define I2C1_SAMCS_RFR_Msk                (0x8000UL)                /*!< RFR (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           I2C2                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define I2C2_CTL0_SRESET_Pos              (15UL)                    /*!< SRESET (Bit 15) */
#define I2C2_CTL0_SRESET_Msk              (0x8000UL)                /*!< SRESET (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_SALT_Pos                (13UL)                    /*!< SALT (Bit 13) */
#define I2C2_CTL0_SALT_Msk                (0x2000UL)                /*!< SALT (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_PECTRANS_Pos            (12UL)                    /*!< PECTRANS (Bit 12) */
#define I2C2_CTL0_PECTRANS_Msk            (0x1000UL)                /*!< PECTRANS (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_POAP_Pos                (11UL)                    /*!< POAP (Bit 11) */
#define I2C2_CTL0_POAP_Msk                (0x800UL)                 /*!< POAP (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_ACKEN_Pos               (10UL)                    /*!< ACKEN (Bit 10) */
#define I2C2_CTL0_ACKEN_Msk               (0x400UL)                 /*!< ACKEN (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_STOP_Pos                (9UL)                     /*!< STOP (Bit 9) */
#define I2C2_CTL0_STOP_Msk                (0x200UL)                 /*!< STOP (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_START_Pos               (8UL)                     /*!< START (Bit 8) */
#define I2C2_CTL0_START_Msk               (0x100UL)                 /*!< START (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_DISSTRC_Pos             (7UL)                     /*!< DISSTRC (Bit 7) */
#define I2C2_CTL0_DISSTRC_Msk             (0x80UL)                  /*!< DISSTRC (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_GCEN_Pos                (6UL)                     /*!< GCEN (Bit 6) */
#define I2C2_CTL0_GCEN_Msk                (0x40UL)                  /*!< GCEN (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_PECEN_Pos               (5UL)                     /*!< PECEN (Bit 5) */
#define I2C2_CTL0_PECEN_Msk               (0x20UL)                  /*!< PECEN (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_ARPEN_Pos               (4UL)                     /*!< ARPEN (Bit 4) */
#define I2C2_CTL0_ARPEN_Msk               (0x10UL)                  /*!< ARPEN (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_SMBSEL_Pos              (3UL)                     /*!< SMBSEL (Bit 3) */
#define I2C2_CTL0_SMBSEL_Msk              (0x8UL)                   /*!< SMBSEL (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_SMBEN_Pos               (1UL)                     /*!< SMBEN (Bit 1) */
#define I2C2_CTL0_SMBEN_Msk               (0x2UL)                   /*!< SMBEN (Bitfield-Mask: 0x01) */
#define I2C2_CTL0_I2CEN_Pos               (0UL)                     /*!< I2CEN (Bit 0) */
#define I2C2_CTL0_I2CEN_Msk               (0x1UL)                   /*!< I2CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define I2C2_CTL1_DMALST_Pos              (12UL)                    /*!< DMALST (Bit 12) */
#define I2C2_CTL1_DMALST_Msk              (0x1000UL)                /*!< DMALST (Bitfield-Mask: 0x01) */
#define I2C2_CTL1_DMAON_Pos               (11UL)                    /*!< DMAON (Bit 11) */
#define I2C2_CTL1_DMAON_Msk               (0x800UL)                 /*!< DMAON (Bitfield-Mask: 0x01) */
#define I2C2_CTL1_BUFIE_Pos               (10UL)                    /*!< BUFIE (Bit 10) */
#define I2C2_CTL1_BUFIE_Msk               (0x400UL)                 /*!< BUFIE (Bitfield-Mask: 0x01) */
#define I2C2_CTL1_EVIE_Pos                (9UL)                     /*!< EVIE (Bit 9) */
#define I2C2_CTL1_EVIE_Msk                (0x200UL)                 /*!< EVIE (Bitfield-Mask: 0x01) */
#define I2C2_CTL1_ERRIE_Pos               (8UL)                     /*!< ERRIE (Bit 8) */
#define I2C2_CTL1_ERRIE_Msk               (0x100UL)                 /*!< ERRIE (Bitfield-Mask: 0x01) */
#define I2C2_CTL1_I2CCLK_Pos              (0UL)                     /*!< I2CCLK (Bit 0) */
#define I2C2_CTL1_I2CCLK_Msk              (0x3fUL)                  /*!< I2CCLK (Bitfield-Mask: 0x3f) */
/* ========================================================  SADDR0  ========================================================= */
#define I2C2_SADDR0_ADDFORMAT_Pos         (15UL)                    /*!< ADDFORMAT (Bit 15) */
#define I2C2_SADDR0_ADDFORMAT_Msk         (0x8000UL)                /*!< ADDFORMAT (Bitfield-Mask: 0x01) */
#define I2C2_SADDR0_ADDRESS9_8_Pos        (8UL)                     /*!< ADDRESS9_8 (Bit 8) */
#define I2C2_SADDR0_ADDRESS9_8_Msk        (0x300UL)                 /*!< ADDRESS9_8 (Bitfield-Mask: 0x03) */
#define I2C2_SADDR0_ADDRESS7_1_Pos        (1UL)                     /*!< ADDRESS7_1 (Bit 1) */
#define I2C2_SADDR0_ADDRESS7_1_Msk        (0xfeUL)                  /*!< ADDRESS7_1 (Bitfield-Mask: 0x7f) */
#define I2C2_SADDR0_ADDRESS0_Pos          (0UL)                     /*!< ADDRESS0 (Bit 0) */
#define I2C2_SADDR0_ADDRESS0_Msk          (0x1UL)                   /*!< ADDRESS0 (Bitfield-Mask: 0x01) */
/* ========================================================  SADDR1  ========================================================= */
#define I2C2_SADDR1_ADDRESS2_Pos          (1UL)                     /*!< ADDRESS2 (Bit 1) */
#define I2C2_SADDR1_ADDRESS2_Msk          (0xfeUL)                  /*!< ADDRESS2 (Bitfield-Mask: 0x7f) */
#define I2C2_SADDR1_DUADEN_Pos            (0UL)                     /*!< DUADEN (Bit 0) */
#define I2C2_SADDR1_DUADEN_Msk            (0x1UL)                   /*!< DUADEN (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define I2C2_DATA_TRB_Pos                 (0UL)                     /*!< TRB (Bit 0) */
#define I2C2_DATA_TRB_Msk                 (0xffUL)                  /*!< TRB (Bitfield-Mask: 0xff) */
/* =========================================================  STAT0  ========================================================= */
#define I2C2_STAT0_SMBALT_Pos             (15UL)                    /*!< SMBALT (Bit 15) */
#define I2C2_STAT0_SMBALT_Msk             (0x8000UL)                /*!< SMBALT (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_SMBTO_Pos              (14UL)                    /*!< SMBTO (Bit 14) */
#define I2C2_STAT0_SMBTO_Msk              (0x4000UL)                /*!< SMBTO (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_PECERR_Pos             (12UL)                    /*!< PECERR (Bit 12) */
#define I2C2_STAT0_PECERR_Msk             (0x1000UL)                /*!< PECERR (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_OUERR_Pos              (11UL)                    /*!< OUERR (Bit 11) */
#define I2C2_STAT0_OUERR_Msk              (0x800UL)                 /*!< OUERR (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_AERR_Pos               (10UL)                    /*!< AERR (Bit 10) */
#define I2C2_STAT0_AERR_Msk               (0x400UL)                 /*!< AERR (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_LOSTARB_Pos            (9UL)                     /*!< LOSTARB (Bit 9) */
#define I2C2_STAT0_LOSTARB_Msk            (0x200UL)                 /*!< LOSTARB (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_BERR_Pos               (8UL)                     /*!< BERR (Bit 8) */
#define I2C2_STAT0_BERR_Msk               (0x100UL)                 /*!< BERR (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_TBE_Pos                (7UL)                     /*!< TBE (Bit 7) */
#define I2C2_STAT0_TBE_Msk                (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_RBNE_Pos               (6UL)                     /*!< RBNE (Bit 6) */
#define I2C2_STAT0_RBNE_Msk               (0x40UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_STPDET_Pos             (4UL)                     /*!< STPDET (Bit 4) */
#define I2C2_STAT0_STPDET_Msk             (0x10UL)                  /*!< STPDET (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_ADD10SEND_Pos          (3UL)                     /*!< ADD10SEND (Bit 3) */
#define I2C2_STAT0_ADD10SEND_Msk          (0x8UL)                   /*!< ADD10SEND (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_BTC_Pos                (2UL)                     /*!< BTC (Bit 2) */
#define I2C2_STAT0_BTC_Msk                (0x4UL)                   /*!< BTC (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_ADDSEND_Pos            (1UL)                     /*!< ADDSEND (Bit 1) */
#define I2C2_STAT0_ADDSEND_Msk            (0x2UL)                   /*!< ADDSEND (Bitfield-Mask: 0x01) */
#define I2C2_STAT0_SBSEND_Pos             (0UL)                     /*!< SBSEND (Bit 0) */
#define I2C2_STAT0_SBSEND_Msk             (0x1UL)                   /*!< SBSEND (Bitfield-Mask: 0x01) */
/* =========================================================  STAT1  ========================================================= */
#define I2C2_STAT1_ECV_Pos                (8UL)                     /*!< ECV (Bit 8) */
#define I2C2_STAT1_ECV_Msk                (0xff00UL)                /*!< ECV (Bitfield-Mask: 0xff) */
#define I2C2_STAT1_DUMODF_Pos             (7UL)                     /*!< DUMODF (Bit 7) */
#define I2C2_STAT1_DUMODF_Msk             (0x80UL)                  /*!< DUMODF (Bitfield-Mask: 0x01) */
#define I2C2_STAT1_HSTSMB_Pos             (6UL)                     /*!< HSTSMB (Bit 6) */
#define I2C2_STAT1_HSTSMB_Msk             (0x40UL)                  /*!< HSTSMB (Bitfield-Mask: 0x01) */
#define I2C2_STAT1_DEFSMB_Pos             (5UL)                     /*!< DEFSMB (Bit 5) */
#define I2C2_STAT1_DEFSMB_Msk             (0x20UL)                  /*!< DEFSMB (Bitfield-Mask: 0x01) */
#define I2C2_STAT1_RXGC_Pos               (4UL)                     /*!< RXGC (Bit 4) */
#define I2C2_STAT1_RXGC_Msk               (0x10UL)                  /*!< RXGC (Bitfield-Mask: 0x01) */
#define I2C2_STAT1_TRS_Pos                (2UL)                     /*!< TRS (Bit 2) */
#define I2C2_STAT1_TRS_Msk                (0x4UL)                   /*!< TRS (Bitfield-Mask: 0x01) */
#define I2C2_STAT1_I2CBSY_Pos             (1UL)                     /*!< I2CBSY (Bit 1) */
#define I2C2_STAT1_I2CBSY_Msk             (0x2UL)                   /*!< I2CBSY (Bitfield-Mask: 0x01) */
#define I2C2_STAT1_MASTER_Pos             (0UL)                     /*!< MASTER (Bit 0) */
#define I2C2_STAT1_MASTER_Msk             (0x1UL)                   /*!< MASTER (Bitfield-Mask: 0x01) */
/* =========================================================  CKCFG  ========================================================= */
#define I2C2_CKCFG_FAST_Pos               (15UL)                    /*!< FAST (Bit 15) */
#define I2C2_CKCFG_FAST_Msk               (0x8000UL)                /*!< FAST (Bitfield-Mask: 0x01) */
#define I2C2_CKCFG_DTCY_Pos               (14UL)                    /*!< DTCY (Bit 14) */
#define I2C2_CKCFG_DTCY_Msk               (0x4000UL)                /*!< DTCY (Bitfield-Mask: 0x01) */
#define I2C2_CKCFG_CLKC_Pos               (0UL)                     /*!< CLKC (Bit 0) */
#define I2C2_CKCFG_CLKC_Msk               (0xfffUL)                 /*!< CLKC (Bitfield-Mask: 0xfff) */
/* ==========================================================  RT  =========================================================== */
#define I2C2_RT_RISETIME_Pos              (0UL)                     /*!< RISETIME (Bit 0) */
#define I2C2_RT_RISETIME_Msk              (0x3fUL)                  /*!< RISETIME (Bitfield-Mask: 0x3f) */
/* =========================================================  FCTL  ========================================================== */
#define I2C2_FCTL_AFD_Pos                 (4UL)                     /*!< AFD (Bit 4) */
#define I2C2_FCTL_AFD_Msk                 (0x10UL)                  /*!< AFD (Bitfield-Mask: 0x01) */
#define I2C2_FCTL_DF_Pos                  (0UL)                     /*!< DF (Bit 0) */
#define I2C2_FCTL_DF_Msk                  (0xfUL)                   /*!< DF (Bitfield-Mask: 0x0f) */
/* =========================================================  SAMCS  ========================================================= */
#define I2C2_SAMCS_SAMEN_Pos              (0UL)                     /*!< SAMEN (Bit 0) */
#define I2C2_SAMCS_SAMEN_Msk              (0x1UL)                   /*!< SAMEN (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_STOEN_Pos              (1UL)                     /*!< STOEN (Bit 1) */
#define I2C2_SAMCS_STOEN_Msk              (0x2UL)                   /*!< STOEN (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_TFFIE_Pos              (4UL)                     /*!< TFFIE (Bit 4) */
#define I2C2_SAMCS_TFFIE_Msk              (0x10UL)                  /*!< TFFIE (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_TFRIE_Pos              (5UL)                     /*!< TFRIE (Bit 5) */
#define I2C2_SAMCS_TFRIE_Msk              (0x20UL)                  /*!< TFRIE (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_RFFIE_Pos              (6UL)                     /*!< RFFIE (Bit 6) */
#define I2C2_SAMCS_RFFIE_Msk              (0x40UL)                  /*!< RFFIE (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_RFRIE_Pos              (7UL)                     /*!< RFRIE (Bit 7) */
#define I2C2_SAMCS_RFRIE_Msk              (0x80UL)                  /*!< RFRIE (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_TXF_Pos                (8UL)                     /*!< TXF (Bit 8) */
#define I2C2_SAMCS_TXF_Msk                (0x100UL)                 /*!< TXF (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_RXF_Pos                (9UL)                     /*!< RXF (Bit 9) */
#define I2C2_SAMCS_RXF_Msk                (0x200UL)                 /*!< RXF (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_TFF_Pos                (12UL)                    /*!< TFF (Bit 12) */
#define I2C2_SAMCS_TFF_Msk                (0x1000UL)                /*!< TFF (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_TFR_Pos                (13UL)                    /*!< TFR (Bit 13) */
#define I2C2_SAMCS_TFR_Msk                (0x2000UL)                /*!< TFR (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_RFF_Pos                (14UL)                    /*!< RFF (Bit 14) */
#define I2C2_SAMCS_RFF_Msk                (0x4000UL)                /*!< RFF (Bitfield-Mask: 0x01) */
#define I2C2_SAMCS_RFR_Pos                (15UL)                    /*!< RFR (Bit 15) */
#define I2C2_SAMCS_RFR_Msk                (0x8000UL)                /*!< RFR (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                            IPA                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  IPA_CTL  ======================================================== */
#define IPA_IPA_CTL_TEN_Pos               (0UL)                     /*!< TEN (Bit 0) */
#define IPA_IPA_CTL_TEN_Msk               (0x1UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define IPA_IPA_CTL_THU_Pos               (1UL)                     /*!< THU (Bit 1) */
#define IPA_IPA_CTL_THU_Msk               (0x2UL)                   /*!< THU (Bitfield-Mask: 0x01) */
#define IPA_IPA_CTL_TST_Pos               (2UL)                     /*!< TST (Bit 2) */
#define IPA_IPA_CTL_TST_Msk               (0x4UL)                   /*!< TST (Bitfield-Mask: 0x01) */
#define IPA_IPA_CTL_TAEIE_Pos             (8UL)                     /*!< TAEIE (Bit 8) */
#define IPA_IPA_CTL_TAEIE_Msk             (0x100UL)                 /*!< TAEIE (Bitfield-Mask: 0x01) */
#define IPA_IPA_CTL_FTFIE_Pos             (9UL)                     /*!< FTFIE (Bit 9) */
#define IPA_IPA_CTL_FTFIE_Msk             (0x200UL)                 /*!< FTFIE (Bitfield-Mask: 0x01) */
#define IPA_IPA_CTL_TLMIE_Pos             (10UL)                    /*!< TLMIE (Bit 10) */
#define IPA_IPA_CTL_TLMIE_Msk             (0x400UL)                 /*!< TLMIE (Bitfield-Mask: 0x01) */
#define IPA_IPA_CTL_LACIE_Pos             (11UL)                    /*!< LACIE (Bit 11) */
#define IPA_IPA_CTL_LACIE_Msk             (0x800UL)                 /*!< LACIE (Bitfield-Mask: 0x01) */
#define IPA_IPA_CTL_LLFIE_Pos             (12UL)                    /*!< LLFIE (Bit 12) */
#define IPA_IPA_CTL_LLFIE_Msk             (0x1000UL)                /*!< LLFIE (Bitfield-Mask: 0x01) */
#define IPA_IPA_CTL_WCFIE_Pos             (13UL)                    /*!< WCFIE (Bit 13) */
#define IPA_IPA_CTL_WCFIE_Msk             (0x2000UL)                /*!< WCFIE (Bitfield-Mask: 0x01) */
#define IPA_IPA_CTL_PFCM_Pos              (16UL)                    /*!< PFCM (Bit 16) */
#define IPA_IPA_CTL_PFCM_Msk              (0x30000UL)               /*!< PFCM (Bitfield-Mask: 0x03) */
/* =======================================================  IPA_INTF  ======================================================== */
#define IPA_IPA_INTF_TAEIF_Pos            (0UL)                     /*!< TAEIF (Bit 0) */
#define IPA_IPA_INTF_TAEIF_Msk            (0x1UL)                   /*!< TAEIF (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTF_FTFIF_Pos            (1UL)                     /*!< FTFIF (Bit 1) */
#define IPA_IPA_INTF_FTFIF_Msk            (0x2UL)                   /*!< FTFIF (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTF_TLMIF_Pos            (2UL)                     /*!< TLMIF (Bit 2) */
#define IPA_IPA_INTF_TLMIF_Msk            (0x4UL)                   /*!< TLMIF (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTF_LACIF_Pos            (3UL)                     /*!< LACIF (Bit 3) */
#define IPA_IPA_INTF_LACIF_Msk            (0x8UL)                   /*!< LACIF (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTF_LLFIF_Pos            (4UL)                     /*!< LLFIF (Bit 4) */
#define IPA_IPA_INTF_LLFIF_Msk            (0x10UL)                  /*!< LLFIF (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTF_WCFIF_Pos            (5UL)                     /*!< WCFIF (Bit 5) */
#define IPA_IPA_INTF_WCFIF_Msk            (0x20UL)                  /*!< WCFIF (Bitfield-Mask: 0x01) */
/* =======================================================  IPA_INTC  ======================================================== */
#define IPA_IPA_INTC_TAEIFC_Pos           (0UL)                     /*!< TAEIFC (Bit 0) */
#define IPA_IPA_INTC_TAEIFC_Msk           (0x1UL)                   /*!< TAEIFC (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTC_TFIFC_Pos            (1UL)                     /*!< TFIFC (Bit 1) */
#define IPA_IPA_INTC_TFIFC_Msk            (0x2UL)                   /*!< TFIFC (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTC_TLMIF_Pos            (2UL)                     /*!< TLMIF (Bit 2) */
#define IPA_IPA_INTC_TLMIF_Msk            (0x4UL)                   /*!< TLMIF (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTC_LACIFC_Pos           (3UL)                     /*!< LACIFC (Bit 3) */
#define IPA_IPA_INTC_LACIFC_Msk           (0x8UL)                   /*!< LACIFC (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTC_LLFIFC_Pos           (4UL)                     /*!< LLFIFC (Bit 4) */
#define IPA_IPA_INTC_LLFIFC_Msk           (0x10UL)                  /*!< LLFIFC (Bitfield-Mask: 0x01) */
#define IPA_IPA_INTC_CWCFIF_Pos           (5UL)                     /*!< CWCFIF (Bit 5) */
#define IPA_IPA_INTC_CWCFIF_Msk           (0x20UL)                  /*!< CWCFIF (Bitfield-Mask: 0x01) */
/* ======================================================  IPA_FMADDR  ======================================================= */
#define IPA_IPA_FMADDR_FMADDR_Pos         (0UL)                     /*!< FMADDR (Bit 0) */
#define IPA_IPA_FMADDR_FMADDR_Msk         (0xffffffffUL)            /*!< FMADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  IPA_FLOFF  ======================================================= */
#define IPA_IPA_FLOFF_FLOFF_Pos           (0UL)                     /*!< FLOFF (Bit 0) */
#define IPA_IPA_FLOFF_FLOFF_Msk           (0x3fffUL)                /*!< FLOFF (Bitfield-Mask: 0x3fff) */
/* ======================================================  IPA_BMADDR  ======================================================= */
#define IPA_IPA_BMADDR_BMADDR_Pos         (0UL)                     /*!< BMADDR (Bit 0) */
#define IPA_IPA_BMADDR_BMADDR_Msk         (0xffffffffUL)            /*!< BMADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  IPA_BLOFF  ======================================================= */
#define IPA_IPA_BLOFF_BLOFF_Pos           (0UL)                     /*!< BLOFF (Bit 0) */
#define IPA_IPA_BLOFF_BLOFF_Msk           (0x3fffUL)                /*!< BLOFF (Bitfield-Mask: 0x3fff) */
/* =======================================================  IPA_FPCTL  ======================================================= */
#define IPA_IPA_FPCTL_FPF_Pos             (0UL)                     /*!< FPF (Bit 0) */
#define IPA_IPA_FPCTL_FPF_Msk             (0xfUL)                   /*!< FPF (Bitfield-Mask: 0x0f) */
#define IPA_IPA_FPCTL_FLPF_Pos            (4UL)                     /*!< FLPF (Bit 4) */
#define IPA_IPA_FPCTL_FLPF_Msk            (0x10UL)                  /*!< FLPF (Bitfield-Mask: 0x01) */
#define IPA_IPA_FPCTL_FLLEN_Pos           (5UL)                     /*!< FLLEN (Bit 5) */
#define IPA_IPA_FPCTL_FLLEN_Msk           (0x20UL)                  /*!< FLLEN (Bitfield-Mask: 0x01) */
#define IPA_IPA_FPCTL_FCNP_Pos            (8UL)                     /*!< FCNP (Bit 8) */
#define IPA_IPA_FPCTL_FCNP_Msk            (0xff00UL)                /*!< FCNP (Bitfield-Mask: 0xff) */
#define IPA_IPA_FPCTL_FAVCA_Pos           (16UL)                    /*!< FAVCA (Bit 16) */
#define IPA_IPA_FPCTL_FAVCA_Msk           (0x30000UL)               /*!< FAVCA (Bitfield-Mask: 0x03) */
#define IPA_IPA_FPCTL_FPDAV_Pos           (24UL)                    /*!< FPDAV (Bit 24) */
#define IPA_IPA_FPCTL_FPDAV_Msk           (0xff000000UL)            /*!< FPDAV (Bitfield-Mask: 0xff) */
/* ========================================================  IPA_FPV  ======================================================== */
#define IPA_IPA_FPV_FPDBV_Pos             (0UL)                     /*!< FPDBV (Bit 0) */
#define IPA_IPA_FPV_FPDBV_Msk             (0xffUL)                  /*!< FPDBV (Bitfield-Mask: 0xff) */
#define IPA_IPA_FPV_FPDGV_Pos             (8UL)                     /*!< FPDGV (Bit 8) */
#define IPA_IPA_FPV_FPDGV_Msk             (0xff00UL)                /*!< FPDGV (Bitfield-Mask: 0xff) */
#define IPA_IPA_FPV_FPDRV_Pos             (16UL)                    /*!< FPDRV (Bit 16) */
#define IPA_IPA_FPV_FPDRV_Msk             (0xff0000UL)              /*!< FPDRV (Bitfield-Mask: 0xff) */
/* =======================================================  IPA_BPCTL  ======================================================= */
#define IPA_IPA_BPCTL_BPF_Pos             (0UL)                     /*!< BPF (Bit 0) */
#define IPA_IPA_BPCTL_BPF_Msk             (0xfUL)                   /*!< BPF (Bitfield-Mask: 0x0f) */
#define IPA_IPA_BPCTL_BLPF_Pos            (4UL)                     /*!< BLPF (Bit 4) */
#define IPA_IPA_BPCTL_BLPF_Msk            (0x10UL)                  /*!< BLPF (Bitfield-Mask: 0x01) */
#define IPA_IPA_BPCTL_BLLEN_Pos           (5UL)                     /*!< BLLEN (Bit 5) */
#define IPA_IPA_BPCTL_BLLEN_Msk           (0x20UL)                  /*!< BLLEN (Bitfield-Mask: 0x01) */
#define IPA_IPA_BPCTL_BCNP_Pos            (8UL)                     /*!< BCNP (Bit 8) */
#define IPA_IPA_BPCTL_BCNP_Msk            (0xff00UL)                /*!< BCNP (Bitfield-Mask: 0xff) */
#define IPA_IPA_BPCTL_BAVCA_Pos           (16UL)                    /*!< BAVCA (Bit 16) */
#define IPA_IPA_BPCTL_BAVCA_Msk           (0x30000UL)               /*!< BAVCA (Bitfield-Mask: 0x03) */
#define IPA_IPA_BPCTL_BPDAV_Pos           (24UL)                    /*!< BPDAV (Bit 24) */
#define IPA_IPA_BPCTL_BPDAV_Msk           (0xff000000UL)            /*!< BPDAV (Bitfield-Mask: 0xff) */
/* ========================================================  IPA_BPV  ======================================================== */
#define IPA_IPA_BPV_BPDBV_Pos             (0UL)                     /*!< BPDBV (Bit 0) */
#define IPA_IPA_BPV_BPDBV_Msk             (0xffUL)                  /*!< BPDBV (Bitfield-Mask: 0xff) */
#define IPA_IPA_BPV_BPDGV_Pos             (8UL)                     /*!< BPDGV (Bit 8) */
#define IPA_IPA_BPV_BPDGV_Msk             (0xff00UL)                /*!< BPDGV (Bitfield-Mask: 0xff) */
#define IPA_IPA_BPV_BPDRV_Pos             (16UL)                    /*!< BPDRV (Bit 16) */
#define IPA_IPA_BPV_BPDRV_Msk             (0xff0000UL)              /*!< BPDRV (Bitfield-Mask: 0xff) */
/* ======================================================  IPA_FLMADDR  ====================================================== */
#define IPA_IPA_FLMADDR_FLMBADDR_Pos      (0UL)                     /*!< FLMBADDR (Bit 0) */
#define IPA_IPA_FLMADDR_FLMBADDR_Msk      (0xffffffffUL)            /*!< FLMBADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  IPA_BLMADDR  ====================================================== */
#define IPA_IPA_BLMADDR_BLMADDR_Pos       (0UL)                     /*!< BLMADDR (Bit 0) */
#define IPA_IPA_BLMADDR_BLMADDR_Msk       (0xffffffffUL)            /*!< BLMADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  IPA_DPCTL  ======================================================= */
#define IPA_IPA_DPCTL_DPF_Pos             (0UL)                     /*!< DPF (Bit 0) */
#define IPA_IPA_DPCTL_DPF_Msk             (0x7UL)                   /*!< DPF (Bitfield-Mask: 0x07) */
/* ===================================================  IPA_DPV_ARGB8888  ==================================================== */
#define IPA_IPA_DPV_ARGB8888_DPDBV_Pos    (0UL)                     /*!< DPDBV (Bit 0) */
#define IPA_IPA_DPV_ARGB8888_DPDBV_Msk    (0xffUL)                  /*!< DPDBV (Bitfield-Mask: 0xff) */
#define IPA_IPA_DPV_ARGB8888_DPDGV_Pos    (8UL)                     /*!< DPDGV (Bit 8) */
#define IPA_IPA_DPV_ARGB8888_DPDGV_Msk    (0xff00UL)                /*!< DPDGV (Bitfield-Mask: 0xff) */
#define IPA_IPA_DPV_ARGB8888_DPDRV_Pos    (16UL)                    /*!< DPDRV (Bit 16) */
#define IPA_IPA_DPV_ARGB8888_DPDRV_Msk    (0xff0000UL)              /*!< DPDRV (Bitfield-Mask: 0xff) */
#define IPA_IPA_DPV_ARGB8888_DPDAV_Pos    (24UL)                    /*!< DPDAV (Bit 24) */
#define IPA_IPA_DPV_ARGB8888_DPDAV_Msk    (0xff000000UL)            /*!< DPDAV (Bitfield-Mask: 0xff) */
/* ====================================================  IPA_DPV_RGB888  ===================================================== */
#define IPA_IPA_DPV_RGB888_DPDBV_Pos      (0UL)                     /*!< DPDBV (Bit 0) */
#define IPA_IPA_DPV_RGB888_DPDBV_Msk      (0xffUL)                  /*!< DPDBV (Bitfield-Mask: 0xff) */
#define IPA_IPA_DPV_RGB888_DPDGV_Pos      (8UL)                     /*!< DPDGV (Bit 8) */
#define IPA_IPA_DPV_RGB888_DPDGV_Msk      (0xff00UL)                /*!< DPDGV (Bitfield-Mask: 0xff) */
#define IPA_IPA_DPV_RGB888_DPDRV_Pos      (16UL)                    /*!< DPDRV (Bit 16) */
#define IPA_IPA_DPV_RGB888_DPDRV_Msk      (0xff0000UL)              /*!< DPDRV (Bitfield-Mask: 0xff) */
/* ====================================================  IPA_DPV_RGB565  ===================================================== */
#define IPA_IPA_DPV_RGB565_DPDBV_Pos      (0UL)                     /*!< DPDBV (Bit 0) */
#define IPA_IPA_DPV_RGB565_DPDBV_Msk      (0x1fUL)                  /*!< DPDBV (Bitfield-Mask: 0x1f) */
#define IPA_IPA_DPV_RGB565_DPDGV_Pos      (5UL)                     /*!< DPDGV (Bit 5) */
#define IPA_IPA_DPV_RGB565_DPDGV_Msk      (0x7e0UL)                 /*!< DPDGV (Bitfield-Mask: 0x3f) */
#define IPA_IPA_DPV_RGB565_DPDRV_Pos      (11UL)                    /*!< DPDRV (Bit 11) */
#define IPA_IPA_DPV_RGB565_DPDRV_Msk      (0xf800UL)                /*!< DPDRV (Bitfield-Mask: 0x1f) */
/* ===================================================  IPA_DPV_ARGB1555  ==================================================== */
#define IPA_IPA_DPV_ARGB1555_DPDBV_Pos    (0UL)                     /*!< DPDBV (Bit 0) */
#define IPA_IPA_DPV_ARGB1555_DPDBV_Msk    (0x1fUL)                  /*!< DPDBV (Bitfield-Mask: 0x1f) */
#define IPA_IPA_DPV_ARGB1555_DPDGV_Pos    (5UL)                     /*!< DPDGV (Bit 5) */
#define IPA_IPA_DPV_ARGB1555_DPDGV_Msk    (0x3e0UL)                 /*!< DPDGV (Bitfield-Mask: 0x1f) */
#define IPA_IPA_DPV_ARGB1555_DPDRV_Pos    (10UL)                    /*!< DPDRV (Bit 10) */
#define IPA_IPA_DPV_ARGB1555_DPDRV_Msk    (0x7c00UL)                /*!< DPDRV (Bitfield-Mask: 0x1f) */
#define IPA_IPA_DPV_ARGB1555_DPDAV_Pos    (15UL)                    /*!< DPDAV (Bit 15) */
#define IPA_IPA_DPV_ARGB1555_DPDAV_Msk    (0x8000UL)                /*!< DPDAV (Bitfield-Mask: 0x01) */
/* ===================================================  IPA_DPV_ARGB4444  ==================================================== */
#define IPA_IPA_DPV_ARGB4444_DPDBV_Pos    (0UL)                     /*!< DPDBV (Bit 0) */
#define IPA_IPA_DPV_ARGB4444_DPDBV_Msk    (0xfUL)                   /*!< DPDBV (Bitfield-Mask: 0x0f) */
#define IPA_IPA_DPV_ARGB4444_DPDGV_Pos    (4UL)                     /*!< DPDGV (Bit 4) */
#define IPA_IPA_DPV_ARGB4444_DPDGV_Msk    (0xf0UL)                  /*!< DPDGV (Bitfield-Mask: 0x0f) */
#define IPA_IPA_DPV_ARGB4444_DPDRV_Pos    (8UL)                     /*!< DPDRV (Bit 8) */
#define IPA_IPA_DPV_ARGB4444_DPDRV_Msk    (0xf00UL)                 /*!< DPDRV (Bitfield-Mask: 0x0f) */
#define IPA_IPA_DPV_ARGB4444_DPDAV_Pos    (12UL)                    /*!< DPDAV (Bit 12) */
#define IPA_IPA_DPV_ARGB4444_DPDAV_Msk    (0xf000UL)                /*!< DPDAV (Bitfield-Mask: 0x0f) */
/* ======================================================  IPA_DMADDR  ======================================================= */
#define IPA_IPA_DMADDR_DMADDR_Pos         (0UL)                     /*!< DMADDR (Bit 0) */
#define IPA_IPA_DMADDR_DMADDR_Msk         (0xffffffffUL)            /*!< DMADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  IPA_DLOFF  ======================================================= */
#define IPA_IPA_DLOFF_DLOFF_Pos           (0UL)                     /*!< DLOFF (Bit 0) */
#define IPA_IPA_DLOFF_DLOFF_Msk           (0x3fffUL)                /*!< DLOFF (Bitfield-Mask: 0x3fff) */
/* ========================================================  IPA_IMS  ======================================================== */
#define IPA_IPA_IMS_WIDTH_Pos             (16UL)                    /*!< WIDTH (Bit 16) */
#define IPA_IPA_IMS_WIDTH_Msk             (0x3fff0000UL)            /*!< WIDTH (Bitfield-Mask: 0x3fff) */
#define IPA_IPA_IMS_HEIGHT_Pos            (0UL)                     /*!< HEIGHT (Bit 0) */
#define IPA_IPA_IMS_HEIGHT_Msk            (0xffffUL)                /*!< HEIGHT (Bitfield-Mask: 0xffff) */
/* ========================================================  IPA_LM  ========================================================= */
#define IPA_IPA_LM_LM_Pos                 (0UL)                     /*!< LM (Bit 0) */
#define IPA_IPA_LM_LM_Msk                 (0xffffUL)                /*!< LM (Bitfield-Mask: 0xffff) */
/* =======================================================  IPA_ITCTL  ======================================================= */
#define IPA_IPA_ITCTL_ITEN_Pos            (0UL)                     /*!< ITEN (Bit 0) */
#define IPA_IPA_ITCTL_ITEN_Msk            (0x1UL)                   /*!< ITEN (Bitfield-Mask: 0x01) */
#define IPA_IPA_ITCTL_NCCI_Pos            (8UL)                     /*!< NCCI (Bit 8) */
#define IPA_IPA_ITCTL_NCCI_Msk            (0xff00UL)                /*!< NCCI (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                           IREF                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define IREF_CTL_CSDT_Pos                 (0UL)                     /*!< CSDT (Bit 0) */
#define IREF_CTL_CSDT_Msk                 (0x3fUL)                  /*!< CSDT (Bitfield-Mask: 0x3f) */
#define IREF_CTL_SCMOD_Pos                (7UL)                     /*!< SCMOD (Bit 7) */
#define IREF_CTL_SCMOD_Msk                (0x80UL)                  /*!< SCMOD (Bitfield-Mask: 0x01) */
#define IREF_CTL_CPT_Pos                  (8UL)                     /*!< CPT (Bit 8) */
#define IREF_CTL_CPT_Msk                  (0x1f00UL)                /*!< CPT (Bitfield-Mask: 0x1f) */
#define IREF_CTL_SSEL_Pos                 (14UL)                    /*!< SSEL (Bit 14) */
#define IREF_CTL_SSEL_Msk                 (0x4000UL)                /*!< SSEL (Bitfield-Mask: 0x01) */
#define IREF_CTL_CREN_Pos                 (15UL)                    /*!< CREN (Bit 15) */
#define IREF_CTL_CREN_Msk                 (0x8000UL)                /*!< CREN (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                            PMU                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define PMU_CTL_LDEN_Pos                  (18UL)                    /*!< LDEN (Bit 18) */
#define PMU_CTL_LDEN_Msk                  (0xc0000UL)               /*!< LDEN (Bitfield-Mask: 0x03) */
#define PMU_CTL_HDS_Pos                   (17UL)                    /*!< HDS (Bit 17) */
#define PMU_CTL_HDS_Msk                   (0x20000UL)               /*!< HDS (Bitfield-Mask: 0x01) */
#define PMU_CTL_HDEN_Pos                  (16UL)                    /*!< HDEN (Bit 16) */
#define PMU_CTL_HDEN_Msk                  (0x10000UL)               /*!< HDEN (Bitfield-Mask: 0x01) */
#define PMU_CTL_LDOVS_Pos                 (14UL)                    /*!< LDOVS (Bit 14) */
#define PMU_CTL_LDOVS_Msk                 (0xc000UL)                /*!< LDOVS (Bitfield-Mask: 0x03) */
#define PMU_CTL_LDNP_Pos                  (11UL)                    /*!< LDNP (Bit 11) */
#define PMU_CTL_LDNP_Msk                  (0x800UL)                 /*!< LDNP (Bitfield-Mask: 0x01) */
#define PMU_CTL_LDLP_Pos                  (10UL)                    /*!< LDLP (Bit 10) */
#define PMU_CTL_LDLP_Msk                  (0x400UL)                 /*!< LDLP (Bitfield-Mask: 0x01) */
#define PMU_CTL_BKPWEN_Pos                (8UL)                     /*!< BKPWEN (Bit 8) */
#define PMU_CTL_BKPWEN_Msk                (0x100UL)                 /*!< BKPWEN (Bitfield-Mask: 0x01) */
#define PMU_CTL_LVDT_Pos                  (5UL)                     /*!< LVDT (Bit 5) */
#define PMU_CTL_LVDT_Msk                  (0xe0UL)                  /*!< LVDT (Bitfield-Mask: 0x07) */
#define PMU_CTL_LVDEN_Pos                 (4UL)                     /*!< LVDEN (Bit 4) */
#define PMU_CTL_LVDEN_Msk                 (0x10UL)                  /*!< LVDEN (Bitfield-Mask: 0x01) */
#define PMU_CTL_STBRST_Pos                (3UL)                     /*!< STBRST (Bit 3) */
#define PMU_CTL_STBRST_Msk                (0x8UL)                   /*!< STBRST (Bitfield-Mask: 0x01) */
#define PMU_CTL_WURST_Pos                 (2UL)                     /*!< WURST (Bit 2) */
#define PMU_CTL_WURST_Msk                 (0x4UL)                   /*!< WURST (Bitfield-Mask: 0x01) */
#define PMU_CTL_STBMOD_Pos                (1UL)                     /*!< STBMOD (Bit 1) */
#define PMU_CTL_STBMOD_Msk                (0x2UL)                   /*!< STBMOD (Bitfield-Mask: 0x01) */
#define PMU_CTL_LDOLP_Pos                 (0UL)                     /*!< LDOLP (Bit 0) */
#define PMU_CTL_LDOLP_Msk                 (0x1UL)                   /*!< LDOLP (Bitfield-Mask: 0x01) */
/* ==========================================================  CS  =========================================================== */
#define PMU_CS_LDRF_Pos                   (18UL)                    /*!< LDRF (Bit 18) */
#define PMU_CS_LDRF_Msk                   (0xc0000UL)               /*!< LDRF (Bitfield-Mask: 0x03) */
#define PMU_CS_HDSRF_Pos                  (17UL)                    /*!< HDSRF (Bit 17) */
#define PMU_CS_HDSRF_Msk                  (0x20000UL)               /*!< HDSRF (Bitfield-Mask: 0x01) */
#define PMU_CS_HDRF_Pos                   (16UL)                    /*!< HDRF (Bit 16) */
#define PMU_CS_HDRF_Msk                   (0x10000UL)               /*!< HDRF (Bitfield-Mask: 0x01) */
#define PMU_CS_LDOVSRF_Pos                (14UL)                    /*!< LDOVSRF (Bit 14) */
#define PMU_CS_LDOVSRF_Msk                (0x4000UL)                /*!< LDOVSRF (Bitfield-Mask: 0x01) */
#define PMU_CS_BLDOON_Pos                 (9UL)                     /*!< BLDOON (Bit 9) */
#define PMU_CS_BLDOON_Msk                 (0x200UL)                 /*!< BLDOON (Bitfield-Mask: 0x01) */
#define PMU_CS_WUPEN_Pos                  (8UL)                     /*!< WUPEN (Bit 8) */
#define PMU_CS_WUPEN_Msk                  (0x100UL)                 /*!< WUPEN (Bitfield-Mask: 0x01) */
#define PMU_CS_BLDORF_Pos                 (3UL)                     /*!< BLDORF (Bit 3) */
#define PMU_CS_BLDORF_Msk                 (0x8UL)                   /*!< BLDORF (Bitfield-Mask: 0x01) */
#define PMU_CS_LVDF_Pos                   (2UL)                     /*!< LVDF (Bit 2) */
#define PMU_CS_LVDF_Msk                   (0x4UL)                   /*!< LVDF (Bitfield-Mask: 0x01) */
#define PMU_CS_STBF_Pos                   (1UL)                     /*!< STBF (Bit 1) */
#define PMU_CS_STBF_Msk                   (0x2UL)                   /*!< STBF (Bitfield-Mask: 0x01) */
#define PMU_CS_WUF_Pos                    (0UL)                     /*!< WUF (Bit 0) */
#define PMU_CS_WUF_Msk                    (0x1UL)                   /*!< WUF (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                            RCU                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define RCU_CTL_IRC16MEN_Pos              (0UL)                     /*!< IRC16MEN (Bit 0) */
#define RCU_CTL_IRC16MEN_Msk              (0x1UL)                   /*!< IRC16MEN (Bitfield-Mask: 0x01) */
#define RCU_CTL_IRC16MSTB_Pos             (1UL)                     /*!< IRC16MSTB (Bit 1) */
#define RCU_CTL_IRC16MSTB_Msk             (0x2UL)                   /*!< IRC16MSTB (Bitfield-Mask: 0x01) */
#define RCU_CTL_IRC16MADJ_Pos             (3UL)                     /*!< IRC16MADJ (Bit 3) */
#define RCU_CTL_IRC16MADJ_Msk             (0xf8UL)                  /*!< IRC16MADJ (Bitfield-Mask: 0x1f) */
#define RCU_CTL_IRC16MCALIB_Pos           (8UL)                     /*!< IRC16MCALIB (Bit 8) */
#define RCU_CTL_IRC16MCALIB_Msk           (0xff00UL)                /*!< IRC16MCALIB (Bitfield-Mask: 0xff) */
#define RCU_CTL_HXTALEN_Pos               (16UL)                    /*!< HXTALEN (Bit 16) */
#define RCU_CTL_HXTALEN_Msk               (0x10000UL)               /*!< HXTALEN (Bitfield-Mask: 0x01) */
#define RCU_CTL_HXTALSTB_Pos              (17UL)                    /*!< HXTALSTB (Bit 17) */
#define RCU_CTL_HXTALSTB_Msk              (0x20000UL)               /*!< HXTALSTB (Bitfield-Mask: 0x01) */
#define RCU_CTL_HXTALBPS_Pos              (18UL)                    /*!< HXTALBPS (Bit 18) */
#define RCU_CTL_HXTALBPS_Msk              (0x40000UL)               /*!< HXTALBPS (Bitfield-Mask: 0x01) */
#define RCU_CTL_CKMEN_Pos                 (19UL)                    /*!< CKMEN (Bit 19) */
#define RCU_CTL_CKMEN_Msk                 (0x80000UL)               /*!< CKMEN (Bitfield-Mask: 0x01) */
#define RCU_CTL_PLLEN_Pos                 (24UL)                    /*!< PLLEN (Bit 24) */
#define RCU_CTL_PLLEN_Msk                 (0x1000000UL)             /*!< PLLEN (Bitfield-Mask: 0x01) */
#define RCU_CTL_PLLSTB_Pos                (25UL)                    /*!< PLLSTB (Bit 25) */
#define RCU_CTL_PLLSTB_Msk                (0x2000000UL)             /*!< PLLSTB (Bitfield-Mask: 0x01) */
#define RCU_CTL_PLLI2SEN_Pos              (26UL)                    /*!< PLLI2SEN (Bit 26) */
#define RCU_CTL_PLLI2SEN_Msk              (0x4000000UL)             /*!< PLLI2SEN (Bitfield-Mask: 0x01) */
#define RCU_CTL_PLLI2SSTB_Pos             (27UL)                    /*!< PLLI2SSTB (Bit 27) */
#define RCU_CTL_PLLI2SSTB_Msk             (0x8000000UL)             /*!< PLLI2SSTB (Bitfield-Mask: 0x01) */
#define RCU_CTL_PLLSAIEN_Pos              (28UL)                    /*!< PLLSAIEN (Bit 28) */
#define RCU_CTL_PLLSAIEN_Msk              (0x10000000UL)            /*!< PLLSAIEN (Bitfield-Mask: 0x01) */
#define RCU_CTL_PLLSAISTB_Pos             (29UL)                    /*!< PLLSAISTB (Bit 29) */
#define RCU_CTL_PLLSAISTB_Msk             (0x20000000UL)            /*!< PLLSAISTB (Bitfield-Mask: 0x01) */
/* ==========================================================  PLL  ========================================================== */
#define RCU_PLL_PLLPSC_Pos                (0UL)                     /*!< PLLPSC (Bit 0) */
#define RCU_PLL_PLLPSC_Msk                (0x3fUL)                  /*!< PLLPSC (Bitfield-Mask: 0x3f) */
#define RCU_PLL_PLLN_Pos                  (6UL)                     /*!< PLLN (Bit 6) */
#define RCU_PLL_PLLN_Msk                  (0x7fc0UL)                /*!< PLLN (Bitfield-Mask: 0x1ff) */
#define RCU_PLL_PLLP_Pos                  (16UL)                    /*!< PLLP (Bit 16) */
#define RCU_PLL_PLLP_Msk                  (0x30000UL)               /*!< PLLP (Bitfield-Mask: 0x03) */
#define RCU_PLL_PLLSEL_Pos                (22UL)                    /*!< PLLSEL (Bit 22) */
#define RCU_PLL_PLLSEL_Msk                (0x400000UL)              /*!< PLLSEL (Bitfield-Mask: 0x01) */
#define RCU_PLL_PLLQ_Pos                  (24UL)                    /*!< PLLQ (Bit 24) */
#define RCU_PLL_PLLQ_Msk                  (0xf000000UL)             /*!< PLLQ (Bitfield-Mask: 0x0f) */
/* =========================================================  CFG0  ========================================================== */
#define RCU_CFG0_SCS_Pos                  (0UL)                     /*!< SCS (Bit 0) */
#define RCU_CFG0_SCS_Msk                  (0x3UL)                   /*!< SCS (Bitfield-Mask: 0x03) */
#define RCU_CFG0_SCSS_Pos                 (2UL)                     /*!< SCSS (Bit 2) */
#define RCU_CFG0_SCSS_Msk                 (0xcUL)                   /*!< SCSS (Bitfield-Mask: 0x03) */
#define RCU_CFG0_AHBPSC_Pos               (4UL)                     /*!< AHBPSC (Bit 4) */
#define RCU_CFG0_AHBPSC_Msk               (0xf0UL)                  /*!< AHBPSC (Bitfield-Mask: 0x0f) */
#define RCU_CFG0_APB1PSC_Pos              (10UL)                    /*!< APB1PSC (Bit 10) */
#define RCU_CFG0_APB1PSC_Msk              (0x1c00UL)                /*!< APB1PSC (Bitfield-Mask: 0x07) */
#define RCU_CFG0_APB2PSC_Pos              (13UL)                    /*!< APB2PSC (Bit 13) */
#define RCU_CFG0_APB2PSC_Msk              (0xe000UL)                /*!< APB2PSC (Bitfield-Mask: 0x07) */
#define RCU_CFG0_RTCDIV_Pos               (16UL)                    /*!< RTCDIV (Bit 16) */
#define RCU_CFG0_RTCDIV_Msk               (0x1f0000UL)              /*!< RTCDIV (Bitfield-Mask: 0x1f) */
#define RCU_CFG0_CKOUT0SEL_Pos            (21UL)                    /*!< CKOUT0SEL (Bit 21) */
#define RCU_CFG0_CKOUT0SEL_Msk            (0x600000UL)              /*!< CKOUT0SEL (Bitfield-Mask: 0x03) */
#define RCU_CFG0_I2SSEL_Pos               (23UL)                    /*!< I2SSEL (Bit 23) */
#define RCU_CFG0_I2SSEL_Msk               (0x800000UL)              /*!< I2SSEL (Bitfield-Mask: 0x01) */
#define RCU_CFG0_CKOUT0DIV_Pos            (24UL)                    /*!< CKOUT0DIV (Bit 24) */
#define RCU_CFG0_CKOUT0DIV_Msk            (0x7000000UL)             /*!< CKOUT0DIV (Bitfield-Mask: 0x07) */
#define RCU_CFG0_CKOUT1DIV_Pos            (27UL)                    /*!< CKOUT1DIV (Bit 27) */
#define RCU_CFG0_CKOUT1DIV_Msk            (0x38000000UL)            /*!< CKOUT1DIV (Bitfield-Mask: 0x07) */
#define RCU_CFG0_CKOUT1SEL_Pos            (30UL)                    /*!< CKOUT1SEL (Bit 30) */
#define RCU_CFG0_CKOUT1SEL_Msk            (0xc0000000UL)            /*!< CKOUT1SEL (Bitfield-Mask: 0x03) */
/* ==========================================================  INT  ========================================================== */
#define RCU_INT_IRC32KSTBIF_Pos           (0UL)                     /*!< IRC32KSTBIF (Bit 0) */
#define RCU_INT_IRC32KSTBIF_Msk           (0x1UL)                   /*!< IRC32KSTBIF (Bitfield-Mask: 0x01) */
#define RCU_INT_LXTALSTBIF_Pos            (1UL)                     /*!< LXTALSTBIF (Bit 1) */
#define RCU_INT_LXTALSTBIF_Msk            (0x2UL)                   /*!< LXTALSTBIF (Bitfield-Mask: 0x01) */
#define RCU_INT_IRC16MSTBIF_Pos           (2UL)                     /*!< IRC16MSTBIF (Bit 2) */
#define RCU_INT_IRC16MSTBIF_Msk           (0x4UL)                   /*!< IRC16MSTBIF (Bitfield-Mask: 0x01) */
#define RCU_INT_HXTALSTBIF_Pos            (3UL)                     /*!< HXTALSTBIF (Bit 3) */
#define RCU_INT_HXTALSTBIF_Msk            (0x8UL)                   /*!< HXTALSTBIF (Bitfield-Mask: 0x01) */
#define RCU_INT_PLLSTBIF_Pos              (4UL)                     /*!< PLLSTBIF (Bit 4) */
#define RCU_INT_PLLSTBIF_Msk              (0x10UL)                  /*!< PLLSTBIF (Bitfield-Mask: 0x01) */
#define RCU_INT_PLLI2SSTBIF_Pos           (5UL)                     /*!< PLLI2SSTBIF (Bit 5) */
#define RCU_INT_PLLI2SSTBIF_Msk           (0x20UL)                  /*!< PLLI2SSTBIF (Bitfield-Mask: 0x01) */
#define RCU_INT_PLLSAISTBIF_Pos           (6UL)                     /*!< PLLSAISTBIF (Bit 6) */
#define RCU_INT_PLLSAISTBIF_Msk           (0x40UL)                  /*!< PLLSAISTBIF (Bitfield-Mask: 0x01) */
#define RCU_INT_CKMIF_Pos                 (7UL)                     /*!< CKMIF (Bit 7) */
#define RCU_INT_CKMIF_Msk                 (0x80UL)                  /*!< CKMIF (Bitfield-Mask: 0x01) */
#define RCU_INT_IRC32KSTBIE_Pos           (8UL)                     /*!< IRC32KSTBIE (Bit 8) */
#define RCU_INT_IRC32KSTBIE_Msk           (0x100UL)                 /*!< IRC32KSTBIE (Bitfield-Mask: 0x01) */
#define RCU_INT_LXTALSTBIE_Pos            (9UL)                     /*!< LXTALSTBIE (Bit 9) */
#define RCU_INT_LXTALSTBIE_Msk            (0x200UL)                 /*!< LXTALSTBIE (Bitfield-Mask: 0x01) */
#define RCU_INT_IRC16MSTBIE_Pos           (10UL)                    /*!< IRC16MSTBIE (Bit 10) */
#define RCU_INT_IRC16MSTBIE_Msk           (0x400UL)                 /*!< IRC16MSTBIE (Bitfield-Mask: 0x01) */
#define RCU_INT_HXTALSTBIE_Pos            (11UL)                    /*!< HXTALSTBIE (Bit 11) */
#define RCU_INT_HXTALSTBIE_Msk            (0x800UL)                 /*!< HXTALSTBIE (Bitfield-Mask: 0x01) */
#define RCU_INT_PLLSTBIE_Pos              (12UL)                    /*!< PLLSTBIE (Bit 12) */
#define RCU_INT_PLLSTBIE_Msk              (0x1000UL)                /*!< PLLSTBIE (Bitfield-Mask: 0x01) */
#define RCU_INT_PLLI2SSTBIE_Pos           (13UL)                    /*!< PLLI2SSTBIE (Bit 13) */
#define RCU_INT_PLLI2SSTBIE_Msk           (0x2000UL)                /*!< PLLI2SSTBIE (Bitfield-Mask: 0x01) */
#define RCU_INT_PLLSAISTBIE_Pos           (14UL)                    /*!< PLLSAISTBIE (Bit 14) */
#define RCU_INT_PLLSAISTBIE_Msk           (0x4000UL)                /*!< PLLSAISTBIE (Bitfield-Mask: 0x01) */
#define RCU_INT_IRC32KSTBIC_Pos           (16UL)                    /*!< IRC32KSTBIC (Bit 16) */
#define RCU_INT_IRC32KSTBIC_Msk           (0x10000UL)               /*!< IRC32KSTBIC (Bitfield-Mask: 0x01) */
#define RCU_INT_LXTALSTBIC_Pos            (17UL)                    /*!< LXTALSTBIC (Bit 17) */
#define RCU_INT_LXTALSTBIC_Msk            (0x20000UL)               /*!< LXTALSTBIC (Bitfield-Mask: 0x01) */
#define RCU_INT_IRC16MSTBIC_Pos           (18UL)                    /*!< IRC16MSTBIC (Bit 18) */
#define RCU_INT_IRC16MSTBIC_Msk           (0x40000UL)               /*!< IRC16MSTBIC (Bitfield-Mask: 0x01) */
#define RCU_INT_HXTALSTBIC_Pos            (19UL)                    /*!< HXTALSTBIC (Bit 19) */
#define RCU_INT_HXTALSTBIC_Msk            (0x80000UL)               /*!< HXTALSTBIC (Bitfield-Mask: 0x01) */
#define RCU_INT_PLLSTBIC_Pos              (20UL)                    /*!< PLLSTBIC (Bit 20) */
#define RCU_INT_PLLSTBIC_Msk              (0x100000UL)              /*!< PLLSTBIC (Bitfield-Mask: 0x01) */
#define RCU_INT_PLLI2SSTBIC_Pos           (21UL)                    /*!< PLLI2SSTBIC (Bit 21) */
#define RCU_INT_PLLI2SSTBIC_Msk           (0x200000UL)              /*!< PLLI2SSTBIC (Bitfield-Mask: 0x01) */
#define RCU_INT_PLLSAISTBIC_Pos           (22UL)                    /*!< PLLSAISTBIC (Bit 22) */
#define RCU_INT_PLLSAISTBIC_Msk           (0x400000UL)              /*!< PLLSAISTBIC (Bitfield-Mask: 0x01) */
#define RCU_INT_CKMIC_Pos                 (23UL)                    /*!< CKMIC (Bit 23) */
#define RCU_INT_CKMIC_Msk                 (0x800000UL)              /*!< CKMIC (Bitfield-Mask: 0x01) */
/* ========================================================  AHB1RST  ======================================================== */
#define RCU_AHB1RST_PARST_Pos             (0UL)                     /*!< PARST (Bit 0) */
#define RCU_AHB1RST_PARST_Msk             (0x1UL)                   /*!< PARST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_PBRST_Pos             (1UL)                     /*!< PBRST (Bit 1) */
#define RCU_AHB1RST_PBRST_Msk             (0x2UL)                   /*!< PBRST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_PCRST_Pos             (2UL)                     /*!< PCRST (Bit 2) */
#define RCU_AHB1RST_PCRST_Msk             (0x4UL)                   /*!< PCRST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_PDRST_Pos             (3UL)                     /*!< PDRST (Bit 3) */
#define RCU_AHB1RST_PDRST_Msk             (0x8UL)                   /*!< PDRST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_PERST_Pos             (4UL)                     /*!< PERST (Bit 4) */
#define RCU_AHB1RST_PERST_Msk             (0x10UL)                  /*!< PERST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_PFRST_Pos             (5UL)                     /*!< PFRST (Bit 5) */
#define RCU_AHB1RST_PFRST_Msk             (0x20UL)                  /*!< PFRST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_PGRST_Pos             (6UL)                     /*!< PGRST (Bit 6) */
#define RCU_AHB1RST_PGRST_Msk             (0x40UL)                  /*!< PGRST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_PHRST_Pos             (7UL)                     /*!< PHRST (Bit 7) */
#define RCU_AHB1RST_PHRST_Msk             (0x80UL)                  /*!< PHRST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_PIRST_Pos             (8UL)                     /*!< PIRST (Bit 8) */
#define RCU_AHB1RST_PIRST_Msk             (0x100UL)                 /*!< PIRST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_CRCRST_Pos            (12UL)                    /*!< CRCRST (Bit 12) */
#define RCU_AHB1RST_CRCRST_Msk            (0x1000UL)                /*!< CRCRST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_DMA0RST_Pos           (21UL)                    /*!< DMA0RST (Bit 21) */
#define RCU_AHB1RST_DMA0RST_Msk           (0x200000UL)              /*!< DMA0RST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_DMA1RST_Pos           (22UL)                    /*!< DMA1RST (Bit 22) */
#define RCU_AHB1RST_DMA1RST_Msk           (0x400000UL)              /*!< DMA1RST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_IPARST_Pos            (23UL)                    /*!< IPARST (Bit 23) */
#define RCU_AHB1RST_IPARST_Msk            (0x800000UL)              /*!< IPARST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_ENETRST_Pos           (25UL)                    /*!< ENETRST (Bit 25) */
#define RCU_AHB1RST_ENETRST_Msk           (0x2000000UL)             /*!< ENETRST (Bitfield-Mask: 0x01) */
#define RCU_AHB1RST_USBHSRST_Pos          (29UL)                    /*!< USBHSRST (Bit 29) */
#define RCU_AHB1RST_USBHSRST_Msk          (0x20000000UL)            /*!< USBHSRST (Bitfield-Mask: 0x01) */
/* ========================================================  AHB2RST  ======================================================== */
#define RCU_AHB2RST_DCIRST_Pos            (0UL)                     /*!< DCIRST (Bit 0) */
#define RCU_AHB2RST_DCIRST_Msk            (0x1UL)                   /*!< DCIRST (Bitfield-Mask: 0x01) */
#define RCU_AHB2RST_TRNGRST_Pos           (6UL)                     /*!< TRNGRST (Bit 6) */
#define RCU_AHB2RST_TRNGRST_Msk           (0x40UL)                  /*!< TRNGRST (Bitfield-Mask: 0x01) */
#define RCU_AHB2RST_USBFSRST_Pos          (7UL)                     /*!< USBFSRST (Bit 7) */
#define RCU_AHB2RST_USBFSRST_Msk          (0x80UL)                  /*!< USBFSRST (Bitfield-Mask: 0x01) */
/* ========================================================  AHB3RST  ======================================================== */
#define RCU_AHB3RST_EXMCRST_Pos           (0UL)                     /*!< EXMCRST (Bit 0) */
#define RCU_AHB3RST_EXMCRST_Msk           (0x1UL)                   /*!< EXMCRST (Bitfield-Mask: 0x01) */
/* ========================================================  APB1RST  ======================================================== */
#define RCU_APB1RST_TIMER1RST_Pos         (0UL)                     /*!< TIMER1RST (Bit 0) */
#define RCU_APB1RST_TIMER1RST_Msk         (0x1UL)                   /*!< TIMER1RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_TIMER2RST_Pos         (1UL)                     /*!< TIMER2RST (Bit 1) */
#define RCU_APB1RST_TIMER2RST_Msk         (0x2UL)                   /*!< TIMER2RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_TIMER3RST_Pos         (2UL)                     /*!< TIMER3RST (Bit 2) */
#define RCU_APB1RST_TIMER3RST_Msk         (0x4UL)                   /*!< TIMER3RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_TIMER4RST_Pos         (3UL)                     /*!< TIMER4RST (Bit 3) */
#define RCU_APB1RST_TIMER4RST_Msk         (0x8UL)                   /*!< TIMER4RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_TIMER5RST_Pos         (4UL)                     /*!< TIMER5RST (Bit 4) */
#define RCU_APB1RST_TIMER5RST_Msk         (0x10UL)                  /*!< TIMER5RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_TIMER6RST_Pos         (5UL)                     /*!< TIMER6RST (Bit 5) */
#define RCU_APB1RST_TIMER6RST_Msk         (0x20UL)                  /*!< TIMER6RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_TIMER11RST_Pos        (6UL)                     /*!< TIMER11RST (Bit 6) */
#define RCU_APB1RST_TIMER11RST_Msk        (0x40UL)                  /*!< TIMER11RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_TIMER12RST_Pos        (7UL)                     /*!< TIMER12RST (Bit 7) */
#define RCU_APB1RST_TIMER12RST_Msk        (0x80UL)                  /*!< TIMER12RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_TIMER13RST_Pos        (8UL)                     /*!< TIMER13RST (Bit 8) */
#define RCU_APB1RST_TIMER13RST_Msk        (0x100UL)                 /*!< TIMER13RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_WWDGTRST_Pos          (11UL)                    /*!< WWDGTRST (Bit 11) */
#define RCU_APB1RST_WWDGTRST_Msk          (0x800UL)                 /*!< WWDGTRST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_SPI1RST_Pos           (14UL)                    /*!< SPI1RST (Bit 14) */
#define RCU_APB1RST_SPI1RST_Msk           (0x4000UL)                /*!< SPI1RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_SPI2RST_Pos           (15UL)                    /*!< SPI2RST (Bit 15) */
#define RCU_APB1RST_SPI2RST_Msk           (0x8000UL)                /*!< SPI2RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_USART1RST_Pos         (17UL)                    /*!< USART1RST (Bit 17) */
#define RCU_APB1RST_USART1RST_Msk         (0x20000UL)               /*!< USART1RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_USART2RST_Pos         (18UL)                    /*!< USART2RST (Bit 18) */
#define RCU_APB1RST_USART2RST_Msk         (0x40000UL)               /*!< USART2RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_UART3RST_Pos          (19UL)                    /*!< UART3RST (Bit 19) */
#define RCU_APB1RST_UART3RST_Msk          (0x80000UL)               /*!< UART3RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_UART4RST_Pos          (20UL)                    /*!< UART4RST (Bit 20) */
#define RCU_APB1RST_UART4RST_Msk          (0x100000UL)              /*!< UART4RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_I2C0RST_Pos           (21UL)                    /*!< I2C0RST (Bit 21) */
#define RCU_APB1RST_I2C0RST_Msk           (0x200000UL)              /*!< I2C0RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_I2C1RST_Pos           (22UL)                    /*!< I2C1RST (Bit 22) */
#define RCU_APB1RST_I2C1RST_Msk           (0x400000UL)              /*!< I2C1RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_I2C2RST_Pos           (23UL)                    /*!< I2C2RST (Bit 23) */
#define RCU_APB1RST_I2C2RST_Msk           (0x800000UL)              /*!< I2C2RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_CAN0RST_Pos           (25UL)                    /*!< CAN0RST (Bit 25) */
#define RCU_APB1RST_CAN0RST_Msk           (0x2000000UL)             /*!< CAN0RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_CAN1RST_Pos           (26UL)                    /*!< CAN1RST (Bit 26) */
#define RCU_APB1RST_CAN1RST_Msk           (0x4000000UL)             /*!< CAN1RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_PMURST_Pos            (28UL)                    /*!< PMURST (Bit 28) */
#define RCU_APB1RST_PMURST_Msk            (0x10000000UL)            /*!< PMURST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_DACRST_Pos            (29UL)                    /*!< DACRST (Bit 29) */
#define RCU_APB1RST_DACRST_Msk            (0x20000000UL)            /*!< DACRST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_UART6RST_Pos          (30UL)                    /*!< UART6RST (Bit 30) */
#define RCU_APB1RST_UART6RST_Msk          (0x40000000UL)            /*!< UART6RST (Bitfield-Mask: 0x01) */
#define RCU_APB1RST_UART7RST_Pos          (31UL)                    /*!< UART7RST (Bit 31) */
#define RCU_APB1RST_UART7RST_Msk          (0x80000000UL)            /*!< UART7RST (Bitfield-Mask: 0x01) */
/* ========================================================  APB2RST  ======================================================== */
#define RCU_APB2RST_TIMER0RST_Pos         (0UL)                     /*!< TIMER0RST (Bit 0) */
#define RCU_APB2RST_TIMER0RST_Msk         (0x1UL)                   /*!< TIMER0RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_TIMER7RST_Pos         (1UL)                     /*!< TIMER7RST (Bit 1) */
#define RCU_APB2RST_TIMER7RST_Msk         (0x2UL)                   /*!< TIMER7RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_USART0RST_Pos         (4UL)                     /*!< USART0RST (Bit 4) */
#define RCU_APB2RST_USART0RST_Msk         (0x10UL)                  /*!< USART0RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_USART5RST_Pos         (5UL)                     /*!< USART5RST (Bit 5) */
#define RCU_APB2RST_USART5RST_Msk         (0x20UL)                  /*!< USART5RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_ADCRST_Pos            (8UL)                     /*!< ADCRST (Bit 8) */
#define RCU_APB2RST_ADCRST_Msk            (0x100UL)                 /*!< ADCRST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_SDIORST_Pos           (11UL)                    /*!< SDIORST (Bit 11) */
#define RCU_APB2RST_SDIORST_Msk           (0x800UL)                 /*!< SDIORST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_SPI0RST_Pos           (12UL)                    /*!< SPI0RST (Bit 12) */
#define RCU_APB2RST_SPI0RST_Msk           (0x1000UL)                /*!< SPI0RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_SPI3RST_Pos           (13UL)                    /*!< SPI3RST (Bit 13) */
#define RCU_APB2RST_SPI3RST_Msk           (0x2000UL)                /*!< SPI3RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_SYSCFGRST_Pos         (14UL)                    /*!< SYSCFGRST (Bit 14) */
#define RCU_APB2RST_SYSCFGRST_Msk         (0x4000UL)                /*!< SYSCFGRST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_TIMER8RST_Pos         (16UL)                    /*!< TIMER8RST (Bit 16) */
#define RCU_APB2RST_TIMER8RST_Msk         (0x10000UL)               /*!< TIMER8RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_TIMER9RST_Pos         (17UL)                    /*!< TIMER9RST (Bit 17) */
#define RCU_APB2RST_TIMER9RST_Msk         (0x20000UL)               /*!< TIMER9RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_TIMER10RST_Pos        (18UL)                    /*!< TIMER10RST (Bit 18) */
#define RCU_APB2RST_TIMER10RST_Msk        (0x40000UL)               /*!< TIMER10RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_SPI4RST_Pos           (20UL)                    /*!< SPI4RST (Bit 20) */
#define RCU_APB2RST_SPI4RST_Msk           (0x100000UL)              /*!< SPI4RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_SPI5RST_Pos           (21UL)                    /*!< SPI5RST (Bit 21) */
#define RCU_APB2RST_SPI5RST_Msk           (0x200000UL)              /*!< SPI5RST (Bitfield-Mask: 0x01) */
#define RCU_APB2RST_TLIRST_Pos            (26UL)                    /*!< TLIRST (Bit 26) */
#define RCU_APB2RST_TLIRST_Msk            (0x4000000UL)             /*!< TLIRST (Bitfield-Mask: 0x01) */
/* ========================================================  AHB1EN  ========================================================= */
#define RCU_AHB1EN_PAEN_Pos               (0UL)                     /*!< PAEN (Bit 0) */
#define RCU_AHB1EN_PAEN_Msk               (0x1UL)                   /*!< PAEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_PBEN_Pos               (1UL)                     /*!< PBEN (Bit 1) */
#define RCU_AHB1EN_PBEN_Msk               (0x2UL)                   /*!< PBEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_PCEN_Pos               (2UL)                     /*!< PCEN (Bit 2) */
#define RCU_AHB1EN_PCEN_Msk               (0x4UL)                   /*!< PCEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_PDEN_Pos               (3UL)                     /*!< PDEN (Bit 3) */
#define RCU_AHB1EN_PDEN_Msk               (0x8UL)                   /*!< PDEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_PEEN_Pos               (4UL)                     /*!< PEEN (Bit 4) */
#define RCU_AHB1EN_PEEN_Msk               (0x10UL)                  /*!< PEEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_PFEN_Pos               (5UL)                     /*!< PFEN (Bit 5) */
#define RCU_AHB1EN_PFEN_Msk               (0x20UL)                  /*!< PFEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_PGEN_Pos               (6UL)                     /*!< PGEN (Bit 6) */
#define RCU_AHB1EN_PGEN_Msk               (0x40UL)                  /*!< PGEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_PHEN_Pos               (7UL)                     /*!< PHEN (Bit 7) */
#define RCU_AHB1EN_PHEN_Msk               (0x80UL)                  /*!< PHEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_PIEN_Pos               (8UL)                     /*!< PIEN (Bit 8) */
#define RCU_AHB1EN_PIEN_Msk               (0x100UL)                 /*!< PIEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_CRCEN_Pos              (12UL)                    /*!< CRCEN (Bit 12) */
#define RCU_AHB1EN_CRCEN_Msk              (0x1000UL)                /*!< CRCEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_BKPSRAMEN_Pos          (18UL)                    /*!< BKPSRAMEN (Bit 18) */
#define RCU_AHB1EN_BKPSRAMEN_Msk          (0x40000UL)               /*!< BKPSRAMEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_TCMSRAMEN_Pos          (20UL)                    /*!< TCMSRAMEN (Bit 20) */
#define RCU_AHB1EN_TCMSRAMEN_Msk          (0x100000UL)              /*!< TCMSRAMEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_DMA0EN_Pos             (21UL)                    /*!< DMA0EN (Bit 21) */
#define RCU_AHB1EN_DMA0EN_Msk             (0x200000UL)              /*!< DMA0EN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_DMA1EN_Pos             (22UL)                    /*!< DMA1EN (Bit 22) */
#define RCU_AHB1EN_DMA1EN_Msk             (0x400000UL)              /*!< DMA1EN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_IPAEN_Pos              (23UL)                    /*!< IPAEN (Bit 23) */
#define RCU_AHB1EN_IPAEN_Msk              (0x800000UL)              /*!< IPAEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_ENETEN_Pos             (25UL)                    /*!< ENETEN (Bit 25) */
#define RCU_AHB1EN_ENETEN_Msk             (0x2000000UL)             /*!< ENETEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_ENETTXEN_Pos           (26UL)                    /*!< ENETTXEN (Bit 26) */
#define RCU_AHB1EN_ENETTXEN_Msk           (0x4000000UL)             /*!< ENETTXEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_ENETRXEN_Pos           (27UL)                    /*!< ENETRXEN (Bit 27) */
#define RCU_AHB1EN_ENETRXEN_Msk           (0x8000000UL)             /*!< ENETRXEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_ENETPTPEN_Pos          (28UL)                    /*!< ENETPTPEN (Bit 28) */
#define RCU_AHB1EN_ENETPTPEN_Msk          (0x10000000UL)            /*!< ENETPTPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_USBHSEN_Pos            (29UL)                    /*!< USBHSEN (Bit 29) */
#define RCU_AHB1EN_USBHSEN_Msk            (0x20000000UL)            /*!< USBHSEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1EN_USBHSULPIEN_Pos        (30UL)                    /*!< USBHSULPIEN (Bit 30) */
#define RCU_AHB1EN_USBHSULPIEN_Msk        (0x40000000UL)            /*!< USBHSULPIEN (Bitfield-Mask: 0x01) */
/* ========================================================  AHB2EN  ========================================================= */
#define RCU_AHB2EN_DCIEN_Pos              (0UL)                     /*!< DCIEN (Bit 0) */
#define RCU_AHB2EN_DCIEN_Msk              (0x1UL)                   /*!< DCIEN (Bitfield-Mask: 0x01) */
#define RCU_AHB2EN_TRNGEN_Pos             (6UL)                     /*!< TRNGEN (Bit 6) */
#define RCU_AHB2EN_TRNGEN_Msk             (0x40UL)                  /*!< TRNGEN (Bitfield-Mask: 0x01) */
#define RCU_AHB2EN_USBFSEN_Pos            (7UL)                     /*!< USBFSEN (Bit 7) */
#define RCU_AHB2EN_USBFSEN_Msk            (0x80UL)                  /*!< USBFSEN (Bitfield-Mask: 0x01) */
/* ========================================================  AHB3EN  ========================================================= */
#define RCU_AHB3EN_EXMCEN_Pos             (0UL)                     /*!< EXMCEN (Bit 0) */
#define RCU_AHB3EN_EXMCEN_Msk             (0x1UL)                   /*!< EXMCEN (Bitfield-Mask: 0x01) */
/* ========================================================  APB1EN  ========================================================= */
#define RCU_APB1EN_TIMER1EN_Pos           (0UL)                     /*!< TIMER1EN (Bit 0) */
#define RCU_APB1EN_TIMER1EN_Msk           (0x1UL)                   /*!< TIMER1EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_TIMER2EN_Pos           (1UL)                     /*!< TIMER2EN (Bit 1) */
#define RCU_APB1EN_TIMER2EN_Msk           (0x2UL)                   /*!< TIMER2EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_TIMER3EN_Pos           (2UL)                     /*!< TIMER3EN (Bit 2) */
#define RCU_APB1EN_TIMER3EN_Msk           (0x4UL)                   /*!< TIMER3EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_TIMER4EN_Pos           (3UL)                     /*!< TIMER4EN (Bit 3) */
#define RCU_APB1EN_TIMER4EN_Msk           (0x8UL)                   /*!< TIMER4EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_TIMER5EN_Pos           (4UL)                     /*!< TIMER5EN (Bit 4) */
#define RCU_APB1EN_TIMER5EN_Msk           (0x10UL)                  /*!< TIMER5EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_TIMER6EN_Pos           (5UL)                     /*!< TIMER6EN (Bit 5) */
#define RCU_APB1EN_TIMER6EN_Msk           (0x20UL)                  /*!< TIMER6EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_TIMER11EN_Pos          (6UL)                     /*!< TIMER11EN (Bit 6) */
#define RCU_APB1EN_TIMER11EN_Msk          (0x40UL)                  /*!< TIMER11EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_TIMER12EN_Pos          (7UL)                     /*!< TIMER12EN (Bit 7) */
#define RCU_APB1EN_TIMER12EN_Msk          (0x80UL)                  /*!< TIMER12EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_TIMER13EN_Pos          (8UL)                     /*!< TIMER13EN (Bit 8) */
#define RCU_APB1EN_TIMER13EN_Msk          (0x100UL)                 /*!< TIMER13EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_WWDGTEN_Pos            (11UL)                    /*!< WWDGTEN (Bit 11) */
#define RCU_APB1EN_WWDGTEN_Msk            (0x800UL)                 /*!< WWDGTEN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_SPI1EN_Pos             (14UL)                    /*!< SPI1EN (Bit 14) */
#define RCU_APB1EN_SPI1EN_Msk             (0x4000UL)                /*!< SPI1EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_SPI2EN_Pos             (15UL)                    /*!< SPI2EN (Bit 15) */
#define RCU_APB1EN_SPI2EN_Msk             (0x8000UL)                /*!< SPI2EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_USART1EN_Pos           (17UL)                    /*!< USART1EN (Bit 17) */
#define RCU_APB1EN_USART1EN_Msk           (0x20000UL)               /*!< USART1EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_USART2EN_Pos           (18UL)                    /*!< USART2EN (Bit 18) */
#define RCU_APB1EN_USART2EN_Msk           (0x40000UL)               /*!< USART2EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_UART3EN_Pos            (19UL)                    /*!< UART3EN (Bit 19) */
#define RCU_APB1EN_UART3EN_Msk            (0x80000UL)               /*!< UART3EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_UART4EN_Pos            (20UL)                    /*!< UART4EN (Bit 20) */
#define RCU_APB1EN_UART4EN_Msk            (0x100000UL)              /*!< UART4EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_I2C0EN_Pos             (21UL)                    /*!< I2C0EN (Bit 21) */
#define RCU_APB1EN_I2C0EN_Msk             (0x200000UL)              /*!< I2C0EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_I2C1EN_Pos             (22UL)                    /*!< I2C1EN (Bit 22) */
#define RCU_APB1EN_I2C1EN_Msk             (0x400000UL)              /*!< I2C1EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_I2C2EN_Pos             (23UL)                    /*!< I2C2EN (Bit 23) */
#define RCU_APB1EN_I2C2EN_Msk             (0x800000UL)              /*!< I2C2EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_CAN0EN_Pos             (25UL)                    /*!< CAN0EN (Bit 25) */
#define RCU_APB1EN_CAN0EN_Msk             (0x2000000UL)             /*!< CAN0EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_CAN1EN_Pos             (26UL)                    /*!< CAN1EN (Bit 26) */
#define RCU_APB1EN_CAN1EN_Msk             (0x4000000UL)             /*!< CAN1EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_PMUEN_Pos              (28UL)                    /*!< PMUEN (Bit 28) */
#define RCU_APB1EN_PMUEN_Msk              (0x10000000UL)            /*!< PMUEN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_DACEN_Pos              (29UL)                    /*!< DACEN (Bit 29) */
#define RCU_APB1EN_DACEN_Msk              (0x20000000UL)            /*!< DACEN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_UART6EN_Pos            (30UL)                    /*!< UART6EN (Bit 30) */
#define RCU_APB1EN_UART6EN_Msk            (0x40000000UL)            /*!< UART6EN (Bitfield-Mask: 0x01) */
#define RCU_APB1EN_UART7EN_Pos            (31UL)                    /*!< UART7EN (Bit 31) */
#define RCU_APB1EN_UART7EN_Msk            (0x80000000UL)            /*!< UART7EN (Bitfield-Mask: 0x01) */
/* ========================================================  APB2EN  ========================================================= */
#define RCU_APB2EN_TIMER0EN_Pos           (0UL)                     /*!< TIMER0EN (Bit 0) */
#define RCU_APB2EN_TIMER0EN_Msk           (0x1UL)                   /*!< TIMER0EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_TIMER7EN_Pos           (1UL)                     /*!< TIMER7EN (Bit 1) */
#define RCU_APB2EN_TIMER7EN_Msk           (0x2UL)                   /*!< TIMER7EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_USART0EN_Pos           (4UL)                     /*!< USART0EN (Bit 4) */
#define RCU_APB2EN_USART0EN_Msk           (0x10UL)                  /*!< USART0EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_USART5EN_Pos           (5UL)                     /*!< USART5EN (Bit 5) */
#define RCU_APB2EN_USART5EN_Msk           (0x20UL)                  /*!< USART5EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_ADC0EN_Pos             (8UL)                     /*!< ADC0EN (Bit 8) */
#define RCU_APB2EN_ADC0EN_Msk             (0x100UL)                 /*!< ADC0EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_ADC1EN_Pos             (9UL)                     /*!< ADC1EN (Bit 9) */
#define RCU_APB2EN_ADC1EN_Msk             (0x200UL)                 /*!< ADC1EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_ADC2EN_Pos             (10UL)                    /*!< ADC2EN (Bit 10) */
#define RCU_APB2EN_ADC2EN_Msk             (0x400UL)                 /*!< ADC2EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_SDIOEN_Pos             (11UL)                    /*!< SDIOEN (Bit 11) */
#define RCU_APB2EN_SDIOEN_Msk             (0x800UL)                 /*!< SDIOEN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_SPI0EN_Pos             (12UL)                    /*!< SPI0EN (Bit 12) */
#define RCU_APB2EN_SPI0EN_Msk             (0x1000UL)                /*!< SPI0EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_SPI3EN_Pos             (13UL)                    /*!< SPI3EN (Bit 13) */
#define RCU_APB2EN_SPI3EN_Msk             (0x2000UL)                /*!< SPI3EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_SYSCFGEN_Pos           (14UL)                    /*!< SYSCFGEN (Bit 14) */
#define RCU_APB2EN_SYSCFGEN_Msk           (0x4000UL)                /*!< SYSCFGEN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_TIMER8EN_Pos           (16UL)                    /*!< TIMER8EN (Bit 16) */
#define RCU_APB2EN_TIMER8EN_Msk           (0x10000UL)               /*!< TIMER8EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_TIMER9EN_Pos           (17UL)                    /*!< TIMER9EN (Bit 17) */
#define RCU_APB2EN_TIMER9EN_Msk           (0x20000UL)               /*!< TIMER9EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_TIMER10EN_Pos          (18UL)                    /*!< TIMER10EN (Bit 18) */
#define RCU_APB2EN_TIMER10EN_Msk          (0x40000UL)               /*!< TIMER10EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_SPI4EN_Pos             (20UL)                    /*!< SPI4EN (Bit 20) */
#define RCU_APB2EN_SPI4EN_Msk             (0x100000UL)              /*!< SPI4EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_SPI5EN_Pos             (21UL)                    /*!< SPI5EN (Bit 21) */
#define RCU_APB2EN_SPI5EN_Msk             (0x200000UL)              /*!< SPI5EN (Bitfield-Mask: 0x01) */
#define RCU_APB2EN_TLIEN_Pos              (26UL)                    /*!< TLIEN (Bit 26) */
#define RCU_APB2EN_TLIEN_Msk              (0x4000000UL)             /*!< TLIEN (Bitfield-Mask: 0x01) */
/* =======================================================  AHB1SPEN  ======================================================== */
#define RCU_AHB1SPEN_PASPEN_Pos           (0UL)                     /*!< PASPEN (Bit 0) */
#define RCU_AHB1SPEN_PASPEN_Msk           (0x1UL)                   /*!< PASPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_PBSPEN_Pos           (1UL)                     /*!< PBSPEN (Bit 1) */
#define RCU_AHB1SPEN_PBSPEN_Msk           (0x2UL)                   /*!< PBSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_PCSPEN_Pos           (2UL)                     /*!< PCSPEN (Bit 2) */
#define RCU_AHB1SPEN_PCSPEN_Msk           (0x4UL)                   /*!< PCSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_PDSPEN_Pos           (3UL)                     /*!< PDSPEN (Bit 3) */
#define RCU_AHB1SPEN_PDSPEN_Msk           (0x8UL)                   /*!< PDSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_PESPEN_Pos           (4UL)                     /*!< PESPEN (Bit 4) */
#define RCU_AHB1SPEN_PESPEN_Msk           (0x10UL)                  /*!< PESPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_PFSPEN_Pos           (5UL)                     /*!< PFSPEN (Bit 5) */
#define RCU_AHB1SPEN_PFSPEN_Msk           (0x20UL)                  /*!< PFSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_PGSPEN_Pos           (6UL)                     /*!< PGSPEN (Bit 6) */
#define RCU_AHB1SPEN_PGSPEN_Msk           (0x40UL)                  /*!< PGSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_PHSPEN_Pos           (7UL)                     /*!< PHSPEN (Bit 7) */
#define RCU_AHB1SPEN_PHSPEN_Msk           (0x80UL)                  /*!< PHSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_PISPEN_Pos           (8UL)                     /*!< PISPEN (Bit 8) */
#define RCU_AHB1SPEN_PISPEN_Msk           (0x100UL)                 /*!< PISPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_CRCSPEN_Pos          (12UL)                    /*!< CRCSPEN (Bit 12) */
#define RCU_AHB1SPEN_CRCSPEN_Msk          (0x1000UL)                /*!< CRCSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_FMCSPEN_Pos          (15UL)                    /*!< FMCSPEN (Bit 15) */
#define RCU_AHB1SPEN_FMCSPEN_Msk          (0x8000UL)                /*!< FMCSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_SRAM0SPEN_Pos        (16UL)                    /*!< SRAM0SPEN (Bit 16) */
#define RCU_AHB1SPEN_SRAM0SPEN_Msk        (0x10000UL)               /*!< SRAM0SPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_SRAM1SPEN_Pos        (17UL)                    /*!< SRAM1SPEN (Bit 17) */
#define RCU_AHB1SPEN_SRAM1SPEN_Msk        (0x20000UL)               /*!< SRAM1SPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_BKPSRAMSPEN_Pos      (18UL)                    /*!< BKPSRAMSPEN (Bit 18) */
#define RCU_AHB1SPEN_BKPSRAMSPEN_Msk      (0x40000UL)               /*!< BKPSRAMSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_SRAM2SPEN_Pos        (19UL)                    /*!< SRAM2SPEN (Bit 19) */
#define RCU_AHB1SPEN_SRAM2SPEN_Msk        (0x80000UL)               /*!< SRAM2SPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_DMA0SPEN_Pos         (21UL)                    /*!< DMA0SPEN (Bit 21) */
#define RCU_AHB1SPEN_DMA0SPEN_Msk         (0x200000UL)              /*!< DMA0SPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_DMA1SPEN_Pos         (22UL)                    /*!< DMA1SPEN (Bit 22) */
#define RCU_AHB1SPEN_DMA1SPEN_Msk         (0x400000UL)              /*!< DMA1SPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_IPASPEN_Pos          (23UL)                    /*!< IPASPEN (Bit 23) */
#define RCU_AHB1SPEN_IPASPEN_Msk          (0x800000UL)              /*!< IPASPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_ENETSPEN_Pos         (25UL)                    /*!< ENETSPEN (Bit 25) */
#define RCU_AHB1SPEN_ENETSPEN_Msk         (0x2000000UL)             /*!< ENETSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_ENETTXSPEN_Pos       (26UL)                    /*!< ENETTXSPEN (Bit 26) */
#define RCU_AHB1SPEN_ENETTXSPEN_Msk       (0x4000000UL)             /*!< ENETTXSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_ENETRXSPEN_Pos       (27UL)                    /*!< ENETRXSPEN (Bit 27) */
#define RCU_AHB1SPEN_ENETRXSPEN_Msk       (0x8000000UL)             /*!< ENETRXSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_ENETPTPSPEN_Pos      (28UL)                    /*!< ENETPTPSPEN (Bit 28) */
#define RCU_AHB1SPEN_ENETPTPSPEN_Msk      (0x10000000UL)            /*!< ENETPTPSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_USBHSSPEN_Pos        (29UL)                    /*!< USBHSSPEN (Bit 29) */
#define RCU_AHB1SPEN_USBHSSPEN_Msk        (0x20000000UL)            /*!< USBHSSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB1SPEN_USBHSULPISPEN_Pos    (30UL)                    /*!< USBHSULPISPEN (Bit 30) */
#define RCU_AHB1SPEN_USBHSULPISPEN_Msk    (0x40000000UL)            /*!< USBHSULPISPEN (Bitfield-Mask: 0x01) */
/* =======================================================  AHB2SPEN  ======================================================== */
#define RCU_AHB2SPEN_DCISPEN_Pos          (0UL)                     /*!< DCISPEN (Bit 0) */
#define RCU_AHB2SPEN_DCISPEN_Msk          (0x1UL)                   /*!< DCISPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB2SPEN_TRNGSPEN_Pos         (6UL)                     /*!< TRNGSPEN (Bit 6) */
#define RCU_AHB2SPEN_TRNGSPEN_Msk         (0x40UL)                  /*!< TRNGSPEN (Bitfield-Mask: 0x01) */
#define RCU_AHB2SPEN_USBFSSPEN_Pos        (7UL)                     /*!< USBFSSPEN (Bit 7) */
#define RCU_AHB2SPEN_USBFSSPEN_Msk        (0x80UL)                  /*!< USBFSSPEN (Bitfield-Mask: 0x01) */
/* =======================================================  AHB3SPEN  ======================================================== */
#define RCU_AHB3SPEN_EXMCSPEN_Pos         (0UL)                     /*!< EXMCSPEN (Bit 0) */
#define RCU_AHB3SPEN_EXMCSPEN_Msk         (0x1UL)                   /*!< EXMCSPEN (Bitfield-Mask: 0x01) */
/* =======================================================  APB1SPEN  ======================================================== */
#define RCU_APB1SPEN_TIMER1SPEN_Pos       (0UL)                     /*!< TIMER1SPEN (Bit 0) */
#define RCU_APB1SPEN_TIMER1SPEN_Msk       (0x1UL)                   /*!< TIMER1SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_TIMER2SPEN_Pos       (1UL)                     /*!< TIMER2SPEN (Bit 1) */
#define RCU_APB1SPEN_TIMER2SPEN_Msk       (0x2UL)                   /*!< TIMER2SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_TIMER3SPEN_Pos       (2UL)                     /*!< TIMER3SPEN (Bit 2) */
#define RCU_APB1SPEN_TIMER3SPEN_Msk       (0x4UL)                   /*!< TIMER3SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_TIMER4SPEN_Pos       (3UL)                     /*!< TIMER4SPEN (Bit 3) */
#define RCU_APB1SPEN_TIMER4SPEN_Msk       (0x8UL)                   /*!< TIMER4SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_TIMER5SPEN_Pos       (4UL)                     /*!< TIMER5SPEN (Bit 4) */
#define RCU_APB1SPEN_TIMER5SPEN_Msk       (0x10UL)                  /*!< TIMER5SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_TIMER6SPEN_Pos       (5UL)                     /*!< TIMER6SPEN (Bit 5) */
#define RCU_APB1SPEN_TIMER6SPEN_Msk       (0x20UL)                  /*!< TIMER6SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_TIMER11SPEN_Pos      (6UL)                     /*!< TIMER11SPEN (Bit 6) */
#define RCU_APB1SPEN_TIMER11SPEN_Msk      (0x40UL)                  /*!< TIMER11SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_TIMER12SPEN_Pos      (7UL)                     /*!< TIMER12SPEN (Bit 7) */
#define RCU_APB1SPEN_TIMER12SPEN_Msk      (0x80UL)                  /*!< TIMER12SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_TIMER13SPEN_Pos      (8UL)                     /*!< TIMER13SPEN (Bit 8) */
#define RCU_APB1SPEN_TIMER13SPEN_Msk      (0x100UL)                 /*!< TIMER13SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_WWDGTSPEN_Pos        (11UL)                    /*!< WWDGTSPEN (Bit 11) */
#define RCU_APB1SPEN_WWDGTSPEN_Msk        (0x800UL)                 /*!< WWDGTSPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_SPI1SPEN_Pos         (14UL)                    /*!< SPI1SPEN (Bit 14) */
#define RCU_APB1SPEN_SPI1SPEN_Msk         (0x4000UL)                /*!< SPI1SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_SPI2SPEN_Pos         (15UL)                    /*!< SPI2SPEN (Bit 15) */
#define RCU_APB1SPEN_SPI2SPEN_Msk         (0x8000UL)                /*!< SPI2SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_USART1SPEN_Pos       (17UL)                    /*!< USART1SPEN (Bit 17) */
#define RCU_APB1SPEN_USART1SPEN_Msk       (0x20000UL)               /*!< USART1SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_USART2SPEN_Pos       (18UL)                    /*!< USART2SPEN (Bit 18) */
#define RCU_APB1SPEN_USART2SPEN_Msk       (0x40000UL)               /*!< USART2SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_UART3SPEN_Pos        (19UL)                    /*!< UART3SPEN (Bit 19) */
#define RCU_APB1SPEN_UART3SPEN_Msk        (0x80000UL)               /*!< UART3SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_UART4SPEN_Pos        (20UL)                    /*!< UART4SPEN (Bit 20) */
#define RCU_APB1SPEN_UART4SPEN_Msk        (0x100000UL)              /*!< UART4SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_I2C0SPEN_Pos         (21UL)                    /*!< I2C0SPEN (Bit 21) */
#define RCU_APB1SPEN_I2C0SPEN_Msk         (0x200000UL)              /*!< I2C0SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_I2C1SPEN_Pos         (22UL)                    /*!< I2C1SPEN (Bit 22) */
#define RCU_APB1SPEN_I2C1SPEN_Msk         (0x400000UL)              /*!< I2C1SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_I2C2SPEN_Pos         (23UL)                    /*!< I2C2SPEN (Bit 23) */
#define RCU_APB1SPEN_I2C2SPEN_Msk         (0x800000UL)              /*!< I2C2SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_CAN0SPEN_Pos         (25UL)                    /*!< CAN0SPEN (Bit 25) */
#define RCU_APB1SPEN_CAN0SPEN_Msk         (0x2000000UL)             /*!< CAN0SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_CAN1SPEN_Pos         (26UL)                    /*!< CAN1SPEN (Bit 26) */
#define RCU_APB1SPEN_CAN1SPEN_Msk         (0x4000000UL)             /*!< CAN1SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_PMUSPEN_Pos          (28UL)                    /*!< PMUSPEN (Bit 28) */
#define RCU_APB1SPEN_PMUSPEN_Msk          (0x10000000UL)            /*!< PMUSPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_DACSPEN_Pos          (29UL)                    /*!< DACSPEN (Bit 29) */
#define RCU_APB1SPEN_DACSPEN_Msk          (0x20000000UL)            /*!< DACSPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_UART6SPEN_Pos        (30UL)                    /*!< UART6SPEN (Bit 30) */
#define RCU_APB1SPEN_UART6SPEN_Msk        (0x40000000UL)            /*!< UART6SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB1SPEN_UART7SPEN_Pos        (31UL)                    /*!< UART7SPEN (Bit 31) */
#define RCU_APB1SPEN_UART7SPEN_Msk        (0x80000000UL)            /*!< UART7SPEN (Bitfield-Mask: 0x01) */
/* =======================================================  APB2SPEN  ======================================================== */
#define RCU_APB2SPEN_TIMER0SPEN_Pos       (0UL)                     /*!< TIMER0SPEN (Bit 0) */
#define RCU_APB2SPEN_TIMER0SPEN_Msk       (0x1UL)                   /*!< TIMER0SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_TIMER7SPEN_Pos       (1UL)                     /*!< TIMER7SPEN (Bit 1) */
#define RCU_APB2SPEN_TIMER7SPEN_Msk       (0x2UL)                   /*!< TIMER7SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_USART0SPEN_Pos       (4UL)                     /*!< USART0SPEN (Bit 4) */
#define RCU_APB2SPEN_USART0SPEN_Msk       (0x10UL)                  /*!< USART0SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_USART5SPEN_Pos       (5UL)                     /*!< USART5SPEN (Bit 5) */
#define RCU_APB2SPEN_USART5SPEN_Msk       (0x20UL)                  /*!< USART5SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_ADC0SPEN_Pos         (8UL)                     /*!< ADC0SPEN (Bit 8) */
#define RCU_APB2SPEN_ADC0SPEN_Msk         (0x100UL)                 /*!< ADC0SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_ADC1SPEN_Pos         (9UL)                     /*!< ADC1SPEN (Bit 9) */
#define RCU_APB2SPEN_ADC1SPEN_Msk         (0x200UL)                 /*!< ADC1SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_ADC2SPEN_Pos         (10UL)                    /*!< ADC2SPEN (Bit 10) */
#define RCU_APB2SPEN_ADC2SPEN_Msk         (0x400UL)                 /*!< ADC2SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_SDIOSPEN_Pos         (11UL)                    /*!< SDIOSPEN (Bit 11) */
#define RCU_APB2SPEN_SDIOSPEN_Msk         (0x800UL)                 /*!< SDIOSPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_SPI0SPEN_Pos         (12UL)                    /*!< SPI0SPEN (Bit 12) */
#define RCU_APB2SPEN_SPI0SPEN_Msk         (0x1000UL)                /*!< SPI0SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_SPI3SPEN_Pos         (13UL)                    /*!< SPI3SPEN (Bit 13) */
#define RCU_APB2SPEN_SPI3SPEN_Msk         (0x2000UL)                /*!< SPI3SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_SYSCFGSPEN_Pos       (14UL)                    /*!< SYSCFGSPEN (Bit 14) */
#define RCU_APB2SPEN_SYSCFGSPEN_Msk       (0x4000UL)                /*!< SYSCFGSPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_TIMER8SPEN_Pos       (16UL)                    /*!< TIMER8SPEN (Bit 16) */
#define RCU_APB2SPEN_TIMER8SPEN_Msk       (0x10000UL)               /*!< TIMER8SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_TIMER9SPEN_Pos       (17UL)                    /*!< TIMER9SPEN (Bit 17) */
#define RCU_APB2SPEN_TIMER9SPEN_Msk       (0x20000UL)               /*!< TIMER9SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_TIMER10SPEN_Pos      (18UL)                    /*!< TIMER10SPEN (Bit 18) */
#define RCU_APB2SPEN_TIMER10SPEN_Msk      (0x40000UL)               /*!< TIMER10SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_SPI4SPEN_Pos         (20UL)                    /*!< SPI4SPEN (Bit 20) */
#define RCU_APB2SPEN_SPI4SPEN_Msk         (0x100000UL)              /*!< SPI4SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_SPI5SPEN_Pos         (21UL)                    /*!< SPI5SPEN (Bit 21) */
#define RCU_APB2SPEN_SPI5SPEN_Msk         (0x200000UL)              /*!< SPI5SPEN (Bitfield-Mask: 0x01) */
#define RCU_APB2SPEN_TLISPEN_Pos          (26UL)                    /*!< TLISPEN (Bit 26) */
#define RCU_APB2SPEN_TLISPEN_Msk          (0x4000000UL)             /*!< TLISPEN (Bitfield-Mask: 0x01) */
/* =========================================================  BDCTL  ========================================================= */
#define RCU_BDCTL_LXTALEN_Pos             (0UL)                     /*!< LXTALEN (Bit 0) */
#define RCU_BDCTL_LXTALEN_Msk             (0x1UL)                   /*!< LXTALEN (Bitfield-Mask: 0x01) */
#define RCU_BDCTL_LXTALSTB_Pos            (1UL)                     /*!< LXTALSTB (Bit 1) */
#define RCU_BDCTL_LXTALSTB_Msk            (0x2UL)                   /*!< LXTALSTB (Bitfield-Mask: 0x01) */
#define RCU_BDCTL_LXTALBPS_Pos            (2UL)                     /*!< LXTALBPS (Bit 2) */
#define RCU_BDCTL_LXTALBPS_Msk            (0x4UL)                   /*!< LXTALBPS (Bitfield-Mask: 0x01) */
#define RCU_BDCTL_LXTALDRI_Pos            (3UL)                     /*!< LXTALDRI (Bit 3) */
#define RCU_BDCTL_LXTALDRI_Msk            (0x18UL)                  /*!< LXTALDRI (Bitfield-Mask: 0x03) */
#define RCU_BDCTL_RTCSRC_Pos              (8UL)                     /*!< RTCSRC (Bit 8) */
#define RCU_BDCTL_RTCSRC_Msk              (0x300UL)                 /*!< RTCSRC (Bitfield-Mask: 0x03) */
#define RCU_BDCTL_RTCEN_Pos               (15UL)                    /*!< RTCEN (Bit 15) */
#define RCU_BDCTL_RTCEN_Msk               (0x8000UL)                /*!< RTCEN (Bitfield-Mask: 0x01) */
#define RCU_BDCTL_BKPRST_Pos              (16UL)                    /*!< BKPRST (Bit 16) */
#define RCU_BDCTL_BKPRST_Msk              (0x10000UL)               /*!< BKPRST (Bitfield-Mask: 0x01) */
/* ========================================================  RSTSCK  ========================================================= */
#define RCU_RSTSCK_IRC32KEN_Pos           (0UL)                     /*!< IRC32KEN (Bit 0) */
#define RCU_RSTSCK_IRC32KEN_Msk           (0x1UL)                   /*!< IRC32KEN (Bitfield-Mask: 0x01) */
#define RCU_RSTSCK_IRC32KSTB_Pos          (1UL)                     /*!< IRC32KSTB (Bit 1) */
#define RCU_RSTSCK_IRC32KSTB_Msk          (0x2UL)                   /*!< IRC32KSTB (Bitfield-Mask: 0x01) */
#define RCU_RSTSCK_RSTFC_Pos              (24UL)                    /*!< RSTFC (Bit 24) */
#define RCU_RSTSCK_RSTFC_Msk              (0x1000000UL)             /*!< RSTFC (Bitfield-Mask: 0x01) */
#define RCU_RSTSCK_BORRSTF_Pos            (25UL)                    /*!< BORRSTF (Bit 25) */
#define RCU_RSTSCK_BORRSTF_Msk            (0x2000000UL)             /*!< BORRSTF (Bitfield-Mask: 0x01) */
#define RCU_RSTSCK_EPRSTF_Pos             (26UL)                    /*!< EPRSTF (Bit 26) */
#define RCU_RSTSCK_EPRSTF_Msk             (0x4000000UL)             /*!< EPRSTF (Bitfield-Mask: 0x01) */
#define RCU_RSTSCK_PORRSTF_Pos            (27UL)                    /*!< PORRSTF (Bit 27) */
#define RCU_RSTSCK_PORRSTF_Msk            (0x8000000UL)             /*!< PORRSTF (Bitfield-Mask: 0x01) */
#define RCU_RSTSCK_SWRSTF_Pos             (28UL)                    /*!< SWRSTF (Bit 28) */
#define RCU_RSTSCK_SWRSTF_Msk             (0x10000000UL)            /*!< SWRSTF (Bitfield-Mask: 0x01) */
#define RCU_RSTSCK_FWDGTRSTF_Pos          (29UL)                    /*!< FWDGTRSTF (Bit 29) */
#define RCU_RSTSCK_FWDGTRSTF_Msk          (0x20000000UL)            /*!< FWDGTRSTF (Bitfield-Mask: 0x01) */
#define RCU_RSTSCK_WWDGTRSTF_Pos          (30UL)                    /*!< WWDGTRSTF (Bit 30) */
#define RCU_RSTSCK_WWDGTRSTF_Msk          (0x40000000UL)            /*!< WWDGTRSTF (Bitfield-Mask: 0x01) */
#define RCU_RSTSCK_LPRSTF_Pos             (31UL)                    /*!< LPRSTF (Bit 31) */
#define RCU_RSTSCK_LPRSTF_Msk             (0x80000000UL)            /*!< LPRSTF (Bitfield-Mask: 0x01) */
/* =======================================================  PLLSSCTL  ======================================================== */
#define RCU_PLLSSCTL_MODCNT_Pos           (0UL)                     /*!< MODCNT (Bit 0) */
#define RCU_PLLSSCTL_MODCNT_Msk           (0x1fffUL)                /*!< MODCNT (Bitfield-Mask: 0x1fff) */
#define RCU_PLLSSCTL_MODSTEP_Pos          (13UL)                    /*!< MODSTEP (Bit 13) */
#define RCU_PLLSSCTL_MODSTEP_Msk          (0xfffe000UL)             /*!< MODSTEP (Bitfield-Mask: 0x7fff) */
#define RCU_PLLSSCTL_SS_TYPE_Pos          (30UL)                    /*!< SS_TYPE (Bit 30) */
#define RCU_PLLSSCTL_SS_TYPE_Msk          (0x40000000UL)            /*!< SS_TYPE (Bitfield-Mask: 0x01) */
#define RCU_PLLSSCTL_SSCGON_Pos           (31UL)                    /*!< SSCGON (Bit 31) */
#define RCU_PLLSSCTL_SSCGON_Msk           (0x80000000UL)            /*!< SSCGON (Bitfield-Mask: 0x01) */
/* ========================================================  PLLI2S  ========================================================= */
#define RCU_PLLI2S_PLLI2SPSC_Pos          (0UL)                     /*!< PLLI2SPSC (Bit 0) */
#define RCU_PLLI2S_PLLI2SPSC_Msk          (0x3fUL)                  /*!< PLLI2SPSC (Bitfield-Mask: 0x3f) */
#define RCU_PLLI2S_PLLI2SN_Pos            (6UL)                     /*!< PLLI2SN (Bit 6) */
#define RCU_PLLI2S_PLLI2SN_Msk            (0x7fc0UL)                /*!< PLLI2SN (Bitfield-Mask: 0x1ff) */
#define RCU_PLLI2S_PLLI2SQ_Pos            (24UL)                    /*!< PLLI2SQ (Bit 24) */
#define RCU_PLLI2S_PLLI2SQ_Msk            (0xf000000UL)             /*!< PLLI2SQ (Bitfield-Mask: 0x0f) */
#define RCU_PLLI2S_PLLI2SR_Pos            (28UL)                    /*!< PLLI2SR (Bit 28) */
#define RCU_PLLI2S_PLLI2SR_Msk            (0x70000000UL)            /*!< PLLI2SR (Bitfield-Mask: 0x07) */
/* ========================================================  PLLSAI  ========================================================= */
#define RCU_PLLSAI_PLLSAIN_Pos            (6UL)                     /*!< PLLSAIN (Bit 6) */
#define RCU_PLLSAI_PLLSAIN_Msk            (0x7fc0UL)                /*!< PLLSAIN (Bitfield-Mask: 0x1ff) */
#define RCU_PLLSAI_PLLSAIP_Pos            (16UL)                    /*!< PLLSAIP (Bit 16) */
#define RCU_PLLSAI_PLLSAIP_Msk            (0x30000UL)               /*!< PLLSAIP (Bitfield-Mask: 0x03) */
#define RCU_PLLSAI_PLLSAIQ_Pos            (24UL)                    /*!< PLLSAIQ (Bit 24) */
#define RCU_PLLSAI_PLLSAIQ_Msk            (0xf000000UL)             /*!< PLLSAIQ (Bitfield-Mask: 0x0f) */
#define RCU_PLLSAI_PLLSAIR_Pos            (28UL)                    /*!< PLLSAIR (Bit 28) */
#define RCU_PLLSAI_PLLSAIR_Msk            (0x70000000UL)            /*!< PLLSAIR (Bitfield-Mask: 0x07) */
/* =========================================================  CFG1  ========================================================== */
#define RCU_CFG1_PLLSAIRDIV_Pos           (16UL)                    /*!< PLLSAIRDIV (Bit 16) */
#define RCU_CFG1_PLLSAIRDIV_Msk           (0x30000UL)               /*!< PLLSAIRDIV (Bitfield-Mask: 0x03) */
#define RCU_CFG1_TIMERSEL_Pos             (24UL)                    /*!< TIMERSEL (Bit 24) */
#define RCU_CFG1_TIMERSEL_Msk             (0x1000000UL)             /*!< TIMERSEL (Bitfield-Mask: 0x01) */
/* ========================================================  ADDCTL  ========================================================= */
#define RCU_ADDCTL_CK48MSEL_Pos           (0UL)                     /*!< CK48MSEL (Bit 0) */
#define RCU_ADDCTL_CK48MSEL_Msk           (0x1UL)                   /*!< CK48MSEL (Bitfield-Mask: 0x01) */
#define RCU_ADDCTL_PLL48MSEL_Pos          (1UL)                     /*!< PLL48MSEL (Bit 1) */
#define RCU_ADDCTL_PLL48MSEL_Msk          (0x2UL)                   /*!< PLL48MSEL (Bitfield-Mask: 0x01) */
#define RCU_ADDCTL_IRC48MEN_Pos           (16UL)                    /*!< IRC48MEN (Bit 16) */
#define RCU_ADDCTL_IRC48MEN_Msk           (0x10000UL)               /*!< IRC48MEN (Bitfield-Mask: 0x01) */
#define RCU_ADDCTL_IRC48MSTB_Pos          (17UL)                    /*!< IRC48MSTB (Bit 17) */
#define RCU_ADDCTL_IRC48MSTB_Msk          (0x20000UL)               /*!< IRC48MSTB (Bitfield-Mask: 0x01) */
#define RCU_ADDCTL_IRC48MCAL_Pos          (24UL)                    /*!< IRC48MCAL (Bit 24) */
#define RCU_ADDCTL_IRC48MCAL_Msk          (0xff000000UL)            /*!< IRC48MCAL (Bitfield-Mask: 0xff) */
/* ========================================================  ADDINT  ========================================================= */
#define RCU_ADDINT_IRC48MSTBIF_Pos        (6UL)                     /*!< IRC48MSTBIF (Bit 6) */
#define RCU_ADDINT_IRC48MSTBIF_Msk        (0x40UL)                  /*!< IRC48MSTBIF (Bitfield-Mask: 0x01) */
#define RCU_ADDINT_IRC48MSTBIE_Pos        (14UL)                    /*!< IRC48MSTBIE (Bit 14) */
#define RCU_ADDINT_IRC48MSTBIE_Msk        (0x4000UL)                /*!< IRC48MSTBIE (Bitfield-Mask: 0x01) */
#define RCU_ADDINT_IRC48MSTBIC_Pos        (22UL)                    /*!< IRC48MSTBIC (Bit 22) */
#define RCU_ADDINT_IRC48MSTBIC_Msk        (0x400000UL)              /*!< IRC48MSTBIC (Bitfield-Mask: 0x01) */
/* ======================================================  ADDAPB1RST  ======================================================= */
#define RCU_ADDAPB1RST_CTCRST_Pos         (27UL)                    /*!< CTCRST (Bit 27) */
#define RCU_ADDAPB1RST_CTCRST_Msk         (0x8000000UL)             /*!< CTCRST (Bitfield-Mask: 0x01) */
#define RCU_ADDAPB1RST_IREFRST_Pos        (31UL)                    /*!< IREFRST (Bit 31) */
#define RCU_ADDAPB1RST_IREFRST_Msk        (0x80000000UL)            /*!< IREFRST (Bitfield-Mask: 0x01) */
/* =======================================================  ADDAPB1EN  ======================================================= */
#define RCU_ADDAPB1EN_CTCEN_Pos           (27UL)                    /*!< CTCEN (Bit 27) */
#define RCU_ADDAPB1EN_CTCEN_Msk           (0x8000000UL)             /*!< CTCEN (Bitfield-Mask: 0x01) */
#define RCU_ADDAPB1EN_IREFEN_Pos          (31UL)                    /*!< IREFEN (Bit 31) */
#define RCU_ADDAPB1EN_IREFEN_Msk          (0x80000000UL)            /*!< IREFEN (Bitfield-Mask: 0x01) */
/* ======================================================  ADDAPB1SPEN  ====================================================== */
#define RCU_ADDAPB1SPEN_CTCSPEN_Pos       (27UL)                    /*!< CTCSPEN (Bit 27) */
#define RCU_ADDAPB1SPEN_CTCSPEN_Msk       (0x8000000UL)             /*!< CTCSPEN (Bitfield-Mask: 0x01) */
#define RCU_ADDAPB1SPEN_IREFSPEN_Pos      (31UL)                    /*!< IREFSPEN (Bit 31) */
#define RCU_ADDAPB1SPEN_IREFSPEN_Msk      (0x80000000UL)            /*!< IREFSPEN (Bitfield-Mask: 0x01) */
/* =========================================================  VKEY  ========================================================== */
#define RCU_VKEY_KEY_Pos                  (0UL)                     /*!< KEY (Bit 0) */
#define RCU_VKEY_KEY_Msk                  (0xffffffffUL)            /*!< KEY (Bitfield-Mask: 0xffffffff) */
/* ==========================================================  DSV  ========================================================== */
#define RCU_DSV_DSLPVS_Pos                (0UL)                     /*!< DSLPVS (Bit 0) */
#define RCU_DSV_DSLPVS_Msk                (0x7UL)                   /*!< DSLPVS (Bitfield-Mask: 0x07) */


/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  TIME  ========================================================== */
#define RTC_TIME_PM_Pos                   (22UL)                    /*!< PM (Bit 22) */
#define RTC_TIME_PM_Msk                   (0x400000UL)              /*!< PM (Bitfield-Mask: 0x01) */
#define RTC_TIME_HRT_Pos                  (20UL)                    /*!< HRT (Bit 20) */
#define RTC_TIME_HRT_Msk                  (0x300000UL)              /*!< HRT (Bitfield-Mask: 0x03) */
#define RTC_TIME_HRU_Pos                  (16UL)                    /*!< HRU (Bit 16) */
#define RTC_TIME_HRU_Msk                  (0xf0000UL)               /*!< HRU (Bitfield-Mask: 0x0f) */
#define RTC_TIME_MNT_Pos                  (12UL)                    /*!< MNT (Bit 12) */
#define RTC_TIME_MNT_Msk                  (0x7000UL)                /*!< MNT (Bitfield-Mask: 0x07) */
#define RTC_TIME_MNU_Pos                  (8UL)                     /*!< MNU (Bit 8) */
#define RTC_TIME_MNU_Msk                  (0xf00UL)                 /*!< MNU (Bitfield-Mask: 0x0f) */
#define RTC_TIME_SCT_Pos                  (4UL)                     /*!< SCT (Bit 4) */
#define RTC_TIME_SCT_Msk                  (0x70UL)                  /*!< SCT (Bitfield-Mask: 0x07) */
#define RTC_TIME_SCU_Pos                  (0UL)                     /*!< SCU (Bit 0) */
#define RTC_TIME_SCU_Msk                  (0xfUL)                   /*!< SCU (Bitfield-Mask: 0x0f) */
/* =========================================================  DATE  ========================================================== */
#define RTC_DATE_YRT_Pos                  (20UL)                    /*!< YRT (Bit 20) */
#define RTC_DATE_YRT_Msk                  (0xf00000UL)              /*!< YRT (Bitfield-Mask: 0x0f) */
#define RTC_DATE_YRU_Pos                  (16UL)                    /*!< YRU (Bit 16) */
#define RTC_DATE_YRU_Msk                  (0xf0000UL)               /*!< YRU (Bitfield-Mask: 0x0f) */
#define RTC_DATE_DOW_Pos                  (13UL)                    /*!< DOW (Bit 13) */
#define RTC_DATE_DOW_Msk                  (0xe000UL)                /*!< DOW (Bitfield-Mask: 0x07) */
#define RTC_DATE_MONT_Pos                 (12UL)                    /*!< MONT (Bit 12) */
#define RTC_DATE_MONT_Msk                 (0x1000UL)                /*!< MONT (Bitfield-Mask: 0x01) */
#define RTC_DATE_MONU_Pos                 (8UL)                     /*!< MONU (Bit 8) */
#define RTC_DATE_MONU_Msk                 (0xf00UL)                 /*!< MONU (Bitfield-Mask: 0x0f) */
#define RTC_DATE_DAYT_Pos                 (4UL)                     /*!< DAYT (Bit 4) */
#define RTC_DATE_DAYT_Msk                 (0x30UL)                  /*!< DAYT (Bitfield-Mask: 0x03) */
#define RTC_DATE_DAYU_Pos                 (0UL)                     /*!< DAYU (Bit 0) */
#define RTC_DATE_DAYU_Msk                 (0xfUL)                   /*!< DAYU (Bitfield-Mask: 0x0f) */
/* ==========================================================  CTL  ========================================================== */
#define RTC_CTL_WTCS_Pos                  (0UL)                     /*!< WTCS (Bit 0) */
#define RTC_CTL_WTCS_Msk                  (0x7UL)                   /*!< WTCS (Bitfield-Mask: 0x07) */
#define RTC_CTL_TSEG_Pos                  (3UL)                     /*!< TSEG (Bit 3) */
#define RTC_CTL_TSEG_Msk                  (0x8UL)                   /*!< TSEG (Bitfield-Mask: 0x01) */
#define RTC_CTL_REFEN_Pos                 (4UL)                     /*!< REFEN (Bit 4) */
#define RTC_CTL_REFEN_Msk                 (0x10UL)                  /*!< REFEN (Bitfield-Mask: 0x01) */
#define RTC_CTL_BPSHAD_Pos                (5UL)                     /*!< BPSHAD (Bit 5) */
#define RTC_CTL_BPSHAD_Msk                (0x20UL)                  /*!< BPSHAD (Bitfield-Mask: 0x01) */
#define RTC_CTL_CS_Pos                    (6UL)                     /*!< CS (Bit 6) */
#define RTC_CTL_CS_Msk                    (0x40UL)                  /*!< CS (Bitfield-Mask: 0x01) */
#define RTC_CTL_CCEN_Pos                  (7UL)                     /*!< CCEN (Bit 7) */
#define RTC_CTL_CCEN_Msk                  (0x80UL)                  /*!< CCEN (Bitfield-Mask: 0x01) */
#define RTC_CTL_ALRM0EN_Pos               (8UL)                     /*!< ALRM0EN (Bit 8) */
#define RTC_CTL_ALRM0EN_Msk               (0x100UL)                 /*!< ALRM0EN (Bitfield-Mask: 0x01) */
#define RTC_CTL_ALRM1EN_Pos               (9UL)                     /*!< ALRM1EN (Bit 9) */
#define RTC_CTL_ALRM1EN_Msk               (0x200UL)                 /*!< ALRM1EN (Bitfield-Mask: 0x01) */
#define RTC_CTL_WTEN_Pos                  (10UL)                    /*!< WTEN (Bit 10) */
#define RTC_CTL_WTEN_Msk                  (0x400UL)                 /*!< WTEN (Bitfield-Mask: 0x01) */
#define RTC_CTL_TSEN_Pos                  (11UL)                    /*!< TSEN (Bit 11) */
#define RTC_CTL_TSEN_Msk                  (0x800UL)                 /*!< TSEN (Bitfield-Mask: 0x01) */
#define RTC_CTL_ALRM0IE_Pos               (12UL)                    /*!< ALRM0IE (Bit 12) */
#define RTC_CTL_ALRM0IE_Msk               (0x1000UL)                /*!< ALRM0IE (Bitfield-Mask: 0x01) */
#define RTC_CTL_ALRM1IE_Pos               (13UL)                    /*!< ALRM1IE (Bit 13) */
#define RTC_CTL_ALRM1IE_Msk               (0x2000UL)                /*!< ALRM1IE (Bitfield-Mask: 0x01) */
#define RTC_CTL_WTIE_Pos                  (14UL)                    /*!< WTIE (Bit 14) */
#define RTC_CTL_WTIE_Msk                  (0x4000UL)                /*!< WTIE (Bitfield-Mask: 0x01) */
#define RTC_CTL_TSIE_Pos                  (15UL)                    /*!< TSIE (Bit 15) */
#define RTC_CTL_TSIE_Msk                  (0x8000UL)                /*!< TSIE (Bitfield-Mask: 0x01) */
#define RTC_CTL_A1H_Pos                   (16UL)                    /*!< A1H (Bit 16) */
#define RTC_CTL_A1H_Msk                   (0x10000UL)               /*!< A1H (Bitfield-Mask: 0x01) */
#define RTC_CTL_S1H_Pos                   (17UL)                    /*!< S1H (Bit 17) */
#define RTC_CTL_S1H_Msk                   (0x20000UL)               /*!< S1H (Bitfield-Mask: 0x01) */
#define RTC_CTL_DSM_Pos                   (18UL)                    /*!< DSM (Bit 18) */
#define RTC_CTL_DSM_Msk                   (0x40000UL)               /*!< DSM (Bitfield-Mask: 0x01) */
#define RTC_CTL_COS_Pos                   (19UL)                    /*!< COS (Bit 19) */
#define RTC_CTL_COS_Msk                   (0x80000UL)               /*!< COS (Bitfield-Mask: 0x01) */
#define RTC_CTL_OPOL_Pos                  (20UL)                    /*!< OPOL (Bit 20) */
#define RTC_CTL_OPOL_Msk                  (0x100000UL)              /*!< OPOL (Bitfield-Mask: 0x01) */
#define RTC_CTL_OS_Pos                    (21UL)                    /*!< OS (Bit 21) */
#define RTC_CTL_OS_Msk                    (0x600000UL)              /*!< OS (Bitfield-Mask: 0x03) */
#define RTC_CTL_COEN_Pos                  (23UL)                    /*!< COEN (Bit 23) */
#define RTC_CTL_COEN_Msk                  (0x800000UL)              /*!< COEN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define RTC_STAT_ALRM0WF_Pos              (0UL)                     /*!< ALRM0WF (Bit 0) */
#define RTC_STAT_ALRM0WF_Msk              (0x1UL)                   /*!< ALRM0WF (Bitfield-Mask: 0x01) */
#define RTC_STAT_ALRM1WF_Pos              (1UL)                     /*!< ALRM1WF (Bit 1) */
#define RTC_STAT_ALRM1WF_Msk              (0x2UL)                   /*!< ALRM1WF (Bitfield-Mask: 0x01) */
#define RTC_STAT_WTWF_Pos                 (2UL)                     /*!< WTWF (Bit 2) */
#define RTC_STAT_WTWF_Msk                 (0x4UL)                   /*!< WTWF (Bitfield-Mask: 0x01) */
#define RTC_STAT_SOPF_Pos                 (3UL)                     /*!< SOPF (Bit 3) */
#define RTC_STAT_SOPF_Msk                 (0x8UL)                   /*!< SOPF (Bitfield-Mask: 0x01) */
#define RTC_STAT_YCM_Pos                  (4UL)                     /*!< YCM (Bit 4) */
#define RTC_STAT_YCM_Msk                  (0x10UL)                  /*!< YCM (Bitfield-Mask: 0x01) */
#define RTC_STAT_RSYNF_Pos                (5UL)                     /*!< RSYNF (Bit 5) */
#define RTC_STAT_RSYNF_Msk                (0x20UL)                  /*!< RSYNF (Bitfield-Mask: 0x01) */
#define RTC_STAT_INITF_Pos                (6UL)                     /*!< INITF (Bit 6) */
#define RTC_STAT_INITF_Msk                (0x40UL)                  /*!< INITF (Bitfield-Mask: 0x01) */
#define RTC_STAT_INITM_Pos                (7UL)                     /*!< INITM (Bit 7) */
#define RTC_STAT_INITM_Msk                (0x80UL)                  /*!< INITM (Bitfield-Mask: 0x01) */
#define RTC_STAT_ALRM0F_Pos               (8UL)                     /*!< ALRM0F (Bit 8) */
#define RTC_STAT_ALRM0F_Msk               (0x100UL)                 /*!< ALRM0F (Bitfield-Mask: 0x01) */
#define RTC_STAT_ALRM1F_Pos               (9UL)                     /*!< ALRM1F (Bit 9) */
#define RTC_STAT_ALRM1F_Msk               (0x200UL)                 /*!< ALRM1F (Bitfield-Mask: 0x01) */
#define RTC_STAT_WTF_Pos                  (10UL)                    /*!< WTF (Bit 10) */
#define RTC_STAT_WTF_Msk                  (0x400UL)                 /*!< WTF (Bitfield-Mask: 0x01) */
#define RTC_STAT_TSF_Pos                  (11UL)                    /*!< TSF (Bit 11) */
#define RTC_STAT_TSF_Msk                  (0x800UL)                 /*!< TSF (Bitfield-Mask: 0x01) */
#define RTC_STAT_TSOVRF_Pos               (12UL)                    /*!< TSOVRF (Bit 12) */
#define RTC_STAT_TSOVRF_Msk               (0x1000UL)                /*!< TSOVRF (Bitfield-Mask: 0x01) */
#define RTC_STAT_TP0F_Pos                 (13UL)                    /*!< TP0F (Bit 13) */
#define RTC_STAT_TP0F_Msk                 (0x2000UL)                /*!< TP0F (Bitfield-Mask: 0x01) */
#define RTC_STAT_TP1F_Pos                 (14UL)                    /*!< TP1F (Bit 14) */
#define RTC_STAT_TP1F_Msk                 (0x4000UL)                /*!< TP1F (Bitfield-Mask: 0x01) */
#define RTC_STAT_SCPF_Pos                 (16UL)                    /*!< SCPF (Bit 16) */
#define RTC_STAT_SCPF_Msk                 (0x10000UL)               /*!< SCPF (Bitfield-Mask: 0x01) */
/* ==========================================================  PSC  ========================================================== */
#define RTC_PSC_FACTOR_A_Pos              (16UL)                    /*!< FACTOR_A (Bit 16) */
#define RTC_PSC_FACTOR_A_Msk              (0x7f0000UL)              /*!< FACTOR_A (Bitfield-Mask: 0x7f) */
#define RTC_PSC_FACTOR_S_Pos              (0UL)                     /*!< FACTOR_S (Bit 0) */
#define RTC_PSC_FACTOR_S_Msk              (0x7fffUL)                /*!< FACTOR_S (Bitfield-Mask: 0x7fff) */
/* ==========================================================  WUT  ========================================================== */
#define RTC_WUT_WTRV_Pos                  (0UL)                     /*!< WTRV (Bit 0) */
#define RTC_WUT_WTRV_Msk                  (0xffffUL)                /*!< WTRV (Bitfield-Mask: 0xffff) */
/* =========================================================  COSC  ========================================================== */
#define RTC_COSC_COSS_Pos                 (0UL)                     /*!< COSS (Bit 0) */
#define RTC_COSC_COSS_Msk                 (0x1fUL)                  /*!< COSS (Bitfield-Mask: 0x1f) */
#define RTC_COSC_COSD_Pos                 (7UL)                     /*!< COSD (Bit 7) */
#define RTC_COSC_COSD_Msk                 (0x80UL)                  /*!< COSD (Bitfield-Mask: 0x01) */
/* ========================================================  ALRM0TD  ======================================================== */
#define RTC_ALRM0TD_MSKD_Pos              (31UL)                    /*!< MSKD (Bit 31) */
#define RTC_ALRM0TD_MSKD_Msk              (0x80000000UL)            /*!< MSKD (Bitfield-Mask: 0x01) */
#define RTC_ALRM0TD_DOWS_Pos              (30UL)                    /*!< DOWS (Bit 30) */
#define RTC_ALRM0TD_DOWS_Msk              (0x40000000UL)            /*!< DOWS (Bitfield-Mask: 0x01) */
#define RTC_ALRM0TD_DAYT_Pos              (28UL)                    /*!< DAYT (Bit 28) */
#define RTC_ALRM0TD_DAYT_Msk              (0x30000000UL)            /*!< DAYT (Bitfield-Mask: 0x03) */
#define RTC_ALRM0TD_DAYU_Pos              (24UL)                    /*!< DAYU (Bit 24) */
#define RTC_ALRM0TD_DAYU_Msk              (0xf000000UL)             /*!< DAYU (Bitfield-Mask: 0x0f) */
#define RTC_ALRM0TD_MSKH_Pos              (23UL)                    /*!< MSKH (Bit 23) */
#define RTC_ALRM0TD_MSKH_Msk              (0x800000UL)              /*!< MSKH (Bitfield-Mask: 0x01) */
#define RTC_ALRM0TD_PM_Pos                (22UL)                    /*!< PM (Bit 22) */
#define RTC_ALRM0TD_PM_Msk                (0x400000UL)              /*!< PM (Bitfield-Mask: 0x01) */
#define RTC_ALRM0TD_HRT_Pos               (20UL)                    /*!< HRT (Bit 20) */
#define RTC_ALRM0TD_HRT_Msk               (0x300000UL)              /*!< HRT (Bitfield-Mask: 0x03) */
#define RTC_ALRM0TD_HRU_Pos               (16UL)                    /*!< HRU (Bit 16) */
#define RTC_ALRM0TD_HRU_Msk               (0xf0000UL)               /*!< HRU (Bitfield-Mask: 0x0f) */
#define RTC_ALRM0TD_MSKM_Pos              (15UL)                    /*!< MSKM (Bit 15) */
#define RTC_ALRM0TD_MSKM_Msk              (0x8000UL)                /*!< MSKM (Bitfield-Mask: 0x01) */
#define RTC_ALRM0TD_MNT_Pos               (12UL)                    /*!< MNT (Bit 12) */
#define RTC_ALRM0TD_MNT_Msk               (0x7000UL)                /*!< MNT (Bitfield-Mask: 0x07) */
#define RTC_ALRM0TD_MNU_Pos               (8UL)                     /*!< MNU (Bit 8) */
#define RTC_ALRM0TD_MNU_Msk               (0xf00UL)                 /*!< MNU (Bitfield-Mask: 0x0f) */
#define RTC_ALRM0TD_MSKS_Pos              (7UL)                     /*!< MSKS (Bit 7) */
#define RTC_ALRM0TD_MSKS_Msk              (0x80UL)                  /*!< MSKS (Bitfield-Mask: 0x01) */
#define RTC_ALRM0TD_SCT_Pos               (4UL)                     /*!< SCT (Bit 4) */
#define RTC_ALRM0TD_SCT_Msk               (0x70UL)                  /*!< SCT (Bitfield-Mask: 0x07) */
#define RTC_ALRM0TD_SCU_Pos               (0UL)                     /*!< SCU (Bit 0) */
#define RTC_ALRM0TD_SCU_Msk               (0xfUL)                   /*!< SCU (Bitfield-Mask: 0x0f) */
/* ========================================================  ALRM1TD  ======================================================== */
#define RTC_ALRM1TD_MSKD_Pos              (31UL)                    /*!< MSKD (Bit 31) */
#define RTC_ALRM1TD_MSKD_Msk              (0x80000000UL)            /*!< MSKD (Bitfield-Mask: 0x01) */
#define RTC_ALRM1TD_DOWS_Pos              (30UL)                    /*!< DOWS (Bit 30) */
#define RTC_ALRM1TD_DOWS_Msk              (0x40000000UL)            /*!< DOWS (Bitfield-Mask: 0x01) */
#define RTC_ALRM1TD_DAYT_Pos              (28UL)                    /*!< DAYT (Bit 28) */
#define RTC_ALRM1TD_DAYT_Msk              (0x30000000UL)            /*!< DAYT (Bitfield-Mask: 0x03) */
#define RTC_ALRM1TD_DAYU_Pos              (24UL)                    /*!< DAYU (Bit 24) */
#define RTC_ALRM1TD_DAYU_Msk              (0xf000000UL)             /*!< DAYU (Bitfield-Mask: 0x0f) */
#define RTC_ALRM1TD_MSKH_Pos              (23UL)                    /*!< MSKH (Bit 23) */
#define RTC_ALRM1TD_MSKH_Msk              (0x800000UL)              /*!< MSKH (Bitfield-Mask: 0x01) */
#define RTC_ALRM1TD_PM_Pos                (22UL)                    /*!< PM (Bit 22) */
#define RTC_ALRM1TD_PM_Msk                (0x400000UL)              /*!< PM (Bitfield-Mask: 0x01) */
#define RTC_ALRM1TD_HRT_Pos               (20UL)                    /*!< HRT (Bit 20) */
#define RTC_ALRM1TD_HRT_Msk               (0x300000UL)              /*!< HRT (Bitfield-Mask: 0x03) */
#define RTC_ALRM1TD_HRU_Pos               (16UL)                    /*!< HRU (Bit 16) */
#define RTC_ALRM1TD_HRU_Msk               (0xf0000UL)               /*!< HRU (Bitfield-Mask: 0x0f) */
#define RTC_ALRM1TD_MSKM_Pos              (15UL)                    /*!< MSKM (Bit 15) */
#define RTC_ALRM1TD_MSKM_Msk              (0x8000UL)                /*!< MSKM (Bitfield-Mask: 0x01) */
#define RTC_ALRM1TD_MNT_Pos               (12UL)                    /*!< MNT (Bit 12) */
#define RTC_ALRM1TD_MNT_Msk               (0x7000UL)                /*!< MNT (Bitfield-Mask: 0x07) */
#define RTC_ALRM1TD_MNU_Pos               (8UL)                     /*!< MNU (Bit 8) */
#define RTC_ALRM1TD_MNU_Msk               (0xf00UL)                 /*!< MNU (Bitfield-Mask: 0x0f) */
#define RTC_ALRM1TD_MSKS_Pos              (7UL)                     /*!< MSKS (Bit 7) */
#define RTC_ALRM1TD_MSKS_Msk              (0x80UL)                  /*!< MSKS (Bitfield-Mask: 0x01) */
#define RTC_ALRM1TD_SCT_Pos               (4UL)                     /*!< SCT (Bit 4) */
#define RTC_ALRM1TD_SCT_Msk               (0x70UL)                  /*!< SCT (Bitfield-Mask: 0x07) */
#define RTC_ALRM1TD_SCU_Pos               (0UL)                     /*!< SCU (Bit 0) */
#define RTC_ALRM1TD_SCU_Msk               (0xfUL)                   /*!< SCU (Bitfield-Mask: 0x0f) */
/* ==========================================================  WPK  ========================================================== */
#define RTC_WPK_WPK_Pos                   (0UL)                     /*!< WPK (Bit 0) */
#define RTC_WPK_WPK_Msk                   (0xffUL)                  /*!< WPK (Bitfield-Mask: 0xff) */
/* ==========================================================  SS  =========================================================== */
#define RTC_SS_SSC_Pos                    (0UL)                     /*!< SSC (Bit 0) */
#define RTC_SS_SSC_Msk                    (0xffffUL)                /*!< SSC (Bitfield-Mask: 0xffff) */
/* =======================================================  SHIFTCTL  ======================================================== */
#define RTC_SHIFTCTL_A1S_Pos              (31UL)                    /*!< A1S (Bit 31) */
#define RTC_SHIFTCTL_A1S_Msk              (0x80000000UL)            /*!< A1S (Bitfield-Mask: 0x01) */
#define RTC_SHIFTCTL_SFS_Pos              (0UL)                     /*!< SFS (Bit 0) */
#define RTC_SHIFTCTL_SFS_Msk              (0x7fffUL)                /*!< SFS (Bitfield-Mask: 0x7fff) */
/* ==========================================================  TTS  ========================================================== */
#define RTC_TTS_PM_Pos                    (22UL)                    /*!< PM (Bit 22) */
#define RTC_TTS_PM_Msk                    (0x400000UL)              /*!< PM (Bitfield-Mask: 0x01) */
#define RTC_TTS_HRT_Pos                   (20UL)                    /*!< HRT (Bit 20) */
#define RTC_TTS_HRT_Msk                   (0x300000UL)              /*!< HRT (Bitfield-Mask: 0x03) */
#define RTC_TTS_HRU_Pos                   (16UL)                    /*!< HRU (Bit 16) */
#define RTC_TTS_HRU_Msk                   (0xf0000UL)               /*!< HRU (Bitfield-Mask: 0x0f) */
#define RTC_TTS_MNT_Pos                   (12UL)                    /*!< MNT (Bit 12) */
#define RTC_TTS_MNT_Msk                   (0x7000UL)                /*!< MNT (Bitfield-Mask: 0x07) */
#define RTC_TTS_MNU_Pos                   (8UL)                     /*!< MNU (Bit 8) */
#define RTC_TTS_MNU_Msk                   (0xf00UL)                 /*!< MNU (Bitfield-Mask: 0x0f) */
#define RTC_TTS_SCT_Pos                   (4UL)                     /*!< SCT (Bit 4) */
#define RTC_TTS_SCT_Msk                   (0x70UL)                  /*!< SCT (Bitfield-Mask: 0x07) */
#define RTC_TTS_SCU_Pos                   (0UL)                     /*!< SCU (Bit 0) */
#define RTC_TTS_SCU_Msk                   (0xfUL)                   /*!< SCU (Bitfield-Mask: 0x0f) */
/* ==========================================================  DTS  ========================================================== */
#define RTC_DTS_DOW_Pos                   (13UL)                    /*!< DOW (Bit 13) */
#define RTC_DTS_DOW_Msk                   (0xe000UL)                /*!< DOW (Bitfield-Mask: 0x07) */
#define RTC_DTS_MONT_Pos                  (12UL)                    /*!< MONT (Bit 12) */
#define RTC_DTS_MONT_Msk                  (0x1000UL)                /*!< MONT (Bitfield-Mask: 0x01) */
#define RTC_DTS_MONU_Pos                  (8UL)                     /*!< MONU (Bit 8) */
#define RTC_DTS_MONU_Msk                  (0xf00UL)                 /*!< MONU (Bitfield-Mask: 0x0f) */
#define RTC_DTS_DAYT_Pos                  (4UL)                     /*!< DAYT (Bit 4) */
#define RTC_DTS_DAYT_Msk                  (0x30UL)                  /*!< DAYT (Bitfield-Mask: 0x03) */
#define RTC_DTS_DAYU_Pos                  (0UL)                     /*!< DAYU (Bit 0) */
#define RTC_DTS_DAYU_Msk                  (0xfUL)                   /*!< DAYU (Bitfield-Mask: 0x0f) */
/* =========================================================  SSTS  ========================================================== */
#define RTC_SSTS_SSC_Pos                  (0UL)                     /*!< SSC (Bit 0) */
#define RTC_SSTS_SSC_Msk                  (0xffffUL)                /*!< SSC (Bitfield-Mask: 0xffff) */
/* =========================================================  HRFC  ========================================================== */
#define RTC_HRFC_FREQI_Pos                (15UL)                    /*!< FREQI (Bit 15) */
#define RTC_HRFC_FREQI_Msk                (0x8000UL)                /*!< FREQI (Bitfield-Mask: 0x01) */
#define RTC_HRFC_CWND8_Pos                (14UL)                    /*!< CWND8 (Bit 14) */
#define RTC_HRFC_CWND8_Msk                (0x4000UL)                /*!< CWND8 (Bitfield-Mask: 0x01) */
#define RTC_HRFC_CWND16_Pos               (13UL)                    /*!< CWND16 (Bit 13) */
#define RTC_HRFC_CWND16_Msk               (0x2000UL)                /*!< CWND16 (Bitfield-Mask: 0x01) */
#define RTC_HRFC_CMSK_Pos                 (0UL)                     /*!< CMSK (Bit 0) */
#define RTC_HRFC_CMSK_Msk                 (0x1ffUL)                 /*!< CMSK (Bitfield-Mask: 0x1ff) */
/* =========================================================  TAMP  ========================================================== */
#define RTC_TAMP_AOT_Pos                  (18UL)                    /*!< AOT (Bit 18) */
#define RTC_TAMP_AOT_Msk                  (0x40000UL)               /*!< AOT (Bitfield-Mask: 0x01) */
#define RTC_TAMP_TSSEL_Pos                (17UL)                    /*!< TSSEL (Bit 17) */
#define RTC_TAMP_TSSEL_Msk                (0x20000UL)               /*!< TSSEL (Bitfield-Mask: 0x01) */
#define RTC_TAMP_TP0SEL_Pos               (16UL)                    /*!< TP0SEL (Bit 16) */
#define RTC_TAMP_TP0SEL_Msk               (0x10000UL)               /*!< TP0SEL (Bitfield-Mask: 0x01) */
#define RTC_TAMP_DISPU_Pos                (15UL)                    /*!< DISPU (Bit 15) */
#define RTC_TAMP_DISPU_Msk                (0x8000UL)                /*!< DISPU (Bitfield-Mask: 0x01) */
#define RTC_TAMP_PRCH_Pos                 (13UL)                    /*!< PRCH (Bit 13) */
#define RTC_TAMP_PRCH_Msk                 (0x6000UL)                /*!< PRCH (Bitfield-Mask: 0x03) */
#define RTC_TAMP_FLT_Pos                  (11UL)                    /*!< FLT (Bit 11) */
#define RTC_TAMP_FLT_Msk                  (0x1800UL)                /*!< FLT (Bitfield-Mask: 0x03) */
#define RTC_TAMP_FREQ_Pos                 (8UL)                     /*!< FREQ (Bit 8) */
#define RTC_TAMP_FREQ_Msk                 (0x700UL)                 /*!< FREQ (Bitfield-Mask: 0x07) */
#define RTC_TAMP_TPTS_Pos                 (7UL)                     /*!< TPTS (Bit 7) */
#define RTC_TAMP_TPTS_Msk                 (0x80UL)                  /*!< TPTS (Bitfield-Mask: 0x01) */
#define RTC_TAMP_TP1EG_Pos                (4UL)                     /*!< TP1EG (Bit 4) */
#define RTC_TAMP_TP1EG_Msk                (0x10UL)                  /*!< TP1EG (Bitfield-Mask: 0x01) */
#define RTC_TAMP_TP1EN_Pos                (3UL)                     /*!< TP1EN (Bit 3) */
#define RTC_TAMP_TP1EN_Msk                (0x8UL)                   /*!< TP1EN (Bitfield-Mask: 0x01) */
#define RTC_TAMP_TPIE_Pos                 (2UL)                     /*!< TPIE (Bit 2) */
#define RTC_TAMP_TPIE_Msk                 (0x4UL)                   /*!< TPIE (Bitfield-Mask: 0x01) */
#define RTC_TAMP_TP0EG_Pos                (1UL)                     /*!< TP0EG (Bit 1) */
#define RTC_TAMP_TP0EG_Msk                (0x2UL)                   /*!< TP0EG (Bitfield-Mask: 0x01) */
#define RTC_TAMP_TP0EN_Pos                (0UL)                     /*!< TP0EN (Bit 0) */
#define RTC_TAMP_TP0EN_Msk                (0x1UL)                   /*!< TP0EN (Bitfield-Mask: 0x01) */
/* ========================================================  ALRM0SS  ======================================================== */
#define RTC_ALRM0SS_MSKSSC_Pos            (24UL)                    /*!< MSKSSC (Bit 24) */
#define RTC_ALRM0SS_MSKSSC_Msk            (0xf000000UL)             /*!< MSKSSC (Bitfield-Mask: 0x0f) */
#define RTC_ALRM0SS_SSC_Pos               (0UL)                     /*!< SSC (Bit 0) */
#define RTC_ALRM0SS_SSC_Msk               (0x7fffUL)                /*!< SSC (Bitfield-Mask: 0x7fff) */
/* ========================================================  ALRM1SS  ======================================================== */
#define RTC_ALRM1SS_MSKSSC_Pos            (24UL)                    /*!< MSKSSC (Bit 24) */
#define RTC_ALRM1SS_MSKSSC_Msk            (0xf000000UL)             /*!< MSKSSC (Bitfield-Mask: 0x0f) */
#define RTC_ALRM1SS_SSC_Pos               (0UL)                     /*!< SSC (Bit 0) */
#define RTC_ALRM1SS_SSC_Msk               (0x7fffUL)                /*!< SSC (Bitfield-Mask: 0x7fff) */
/* =========================================================  BKP0  ========================================================== */
#define RTC_BKP0_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP0_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP1  ========================================================== */
#define RTC_BKP1_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP1_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP2  ========================================================== */
#define RTC_BKP2_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP2_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP3  ========================================================== */
#define RTC_BKP3_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP3_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP4  ========================================================== */
#define RTC_BKP4_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP4_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP5  ========================================================== */
#define RTC_BKP5_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP5_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP6  ========================================================== */
#define RTC_BKP6_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP6_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP7  ========================================================== */
#define RTC_BKP7_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP7_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP8  ========================================================== */
#define RTC_BKP8_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP8_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP9  ========================================================== */
#define RTC_BKP9_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP9_DATA_Msk                 (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP10  ========================================================= */
#define RTC_BKP10_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP10_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP11  ========================================================= */
#define RTC_BKP11_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP11_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP12  ========================================================= */
#define RTC_BKP12_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP12_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP13  ========================================================= */
#define RTC_BKP13_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP13_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP14  ========================================================= */
#define RTC_BKP14_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP14_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP15  ========================================================= */
#define RTC_BKP15_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP15_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP16  ========================================================= */
#define RTC_BKP16_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP16_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP17  ========================================================= */
#define RTC_BKP17_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP17_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP18  ========================================================= */
#define RTC_BKP18_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP18_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */
/* =========================================================  BKP19  ========================================================= */
#define RTC_BKP19_DATA_Pos                (0UL)                     /*!< DATA (Bit 0) */
#define RTC_BKP19_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                           SDIO                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  PWRCTL  ========================================================= */
#define SDIO_PWRCTL_PWRCTL_Pos            (0UL)                     /*!< PWRCTL (Bit 0) */
#define SDIO_PWRCTL_PWRCTL_Msk            (0x3UL)                   /*!< PWRCTL (Bitfield-Mask: 0x03) */
/* ========================================================  CLKCTL  ========================================================= */
#define SDIO_CLKCTL_DIV_8_Pos             (31UL)                    /*!< DIV_8 (Bit 31) */
#define SDIO_CLKCTL_DIV_8_Msk             (0x80000000UL)            /*!< DIV_8 (Bitfield-Mask: 0x01) */
#define SDIO_CLKCTL_HWCLKEN_Pos           (14UL)                    /*!< HWCLKEN (Bit 14) */
#define SDIO_CLKCTL_HWCLKEN_Msk           (0x4000UL)                /*!< HWCLKEN (Bitfield-Mask: 0x01) */
#define SDIO_CLKCTL_CLKEDGE_Pos           (13UL)                    /*!< CLKEDGE (Bit 13) */
#define SDIO_CLKCTL_CLKEDGE_Msk           (0x2000UL)                /*!< CLKEDGE (Bitfield-Mask: 0x01) */
#define SDIO_CLKCTL_BUSMODE_Pos           (11UL)                    /*!< BUSMODE (Bit 11) */
#define SDIO_CLKCTL_BUSMODE_Msk           (0x1800UL)                /*!< BUSMODE (Bitfield-Mask: 0x03) */
#define SDIO_CLKCTL_CLKBYP_Pos            (10UL)                    /*!< CLKBYP (Bit 10) */
#define SDIO_CLKCTL_CLKBYP_Msk            (0x400UL)                 /*!< CLKBYP (Bitfield-Mask: 0x01) */
#define SDIO_CLKCTL_CLKPWRSAV_Pos         (9UL)                     /*!< CLKPWRSAV (Bit 9) */
#define SDIO_CLKCTL_CLKPWRSAV_Msk         (0x200UL)                 /*!< CLKPWRSAV (Bitfield-Mask: 0x01) */
#define SDIO_CLKCTL_CLKEN_Pos             (8UL)                     /*!< CLKEN (Bit 8) */
#define SDIO_CLKCTL_CLKEN_Msk             (0x100UL)                 /*!< CLKEN (Bitfield-Mask: 0x01) */
#define SDIO_CLKCTL_DIV_0_7_Pos           (0UL)                     /*!< DIV_0_7 (Bit 0) */
#define SDIO_CLKCTL_DIV_0_7_Msk           (0xffUL)                  /*!< DIV_0_7 (Bitfield-Mask: 0xff) */
/* ========================================================  CMDAGMT  ======================================================== */
#define SDIO_CMDAGMT_CMDAGMT_Pos          (0UL)                     /*!< CMDAGMT (Bit 0) */
#define SDIO_CMDAGMT_CMDAGMT_Msk          (0xffffffffUL)            /*!< CMDAGMT (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CMDCTL  ========================================================= */
#define SDIO_CMDCTL_CMDIDX_Pos            (0UL)                     /*!< CMDIDX (Bit 0) */
#define SDIO_CMDCTL_CMDIDX_Msk            (0x3fUL)                  /*!< CMDIDX (Bitfield-Mask: 0x3f) */
#define SDIO_CMDCTL_CMDRESP_Pos           (6UL)                     /*!< CMDRESP (Bit 6) */
#define SDIO_CMDCTL_CMDRESP_Msk           (0xc0UL)                  /*!< CMDRESP (Bitfield-Mask: 0x03) */
#define SDIO_CMDCTL_INTWAIT_Pos           (8UL)                     /*!< INTWAIT (Bit 8) */
#define SDIO_CMDCTL_INTWAIT_Msk           (0x100UL)                 /*!< INTWAIT (Bitfield-Mask: 0x01) */
#define SDIO_CMDCTL_WAITDEND_Pos          (9UL)                     /*!< WAITDEND (Bit 9) */
#define SDIO_CMDCTL_WAITDEND_Msk          (0x200UL)                 /*!< WAITDEND (Bitfield-Mask: 0x01) */
#define SDIO_CMDCTL_CSMEN_Pos             (10UL)                    /*!< CSMEN (Bit 10) */
#define SDIO_CMDCTL_CSMEN_Msk             (0x400UL)                 /*!< CSMEN (Bitfield-Mask: 0x01) */
#define SDIO_CMDCTL_SUSPEND_Pos           (11UL)                    /*!< SUSPEND (Bit 11) */
#define SDIO_CMDCTL_SUSPEND_Msk           (0x800UL)                 /*!< SUSPEND (Bitfield-Mask: 0x01) */
#define SDIO_CMDCTL_ENCMDC_Pos            (12UL)                    /*!< ENCMDC (Bit 12) */
#define SDIO_CMDCTL_ENCMDC_Msk            (0x1000UL)                /*!< ENCMDC (Bitfield-Mask: 0x01) */
#define SDIO_CMDCTL_NINTEN_Pos            (13UL)                    /*!< NINTEN (Bit 13) */
#define SDIO_CMDCTL_NINTEN_Msk            (0x2000UL)                /*!< NINTEN (Bitfield-Mask: 0x01) */
#define SDIO_CMDCTL_ATAEN_Pos             (14UL)                    /*!< ATAEN (Bit 14) */
#define SDIO_CMDCTL_ATAEN_Msk             (0x4000UL)                /*!< ATAEN (Bitfield-Mask: 0x01) */
/* =======================================================  RSPCMDIDX  ======================================================= */
#define SDIO_RSPCMDIDX_RSPCMDIDX_Pos      (0UL)                     /*!< RSPCMDIDX (Bit 0) */
#define SDIO_RSPCMDIDX_RSPCMDIDX_Msk      (0x3fUL)                  /*!< RSPCMDIDX (Bitfield-Mask: 0x3f) */
/* =========================================================  RESP0  ========================================================= */
#define SDIO_RESP0_RESP0_Pos              (0UL)                     /*!< RESP0 (Bit 0) */
#define SDIO_RESP0_RESP0_Msk              (0xffffffffUL)            /*!< RESP0 (Bitfield-Mask: 0xffffffff) */
/* =========================================================  RESP1  ========================================================= */
#define SDIO_RESP1_RESP1_Pos              (0UL)                     /*!< RESP1 (Bit 0) */
#define SDIO_RESP1_RESP1_Msk              (0xffffffffUL)            /*!< RESP1 (Bitfield-Mask: 0xffffffff) */
/* =========================================================  RESP2  ========================================================= */
#define SDIO_RESP2_RESP2_Pos              (0UL)                     /*!< RESP2 (Bit 0) */
#define SDIO_RESP2_RESP2_Msk              (0xffffffffUL)            /*!< RESP2 (Bitfield-Mask: 0xffffffff) */
/* =========================================================  RESP3  ========================================================= */
#define SDIO_RESP3_RESP3_Pos              (0UL)                     /*!< RESP3 (Bit 0) */
#define SDIO_RESP3_RESP3_Msk              (0xffffffffUL)            /*!< RESP3 (Bitfield-Mask: 0xffffffff) */
/* ========================================================  DATATO  ========================================================= */
#define SDIO_DATATO_DATATO_Pos            (0UL)                     /*!< DATATO (Bit 0) */
#define SDIO_DATATO_DATATO_Msk            (0xffffffffUL)            /*!< DATATO (Bitfield-Mask: 0xffffffff) */
/* ========================================================  DATALEN  ======================================================== */
#define SDIO_DATALEN_DATALEN_Pos          (0UL)                     /*!< DATALEN (Bit 0) */
#define SDIO_DATALEN_DATALEN_Msk          (0x1ffffffUL)             /*!< DATALEN (Bitfield-Mask: 0x1ffffff) */
/* ========================================================  DATACTL  ======================================================== */
#define SDIO_DATACTL_DATAEN_Pos           (0UL)                     /*!< DATAEN (Bit 0) */
#define SDIO_DATACTL_DATAEN_Msk           (0x1UL)                   /*!< DATAEN (Bitfield-Mask: 0x01) */
#define SDIO_DATACTL_DATADIR_Pos          (1UL)                     /*!< DATADIR (Bit 1) */
#define SDIO_DATACTL_DATADIR_Msk          (0x2UL)                   /*!< DATADIR (Bitfield-Mask: 0x01) */
#define SDIO_DATACTL_TRANSMOD_Pos         (2UL)                     /*!< TRANSMOD (Bit 2) */
#define SDIO_DATACTL_TRANSMOD_Msk         (0x4UL)                   /*!< TRANSMOD (Bitfield-Mask: 0x01) */
#define SDIO_DATACTL_DMAEN_Pos            (3UL)                     /*!< DMAEN (Bit 3) */
#define SDIO_DATACTL_DMAEN_Msk            (0x8UL)                   /*!< DMAEN (Bitfield-Mask: 0x01) */
#define SDIO_DATACTL_BLKSZ_Pos            (4UL)                     /*!< BLKSZ (Bit 4) */
#define SDIO_DATACTL_BLKSZ_Msk            (0xf0UL)                  /*!< BLKSZ (Bitfield-Mask: 0x0f) */
#define SDIO_DATACTL_RWEN_Pos             (8UL)                     /*!< RWEN (Bit 8) */
#define SDIO_DATACTL_RWEN_Msk             (0x100UL)                 /*!< RWEN (Bitfield-Mask: 0x01) */
#define SDIO_DATACTL_RWSTOP_Pos           (9UL)                     /*!< RWSTOP (Bit 9) */
#define SDIO_DATACTL_RWSTOP_Msk           (0x200UL)                 /*!< RWSTOP (Bitfield-Mask: 0x01) */
#define SDIO_DATACTL_RWTYPE_Pos           (10UL)                    /*!< RWTYPE (Bit 10) */
#define SDIO_DATACTL_RWTYPE_Msk           (0x400UL)                 /*!< RWTYPE (Bitfield-Mask: 0x01) */
#define SDIO_DATACTL_IOEN_Pos             (11UL)                    /*!< IOEN (Bit 11) */
#define SDIO_DATACTL_IOEN_Msk             (0x800UL)                 /*!< IOEN (Bitfield-Mask: 0x01) */
/* ========================================================  DATACNT  ======================================================== */
#define SDIO_DATACNT_DATACNT_Pos          (0UL)                     /*!< DATACNT (Bit 0) */
#define SDIO_DATACNT_DATACNT_Msk          (0x1ffffffUL)             /*!< DATACNT (Bitfield-Mask: 0x1ffffff) */
/* =========================================================  STAT  ========================================================== */
#define SDIO_STAT_CCRCERR_Pos             (0UL)                     /*!< CCRCERR (Bit 0) */
#define SDIO_STAT_CCRCERR_Msk             (0x1UL)                   /*!< CCRCERR (Bitfield-Mask: 0x01) */
#define SDIO_STAT_DTCRCERR_Pos            (1UL)                     /*!< DTCRCERR (Bit 1) */
#define SDIO_STAT_DTCRCERR_Msk            (0x2UL)                   /*!< DTCRCERR (Bitfield-Mask: 0x01) */
#define SDIO_STAT_CMDTMOUT_Pos            (2UL)                     /*!< CMDTMOUT (Bit 2) */
#define SDIO_STAT_CMDTMOUT_Msk            (0x4UL)                   /*!< CMDTMOUT (Bitfield-Mask: 0x01) */
#define SDIO_STAT_DTTMOUT_Pos             (3UL)                     /*!< DTTMOUT (Bit 3) */
#define SDIO_STAT_DTTMOUT_Msk             (0x8UL)                   /*!< DTTMOUT (Bitfield-Mask: 0x01) */
#define SDIO_STAT_TXURE_Pos               (4UL)                     /*!< TXURE (Bit 4) */
#define SDIO_STAT_TXURE_Msk               (0x10UL)                  /*!< TXURE (Bitfield-Mask: 0x01) */
#define SDIO_STAT_RXORE_Pos               (5UL)                     /*!< RXORE (Bit 5) */
#define SDIO_STAT_RXORE_Msk               (0x20UL)                  /*!< RXORE (Bitfield-Mask: 0x01) */
#define SDIO_STAT_CMDRECV_Pos             (6UL)                     /*!< CMDRECV (Bit 6) */
#define SDIO_STAT_CMDRECV_Msk             (0x40UL)                  /*!< CMDRECV (Bitfield-Mask: 0x01) */
#define SDIO_STAT_CMDSEND_Pos             (7UL)                     /*!< CMDSEND (Bit 7) */
#define SDIO_STAT_CMDSEND_Msk             (0x80UL)                  /*!< CMDSEND (Bitfield-Mask: 0x01) */
#define SDIO_STAT_DTEND_Pos               (8UL)                     /*!< DTEND (Bit 8) */
#define SDIO_STAT_DTEND_Msk               (0x100UL)                 /*!< DTEND (Bitfield-Mask: 0x01) */
#define SDIO_STAT_STBITE_Pos              (9UL)                     /*!< STBITE (Bit 9) */
#define SDIO_STAT_STBITE_Msk              (0x200UL)                 /*!< STBITE (Bitfield-Mask: 0x01) */
#define SDIO_STAT_DTBLKEND_Pos            (10UL)                    /*!< DTBLKEND (Bit 10) */
#define SDIO_STAT_DTBLKEND_Msk            (0x400UL)                 /*!< DTBLKEND (Bitfield-Mask: 0x01) */
#define SDIO_STAT_CMDRUN_Pos              (11UL)                    /*!< CMDRUN (Bit 11) */
#define SDIO_STAT_CMDRUN_Msk              (0x800UL)                 /*!< CMDRUN (Bitfield-Mask: 0x01) */
#define SDIO_STAT_TXRUN_Pos               (12UL)                    /*!< TXRUN (Bit 12) */
#define SDIO_STAT_TXRUN_Msk               (0x1000UL)                /*!< TXRUN (Bitfield-Mask: 0x01) */
#define SDIO_STAT_RXRUN_Pos               (13UL)                    /*!< RXRUN (Bit 13) */
#define SDIO_STAT_RXRUN_Msk               (0x2000UL)                /*!< RXRUN (Bitfield-Mask: 0x01) */
#define SDIO_STAT_TFH_Pos                 (14UL)                    /*!< TFH (Bit 14) */
#define SDIO_STAT_TFH_Msk                 (0x4000UL)                /*!< TFH (Bitfield-Mask: 0x01) */
#define SDIO_STAT_RFH_Pos                 (15UL)                    /*!< RFH (Bit 15) */
#define SDIO_STAT_RFH_Msk                 (0x8000UL)                /*!< RFH (Bitfield-Mask: 0x01) */
#define SDIO_STAT_TFF_Pos                 (16UL)                    /*!< TFF (Bit 16) */
#define SDIO_STAT_TFF_Msk                 (0x10000UL)               /*!< TFF (Bitfield-Mask: 0x01) */
#define SDIO_STAT_RFF_Pos                 (17UL)                    /*!< RFF (Bit 17) */
#define SDIO_STAT_RFF_Msk                 (0x20000UL)               /*!< RFF (Bitfield-Mask: 0x01) */
#define SDIO_STAT_TFE_Pos                 (18UL)                    /*!< TFE (Bit 18) */
#define SDIO_STAT_TFE_Msk                 (0x40000UL)               /*!< TFE (Bitfield-Mask: 0x01) */
#define SDIO_STAT_RFE_Pos                 (19UL)                    /*!< RFE (Bit 19) */
#define SDIO_STAT_RFE_Msk                 (0x80000UL)               /*!< RFE (Bitfield-Mask: 0x01) */
#define SDIO_STAT_TXDTVAL_Pos             (20UL)                    /*!< TXDTVAL (Bit 20) */
#define SDIO_STAT_TXDTVAL_Msk             (0x100000UL)              /*!< TXDTVAL (Bitfield-Mask: 0x01) */
#define SDIO_STAT_RXDTVAL_Pos             (21UL)                    /*!< RXDTVAL (Bit 21) */
#define SDIO_STAT_RXDTVAL_Msk             (0x200000UL)              /*!< RXDTVAL (Bitfield-Mask: 0x01) */
#define SDIO_STAT_SDIOINT_Pos             (22UL)                    /*!< SDIOINT (Bit 22) */
#define SDIO_STAT_SDIOINT_Msk             (0x400000UL)              /*!< SDIOINT (Bitfield-Mask: 0x01) */
#define SDIO_STAT_ATAEND_Pos              (23UL)                    /*!< ATAEND (Bit 23) */
#define SDIO_STAT_ATAEND_Msk              (0x800000UL)              /*!< ATAEND (Bitfield-Mask: 0x01) */
/* =========================================================  INTC  ========================================================== */
#define SDIO_INTC_CCRCERRC_Pos            (0UL)                     /*!< CCRCERRC (Bit 0) */
#define SDIO_INTC_CCRCERRC_Msk            (0x1UL)                   /*!< CCRCERRC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_DTCRCERRC_Pos           (1UL)                     /*!< DTCRCERRC (Bit 1) */
#define SDIO_INTC_DTCRCERRC_Msk           (0x2UL)                   /*!< DTCRCERRC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_CMDTMOUTC_Pos           (2UL)                     /*!< CMDTMOUTC (Bit 2) */
#define SDIO_INTC_CMDTMOUTC_Msk           (0x4UL)                   /*!< CMDTMOUTC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_DTTMOUTC_Pos            (3UL)                     /*!< DTTMOUTC (Bit 3) */
#define SDIO_INTC_DTTMOUTC_Msk            (0x8UL)                   /*!< DTTMOUTC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_TXUREC_Pos              (4UL)                     /*!< TXUREC (Bit 4) */
#define SDIO_INTC_TXUREC_Msk              (0x10UL)                  /*!< TXUREC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_RXOREC_Pos              (5UL)                     /*!< RXOREC (Bit 5) */
#define SDIO_INTC_RXOREC_Msk              (0x20UL)                  /*!< RXOREC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_CMDRECVC_Pos            (6UL)                     /*!< CMDRECVC (Bit 6) */
#define SDIO_INTC_CMDRECVC_Msk            (0x40UL)                  /*!< CMDRECVC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_CMDSENDC_Pos            (7UL)                     /*!< CMDSENDC (Bit 7) */
#define SDIO_INTC_CMDSENDC_Msk            (0x80UL)                  /*!< CMDSENDC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_DTENDC_Pos              (8UL)                     /*!< DTENDC (Bit 8) */
#define SDIO_INTC_DTENDC_Msk              (0x100UL)                 /*!< DTENDC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_STBITEC_Pos             (9UL)                     /*!< STBITEC (Bit 9) */
#define SDIO_INTC_STBITEC_Msk             (0x200UL)                 /*!< STBITEC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_DTBLKENDC_Pos           (10UL)                    /*!< DTBLKENDC (Bit 10) */
#define SDIO_INTC_DTBLKENDC_Msk           (0x400UL)                 /*!< DTBLKENDC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_SDIOINTC_Pos            (22UL)                    /*!< SDIOINTC (Bit 22) */
#define SDIO_INTC_SDIOINTC_Msk            (0x400000UL)              /*!< SDIOINTC (Bitfield-Mask: 0x01) */
#define SDIO_INTC_ATAENDC_Pos             (23UL)                    /*!< ATAENDC (Bit 23) */
#define SDIO_INTC_ATAENDC_Msk             (0x800000UL)              /*!< ATAENDC (Bitfield-Mask: 0x01) */
/* =========================================================  INTEN  ========================================================= */
#define SDIO_INTEN_CCRCERRIE_Pos          (0UL)                     /*!< CCRCERRIE (Bit 0) */
#define SDIO_INTEN_CCRCERRIE_Msk          (0x1UL)                   /*!< CCRCERRIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_DTCRCERRIE_Pos         (1UL)                     /*!< DTCRCERRIE (Bit 1) */
#define SDIO_INTEN_DTCRCERRIE_Msk         (0x2UL)                   /*!< DTCRCERRIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_CMDTMOUTIE_Pos         (2UL)                     /*!< CMDTMOUTIE (Bit 2) */
#define SDIO_INTEN_CMDTMOUTIE_Msk         (0x4UL)                   /*!< CMDTMOUTIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_DTTMOUTIE_Pos          (3UL)                     /*!< DTTMOUTIE (Bit 3) */
#define SDIO_INTEN_DTTMOUTIE_Msk          (0x8UL)                   /*!< DTTMOUTIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_TXUREIE_Pos            (4UL)                     /*!< TXUREIE (Bit 4) */
#define SDIO_INTEN_TXUREIE_Msk            (0x10UL)                  /*!< TXUREIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_RXOREIE_Pos            (5UL)                     /*!< RXOREIE (Bit 5) */
#define SDIO_INTEN_RXOREIE_Msk            (0x20UL)                  /*!< RXOREIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_CMDRECVIE_Pos          (6UL)                     /*!< CMDRECVIE (Bit 6) */
#define SDIO_INTEN_CMDRECVIE_Msk          (0x40UL)                  /*!< CMDRECVIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_CMDSENDIE_Pos          (7UL)                     /*!< CMDSENDIE (Bit 7) */
#define SDIO_INTEN_CMDSENDIE_Msk          (0x80UL)                  /*!< CMDSENDIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_DTENDIE_Pos            (8UL)                     /*!< DTENDIE (Bit 8) */
#define SDIO_INTEN_DTENDIE_Msk            (0x100UL)                 /*!< DTENDIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_STBITEIE_Pos           (9UL)                     /*!< STBITEIE (Bit 9) */
#define SDIO_INTEN_STBITEIE_Msk           (0x200UL)                 /*!< STBITEIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_DTBLKENDIE_Pos         (10UL)                    /*!< DTBLKENDIE (Bit 10) */
#define SDIO_INTEN_DTBLKENDIE_Msk         (0x400UL)                 /*!< DTBLKENDIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_CMDRUNIE_Pos           (11UL)                    /*!< CMDRUNIE (Bit 11) */
#define SDIO_INTEN_CMDRUNIE_Msk           (0x800UL)                 /*!< CMDRUNIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_TXRUNIE_Pos            (12UL)                    /*!< TXRUNIE (Bit 12) */
#define SDIO_INTEN_TXRUNIE_Msk            (0x1000UL)                /*!< TXRUNIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_RXRUNIE_Pos            (13UL)                    /*!< RXRUNIE (Bit 13) */
#define SDIO_INTEN_RXRUNIE_Msk            (0x2000UL)                /*!< RXRUNIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_TFHIE_Pos              (14UL)                    /*!< TFHIE (Bit 14) */
#define SDIO_INTEN_TFHIE_Msk              (0x4000UL)                /*!< TFHIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_RFHIE_Pos              (15UL)                    /*!< RFHIE (Bit 15) */
#define SDIO_INTEN_RFHIE_Msk              (0x8000UL)                /*!< RFHIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_TFFIE_Pos              (16UL)                    /*!< TFFIE (Bit 16) */
#define SDIO_INTEN_TFFIE_Msk              (0x10000UL)               /*!< TFFIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_RFFIE_Pos              (17UL)                    /*!< RFFIE (Bit 17) */
#define SDIO_INTEN_RFFIE_Msk              (0x20000UL)               /*!< RFFIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_TFEIE_Pos              (18UL)                    /*!< TFEIE (Bit 18) */
#define SDIO_INTEN_TFEIE_Msk              (0x40000UL)               /*!< TFEIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_RFEIE_Pos              (19UL)                    /*!< RFEIE (Bit 19) */
#define SDIO_INTEN_RFEIE_Msk              (0x80000UL)               /*!< RFEIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_TXDTVALIE_Pos          (20UL)                    /*!< TXDTVALIE (Bit 20) */
#define SDIO_INTEN_TXDTVALIE_Msk          (0x100000UL)              /*!< TXDTVALIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_RXDTVALIE_Pos          (21UL)                    /*!< RXDTVALIE (Bit 21) */
#define SDIO_INTEN_RXDTVALIE_Msk          (0x200000UL)              /*!< RXDTVALIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_SDIOINTIE_Pos          (22UL)                    /*!< SDIOINTIE (Bit 22) */
#define SDIO_INTEN_SDIOINTIE_Msk          (0x400000UL)              /*!< SDIOINTIE (Bitfield-Mask: 0x01) */
#define SDIO_INTEN_ATAENDIE_Pos           (23UL)                    /*!< ATAENDIE (Bit 23) */
#define SDIO_INTEN_ATAENDIE_Msk           (0x800000UL)              /*!< ATAENDIE (Bitfield-Mask: 0x01) */
/* ========================================================  FIFOCNT  ======================================================== */
#define SDIO_FIFOCNT_FIFOCNT_Pos          (0UL)                     /*!< FIFOCNT (Bit 0) */
#define SDIO_FIFOCNT_FIFOCNT_Msk          (0xffffffUL)              /*!< FIFOCNT (Bitfield-Mask: 0xffffff) */
/* =========================================================  FIFO  ========================================================== */
#define SDIO_FIFO_FIFODT_Pos              (0UL)                     /*!< FIFODT (Bit 0) */
#define SDIO_FIFO_FIFODT_Msk              (0xffffffffUL)            /*!< FIFODT (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define SPI0_CTL0_BDEN_Pos                (15UL)                    /*!< BDEN (Bit 15) */
#define SPI0_CTL0_BDEN_Msk                (0x8000UL)                /*!< BDEN (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_BDOEN_Pos               (14UL)                    /*!< BDOEN (Bit 14) */
#define SPI0_CTL0_BDOEN_Msk               (0x4000UL)                /*!< BDOEN (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_CRCEN_Pos               (13UL)                    /*!< CRCEN (Bit 13) */
#define SPI0_CTL0_CRCEN_Msk               (0x2000UL)                /*!< CRCEN (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_CRCNT_Pos               (12UL)                    /*!< CRCNT (Bit 12) */
#define SPI0_CTL0_CRCNT_Msk               (0x1000UL)                /*!< CRCNT (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_FF16_Pos                (11UL)                    /*!< FF16 (Bit 11) */
#define SPI0_CTL0_FF16_Msk                (0x800UL)                 /*!< FF16 (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_RO_Pos                  (10UL)                    /*!< RO (Bit 10) */
#define SPI0_CTL0_RO_Msk                  (0x400UL)                 /*!< RO (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_SWNSSEN_Pos             (9UL)                     /*!< SWNSSEN (Bit 9) */
#define SPI0_CTL0_SWNSSEN_Msk             (0x200UL)                 /*!< SWNSSEN (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_SWNSS_Pos               (8UL)                     /*!< SWNSS (Bit 8) */
#define SPI0_CTL0_SWNSS_Msk               (0x100UL)                 /*!< SWNSS (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_LF_Pos                  (7UL)                     /*!< LF (Bit 7) */
#define SPI0_CTL0_LF_Msk                  (0x80UL)                  /*!< LF (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_SPIEN_Pos               (6UL)                     /*!< SPIEN (Bit 6) */
#define SPI0_CTL0_SPIEN_Msk               (0x40UL)                  /*!< SPIEN (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_PSC_Pos                 (3UL)                     /*!< PSC (Bit 3) */
#define SPI0_CTL0_PSC_Msk                 (0x38UL)                  /*!< PSC (Bitfield-Mask: 0x07) */
#define SPI0_CTL0_MSTMOD_Pos              (2UL)                     /*!< MSTMOD (Bit 2) */
#define SPI0_CTL0_MSTMOD_Msk              (0x4UL)                   /*!< MSTMOD (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_CKPL_Pos                (1UL)                     /*!< CKPL (Bit 1) */
#define SPI0_CTL0_CKPL_Msk                (0x2UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI0_CTL0_CKPH_Pos                (0UL)                     /*!< CKPH (Bit 0) */
#define SPI0_CTL0_CKPH_Msk                (0x1UL)                   /*!< CKPH (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define SPI0_CTL1_TBEIE_Pos               (7UL)                     /*!< TBEIE (Bit 7) */
#define SPI0_CTL1_TBEIE_Msk               (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define SPI0_CTL1_RBNEIE_Pos              (6UL)                     /*!< RBNEIE (Bit 6) */
#define SPI0_CTL1_RBNEIE_Msk              (0x40UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define SPI0_CTL1_ERRIE_Pos               (5UL)                     /*!< ERRIE (Bit 5) */
#define SPI0_CTL1_ERRIE_Msk               (0x20UL)                  /*!< ERRIE (Bitfield-Mask: 0x01) */
#define SPI0_CTL1_TMOD_Pos                (4UL)                     /*!< TMOD (Bit 4) */
#define SPI0_CTL1_TMOD_Msk                (0x10UL)                  /*!< TMOD (Bitfield-Mask: 0x01) */
#define SPI0_CTL1_NSSDRV_Pos              (2UL)                     /*!< NSSDRV (Bit 2) */
#define SPI0_CTL1_NSSDRV_Msk              (0x4UL)                   /*!< NSSDRV (Bitfield-Mask: 0x01) */
#define SPI0_CTL1_DMATEN_Pos              (1UL)                     /*!< DMATEN (Bit 1) */
#define SPI0_CTL1_DMATEN_Msk              (0x2UL)                   /*!< DMATEN (Bitfield-Mask: 0x01) */
#define SPI0_CTL1_DMAREN_Pos              (0UL)                     /*!< DMAREN (Bit 0) */
#define SPI0_CTL1_DMAREN_Msk              (0x1UL)                   /*!< DMAREN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define SPI0_STAT_FERR_Pos                (8UL)                     /*!< FERR (Bit 8) */
#define SPI0_STAT_FERR_Msk                (0x100UL)                 /*!< FERR (Bitfield-Mask: 0x01) */
#define SPI0_STAT_TRANS_Pos               (7UL)                     /*!< TRANS (Bit 7) */
#define SPI0_STAT_TRANS_Msk               (0x80UL)                  /*!< TRANS (Bitfield-Mask: 0x01) */
#define SPI0_STAT_RXORERR_Pos             (6UL)                     /*!< RXORERR (Bit 6) */
#define SPI0_STAT_RXORERR_Msk             (0x40UL)                  /*!< RXORERR (Bitfield-Mask: 0x01) */
#define SPI0_STAT_CONFERR_Pos             (5UL)                     /*!< CONFERR (Bit 5) */
#define SPI0_STAT_CONFERR_Msk             (0x20UL)                  /*!< CONFERR (Bitfield-Mask: 0x01) */
#define SPI0_STAT_CRCERR_Pos              (4UL)                     /*!< CRCERR (Bit 4) */
#define SPI0_STAT_CRCERR_Msk              (0x10UL)                  /*!< CRCERR (Bitfield-Mask: 0x01) */
#define SPI0_STAT_TXURERR_Pos             (3UL)                     /*!< TXURERR (Bit 3) */
#define SPI0_STAT_TXURERR_Msk             (0x8UL)                   /*!< TXURERR (Bitfield-Mask: 0x01) */
#define SPI0_STAT_I2SCH_Pos               (2UL)                     /*!< I2SCH (Bit 2) */
#define SPI0_STAT_I2SCH_Msk               (0x4UL)                   /*!< I2SCH (Bitfield-Mask: 0x01) */
#define SPI0_STAT_TBE_Pos                 (1UL)                     /*!< TBE (Bit 1) */
#define SPI0_STAT_TBE_Msk                 (0x2UL)                   /*!< TBE (Bitfield-Mask: 0x01) */
#define SPI0_STAT_RBNE_Pos                (0UL)                     /*!< RBNE (Bit 0) */
#define SPI0_STAT_RBNE_Msk                (0x1UL)                   /*!< RBNE (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define SPI0_DATA_SPI_DATA_Pos            (0UL)                     /*!< SPI_DATA (Bit 0) */
#define SPI0_DATA_SPI_DATA_Msk            (0xffffUL)                /*!< SPI_DATA (Bitfield-Mask: 0xffff) */
/* ========================================================  CPCPOLY  ======================================================== */
#define SPI0_CPCPOLY_CPR_Pos              (0UL)                     /*!< CPR (Bit 0) */
#define SPI0_CPCPOLY_CPR_Msk              (0xffffUL)                /*!< CPR (Bitfield-Mask: 0xffff) */
/* =========================================================  RCRC  ========================================================== */
#define SPI0_RCRC_RCR_Pos                 (0UL)                     /*!< RCR (Bit 0) */
#define SPI0_RCRC_RCR_Msk                 (0xffffUL)                /*!< RCR (Bitfield-Mask: 0xffff) */
/* =========================================================  TCRC  ========================================================== */
#define SPI0_TCRC_TCR_Pos                 (0UL)                     /*!< TCR (Bit 0) */
#define SPI0_TCRC_TCR_Msk                 (0xffffUL)                /*!< TCR (Bitfield-Mask: 0xffff) */
/* ========================================================  I2SCTL  ========================================================= */
#define SPI0_I2SCTL_I2SSEL_Pos            (11UL)                    /*!< I2SSEL (Bit 11) */
#define SPI0_I2SCTL_I2SSEL_Msk            (0x800UL)                 /*!< I2SSEL (Bitfield-Mask: 0x01) */
#define SPI0_I2SCTL_I2SEN_Pos             (10UL)                    /*!< I2SEN (Bit 10) */
#define SPI0_I2SCTL_I2SEN_Msk             (0x400UL)                 /*!< I2SEN (Bitfield-Mask: 0x01) */
#define SPI0_I2SCTL_I2SOPMOD_Pos          (8UL)                     /*!< I2SOPMOD (Bit 8) */
#define SPI0_I2SCTL_I2SOPMOD_Msk          (0x300UL)                 /*!< I2SOPMOD (Bitfield-Mask: 0x03) */
#define SPI0_I2SCTL_PCMSMOD_Pos           (7UL)                     /*!< PCMSMOD (Bit 7) */
#define SPI0_I2SCTL_PCMSMOD_Msk           (0x80UL)                  /*!< PCMSMOD (Bitfield-Mask: 0x01) */
#define SPI0_I2SCTL_I2SSTD_Pos            (4UL)                     /*!< I2SSTD (Bit 4) */
#define SPI0_I2SCTL_I2SSTD_Msk            (0x30UL)                  /*!< I2SSTD (Bitfield-Mask: 0x03) */
#define SPI0_I2SCTL_CKPL_Pos              (3UL)                     /*!< CKPL (Bit 3) */
#define SPI0_I2SCTL_CKPL_Msk              (0x8UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI0_I2SCTL_DTLEN_Pos             (1UL)                     /*!< DTLEN (Bit 1) */
#define SPI0_I2SCTL_DTLEN_Msk             (0x6UL)                   /*!< DTLEN (Bitfield-Mask: 0x03) */
#define SPI0_I2SCTL_CHLEN_Pos             (0UL)                     /*!< CHLEN (Bit 0) */
#define SPI0_I2SCTL_CHLEN_Msk             (0x1UL)                   /*!< CHLEN (Bitfield-Mask: 0x01) */
/* ========================================================  I2SPSC  ========================================================= */
#define SPI0_I2SPSC_MCKOEN_Pos            (9UL)                     /*!< MCKOEN (Bit 9) */
#define SPI0_I2SPSC_MCKOEN_Msk            (0x200UL)                 /*!< MCKOEN (Bitfield-Mask: 0x01) */
#define SPI0_I2SPSC_OF_Pos                (8UL)                     /*!< OF (Bit 8) */
#define SPI0_I2SPSC_OF_Msk                (0x100UL)                 /*!< OF (Bitfield-Mask: 0x01) */
#define SPI0_I2SPSC_DIV_Pos               (0UL)                     /*!< DIV (Bit 0) */
#define SPI0_I2SPSC_DIV_Msk               (0xffUL)                  /*!< DIV (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define SPI1_CTL0_BDEN_Pos                (15UL)                    /*!< BDEN (Bit 15) */
#define SPI1_CTL0_BDEN_Msk                (0x8000UL)                /*!< BDEN (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_BDOEN_Pos               (14UL)                    /*!< BDOEN (Bit 14) */
#define SPI1_CTL0_BDOEN_Msk               (0x4000UL)                /*!< BDOEN (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_CRCEN_Pos               (13UL)                    /*!< CRCEN (Bit 13) */
#define SPI1_CTL0_CRCEN_Msk               (0x2000UL)                /*!< CRCEN (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_CRCNT_Pos               (12UL)                    /*!< CRCNT (Bit 12) */
#define SPI1_CTL0_CRCNT_Msk               (0x1000UL)                /*!< CRCNT (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_FF16_Pos                (11UL)                    /*!< FF16 (Bit 11) */
#define SPI1_CTL0_FF16_Msk                (0x800UL)                 /*!< FF16 (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_RO_Pos                  (10UL)                    /*!< RO (Bit 10) */
#define SPI1_CTL0_RO_Msk                  (0x400UL)                 /*!< RO (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_SWNSSEN_Pos             (9UL)                     /*!< SWNSSEN (Bit 9) */
#define SPI1_CTL0_SWNSSEN_Msk             (0x200UL)                 /*!< SWNSSEN (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_SWNSS_Pos               (8UL)                     /*!< SWNSS (Bit 8) */
#define SPI1_CTL0_SWNSS_Msk               (0x100UL)                 /*!< SWNSS (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_LF_Pos                  (7UL)                     /*!< LF (Bit 7) */
#define SPI1_CTL0_LF_Msk                  (0x80UL)                  /*!< LF (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_SPIEN_Pos               (6UL)                     /*!< SPIEN (Bit 6) */
#define SPI1_CTL0_SPIEN_Msk               (0x40UL)                  /*!< SPIEN (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_PSC_Pos                 (3UL)                     /*!< PSC (Bit 3) */
#define SPI1_CTL0_PSC_Msk                 (0x38UL)                  /*!< PSC (Bitfield-Mask: 0x07) */
#define SPI1_CTL0_MSTMOD_Pos              (2UL)                     /*!< MSTMOD (Bit 2) */
#define SPI1_CTL0_MSTMOD_Msk              (0x4UL)                   /*!< MSTMOD (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_CKPL_Pos                (1UL)                     /*!< CKPL (Bit 1) */
#define SPI1_CTL0_CKPL_Msk                (0x2UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI1_CTL0_CKPH_Pos                (0UL)                     /*!< CKPH (Bit 0) */
#define SPI1_CTL0_CKPH_Msk                (0x1UL)                   /*!< CKPH (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define SPI1_CTL1_TBEIE_Pos               (7UL)                     /*!< TBEIE (Bit 7) */
#define SPI1_CTL1_TBEIE_Msk               (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define SPI1_CTL1_RBNEIE_Pos              (6UL)                     /*!< RBNEIE (Bit 6) */
#define SPI1_CTL1_RBNEIE_Msk              (0x40UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define SPI1_CTL1_ERRIE_Pos               (5UL)                     /*!< ERRIE (Bit 5) */
#define SPI1_CTL1_ERRIE_Msk               (0x20UL)                  /*!< ERRIE (Bitfield-Mask: 0x01) */
#define SPI1_CTL1_TMOD_Pos                (4UL)                     /*!< TMOD (Bit 4) */
#define SPI1_CTL1_TMOD_Msk                (0x10UL)                  /*!< TMOD (Bitfield-Mask: 0x01) */
#define SPI1_CTL1_NSSDRV_Pos              (2UL)                     /*!< NSSDRV (Bit 2) */
#define SPI1_CTL1_NSSDRV_Msk              (0x4UL)                   /*!< NSSDRV (Bitfield-Mask: 0x01) */
#define SPI1_CTL1_DMATEN_Pos              (1UL)                     /*!< DMATEN (Bit 1) */
#define SPI1_CTL1_DMATEN_Msk              (0x2UL)                   /*!< DMATEN (Bitfield-Mask: 0x01) */
#define SPI1_CTL1_DMAREN_Pos              (0UL)                     /*!< DMAREN (Bit 0) */
#define SPI1_CTL1_DMAREN_Msk              (0x1UL)                   /*!< DMAREN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define SPI1_STAT_FERR_Pos                (8UL)                     /*!< FERR (Bit 8) */
#define SPI1_STAT_FERR_Msk                (0x100UL)                 /*!< FERR (Bitfield-Mask: 0x01) */
#define SPI1_STAT_TRANS_Pos               (7UL)                     /*!< TRANS (Bit 7) */
#define SPI1_STAT_TRANS_Msk               (0x80UL)                  /*!< TRANS (Bitfield-Mask: 0x01) */
#define SPI1_STAT_RXORERR_Pos             (6UL)                     /*!< RXORERR (Bit 6) */
#define SPI1_STAT_RXORERR_Msk             (0x40UL)                  /*!< RXORERR (Bitfield-Mask: 0x01) */
#define SPI1_STAT_CONFERR_Pos             (5UL)                     /*!< CONFERR (Bit 5) */
#define SPI1_STAT_CONFERR_Msk             (0x20UL)                  /*!< CONFERR (Bitfield-Mask: 0x01) */
#define SPI1_STAT_CRCERR_Pos              (4UL)                     /*!< CRCERR (Bit 4) */
#define SPI1_STAT_CRCERR_Msk              (0x10UL)                  /*!< CRCERR (Bitfield-Mask: 0x01) */
#define SPI1_STAT_TXURERR_Pos             (3UL)                     /*!< TXURERR (Bit 3) */
#define SPI1_STAT_TXURERR_Msk             (0x8UL)                   /*!< TXURERR (Bitfield-Mask: 0x01) */
#define SPI1_STAT_I2SCH_Pos               (2UL)                     /*!< I2SCH (Bit 2) */
#define SPI1_STAT_I2SCH_Msk               (0x4UL)                   /*!< I2SCH (Bitfield-Mask: 0x01) */
#define SPI1_STAT_TBE_Pos                 (1UL)                     /*!< TBE (Bit 1) */
#define SPI1_STAT_TBE_Msk                 (0x2UL)                   /*!< TBE (Bitfield-Mask: 0x01) */
#define SPI1_STAT_RBNE_Pos                (0UL)                     /*!< RBNE (Bit 0) */
#define SPI1_STAT_RBNE_Msk                (0x1UL)                   /*!< RBNE (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define SPI1_DATA_SPI_DATA_Pos            (0UL)                     /*!< SPI_DATA (Bit 0) */
#define SPI1_DATA_SPI_DATA_Msk            (0xffffUL)                /*!< SPI_DATA (Bitfield-Mask: 0xffff) */
/* ========================================================  CPCPOLY  ======================================================== */
#define SPI1_CPCPOLY_CPR_Pos              (0UL)                     /*!< CPR (Bit 0) */
#define SPI1_CPCPOLY_CPR_Msk              (0xffffUL)                /*!< CPR (Bitfield-Mask: 0xffff) */
/* =========================================================  RCRC  ========================================================== */
#define SPI1_RCRC_RCR_Pos                 (0UL)                     /*!< RCR (Bit 0) */
#define SPI1_RCRC_RCR_Msk                 (0xffffUL)                /*!< RCR (Bitfield-Mask: 0xffff) */
/* =========================================================  TCRC  ========================================================== */
#define SPI1_TCRC_TCR_Pos                 (0UL)                     /*!< TCR (Bit 0) */
#define SPI1_TCRC_TCR_Msk                 (0xffffUL)                /*!< TCR (Bitfield-Mask: 0xffff) */
/* ========================================================  I2SCTL  ========================================================= */
#define SPI1_I2SCTL_I2SSEL_Pos            (11UL)                    /*!< I2SSEL (Bit 11) */
#define SPI1_I2SCTL_I2SSEL_Msk            (0x800UL)                 /*!< I2SSEL (Bitfield-Mask: 0x01) */
#define SPI1_I2SCTL_I2SEN_Pos             (10UL)                    /*!< I2SEN (Bit 10) */
#define SPI1_I2SCTL_I2SEN_Msk             (0x400UL)                 /*!< I2SEN (Bitfield-Mask: 0x01) */
#define SPI1_I2SCTL_I2SOPMOD_Pos          (8UL)                     /*!< I2SOPMOD (Bit 8) */
#define SPI1_I2SCTL_I2SOPMOD_Msk          (0x300UL)                 /*!< I2SOPMOD (Bitfield-Mask: 0x03) */
#define SPI1_I2SCTL_PCMSMOD_Pos           (7UL)                     /*!< PCMSMOD (Bit 7) */
#define SPI1_I2SCTL_PCMSMOD_Msk           (0x80UL)                  /*!< PCMSMOD (Bitfield-Mask: 0x01) */
#define SPI1_I2SCTL_I2SSTD_Pos            (4UL)                     /*!< I2SSTD (Bit 4) */
#define SPI1_I2SCTL_I2SSTD_Msk            (0x30UL)                  /*!< I2SSTD (Bitfield-Mask: 0x03) */
#define SPI1_I2SCTL_CKPL_Pos              (3UL)                     /*!< CKPL (Bit 3) */
#define SPI1_I2SCTL_CKPL_Msk              (0x8UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI1_I2SCTL_DTLEN_Pos             (1UL)                     /*!< DTLEN (Bit 1) */
#define SPI1_I2SCTL_DTLEN_Msk             (0x6UL)                   /*!< DTLEN (Bitfield-Mask: 0x03) */
#define SPI1_I2SCTL_CHLEN_Pos             (0UL)                     /*!< CHLEN (Bit 0) */
#define SPI1_I2SCTL_CHLEN_Msk             (0x1UL)                   /*!< CHLEN (Bitfield-Mask: 0x01) */
/* ========================================================  I2SPSC  ========================================================= */
#define SPI1_I2SPSC_MCKOEN_Pos            (9UL)                     /*!< MCKOEN (Bit 9) */
#define SPI1_I2SPSC_MCKOEN_Msk            (0x200UL)                 /*!< MCKOEN (Bitfield-Mask: 0x01) */
#define SPI1_I2SPSC_OF_Pos                (8UL)                     /*!< OF (Bit 8) */
#define SPI1_I2SPSC_OF_Msk                (0x100UL)                 /*!< OF (Bitfield-Mask: 0x01) */
#define SPI1_I2SPSC_DIV_Pos               (0UL)                     /*!< DIV (Bit 0) */
#define SPI1_I2SPSC_DIV_Msk               (0xffUL)                  /*!< DIV (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                           SPI2                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define SPI2_CTL0_BDEN_Pos                (15UL)                    /*!< BDEN (Bit 15) */
#define SPI2_CTL0_BDEN_Msk                (0x8000UL)                /*!< BDEN (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_BDOEN_Pos               (14UL)                    /*!< BDOEN (Bit 14) */
#define SPI2_CTL0_BDOEN_Msk               (0x4000UL)                /*!< BDOEN (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_CRCEN_Pos               (13UL)                    /*!< CRCEN (Bit 13) */
#define SPI2_CTL0_CRCEN_Msk               (0x2000UL)                /*!< CRCEN (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_CRCNT_Pos               (12UL)                    /*!< CRCNT (Bit 12) */
#define SPI2_CTL0_CRCNT_Msk               (0x1000UL)                /*!< CRCNT (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_FF16_Pos                (11UL)                    /*!< FF16 (Bit 11) */
#define SPI2_CTL0_FF16_Msk                (0x800UL)                 /*!< FF16 (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_RO_Pos                  (10UL)                    /*!< RO (Bit 10) */
#define SPI2_CTL0_RO_Msk                  (0x400UL)                 /*!< RO (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_SWNSSEN_Pos             (9UL)                     /*!< SWNSSEN (Bit 9) */
#define SPI2_CTL0_SWNSSEN_Msk             (0x200UL)                 /*!< SWNSSEN (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_SWNSS_Pos               (8UL)                     /*!< SWNSS (Bit 8) */
#define SPI2_CTL0_SWNSS_Msk               (0x100UL)                 /*!< SWNSS (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_LF_Pos                  (7UL)                     /*!< LF (Bit 7) */
#define SPI2_CTL0_LF_Msk                  (0x80UL)                  /*!< LF (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_SPIEN_Pos               (6UL)                     /*!< SPIEN (Bit 6) */
#define SPI2_CTL0_SPIEN_Msk               (0x40UL)                  /*!< SPIEN (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_PSC_Pos                 (3UL)                     /*!< PSC (Bit 3) */
#define SPI2_CTL0_PSC_Msk                 (0x38UL)                  /*!< PSC (Bitfield-Mask: 0x07) */
#define SPI2_CTL0_MSTMOD_Pos              (2UL)                     /*!< MSTMOD (Bit 2) */
#define SPI2_CTL0_MSTMOD_Msk              (0x4UL)                   /*!< MSTMOD (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_CKPL_Pos                (1UL)                     /*!< CKPL (Bit 1) */
#define SPI2_CTL0_CKPL_Msk                (0x2UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI2_CTL0_CKPH_Pos                (0UL)                     /*!< CKPH (Bit 0) */
#define SPI2_CTL0_CKPH_Msk                (0x1UL)                   /*!< CKPH (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define SPI2_CTL1_TBEIE_Pos               (7UL)                     /*!< TBEIE (Bit 7) */
#define SPI2_CTL1_TBEIE_Msk               (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define SPI2_CTL1_RBNEIE_Pos              (6UL)                     /*!< RBNEIE (Bit 6) */
#define SPI2_CTL1_RBNEIE_Msk              (0x40UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define SPI2_CTL1_ERRIE_Pos               (5UL)                     /*!< ERRIE (Bit 5) */
#define SPI2_CTL1_ERRIE_Msk               (0x20UL)                  /*!< ERRIE (Bitfield-Mask: 0x01) */
#define SPI2_CTL1_TMOD_Pos                (4UL)                     /*!< TMOD (Bit 4) */
#define SPI2_CTL1_TMOD_Msk                (0x10UL)                  /*!< TMOD (Bitfield-Mask: 0x01) */
#define SPI2_CTL1_NSSDRV_Pos              (2UL)                     /*!< NSSDRV (Bit 2) */
#define SPI2_CTL1_NSSDRV_Msk              (0x4UL)                   /*!< NSSDRV (Bitfield-Mask: 0x01) */
#define SPI2_CTL1_DMATEN_Pos              (1UL)                     /*!< DMATEN (Bit 1) */
#define SPI2_CTL1_DMATEN_Msk              (0x2UL)                   /*!< DMATEN (Bitfield-Mask: 0x01) */
#define SPI2_CTL1_DMAREN_Pos              (0UL)                     /*!< DMAREN (Bit 0) */
#define SPI2_CTL1_DMAREN_Msk              (0x1UL)                   /*!< DMAREN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define SPI2_STAT_FERR_Pos                (8UL)                     /*!< FERR (Bit 8) */
#define SPI2_STAT_FERR_Msk                (0x100UL)                 /*!< FERR (Bitfield-Mask: 0x01) */
#define SPI2_STAT_TRANS_Pos               (7UL)                     /*!< TRANS (Bit 7) */
#define SPI2_STAT_TRANS_Msk               (0x80UL)                  /*!< TRANS (Bitfield-Mask: 0x01) */
#define SPI2_STAT_RXORERR_Pos             (6UL)                     /*!< RXORERR (Bit 6) */
#define SPI2_STAT_RXORERR_Msk             (0x40UL)                  /*!< RXORERR (Bitfield-Mask: 0x01) */
#define SPI2_STAT_CONFERR_Pos             (5UL)                     /*!< CONFERR (Bit 5) */
#define SPI2_STAT_CONFERR_Msk             (0x20UL)                  /*!< CONFERR (Bitfield-Mask: 0x01) */
#define SPI2_STAT_CRCERR_Pos              (4UL)                     /*!< CRCERR (Bit 4) */
#define SPI2_STAT_CRCERR_Msk              (0x10UL)                  /*!< CRCERR (Bitfield-Mask: 0x01) */
#define SPI2_STAT_TXURERR_Pos             (3UL)                     /*!< TXURERR (Bit 3) */
#define SPI2_STAT_TXURERR_Msk             (0x8UL)                   /*!< TXURERR (Bitfield-Mask: 0x01) */
#define SPI2_STAT_I2SCH_Pos               (2UL)                     /*!< I2SCH (Bit 2) */
#define SPI2_STAT_I2SCH_Msk               (0x4UL)                   /*!< I2SCH (Bitfield-Mask: 0x01) */
#define SPI2_STAT_TBE_Pos                 (1UL)                     /*!< TBE (Bit 1) */
#define SPI2_STAT_TBE_Msk                 (0x2UL)                   /*!< TBE (Bitfield-Mask: 0x01) */
#define SPI2_STAT_RBNE_Pos                (0UL)                     /*!< RBNE (Bit 0) */
#define SPI2_STAT_RBNE_Msk                (0x1UL)                   /*!< RBNE (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define SPI2_DATA_SPI_DATA_Pos            (0UL)                     /*!< SPI_DATA (Bit 0) */
#define SPI2_DATA_SPI_DATA_Msk            (0xffffUL)                /*!< SPI_DATA (Bitfield-Mask: 0xffff) */
/* ========================================================  CPCPOLY  ======================================================== */
#define SPI2_CPCPOLY_CPR_Pos              (0UL)                     /*!< CPR (Bit 0) */
#define SPI2_CPCPOLY_CPR_Msk              (0xffffUL)                /*!< CPR (Bitfield-Mask: 0xffff) */
/* =========================================================  RCRC  ========================================================== */
#define SPI2_RCRC_RCR_Pos                 (0UL)                     /*!< RCR (Bit 0) */
#define SPI2_RCRC_RCR_Msk                 (0xffffUL)                /*!< RCR (Bitfield-Mask: 0xffff) */
/* =========================================================  TCRC  ========================================================== */
#define SPI2_TCRC_TCR_Pos                 (0UL)                     /*!< TCR (Bit 0) */
#define SPI2_TCRC_TCR_Msk                 (0xffffUL)                /*!< TCR (Bitfield-Mask: 0xffff) */
/* ========================================================  I2SCTL  ========================================================= */
#define SPI2_I2SCTL_I2SSEL_Pos            (11UL)                    /*!< I2SSEL (Bit 11) */
#define SPI2_I2SCTL_I2SSEL_Msk            (0x800UL)                 /*!< I2SSEL (Bitfield-Mask: 0x01) */
#define SPI2_I2SCTL_I2SEN_Pos             (10UL)                    /*!< I2SEN (Bit 10) */
#define SPI2_I2SCTL_I2SEN_Msk             (0x400UL)                 /*!< I2SEN (Bitfield-Mask: 0x01) */
#define SPI2_I2SCTL_I2SOPMOD_Pos          (8UL)                     /*!< I2SOPMOD (Bit 8) */
#define SPI2_I2SCTL_I2SOPMOD_Msk          (0x300UL)                 /*!< I2SOPMOD (Bitfield-Mask: 0x03) */
#define SPI2_I2SCTL_PCMSMOD_Pos           (7UL)                     /*!< PCMSMOD (Bit 7) */
#define SPI2_I2SCTL_PCMSMOD_Msk           (0x80UL)                  /*!< PCMSMOD (Bitfield-Mask: 0x01) */
#define SPI2_I2SCTL_I2SSTD_Pos            (4UL)                     /*!< I2SSTD (Bit 4) */
#define SPI2_I2SCTL_I2SSTD_Msk            (0x30UL)                  /*!< I2SSTD (Bitfield-Mask: 0x03) */
#define SPI2_I2SCTL_CKPL_Pos              (3UL)                     /*!< CKPL (Bit 3) */
#define SPI2_I2SCTL_CKPL_Msk              (0x8UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI2_I2SCTL_DTLEN_Pos             (1UL)                     /*!< DTLEN (Bit 1) */
#define SPI2_I2SCTL_DTLEN_Msk             (0x6UL)                   /*!< DTLEN (Bitfield-Mask: 0x03) */
#define SPI2_I2SCTL_CHLEN_Pos             (0UL)                     /*!< CHLEN (Bit 0) */
#define SPI2_I2SCTL_CHLEN_Msk             (0x1UL)                   /*!< CHLEN (Bitfield-Mask: 0x01) */
/* ========================================================  I2SPSC  ========================================================= */
#define SPI2_I2SPSC_MCKOEN_Pos            (9UL)                     /*!< MCKOEN (Bit 9) */
#define SPI2_I2SPSC_MCKOEN_Msk            (0x200UL)                 /*!< MCKOEN (Bitfield-Mask: 0x01) */
#define SPI2_I2SPSC_OF_Pos                (8UL)                     /*!< OF (Bit 8) */
#define SPI2_I2SPSC_OF_Msk                (0x100UL)                 /*!< OF (Bitfield-Mask: 0x01) */
#define SPI2_I2SPSC_DIV_Pos               (0UL)                     /*!< DIV (Bit 0) */
#define SPI2_I2SPSC_DIV_Msk               (0xffUL)                  /*!< DIV (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                           SPI3                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define SPI3_CTL0_BDEN_Pos                (15UL)                    /*!< BDEN (Bit 15) */
#define SPI3_CTL0_BDEN_Msk                (0x8000UL)                /*!< BDEN (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_BDOEN_Pos               (14UL)                    /*!< BDOEN (Bit 14) */
#define SPI3_CTL0_BDOEN_Msk               (0x4000UL)                /*!< BDOEN (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_CRCEN_Pos               (13UL)                    /*!< CRCEN (Bit 13) */
#define SPI3_CTL0_CRCEN_Msk               (0x2000UL)                /*!< CRCEN (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_CRCNT_Pos               (12UL)                    /*!< CRCNT (Bit 12) */
#define SPI3_CTL0_CRCNT_Msk               (0x1000UL)                /*!< CRCNT (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_FF16_Pos                (11UL)                    /*!< FF16 (Bit 11) */
#define SPI3_CTL0_FF16_Msk                (0x800UL)                 /*!< FF16 (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_RO_Pos                  (10UL)                    /*!< RO (Bit 10) */
#define SPI3_CTL0_RO_Msk                  (0x400UL)                 /*!< RO (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_SWNSSEN_Pos             (9UL)                     /*!< SWNSSEN (Bit 9) */
#define SPI3_CTL0_SWNSSEN_Msk             (0x200UL)                 /*!< SWNSSEN (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_SWNSS_Pos               (8UL)                     /*!< SWNSS (Bit 8) */
#define SPI3_CTL0_SWNSS_Msk               (0x100UL)                 /*!< SWNSS (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_LF_Pos                  (7UL)                     /*!< LF (Bit 7) */
#define SPI3_CTL0_LF_Msk                  (0x80UL)                  /*!< LF (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_SPIEN_Pos               (6UL)                     /*!< SPIEN (Bit 6) */
#define SPI3_CTL0_SPIEN_Msk               (0x40UL)                  /*!< SPIEN (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_PSC_Pos                 (3UL)                     /*!< PSC (Bit 3) */
#define SPI3_CTL0_PSC_Msk                 (0x38UL)                  /*!< PSC (Bitfield-Mask: 0x07) */
#define SPI3_CTL0_MSTMOD_Pos              (2UL)                     /*!< MSTMOD (Bit 2) */
#define SPI3_CTL0_MSTMOD_Msk              (0x4UL)                   /*!< MSTMOD (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_CKPL_Pos                (1UL)                     /*!< CKPL (Bit 1) */
#define SPI3_CTL0_CKPL_Msk                (0x2UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI3_CTL0_CKPH_Pos                (0UL)                     /*!< CKPH (Bit 0) */
#define SPI3_CTL0_CKPH_Msk                (0x1UL)                   /*!< CKPH (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define SPI3_CTL1_TBEIE_Pos               (7UL)                     /*!< TBEIE (Bit 7) */
#define SPI3_CTL1_TBEIE_Msk               (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define SPI3_CTL1_RBNEIE_Pos              (6UL)                     /*!< RBNEIE (Bit 6) */
#define SPI3_CTL1_RBNEIE_Msk              (0x40UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define SPI3_CTL1_ERRIE_Pos               (5UL)                     /*!< ERRIE (Bit 5) */
#define SPI3_CTL1_ERRIE_Msk               (0x20UL)                  /*!< ERRIE (Bitfield-Mask: 0x01) */
#define SPI3_CTL1_TMOD_Pos                (4UL)                     /*!< TMOD (Bit 4) */
#define SPI3_CTL1_TMOD_Msk                (0x10UL)                  /*!< TMOD (Bitfield-Mask: 0x01) */
#define SPI3_CTL1_NSSDRV_Pos              (2UL)                     /*!< NSSDRV (Bit 2) */
#define SPI3_CTL1_NSSDRV_Msk              (0x4UL)                   /*!< NSSDRV (Bitfield-Mask: 0x01) */
#define SPI3_CTL1_DMATEN_Pos              (1UL)                     /*!< DMATEN (Bit 1) */
#define SPI3_CTL1_DMATEN_Msk              (0x2UL)                   /*!< DMATEN (Bitfield-Mask: 0x01) */
#define SPI3_CTL1_DMAREN_Pos              (0UL)                     /*!< DMAREN (Bit 0) */
#define SPI3_CTL1_DMAREN_Msk              (0x1UL)                   /*!< DMAREN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define SPI3_STAT_FERR_Pos                (8UL)                     /*!< FERR (Bit 8) */
#define SPI3_STAT_FERR_Msk                (0x100UL)                 /*!< FERR (Bitfield-Mask: 0x01) */
#define SPI3_STAT_TRANS_Pos               (7UL)                     /*!< TRANS (Bit 7) */
#define SPI3_STAT_TRANS_Msk               (0x80UL)                  /*!< TRANS (Bitfield-Mask: 0x01) */
#define SPI3_STAT_RXORERR_Pos             (6UL)                     /*!< RXORERR (Bit 6) */
#define SPI3_STAT_RXORERR_Msk             (0x40UL)                  /*!< RXORERR (Bitfield-Mask: 0x01) */
#define SPI3_STAT_CONFERR_Pos             (5UL)                     /*!< CONFERR (Bit 5) */
#define SPI3_STAT_CONFERR_Msk             (0x20UL)                  /*!< CONFERR (Bitfield-Mask: 0x01) */
#define SPI3_STAT_CRCERR_Pos              (4UL)                     /*!< CRCERR (Bit 4) */
#define SPI3_STAT_CRCERR_Msk              (0x10UL)                  /*!< CRCERR (Bitfield-Mask: 0x01) */
#define SPI3_STAT_TXURERR_Pos             (3UL)                     /*!< TXURERR (Bit 3) */
#define SPI3_STAT_TXURERR_Msk             (0x8UL)                   /*!< TXURERR (Bitfield-Mask: 0x01) */
#define SPI3_STAT_I2SCH_Pos               (2UL)                     /*!< I2SCH (Bit 2) */
#define SPI3_STAT_I2SCH_Msk               (0x4UL)                   /*!< I2SCH (Bitfield-Mask: 0x01) */
#define SPI3_STAT_TBE_Pos                 (1UL)                     /*!< TBE (Bit 1) */
#define SPI3_STAT_TBE_Msk                 (0x2UL)                   /*!< TBE (Bitfield-Mask: 0x01) */
#define SPI3_STAT_RBNE_Pos                (0UL)                     /*!< RBNE (Bit 0) */
#define SPI3_STAT_RBNE_Msk                (0x1UL)                   /*!< RBNE (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define SPI3_DATA_SPI_DATA_Pos            (0UL)                     /*!< SPI_DATA (Bit 0) */
#define SPI3_DATA_SPI_DATA_Msk            (0xffffUL)                /*!< SPI_DATA (Bitfield-Mask: 0xffff) */
/* ========================================================  CPCPOLY  ======================================================== */
#define SPI3_CPCPOLY_CPR_Pos              (0UL)                     /*!< CPR (Bit 0) */
#define SPI3_CPCPOLY_CPR_Msk              (0xffffUL)                /*!< CPR (Bitfield-Mask: 0xffff) */
/* =========================================================  RCRC  ========================================================== */
#define SPI3_RCRC_RCR_Pos                 (0UL)                     /*!< RCR (Bit 0) */
#define SPI3_RCRC_RCR_Msk                 (0xffffUL)                /*!< RCR (Bitfield-Mask: 0xffff) */
/* =========================================================  TCRC  ========================================================== */
#define SPI3_TCRC_TCR_Pos                 (0UL)                     /*!< TCR (Bit 0) */
#define SPI3_TCRC_TCR_Msk                 (0xffffUL)                /*!< TCR (Bitfield-Mask: 0xffff) */
/* ========================================================  I2SCTL  ========================================================= */
#define SPI3_I2SCTL_I2SSEL_Pos            (11UL)                    /*!< I2SSEL (Bit 11) */
#define SPI3_I2SCTL_I2SSEL_Msk            (0x800UL)                 /*!< I2SSEL (Bitfield-Mask: 0x01) */
#define SPI3_I2SCTL_I2SEN_Pos             (10UL)                    /*!< I2SEN (Bit 10) */
#define SPI3_I2SCTL_I2SEN_Msk             (0x400UL)                 /*!< I2SEN (Bitfield-Mask: 0x01) */
#define SPI3_I2SCTL_I2SOPMOD_Pos          (8UL)                     /*!< I2SOPMOD (Bit 8) */
#define SPI3_I2SCTL_I2SOPMOD_Msk          (0x300UL)                 /*!< I2SOPMOD (Bitfield-Mask: 0x03) */
#define SPI3_I2SCTL_PCMSMOD_Pos           (7UL)                     /*!< PCMSMOD (Bit 7) */
#define SPI3_I2SCTL_PCMSMOD_Msk           (0x80UL)                  /*!< PCMSMOD (Bitfield-Mask: 0x01) */
#define SPI3_I2SCTL_I2SSTD_Pos            (4UL)                     /*!< I2SSTD (Bit 4) */
#define SPI3_I2SCTL_I2SSTD_Msk            (0x30UL)                  /*!< I2SSTD (Bitfield-Mask: 0x03) */
#define SPI3_I2SCTL_CKPL_Pos              (3UL)                     /*!< CKPL (Bit 3) */
#define SPI3_I2SCTL_CKPL_Msk              (0x8UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI3_I2SCTL_DTLEN_Pos             (1UL)                     /*!< DTLEN (Bit 1) */
#define SPI3_I2SCTL_DTLEN_Msk             (0x6UL)                   /*!< DTLEN (Bitfield-Mask: 0x03) */
#define SPI3_I2SCTL_CHLEN_Pos             (0UL)                     /*!< CHLEN (Bit 0) */
#define SPI3_I2SCTL_CHLEN_Msk             (0x1UL)                   /*!< CHLEN (Bitfield-Mask: 0x01) */
/* ========================================================  I2SPSC  ========================================================= */
#define SPI3_I2SPSC_MCKOEN_Pos            (9UL)                     /*!< MCKOEN (Bit 9) */
#define SPI3_I2SPSC_MCKOEN_Msk            (0x200UL)                 /*!< MCKOEN (Bitfield-Mask: 0x01) */
#define SPI3_I2SPSC_OF_Pos                (8UL)                     /*!< OF (Bit 8) */
#define SPI3_I2SPSC_OF_Msk                (0x100UL)                 /*!< OF (Bitfield-Mask: 0x01) */
#define SPI3_I2SPSC_DIV_Pos               (0UL)                     /*!< DIV (Bit 0) */
#define SPI3_I2SPSC_DIV_Msk               (0xffUL)                  /*!< DIV (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                           SPI4                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define SPI4_CTL0_BDEN_Pos                (15UL)                    /*!< BDEN (Bit 15) */
#define SPI4_CTL0_BDEN_Msk                (0x8000UL)                /*!< BDEN (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_BDOEN_Pos               (14UL)                    /*!< BDOEN (Bit 14) */
#define SPI4_CTL0_BDOEN_Msk               (0x4000UL)                /*!< BDOEN (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_CRCEN_Pos               (13UL)                    /*!< CRCEN (Bit 13) */
#define SPI4_CTL0_CRCEN_Msk               (0x2000UL)                /*!< CRCEN (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_CRCNT_Pos               (12UL)                    /*!< CRCNT (Bit 12) */
#define SPI4_CTL0_CRCNT_Msk               (0x1000UL)                /*!< CRCNT (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_FF16_Pos                (11UL)                    /*!< FF16 (Bit 11) */
#define SPI4_CTL0_FF16_Msk                (0x800UL)                 /*!< FF16 (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_RO_Pos                  (10UL)                    /*!< RO (Bit 10) */
#define SPI4_CTL0_RO_Msk                  (0x400UL)                 /*!< RO (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_SWNSSEN_Pos             (9UL)                     /*!< SWNSSEN (Bit 9) */
#define SPI4_CTL0_SWNSSEN_Msk             (0x200UL)                 /*!< SWNSSEN (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_SWNSS_Pos               (8UL)                     /*!< SWNSS (Bit 8) */
#define SPI4_CTL0_SWNSS_Msk               (0x100UL)                 /*!< SWNSS (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_LF_Pos                  (7UL)                     /*!< LF (Bit 7) */
#define SPI4_CTL0_LF_Msk                  (0x80UL)                  /*!< LF (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_SPIEN_Pos               (6UL)                     /*!< SPIEN (Bit 6) */
#define SPI4_CTL0_SPIEN_Msk               (0x40UL)                  /*!< SPIEN (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_PSC_Pos                 (3UL)                     /*!< PSC (Bit 3) */
#define SPI4_CTL0_PSC_Msk                 (0x38UL)                  /*!< PSC (Bitfield-Mask: 0x07) */
#define SPI4_CTL0_MSTMOD_Pos              (2UL)                     /*!< MSTMOD (Bit 2) */
#define SPI4_CTL0_MSTMOD_Msk              (0x4UL)                   /*!< MSTMOD (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_CKPL_Pos                (1UL)                     /*!< CKPL (Bit 1) */
#define SPI4_CTL0_CKPL_Msk                (0x2UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI4_CTL0_CKPH_Pos                (0UL)                     /*!< CKPH (Bit 0) */
#define SPI4_CTL0_CKPH_Msk                (0x1UL)                   /*!< CKPH (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define SPI4_CTL1_TBEIE_Pos               (7UL)                     /*!< TBEIE (Bit 7) */
#define SPI4_CTL1_TBEIE_Msk               (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define SPI4_CTL1_RBNEIE_Pos              (6UL)                     /*!< RBNEIE (Bit 6) */
#define SPI4_CTL1_RBNEIE_Msk              (0x40UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define SPI4_CTL1_ERRIE_Pos               (5UL)                     /*!< ERRIE (Bit 5) */
#define SPI4_CTL1_ERRIE_Msk               (0x20UL)                  /*!< ERRIE (Bitfield-Mask: 0x01) */
#define SPI4_CTL1_TMOD_Pos                (4UL)                     /*!< TMOD (Bit 4) */
#define SPI4_CTL1_TMOD_Msk                (0x10UL)                  /*!< TMOD (Bitfield-Mask: 0x01) */
#define SPI4_CTL1_NSSDRV_Pos              (2UL)                     /*!< NSSDRV (Bit 2) */
#define SPI4_CTL1_NSSDRV_Msk              (0x4UL)                   /*!< NSSDRV (Bitfield-Mask: 0x01) */
#define SPI4_CTL1_DMATEN_Pos              (1UL)                     /*!< DMATEN (Bit 1) */
#define SPI4_CTL1_DMATEN_Msk              (0x2UL)                   /*!< DMATEN (Bitfield-Mask: 0x01) */
#define SPI4_CTL1_DMAREN_Pos              (0UL)                     /*!< DMAREN (Bit 0) */
#define SPI4_CTL1_DMAREN_Msk              (0x1UL)                   /*!< DMAREN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define SPI4_STAT_FERR_Pos                (8UL)                     /*!< FERR (Bit 8) */
#define SPI4_STAT_FERR_Msk                (0x100UL)                 /*!< FERR (Bitfield-Mask: 0x01) */
#define SPI4_STAT_TRANS_Pos               (7UL)                     /*!< TRANS (Bit 7) */
#define SPI4_STAT_TRANS_Msk               (0x80UL)                  /*!< TRANS (Bitfield-Mask: 0x01) */
#define SPI4_STAT_RXORERR_Pos             (6UL)                     /*!< RXORERR (Bit 6) */
#define SPI4_STAT_RXORERR_Msk             (0x40UL)                  /*!< RXORERR (Bitfield-Mask: 0x01) */
#define SPI4_STAT_CONFERR_Pos             (5UL)                     /*!< CONFERR (Bit 5) */
#define SPI4_STAT_CONFERR_Msk             (0x20UL)                  /*!< CONFERR (Bitfield-Mask: 0x01) */
#define SPI4_STAT_CRCERR_Pos              (4UL)                     /*!< CRCERR (Bit 4) */
#define SPI4_STAT_CRCERR_Msk              (0x10UL)                  /*!< CRCERR (Bitfield-Mask: 0x01) */
#define SPI4_STAT_TXURERR_Pos             (3UL)                     /*!< TXURERR (Bit 3) */
#define SPI4_STAT_TXURERR_Msk             (0x8UL)                   /*!< TXURERR (Bitfield-Mask: 0x01) */
#define SPI4_STAT_I2SCH_Pos               (2UL)                     /*!< I2SCH (Bit 2) */
#define SPI4_STAT_I2SCH_Msk               (0x4UL)                   /*!< I2SCH (Bitfield-Mask: 0x01) */
#define SPI4_STAT_TBE_Pos                 (1UL)                     /*!< TBE (Bit 1) */
#define SPI4_STAT_TBE_Msk                 (0x2UL)                   /*!< TBE (Bitfield-Mask: 0x01) */
#define SPI4_STAT_RBNE_Pos                (0UL)                     /*!< RBNE (Bit 0) */
#define SPI4_STAT_RBNE_Msk                (0x1UL)                   /*!< RBNE (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define SPI4_DATA_SPI_DATA_Pos            (0UL)                     /*!< SPI_DATA (Bit 0) */
#define SPI4_DATA_SPI_DATA_Msk            (0xffffUL)                /*!< SPI_DATA (Bitfield-Mask: 0xffff) */
/* ========================================================  CPCPOLY  ======================================================== */
#define SPI4_CPCPOLY_CPR_Pos              (0UL)                     /*!< CPR (Bit 0) */
#define SPI4_CPCPOLY_CPR_Msk              (0xffffUL)                /*!< CPR (Bitfield-Mask: 0xffff) */
/* =========================================================  RCRC  ========================================================== */
#define SPI4_RCRC_RCR_Pos                 (0UL)                     /*!< RCR (Bit 0) */
#define SPI4_RCRC_RCR_Msk                 (0xffffUL)                /*!< RCR (Bitfield-Mask: 0xffff) */
/* =========================================================  TCRC  ========================================================== */
#define SPI4_TCRC_TCR_Pos                 (0UL)                     /*!< TCR (Bit 0) */
#define SPI4_TCRC_TCR_Msk                 (0xffffUL)                /*!< TCR (Bitfield-Mask: 0xffff) */
/* ========================================================  I2SCTL  ========================================================= */
#define SPI4_I2SCTL_I2SSEL_Pos            (11UL)                    /*!< I2SSEL (Bit 11) */
#define SPI4_I2SCTL_I2SSEL_Msk            (0x800UL)                 /*!< I2SSEL (Bitfield-Mask: 0x01) */
#define SPI4_I2SCTL_I2SEN_Pos             (10UL)                    /*!< I2SEN (Bit 10) */
#define SPI4_I2SCTL_I2SEN_Msk             (0x400UL)                 /*!< I2SEN (Bitfield-Mask: 0x01) */
#define SPI4_I2SCTL_I2SOPMOD_Pos          (8UL)                     /*!< I2SOPMOD (Bit 8) */
#define SPI4_I2SCTL_I2SOPMOD_Msk          (0x300UL)                 /*!< I2SOPMOD (Bitfield-Mask: 0x03) */
#define SPI4_I2SCTL_PCMSMOD_Pos           (7UL)                     /*!< PCMSMOD (Bit 7) */
#define SPI4_I2SCTL_PCMSMOD_Msk           (0x80UL)                  /*!< PCMSMOD (Bitfield-Mask: 0x01) */
#define SPI4_I2SCTL_I2SSTD_Pos            (4UL)                     /*!< I2SSTD (Bit 4) */
#define SPI4_I2SCTL_I2SSTD_Msk            (0x30UL)                  /*!< I2SSTD (Bitfield-Mask: 0x03) */
#define SPI4_I2SCTL_CKPL_Pos              (3UL)                     /*!< CKPL (Bit 3) */
#define SPI4_I2SCTL_CKPL_Msk              (0x8UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI4_I2SCTL_DTLEN_Pos             (1UL)                     /*!< DTLEN (Bit 1) */
#define SPI4_I2SCTL_DTLEN_Msk             (0x6UL)                   /*!< DTLEN (Bitfield-Mask: 0x03) */
#define SPI4_I2SCTL_CHLEN_Pos             (0UL)                     /*!< CHLEN (Bit 0) */
#define SPI4_I2SCTL_CHLEN_Msk             (0x1UL)                   /*!< CHLEN (Bitfield-Mask: 0x01) */
/* ========================================================  I2SPSC  ========================================================= */
#define SPI4_I2SPSC_MCKOEN_Pos            (9UL)                     /*!< MCKOEN (Bit 9) */
#define SPI4_I2SPSC_MCKOEN_Msk            (0x200UL)                 /*!< MCKOEN (Bitfield-Mask: 0x01) */
#define SPI4_I2SPSC_OF_Pos                (8UL)                     /*!< OF (Bit 8) */
#define SPI4_I2SPSC_OF_Msk                (0x100UL)                 /*!< OF (Bitfield-Mask: 0x01) */
#define SPI4_I2SPSC_DIV_Pos               (0UL)                     /*!< DIV (Bit 0) */
#define SPI4_I2SPSC_DIV_Msk               (0xffUL)                  /*!< DIV (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                           SPI5                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define SPI5_CTL0_BDEN_Pos                (15UL)                    /*!< BDEN (Bit 15) */
#define SPI5_CTL0_BDEN_Msk                (0x8000UL)                /*!< BDEN (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_BDOEN_Pos               (14UL)                    /*!< BDOEN (Bit 14) */
#define SPI5_CTL0_BDOEN_Msk               (0x4000UL)                /*!< BDOEN (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_CRCEN_Pos               (13UL)                    /*!< CRCEN (Bit 13) */
#define SPI5_CTL0_CRCEN_Msk               (0x2000UL)                /*!< CRCEN (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_CRCNT_Pos               (12UL)                    /*!< CRCNT (Bit 12) */
#define SPI5_CTL0_CRCNT_Msk               (0x1000UL)                /*!< CRCNT (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_FF16_Pos                (11UL)                    /*!< FF16 (Bit 11) */
#define SPI5_CTL0_FF16_Msk                (0x800UL)                 /*!< FF16 (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_RO_Pos                  (10UL)                    /*!< RO (Bit 10) */
#define SPI5_CTL0_RO_Msk                  (0x400UL)                 /*!< RO (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_SWNSSEN_Pos             (9UL)                     /*!< SWNSSEN (Bit 9) */
#define SPI5_CTL0_SWNSSEN_Msk             (0x200UL)                 /*!< SWNSSEN (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_SWNSS_Pos               (8UL)                     /*!< SWNSS (Bit 8) */
#define SPI5_CTL0_SWNSS_Msk               (0x100UL)                 /*!< SWNSS (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_LF_Pos                  (7UL)                     /*!< LF (Bit 7) */
#define SPI5_CTL0_LF_Msk                  (0x80UL)                  /*!< LF (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_SPIEN_Pos               (6UL)                     /*!< SPIEN (Bit 6) */
#define SPI5_CTL0_SPIEN_Msk               (0x40UL)                  /*!< SPIEN (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_PSC_Pos                 (3UL)                     /*!< PSC (Bit 3) */
#define SPI5_CTL0_PSC_Msk                 (0x38UL)                  /*!< PSC (Bitfield-Mask: 0x07) */
#define SPI5_CTL0_MSTMOD_Pos              (2UL)                     /*!< MSTMOD (Bit 2) */
#define SPI5_CTL0_MSTMOD_Msk              (0x4UL)                   /*!< MSTMOD (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_CKPL_Pos                (1UL)                     /*!< CKPL (Bit 1) */
#define SPI5_CTL0_CKPL_Msk                (0x2UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI5_CTL0_CKPH_Pos                (0UL)                     /*!< CKPH (Bit 0) */
#define SPI5_CTL0_CKPH_Msk                (0x1UL)                   /*!< CKPH (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define SPI5_CTL1_TBEIE_Pos               (7UL)                     /*!< TBEIE (Bit 7) */
#define SPI5_CTL1_TBEIE_Msk               (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define SPI5_CTL1_RBNEIE_Pos              (6UL)                     /*!< RBNEIE (Bit 6) */
#define SPI5_CTL1_RBNEIE_Msk              (0x40UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define SPI5_CTL1_ERRIE_Pos               (5UL)                     /*!< ERRIE (Bit 5) */
#define SPI5_CTL1_ERRIE_Msk               (0x20UL)                  /*!< ERRIE (Bitfield-Mask: 0x01) */
#define SPI5_CTL1_TMOD_Pos                (4UL)                     /*!< TMOD (Bit 4) */
#define SPI5_CTL1_TMOD_Msk                (0x10UL)                  /*!< TMOD (Bitfield-Mask: 0x01) */
#define SPI5_CTL1_NSSDRV_Pos              (2UL)                     /*!< NSSDRV (Bit 2) */
#define SPI5_CTL1_NSSDRV_Msk              (0x4UL)                   /*!< NSSDRV (Bitfield-Mask: 0x01) */
#define SPI5_CTL1_DMATEN_Pos              (1UL)                     /*!< DMATEN (Bit 1) */
#define SPI5_CTL1_DMATEN_Msk              (0x2UL)                   /*!< DMATEN (Bitfield-Mask: 0x01) */
#define SPI5_CTL1_DMAREN_Pos              (0UL)                     /*!< DMAREN (Bit 0) */
#define SPI5_CTL1_DMAREN_Msk              (0x1UL)                   /*!< DMAREN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define SPI5_STAT_FERR_Pos                (8UL)                     /*!< FERR (Bit 8) */
#define SPI5_STAT_FERR_Msk                (0x100UL)                 /*!< FERR (Bitfield-Mask: 0x01) */
#define SPI5_STAT_TRANS_Pos               (7UL)                     /*!< TRANS (Bit 7) */
#define SPI5_STAT_TRANS_Msk               (0x80UL)                  /*!< TRANS (Bitfield-Mask: 0x01) */
#define SPI5_STAT_RXORERR_Pos             (6UL)                     /*!< RXORERR (Bit 6) */
#define SPI5_STAT_RXORERR_Msk             (0x40UL)                  /*!< RXORERR (Bitfield-Mask: 0x01) */
#define SPI5_STAT_CONFERR_Pos             (5UL)                     /*!< CONFERR (Bit 5) */
#define SPI5_STAT_CONFERR_Msk             (0x20UL)                  /*!< CONFERR (Bitfield-Mask: 0x01) */
#define SPI5_STAT_CRCERR_Pos              (4UL)                     /*!< CRCERR (Bit 4) */
#define SPI5_STAT_CRCERR_Msk              (0x10UL)                  /*!< CRCERR (Bitfield-Mask: 0x01) */
#define SPI5_STAT_TXURERR_Pos             (3UL)                     /*!< TXURERR (Bit 3) */
#define SPI5_STAT_TXURERR_Msk             (0x8UL)                   /*!< TXURERR (Bitfield-Mask: 0x01) */
#define SPI5_STAT_I2SCH_Pos               (2UL)                     /*!< I2SCH (Bit 2) */
#define SPI5_STAT_I2SCH_Msk               (0x4UL)                   /*!< I2SCH (Bitfield-Mask: 0x01) */
#define SPI5_STAT_TBE_Pos                 (1UL)                     /*!< TBE (Bit 1) */
#define SPI5_STAT_TBE_Msk                 (0x2UL)                   /*!< TBE (Bitfield-Mask: 0x01) */
#define SPI5_STAT_RBNE_Pos                (0UL)                     /*!< RBNE (Bit 0) */
#define SPI5_STAT_RBNE_Msk                (0x1UL)                   /*!< RBNE (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define SPI5_DATA_SPI_DATA_Pos            (0UL)                     /*!< SPI_DATA (Bit 0) */
#define SPI5_DATA_SPI_DATA_Msk            (0xffffUL)                /*!< SPI_DATA (Bitfield-Mask: 0xffff) */
/* ========================================================  CPCPOLY  ======================================================== */
#define SPI5_CPCPOLY_CPR_Pos              (0UL)                     /*!< CPR (Bit 0) */
#define SPI5_CPCPOLY_CPR_Msk              (0xffffUL)                /*!< CPR (Bitfield-Mask: 0xffff) */
/* =========================================================  RCRC  ========================================================== */
#define SPI5_RCRC_RCR_Pos                 (0UL)                     /*!< RCR (Bit 0) */
#define SPI5_RCRC_RCR_Msk                 (0xffffUL)                /*!< RCR (Bitfield-Mask: 0xffff) */
/* =========================================================  TCRC  ========================================================== */
#define SPI5_TCRC_TCR_Pos                 (0UL)                     /*!< TCR (Bit 0) */
#define SPI5_TCRC_TCR_Msk                 (0xffffUL)                /*!< TCR (Bitfield-Mask: 0xffff) */
/* ========================================================  I2SCTL  ========================================================= */
#define SPI5_I2SCTL_I2SSEL_Pos            (11UL)                    /*!< I2SSEL (Bit 11) */
#define SPI5_I2SCTL_I2SSEL_Msk            (0x800UL)                 /*!< I2SSEL (Bitfield-Mask: 0x01) */
#define SPI5_I2SCTL_I2SEN_Pos             (10UL)                    /*!< I2SEN (Bit 10) */
#define SPI5_I2SCTL_I2SEN_Msk             (0x400UL)                 /*!< I2SEN (Bitfield-Mask: 0x01) */
#define SPI5_I2SCTL_I2SOPMOD_Pos          (8UL)                     /*!< I2SOPMOD (Bit 8) */
#define SPI5_I2SCTL_I2SOPMOD_Msk          (0x300UL)                 /*!< I2SOPMOD (Bitfield-Mask: 0x03) */
#define SPI5_I2SCTL_PCMSMOD_Pos           (7UL)                     /*!< PCMSMOD (Bit 7) */
#define SPI5_I2SCTL_PCMSMOD_Msk           (0x80UL)                  /*!< PCMSMOD (Bitfield-Mask: 0x01) */
#define SPI5_I2SCTL_I2SSTD_Pos            (4UL)                     /*!< I2SSTD (Bit 4) */
#define SPI5_I2SCTL_I2SSTD_Msk            (0x30UL)                  /*!< I2SSTD (Bitfield-Mask: 0x03) */
#define SPI5_I2SCTL_CKPL_Pos              (3UL)                     /*!< CKPL (Bit 3) */
#define SPI5_I2SCTL_CKPL_Msk              (0x8UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define SPI5_I2SCTL_DTLEN_Pos             (1UL)                     /*!< DTLEN (Bit 1) */
#define SPI5_I2SCTL_DTLEN_Msk             (0x6UL)                   /*!< DTLEN (Bitfield-Mask: 0x03) */
#define SPI5_I2SCTL_CHLEN_Pos             (0UL)                     /*!< CHLEN (Bit 0) */
#define SPI5_I2SCTL_CHLEN_Msk             (0x1UL)                   /*!< CHLEN (Bitfield-Mask: 0x01) */
/* ========================================================  I2SPSC  ========================================================= */
#define SPI5_I2SPSC_MCKOEN_Pos            (9UL)                     /*!< MCKOEN (Bit 9) */
#define SPI5_I2SPSC_MCKOEN_Msk            (0x200UL)                 /*!< MCKOEN (Bitfield-Mask: 0x01) */
#define SPI5_I2SPSC_OF_Pos                (8UL)                     /*!< OF (Bit 8) */
#define SPI5_I2SPSC_OF_Msk                (0x100UL)                 /*!< OF (Bitfield-Mask: 0x01) */
#define SPI5_I2SPSC_DIV_Pos               (0UL)                     /*!< DIV (Bit 0) */
#define SPI5_I2SPSC_DIV_Msk               (0xffUL)                  /*!< DIV (Bitfield-Mask: 0xff) */
/* =========================================================  QCTL  ========================================================== */
#define SPI5_QCTL_IO23_DRV_Pos            (2UL)                     /*!< IO23_DRV (Bit 2) */
#define SPI5_QCTL_IO23_DRV_Msk            (0x4UL)                   /*!< IO23_DRV (Bitfield-Mask: 0x01) */
#define SPI5_QCTL_QRD_Pos                 (1UL)                     /*!< QRD (Bit 1) */
#define SPI5_QCTL_QRD_Msk                 (0x2UL)                   /*!< QRD (Bitfield-Mask: 0x01) */
#define SPI5_QCTL_QMOD_Pos                (0UL)                     /*!< QMOD (Bit 0) */
#define SPI5_QCTL_QMOD_Msk                (0x1UL)                   /*!< QMOD (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                         I2S1_add                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define I2S1_add_CTL0_BDEN_Pos            (15UL)                    /*!< BDEN (Bit 15) */
#define I2S1_add_CTL0_BDEN_Msk            (0x8000UL)                /*!< BDEN (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_BDOEN_Pos           (14UL)                    /*!< BDOEN (Bit 14) */
#define I2S1_add_CTL0_BDOEN_Msk           (0x4000UL)                /*!< BDOEN (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_CRCEN_Pos           (13UL)                    /*!< CRCEN (Bit 13) */
#define I2S1_add_CTL0_CRCEN_Msk           (0x2000UL)                /*!< CRCEN (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_CRCNT_Pos           (12UL)                    /*!< CRCNT (Bit 12) */
#define I2S1_add_CTL0_CRCNT_Msk           (0x1000UL)                /*!< CRCNT (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_FF16_Pos            (11UL)                    /*!< FF16 (Bit 11) */
#define I2S1_add_CTL0_FF16_Msk            (0x800UL)                 /*!< FF16 (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_RO_Pos              (10UL)                    /*!< RO (Bit 10) */
#define I2S1_add_CTL0_RO_Msk              (0x400UL)                 /*!< RO (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_SWNSSEN_Pos         (9UL)                     /*!< SWNSSEN (Bit 9) */
#define I2S1_add_CTL0_SWNSSEN_Msk         (0x200UL)                 /*!< SWNSSEN (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_SWNSS_Pos           (8UL)                     /*!< SWNSS (Bit 8) */
#define I2S1_add_CTL0_SWNSS_Msk           (0x100UL)                 /*!< SWNSS (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_LF_Pos              (7UL)                     /*!< LF (Bit 7) */
#define I2S1_add_CTL0_LF_Msk              (0x80UL)                  /*!< LF (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_SPIEN_Pos           (6UL)                     /*!< SPIEN (Bit 6) */
#define I2S1_add_CTL0_SPIEN_Msk           (0x40UL)                  /*!< SPIEN (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_PSC_Pos             (3UL)                     /*!< PSC (Bit 3) */
#define I2S1_add_CTL0_PSC_Msk             (0x38UL)                  /*!< PSC (Bitfield-Mask: 0x07) */
#define I2S1_add_CTL0_MSTMOD_Pos          (2UL)                     /*!< MSTMOD (Bit 2) */
#define I2S1_add_CTL0_MSTMOD_Msk          (0x4UL)                   /*!< MSTMOD (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_CKPL_Pos            (1UL)                     /*!< CKPL (Bit 1) */
#define I2S1_add_CTL0_CKPL_Msk            (0x2UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL0_CKPH_Pos            (0UL)                     /*!< CKPH (Bit 0) */
#define I2S1_add_CTL0_CKPH_Msk            (0x1UL)                   /*!< CKPH (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define I2S1_add_CTL1_TBEIE_Pos           (7UL)                     /*!< TBEIE (Bit 7) */
#define I2S1_add_CTL1_TBEIE_Msk           (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL1_RBNEIE_Pos          (6UL)                     /*!< RBNEIE (Bit 6) */
#define I2S1_add_CTL1_RBNEIE_Msk          (0x40UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL1_ERRIE_Pos           (5UL)                     /*!< ERRIE (Bit 5) */
#define I2S1_add_CTL1_ERRIE_Msk           (0x20UL)                  /*!< ERRIE (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL1_TMOD_Pos            (4UL)                     /*!< TMOD (Bit 4) */
#define I2S1_add_CTL1_TMOD_Msk            (0x10UL)                  /*!< TMOD (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL1_NSSDRV_Pos          (2UL)                     /*!< NSSDRV (Bit 2) */
#define I2S1_add_CTL1_NSSDRV_Msk          (0x4UL)                   /*!< NSSDRV (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL1_DMATEN_Pos          (1UL)                     /*!< DMATEN (Bit 1) */
#define I2S1_add_CTL1_DMATEN_Msk          (0x2UL)                   /*!< DMATEN (Bitfield-Mask: 0x01) */
#define I2S1_add_CTL1_DMAREN_Pos          (0UL)                     /*!< DMAREN (Bit 0) */
#define I2S1_add_CTL1_DMAREN_Msk          (0x1UL)                   /*!< DMAREN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define I2S1_add_STAT_FERR_Pos            (8UL)                     /*!< FERR (Bit 8) */
#define I2S1_add_STAT_FERR_Msk            (0x100UL)                 /*!< FERR (Bitfield-Mask: 0x01) */
#define I2S1_add_STAT_TRANS_Pos           (7UL)                     /*!< TRANS (Bit 7) */
#define I2S1_add_STAT_TRANS_Msk           (0x80UL)                  /*!< TRANS (Bitfield-Mask: 0x01) */
#define I2S1_add_STAT_RXORERR_Pos         (6UL)                     /*!< RXORERR (Bit 6) */
#define I2S1_add_STAT_RXORERR_Msk         (0x40UL)                  /*!< RXORERR (Bitfield-Mask: 0x01) */
#define I2S1_add_STAT_CONFERR_Pos         (5UL)                     /*!< CONFERR (Bit 5) */
#define I2S1_add_STAT_CONFERR_Msk         (0x20UL)                  /*!< CONFERR (Bitfield-Mask: 0x01) */
#define I2S1_add_STAT_CRCERR_Pos          (4UL)                     /*!< CRCERR (Bit 4) */
#define I2S1_add_STAT_CRCERR_Msk          (0x10UL)                  /*!< CRCERR (Bitfield-Mask: 0x01) */
#define I2S1_add_STAT_TXURERR_Pos         (3UL)                     /*!< TXURERR (Bit 3) */
#define I2S1_add_STAT_TXURERR_Msk         (0x8UL)                   /*!< TXURERR (Bitfield-Mask: 0x01) */
#define I2S1_add_STAT_I2SCH_Pos           (2UL)                     /*!< I2SCH (Bit 2) */
#define I2S1_add_STAT_I2SCH_Msk           (0x4UL)                   /*!< I2SCH (Bitfield-Mask: 0x01) */
#define I2S1_add_STAT_TBE_Pos             (1UL)                     /*!< TBE (Bit 1) */
#define I2S1_add_STAT_TBE_Msk             (0x2UL)                   /*!< TBE (Bitfield-Mask: 0x01) */
#define I2S1_add_STAT_RBNE_Pos            (0UL)                     /*!< RBNE (Bit 0) */
#define I2S1_add_STAT_RBNE_Msk            (0x1UL)                   /*!< RBNE (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define I2S1_add_DATA_SPI_DATA_Pos        (0UL)                     /*!< SPI_DATA (Bit 0) */
#define I2S1_add_DATA_SPI_DATA_Msk        (0xffffUL)                /*!< SPI_DATA (Bitfield-Mask: 0xffff) */
/* ========================================================  CPCPOLY  ======================================================== */
#define I2S1_add_CPCPOLY_CPR_Pos          (0UL)                     /*!< CPR (Bit 0) */
#define I2S1_add_CPCPOLY_CPR_Msk          (0xffffUL)                /*!< CPR (Bitfield-Mask: 0xffff) */
/* =========================================================  RCRC  ========================================================== */
#define I2S1_add_RCRC_RCR_Pos             (0UL)                     /*!< RCR (Bit 0) */
#define I2S1_add_RCRC_RCR_Msk             (0xffffUL)                /*!< RCR (Bitfield-Mask: 0xffff) */
/* =========================================================  TCRC  ========================================================== */
#define I2S1_add_TCRC_TCR_Pos             (0UL)                     /*!< TCR (Bit 0) */
#define I2S1_add_TCRC_TCR_Msk             (0xffffUL)                /*!< TCR (Bitfield-Mask: 0xffff) */
/* ========================================================  I2SCTL  ========================================================= */
#define I2S1_add_I2SCTL_I2SSEL_Pos        (11UL)                    /*!< I2SSEL (Bit 11) */
#define I2S1_add_I2SCTL_I2SSEL_Msk        (0x800UL)                 /*!< I2SSEL (Bitfield-Mask: 0x01) */
#define I2S1_add_I2SCTL_I2SEN_Pos         (10UL)                    /*!< I2SEN (Bit 10) */
#define I2S1_add_I2SCTL_I2SEN_Msk         (0x400UL)                 /*!< I2SEN (Bitfield-Mask: 0x01) */
#define I2S1_add_I2SCTL_I2SOPMOD_Pos      (8UL)                     /*!< I2SOPMOD (Bit 8) */
#define I2S1_add_I2SCTL_I2SOPMOD_Msk      (0x300UL)                 /*!< I2SOPMOD (Bitfield-Mask: 0x03) */
#define I2S1_add_I2SCTL_PCMSMOD_Pos       (7UL)                     /*!< PCMSMOD (Bit 7) */
#define I2S1_add_I2SCTL_PCMSMOD_Msk       (0x80UL)                  /*!< PCMSMOD (Bitfield-Mask: 0x01) */
#define I2S1_add_I2SCTL_I2SSTD_Pos        (4UL)                     /*!< I2SSTD (Bit 4) */
#define I2S1_add_I2SCTL_I2SSTD_Msk        (0x30UL)                  /*!< I2SSTD (Bitfield-Mask: 0x03) */
#define I2S1_add_I2SCTL_CKPL_Pos          (3UL)                     /*!< CKPL (Bit 3) */
#define I2S1_add_I2SCTL_CKPL_Msk          (0x8UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define I2S1_add_I2SCTL_DTLEN_Pos         (1UL)                     /*!< DTLEN (Bit 1) */
#define I2S1_add_I2SCTL_DTLEN_Msk         (0x6UL)                   /*!< DTLEN (Bitfield-Mask: 0x03) */
#define I2S1_add_I2SCTL_CHLEN_Pos         (0UL)                     /*!< CHLEN (Bit 0) */
#define I2S1_add_I2SCTL_CHLEN_Msk         (0x1UL)                   /*!< CHLEN (Bitfield-Mask: 0x01) */
/* ========================================================  I2SPSC  ========================================================= */
#define I2S1_add_I2SPSC_MCKOEN_Pos        (9UL)                     /*!< MCKOEN (Bit 9) */
#define I2S1_add_I2SPSC_MCKOEN_Msk        (0x200UL)                 /*!< MCKOEN (Bitfield-Mask: 0x01) */
#define I2S1_add_I2SPSC_OF_Pos            (8UL)                     /*!< OF (Bit 8) */
#define I2S1_add_I2SPSC_OF_Msk            (0x100UL)                 /*!< OF (Bitfield-Mask: 0x01) */
#define I2S1_add_I2SPSC_DIV_Pos           (0UL)                     /*!< DIV (Bit 0) */
#define I2S1_add_I2SPSC_DIV_Msk           (0xffUL)                  /*!< DIV (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                         I2S2_add                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define I2S2_add_CTL0_BDEN_Pos            (15UL)                    /*!< BDEN (Bit 15) */
#define I2S2_add_CTL0_BDEN_Msk            (0x8000UL)                /*!< BDEN (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_BDOEN_Pos           (14UL)                    /*!< BDOEN (Bit 14) */
#define I2S2_add_CTL0_BDOEN_Msk           (0x4000UL)                /*!< BDOEN (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_CRCEN_Pos           (13UL)                    /*!< CRCEN (Bit 13) */
#define I2S2_add_CTL0_CRCEN_Msk           (0x2000UL)                /*!< CRCEN (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_CRCNT_Pos           (12UL)                    /*!< CRCNT (Bit 12) */
#define I2S2_add_CTL0_CRCNT_Msk           (0x1000UL)                /*!< CRCNT (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_FF16_Pos            (11UL)                    /*!< FF16 (Bit 11) */
#define I2S2_add_CTL0_FF16_Msk            (0x800UL)                 /*!< FF16 (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_RO_Pos              (10UL)                    /*!< RO (Bit 10) */
#define I2S2_add_CTL0_RO_Msk              (0x400UL)                 /*!< RO (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_SWNSSEN_Pos         (9UL)                     /*!< SWNSSEN (Bit 9) */
#define I2S2_add_CTL0_SWNSSEN_Msk         (0x200UL)                 /*!< SWNSSEN (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_SWNSS_Pos           (8UL)                     /*!< SWNSS (Bit 8) */
#define I2S2_add_CTL0_SWNSS_Msk           (0x100UL)                 /*!< SWNSS (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_LF_Pos              (7UL)                     /*!< LF (Bit 7) */
#define I2S2_add_CTL0_LF_Msk              (0x80UL)                  /*!< LF (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_SPIEN_Pos           (6UL)                     /*!< SPIEN (Bit 6) */
#define I2S2_add_CTL0_SPIEN_Msk           (0x40UL)                  /*!< SPIEN (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_PSC_Pos             (3UL)                     /*!< PSC (Bit 3) */
#define I2S2_add_CTL0_PSC_Msk             (0x38UL)                  /*!< PSC (Bitfield-Mask: 0x07) */
#define I2S2_add_CTL0_MSTMOD_Pos          (2UL)                     /*!< MSTMOD (Bit 2) */
#define I2S2_add_CTL0_MSTMOD_Msk          (0x4UL)                   /*!< MSTMOD (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_CKPL_Pos            (1UL)                     /*!< CKPL (Bit 1) */
#define I2S2_add_CTL0_CKPL_Msk            (0x2UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL0_CKPH_Pos            (0UL)                     /*!< CKPH (Bit 0) */
#define I2S2_add_CTL0_CKPH_Msk            (0x1UL)                   /*!< CKPH (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define I2S2_add_CTL1_TBEIE_Pos           (7UL)                     /*!< TBEIE (Bit 7) */
#define I2S2_add_CTL1_TBEIE_Msk           (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL1_RBNEIE_Pos          (6UL)                     /*!< RBNEIE (Bit 6) */
#define I2S2_add_CTL1_RBNEIE_Msk          (0x40UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL1_ERRIE_Pos           (5UL)                     /*!< ERRIE (Bit 5) */
#define I2S2_add_CTL1_ERRIE_Msk           (0x20UL)                  /*!< ERRIE (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL1_TMOD_Pos            (4UL)                     /*!< TMOD (Bit 4) */
#define I2S2_add_CTL1_TMOD_Msk            (0x10UL)                  /*!< TMOD (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL1_NSSDRV_Pos          (2UL)                     /*!< NSSDRV (Bit 2) */
#define I2S2_add_CTL1_NSSDRV_Msk          (0x4UL)                   /*!< NSSDRV (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL1_DMATEN_Pos          (1UL)                     /*!< DMATEN (Bit 1) */
#define I2S2_add_CTL1_DMATEN_Msk          (0x2UL)                   /*!< DMATEN (Bitfield-Mask: 0x01) */
#define I2S2_add_CTL1_DMAREN_Pos          (0UL)                     /*!< DMAREN (Bit 0) */
#define I2S2_add_CTL1_DMAREN_Msk          (0x1UL)                   /*!< DMAREN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define I2S2_add_STAT_FERR_Pos            (8UL)                     /*!< FERR (Bit 8) */
#define I2S2_add_STAT_FERR_Msk            (0x100UL)                 /*!< FERR (Bitfield-Mask: 0x01) */
#define I2S2_add_STAT_TRANS_Pos           (7UL)                     /*!< TRANS (Bit 7) */
#define I2S2_add_STAT_TRANS_Msk           (0x80UL)                  /*!< TRANS (Bitfield-Mask: 0x01) */
#define I2S2_add_STAT_RXORERR_Pos         (6UL)                     /*!< RXORERR (Bit 6) */
#define I2S2_add_STAT_RXORERR_Msk         (0x40UL)                  /*!< RXORERR (Bitfield-Mask: 0x01) */
#define I2S2_add_STAT_CONFERR_Pos         (5UL)                     /*!< CONFERR (Bit 5) */
#define I2S2_add_STAT_CONFERR_Msk         (0x20UL)                  /*!< CONFERR (Bitfield-Mask: 0x01) */
#define I2S2_add_STAT_CRCERR_Pos          (4UL)                     /*!< CRCERR (Bit 4) */
#define I2S2_add_STAT_CRCERR_Msk          (0x10UL)                  /*!< CRCERR (Bitfield-Mask: 0x01) */
#define I2S2_add_STAT_TXURERR_Pos         (3UL)                     /*!< TXURERR (Bit 3) */
#define I2S2_add_STAT_TXURERR_Msk         (0x8UL)                   /*!< TXURERR (Bitfield-Mask: 0x01) */
#define I2S2_add_STAT_I2SCH_Pos           (2UL)                     /*!< I2SCH (Bit 2) */
#define I2S2_add_STAT_I2SCH_Msk           (0x4UL)                   /*!< I2SCH (Bitfield-Mask: 0x01) */
#define I2S2_add_STAT_TBE_Pos             (1UL)                     /*!< TBE (Bit 1) */
#define I2S2_add_STAT_TBE_Msk             (0x2UL)                   /*!< TBE (Bitfield-Mask: 0x01) */
#define I2S2_add_STAT_RBNE_Pos            (0UL)                     /*!< RBNE (Bit 0) */
#define I2S2_add_STAT_RBNE_Msk            (0x1UL)                   /*!< RBNE (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define I2S2_add_DATA_SPI_DATA_Pos        (0UL)                     /*!< SPI_DATA (Bit 0) */
#define I2S2_add_DATA_SPI_DATA_Msk        (0xffffUL)                /*!< SPI_DATA (Bitfield-Mask: 0xffff) */
/* ========================================================  CPCPOLY  ======================================================== */
#define I2S2_add_CPCPOLY_CPR_Pos          (0UL)                     /*!< CPR (Bit 0) */
#define I2S2_add_CPCPOLY_CPR_Msk          (0xffffUL)                /*!< CPR (Bitfield-Mask: 0xffff) */
/* =========================================================  RCRC  ========================================================== */
#define I2S2_add_RCRC_RCR_Pos             (0UL)                     /*!< RCR (Bit 0) */
#define I2S2_add_RCRC_RCR_Msk             (0xffffUL)                /*!< RCR (Bitfield-Mask: 0xffff) */
/* =========================================================  TCRC  ========================================================== */
#define I2S2_add_TCRC_TCR_Pos             (0UL)                     /*!< TCR (Bit 0) */
#define I2S2_add_TCRC_TCR_Msk             (0xffffUL)                /*!< TCR (Bitfield-Mask: 0xffff) */
/* ========================================================  I2SCTL  ========================================================= */
#define I2S2_add_I2SCTL_I2SSEL_Pos        (11UL)                    /*!< I2SSEL (Bit 11) */
#define I2S2_add_I2SCTL_I2SSEL_Msk        (0x800UL)                 /*!< I2SSEL (Bitfield-Mask: 0x01) */
#define I2S2_add_I2SCTL_I2SEN_Pos         (10UL)                    /*!< I2SEN (Bit 10) */
#define I2S2_add_I2SCTL_I2SEN_Msk         (0x400UL)                 /*!< I2SEN (Bitfield-Mask: 0x01) */
#define I2S2_add_I2SCTL_I2SOPMOD_Pos      (8UL)                     /*!< I2SOPMOD (Bit 8) */
#define I2S2_add_I2SCTL_I2SOPMOD_Msk      (0x300UL)                 /*!< I2SOPMOD (Bitfield-Mask: 0x03) */
#define I2S2_add_I2SCTL_PCMSMOD_Pos       (7UL)                     /*!< PCMSMOD (Bit 7) */
#define I2S2_add_I2SCTL_PCMSMOD_Msk       (0x80UL)                  /*!< PCMSMOD (Bitfield-Mask: 0x01) */
#define I2S2_add_I2SCTL_I2SSTD_Pos        (4UL)                     /*!< I2SSTD (Bit 4) */
#define I2S2_add_I2SCTL_I2SSTD_Msk        (0x30UL)                  /*!< I2SSTD (Bitfield-Mask: 0x03) */
#define I2S2_add_I2SCTL_CKPL_Pos          (3UL)                     /*!< CKPL (Bit 3) */
#define I2S2_add_I2SCTL_CKPL_Msk          (0x8UL)                   /*!< CKPL (Bitfield-Mask: 0x01) */
#define I2S2_add_I2SCTL_DTLEN_Pos         (1UL)                     /*!< DTLEN (Bit 1) */
#define I2S2_add_I2SCTL_DTLEN_Msk         (0x6UL)                   /*!< DTLEN (Bitfield-Mask: 0x03) */
#define I2S2_add_I2SCTL_CHLEN_Pos         (0UL)                     /*!< CHLEN (Bit 0) */
#define I2S2_add_I2SCTL_CHLEN_Msk         (0x1UL)                   /*!< CHLEN (Bitfield-Mask: 0x01) */
/* ========================================================  I2SPSC  ========================================================= */
#define I2S2_add_I2SPSC_MCKOEN_Pos        (9UL)                     /*!< MCKOEN (Bit 9) */
#define I2S2_add_I2SPSC_MCKOEN_Msk        (0x200UL)                 /*!< MCKOEN (Bitfield-Mask: 0x01) */
#define I2S2_add_I2SPSC_OF_Pos            (8UL)                     /*!< OF (Bit 8) */
#define I2S2_add_I2SPSC_OF_Msk            (0x100UL)                 /*!< OF (Bitfield-Mask: 0x01) */
#define I2S2_add_I2SPSC_DIV_Pos           (0UL)                     /*!< DIV (Bit 0) */
#define I2S2_add_I2SPSC_DIV_Msk           (0xffUL)                  /*!< DIV (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                          SYSCFG                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CFG0  ========================================================== */
#define SYSCFG_CFG0_EXMC_SWP_Pos          (10UL)                    /*!< EXMC_SWP (Bit 10) */
#define SYSCFG_CFG0_EXMC_SWP_Msk          (0xc00UL)                 /*!< EXMC_SWP (Bitfield-Mask: 0x03) */
#define SYSCFG_CFG0_FMC_SWP_Pos           (8UL)                     /*!< FMC_SWP (Bit 8) */
#define SYSCFG_CFG0_FMC_SWP_Msk           (0x100UL)                 /*!< FMC_SWP (Bitfield-Mask: 0x01) */
#define SYSCFG_CFG0_BOOT_MODE_Pos         (0UL)                     /*!< BOOT_MODE (Bit 0) */
#define SYSCFG_CFG0_BOOT_MODE_Msk         (0x7UL)                   /*!< BOOT_MODE (Bitfield-Mask: 0x07) */
/* =========================================================  CFG1  ========================================================== */
#define SYSCFG_CFG1_ENET_PHY_SEL_Pos      (23UL)                    /*!< ENET_PHY_SEL (Bit 23) */
#define SYSCFG_CFG1_ENET_PHY_SEL_Msk      (0x800000UL)              /*!< ENET_PHY_SEL (Bitfield-Mask: 0x01) */
/* ========================================================  EXTISS0  ======================================================== */
#define SYSCFG_EXTISS0_EXTI3_SS_Pos       (12UL)                    /*!< EXTI3_SS (Bit 12) */
#define SYSCFG_EXTISS0_EXTI3_SS_Msk       (0xf000UL)                /*!< EXTI3_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS0_EXTI2_SS_Pos       (8UL)                     /*!< EXTI2_SS (Bit 8) */
#define SYSCFG_EXTISS0_EXTI2_SS_Msk       (0xf00UL)                 /*!< EXTI2_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS0_EXTI1_SS_Pos       (4UL)                     /*!< EXTI1_SS (Bit 4) */
#define SYSCFG_EXTISS0_EXTI1_SS_Msk       (0xf0UL)                  /*!< EXTI1_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS0_EXTI0_SS_Pos       (0UL)                     /*!< EXTI0_SS (Bit 0) */
#define SYSCFG_EXTISS0_EXTI0_SS_Msk       (0xfUL)                   /*!< EXTI0_SS (Bitfield-Mask: 0x0f) */
/* ========================================================  EXTISS1  ======================================================== */
#define SYSCFG_EXTISS1_EXTI7_SS_Pos       (12UL)                    /*!< EXTI7_SS (Bit 12) */
#define SYSCFG_EXTISS1_EXTI7_SS_Msk       (0xf000UL)                /*!< EXTI7_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS1_EXTI6_SS_Pos       (8UL)                     /*!< EXTI6_SS (Bit 8) */
#define SYSCFG_EXTISS1_EXTI6_SS_Msk       (0xf00UL)                 /*!< EXTI6_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS1_EXTI5_SS_Pos       (4UL)                     /*!< EXTI5_SS (Bit 4) */
#define SYSCFG_EXTISS1_EXTI5_SS_Msk       (0xf0UL)                  /*!< EXTI5_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS1_EXTI4_SS_Pos       (0UL)                     /*!< EXTI4_SS (Bit 0) */
#define SYSCFG_EXTISS1_EXTI4_SS_Msk       (0xfUL)                   /*!< EXTI4_SS (Bitfield-Mask: 0x0f) */
/* ========================================================  EXTISS2  ======================================================== */
#define SYSCFG_EXTISS2_EXTI11_SS_Pos      (12UL)                    /*!< EXTI11_SS (Bit 12) */
#define SYSCFG_EXTISS2_EXTI11_SS_Msk      (0xf000UL)                /*!< EXTI11_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS2_EXTI10_SS_Pos      (8UL)                     /*!< EXTI10_SS (Bit 8) */
#define SYSCFG_EXTISS2_EXTI10_SS_Msk      (0xf00UL)                 /*!< EXTI10_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS2_EXTI9_SS_Pos       (4UL)                     /*!< EXTI9_SS (Bit 4) */
#define SYSCFG_EXTISS2_EXTI9_SS_Msk       (0xf0UL)                  /*!< EXTI9_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS2_EXTI8_SS_Pos       (0UL)                     /*!< EXTI8_SS (Bit 0) */
#define SYSCFG_EXTISS2_EXTI8_SS_Msk       (0xfUL)                   /*!< EXTI8_SS (Bitfield-Mask: 0x0f) */
/* ========================================================  EXTISS3  ======================================================== */
#define SYSCFG_EXTISS3_EXTI15_SS_Pos      (12UL)                    /*!< EXTI15_SS (Bit 12) */
#define SYSCFG_EXTISS3_EXTI15_SS_Msk      (0xf000UL)                /*!< EXTI15_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS3_EXTI14_SS_Pos      (8UL)                     /*!< EXTI14_SS (Bit 8) */
#define SYSCFG_EXTISS3_EXTI14_SS_Msk      (0xf00UL)                 /*!< EXTI14_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS3_EXTI13_SS_Pos      (4UL)                     /*!< EXTI13_SS (Bit 4) */
#define SYSCFG_EXTISS3_EXTI13_SS_Msk      (0xf0UL)                  /*!< EXTI13_SS (Bitfield-Mask: 0x0f) */
#define SYSCFG_EXTISS3_EXTI12_SS_Pos      (0UL)                     /*!< EXTI12_SS (Bit 0) */
#define SYSCFG_EXTISS3_EXTI12_SS_Msk      (0xfUL)                   /*!< EXTI12_SS (Bitfield-Mask: 0x0f) */
/* ========================================================  CPSCTL  ========================================================= */
#define SYSCFG_CPSCTL_CPS_RDY_Pos         (8UL)                     /*!< CPS_RDY (Bit 8) */
#define SYSCFG_CPSCTL_CPS_RDY_Msk         (0x100UL)                 /*!< CPS_RDY (Bitfield-Mask: 0x01) */
#define SYSCFG_CPSCTL_CPS_EN_Pos          (0UL)                     /*!< CPS_EN (Bit 0) */
#define SYSCFG_CPSCTL_CPS_EN_Msk          (0x1UL)                   /*!< CPS_EN (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER0_CTL0_CKDIV_Pos             (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER0_CTL0_CKDIV_Msk             (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER0_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER0_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER0_CTL0_CAM_Pos               (5UL)                     /*!< CAM (Bit 5) */
#define TIMER0_CTL0_CAM_Msk               (0x60UL)                  /*!< CAM (Bitfield-Mask: 0x03) */
#define TIMER0_CTL0_DIR_Pos               (4UL)                     /*!< DIR (Bit 4) */
#define TIMER0_CTL0_DIR_Msk               (0x10UL)                  /*!< DIR (Bitfield-Mask: 0x01) */
#define TIMER0_CTL0_SPM_Pos               (3UL)                     /*!< SPM (Bit 3) */
#define TIMER0_CTL0_SPM_Msk               (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER0_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER0_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER0_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER0_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER0_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER0_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define TIMER0_CTL1_ISO3_Pos              (14UL)                    /*!< ISO3 (Bit 14) */
#define TIMER0_CTL1_ISO3_Msk              (0x4000UL)                /*!< ISO3 (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_ISO2N_Pos             (13UL)                    /*!< ISO2N (Bit 13) */
#define TIMER0_CTL1_ISO2N_Msk             (0x2000UL)                /*!< ISO2N (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_ISO2_Pos              (12UL)                    /*!< ISO2 (Bit 12) */
#define TIMER0_CTL1_ISO2_Msk              (0x1000UL)                /*!< ISO2 (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_ISO1N_Pos             (11UL)                    /*!< ISO1N (Bit 11) */
#define TIMER0_CTL1_ISO1N_Msk             (0x800UL)                 /*!< ISO1N (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_ISO1_Pos              (10UL)                    /*!< ISO1 (Bit 10) */
#define TIMER0_CTL1_ISO1_Msk              (0x400UL)                 /*!< ISO1 (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_ISO0N_Pos             (9UL)                     /*!< ISO0N (Bit 9) */
#define TIMER0_CTL1_ISO0N_Msk             (0x200UL)                 /*!< ISO0N (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_ISO0_Pos              (8UL)                     /*!< ISO0 (Bit 8) */
#define TIMER0_CTL1_ISO0_Msk              (0x100UL)                 /*!< ISO0 (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_TI0S_Pos              (7UL)                     /*!< TI0S (Bit 7) */
#define TIMER0_CTL1_TI0S_Msk              (0x80UL)                  /*!< TI0S (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_MMC_Pos               (4UL)                     /*!< MMC (Bit 4) */
#define TIMER0_CTL1_MMC_Msk               (0x70UL)                  /*!< MMC (Bitfield-Mask: 0x07) */
#define TIMER0_CTL1_DMAS_Pos              (3UL)                     /*!< DMAS (Bit 3) */
#define TIMER0_CTL1_DMAS_Msk              (0x8UL)                   /*!< DMAS (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_CCUC_Pos              (2UL)                     /*!< CCUC (Bit 2) */
#define TIMER0_CTL1_CCUC_Msk              (0x4UL)                   /*!< CCUC (Bitfield-Mask: 0x01) */
#define TIMER0_CTL1_CCSE_Pos              (0UL)                     /*!< CCSE (Bit 0) */
#define TIMER0_CTL1_CCSE_Msk              (0x1UL)                   /*!< CCSE (Bitfield-Mask: 0x01) */
/* =========================================================  SMCFG  ========================================================= */
#define TIMER0_SMCFG_ETP_Pos              (15UL)                    /*!< ETP (Bit 15) */
#define TIMER0_SMCFG_ETP_Msk              (0x8000UL)                /*!< ETP (Bitfield-Mask: 0x01) */
#define TIMER0_SMCFG_SCM1_Pos             (14UL)                    /*!< SCM1 (Bit 14) */
#define TIMER0_SMCFG_SCM1_Msk             (0x4000UL)                /*!< SCM1 (Bitfield-Mask: 0x01) */
#define TIMER0_SMCFG_ETPSC_Pos            (12UL)                    /*!< ETPSC (Bit 12) */
#define TIMER0_SMCFG_ETPSC_Msk            (0x3000UL)                /*!< ETPSC (Bitfield-Mask: 0x03) */
#define TIMER0_SMCFG_ETFC_Pos             (8UL)                     /*!< ETFC (Bit 8) */
#define TIMER0_SMCFG_ETFC_Msk             (0xf00UL)                 /*!< ETFC (Bitfield-Mask: 0x0f) */
#define TIMER0_SMCFG_MSM_Pos              (7UL)                     /*!< MSM (Bit 7) */
#define TIMER0_SMCFG_MSM_Msk              (0x80UL)                  /*!< MSM (Bitfield-Mask: 0x01) */
#define TIMER0_SMCFG_TRGS_Pos             (4UL)                     /*!< TRGS (Bit 4) */
#define TIMER0_SMCFG_TRGS_Msk             (0x70UL)                  /*!< TRGS (Bitfield-Mask: 0x07) */
#define TIMER0_SMCFG_SMC_Pos              (0UL)                     /*!< SMC (Bit 0) */
#define TIMER0_SMCFG_SMC_Msk              (0x7UL)                   /*!< SMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER0_DMAINTEN_TRGDEN_Pos        (14UL)                    /*!< TRGDEN (Bit 14) */
#define TIMER0_DMAINTEN_TRGDEN_Msk        (0x4000UL)                /*!< TRGDEN (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CMTDEN_Pos        (13UL)                    /*!< CMTDEN (Bit 13) */
#define TIMER0_DMAINTEN_CMTDEN_Msk        (0x2000UL)                /*!< CMTDEN (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CH3DEN_Pos        (12UL)                    /*!< CH3DEN (Bit 12) */
#define TIMER0_DMAINTEN_CH3DEN_Msk        (0x1000UL)                /*!< CH3DEN (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CH2DEN_Pos        (11UL)                    /*!< CH2DEN (Bit 11) */
#define TIMER0_DMAINTEN_CH2DEN_Msk        (0x800UL)                 /*!< CH2DEN (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CH1DEN_Pos        (10UL)                    /*!< CH1DEN (Bit 10) */
#define TIMER0_DMAINTEN_CH1DEN_Msk        (0x400UL)                 /*!< CH1DEN (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CH0DEN_Pos        (9UL)                     /*!< CH0DEN (Bit 9) */
#define TIMER0_DMAINTEN_CH0DEN_Msk        (0x200UL)                 /*!< CH0DEN (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_UPDEN_Pos         (8UL)                     /*!< UPDEN (Bit 8) */
#define TIMER0_DMAINTEN_UPDEN_Msk         (0x100UL)                 /*!< UPDEN (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_BRKIE_Pos         (7UL)                     /*!< BRKIE (Bit 7) */
#define TIMER0_DMAINTEN_BRKIE_Msk         (0x80UL)                  /*!< BRKIE (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_TRGIE_Pos         (6UL)                     /*!< TRGIE (Bit 6) */
#define TIMER0_DMAINTEN_TRGIE_Msk         (0x40UL)                  /*!< TRGIE (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CMTIE_Pos         (5UL)                     /*!< CMTIE (Bit 5) */
#define TIMER0_DMAINTEN_CMTIE_Msk         (0x20UL)                  /*!< CMTIE (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CH3IE_Pos         (4UL)                     /*!< CH3IE (Bit 4) */
#define TIMER0_DMAINTEN_CH3IE_Msk         (0x10UL)                  /*!< CH3IE (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CH2IE_Pos         (3UL)                     /*!< CH2IE (Bit 3) */
#define TIMER0_DMAINTEN_CH2IE_Msk         (0x8UL)                   /*!< CH2IE (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CH1IE_Pos         (2UL)                     /*!< CH1IE (Bit 2) */
#define TIMER0_DMAINTEN_CH1IE_Msk         (0x4UL)                   /*!< CH1IE (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_CH0IE_Pos         (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER0_DMAINTEN_CH0IE_Msk         (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER0_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER0_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER0_INTF_CH3OF_Pos             (12UL)                    /*!< CH3OF (Bit 12) */
#define TIMER0_INTF_CH3OF_Msk             (0x1000UL)                /*!< CH3OF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_CH2OF_Pos             (11UL)                    /*!< CH2OF (Bit 11) */
#define TIMER0_INTF_CH2OF_Msk             (0x800UL)                 /*!< CH2OF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_CH1OF_Pos             (10UL)                    /*!< CH1OF (Bit 10) */
#define TIMER0_INTF_CH1OF_Msk             (0x400UL)                 /*!< CH1OF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_CH0OF_Pos             (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER0_INTF_CH0OF_Msk             (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_BRKIF_Pos             (7UL)                     /*!< BRKIF (Bit 7) */
#define TIMER0_INTF_BRKIF_Msk             (0x80UL)                  /*!< BRKIF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_TRGIF_Pos             (6UL)                     /*!< TRGIF (Bit 6) */
#define TIMER0_INTF_TRGIF_Msk             (0x40UL)                  /*!< TRGIF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_CMTIF_Pos             (5UL)                     /*!< CMTIF (Bit 5) */
#define TIMER0_INTF_CMTIF_Msk             (0x20UL)                  /*!< CMTIF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_CH3IF_Pos             (4UL)                     /*!< CH3IF (Bit 4) */
#define TIMER0_INTF_CH3IF_Msk             (0x10UL)                  /*!< CH3IF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_CH2IF_Pos             (3UL)                     /*!< CH2IF (Bit 3) */
#define TIMER0_INTF_CH2IF_Msk             (0x8UL)                   /*!< CH2IF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_CH1IF_Pos             (2UL)                     /*!< CH1IF (Bit 2) */
#define TIMER0_INTF_CH1IF_Msk             (0x4UL)                   /*!< CH1IF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_CH0IF_Pos             (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER0_INTF_CH0IF_Msk             (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER0_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER0_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER0_SWEVG_BRKG_Pos             (7UL)                     /*!< BRKG (Bit 7) */
#define TIMER0_SWEVG_BRKG_Msk             (0x80UL)                  /*!< BRKG (Bitfield-Mask: 0x01) */
#define TIMER0_SWEVG_TRGG_Pos             (6UL)                     /*!< TRGG (Bit 6) */
#define TIMER0_SWEVG_TRGG_Msk             (0x40UL)                  /*!< TRGG (Bitfield-Mask: 0x01) */
#define TIMER0_SWEVG_CMTG_Pos             (5UL)                     /*!< CMTG (Bit 5) */
#define TIMER0_SWEVG_CMTG_Msk             (0x20UL)                  /*!< CMTG (Bitfield-Mask: 0x01) */
#define TIMER0_SWEVG_CH3G_Pos             (4UL)                     /*!< CH3G (Bit 4) */
#define TIMER0_SWEVG_CH3G_Msk             (0x10UL)                  /*!< CH3G (Bitfield-Mask: 0x01) */
#define TIMER0_SWEVG_CH2G_Pos             (3UL)                     /*!< CH2G (Bit 3) */
#define TIMER0_SWEVG_CH2G_Msk             (0x8UL)                   /*!< CH2G (Bitfield-Mask: 0x01) */
#define TIMER0_SWEVG_CH1G_Pos             (2UL)                     /*!< CH1G (Bit 2) */
#define TIMER0_SWEVG_CH1G_Msk             (0x4UL)                   /*!< CH1G (Bitfield-Mask: 0x01) */
#define TIMER0_SWEVG_CH0G_Pos             (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER0_SWEVG_CH0G_Msk             (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER0_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER0_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER0_CHCTL0_Output_CH1COMCEN_Pos (15UL)                   /*!< CH1COMCEN (Bit 15) */
#define TIMER0_CHCTL0_Output_CH1COMCEN_Msk (0x8000UL)               /*!< CH1COMCEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL0_Output_CH1COMCTL_Pos (12UL)                   /*!< CH1COMCTL (Bit 12) */
#define TIMER0_CHCTL0_Output_CH1COMCTL_Msk (0x7000UL)               /*!< CH1COMCTL (Bitfield-Mask: 0x07) */
#define TIMER0_CHCTL0_Output_CH1COMSEN_Pos (11UL)                   /*!< CH1COMSEN (Bit 11) */
#define TIMER0_CHCTL0_Output_CH1COMSEN_Msk (0x800UL)                /*!< CH1COMSEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL0_Output_CH1COMFEN_Pos (10UL)                   /*!< CH1COMFEN (Bit 10) */
#define TIMER0_CHCTL0_Output_CH1COMFEN_Msk (0x400UL)                /*!< CH1COMFEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL0_Output_CH1MS_Pos    (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER0_CHCTL0_Output_CH1MS_Msk    (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER0_CHCTL0_Output_CH0COMCEN_Pos (7UL)                    /*!< CH0COMCEN (Bit 7) */
#define TIMER0_CHCTL0_Output_CH0COMCEN_Msk (0x80UL)                 /*!< CH0COMCEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL0_Output_CH0COMCTL_Pos (4UL)                    /*!< CH0COMCTL (Bit 4) */
#define TIMER0_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                 /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
#define TIMER0_CHCTL0_Output_CH0COMSEN_Pos (3UL)                    /*!< CH0COMSEN (Bit 3) */
#define TIMER0_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                  /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL0_Output_CH0COMFEN_Pos (2UL)                    /*!< CH0COMFEN (Bit 2) */
#define TIMER0_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                  /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL0_Output_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER0_CHCTL0_Output_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER0_CHCTL0_Input_CH1CAPFLT_Pos (12UL)                    /*!< CH1CAPFLT (Bit 12) */
#define TIMER0_CHCTL0_Input_CH1CAPFLT_Msk (0xf000UL)                /*!< CH1CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER0_CHCTL0_Input_CH1CAPPSC_Pos (10UL)                    /*!< CH1CAPPSC (Bit 10) */
#define TIMER0_CHCTL0_Input_CH1CAPPSC_Msk (0xc00UL)                 /*!< CH1CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER0_CHCTL0_Input_CH1MS_Pos     (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER0_CHCTL0_Input_CH1MS_Msk     (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER0_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                     /*!< CH0CAPFLT (Bit 4) */
#define TIMER0_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                  /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER0_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                     /*!< CH0CAPPSC (Bit 2) */
#define TIMER0_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                   /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER0_CHCTL0_Input_CH0MS_Pos     (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER0_CHCTL0_Input_CH0MS_Msk     (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Output  ===================================================== */
#define TIMER0_CHCTL1_Output_CH3COMCEN_Pos (15UL)                   /*!< CH3COMCEN (Bit 15) */
#define TIMER0_CHCTL1_Output_CH3COMCEN_Msk (0x8000UL)               /*!< CH3COMCEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL1_Output_CH3COMCTL_Pos (12UL)                   /*!< CH3COMCTL (Bit 12) */
#define TIMER0_CHCTL1_Output_CH3COMCTL_Msk (0x7000UL)               /*!< CH3COMCTL (Bitfield-Mask: 0x07) */
#define TIMER0_CHCTL1_Output_CH3COMSEN_Pos (11UL)                   /*!< CH3COMSEN (Bit 11) */
#define TIMER0_CHCTL1_Output_CH3COMSEN_Msk (0x800UL)                /*!< CH3COMSEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL1_Output_CH3COMFEN_Pos (10UL)                   /*!< CH3COMFEN (Bit 10) */
#define TIMER0_CHCTL1_Output_CH3COMFEN_Msk (0x400UL)                /*!< CH3COMFEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL1_Output_CH3MS_Pos    (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER0_CHCTL1_Output_CH3MS_Msk    (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER0_CHCTL1_Output_CH2COMCEN_Pos (7UL)                    /*!< CH2COMCEN (Bit 7) */
#define TIMER0_CHCTL1_Output_CH2COMCEN_Msk (0x80UL)                 /*!< CH2COMCEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL1_Output_CH2COMCTL_Pos (4UL)                    /*!< CH2COMCTL (Bit 4) */
#define TIMER0_CHCTL1_Output_CH2COMCTL_Msk (0x70UL)                 /*!< CH2COMCTL (Bitfield-Mask: 0x07) */
#define TIMER0_CHCTL1_Output_CH2COMSEN_Pos (3UL)                    /*!< CH2COMSEN (Bit 3) */
#define TIMER0_CHCTL1_Output_CH2COMSEN_Msk (0x8UL)                  /*!< CH2COMSEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL1_Output_CH2COMFEN_Pos (2UL)                    /*!< CH2COMFEN (Bit 2) */
#define TIMER0_CHCTL1_Output_CH2COMFEN_Msk (0x4UL)                  /*!< CH2COMFEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL1_Output_CH2MS_Pos    (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER0_CHCTL1_Output_CH2MS_Msk    (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Input  ====================================================== */
#define TIMER0_CHCTL1_Input_CH3CAPFLT_Pos (12UL)                    /*!< CH3CAPFLT (Bit 12) */
#define TIMER0_CHCTL1_Input_CH3CAPFLT_Msk (0xf000UL)                /*!< CH3CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER0_CHCTL1_Input_CH3CAPPSC_Pos (10UL)                    /*!< CH3CAPPSC (Bit 10) */
#define TIMER0_CHCTL1_Input_CH3CAPPSC_Msk (0xc00UL)                 /*!< CH3CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER0_CHCTL1_Input_CH3MS_Pos     (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER0_CHCTL1_Input_CH3MS_Msk     (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER0_CHCTL1_Input_CH2CAPFLT_Pos (4UL)                     /*!< CH2CAPFLT (Bit 4) */
#define TIMER0_CHCTL1_Input_CH2CAPFLT_Msk (0xf0UL)                  /*!< CH2CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER0_CHCTL1_Input_CH2CAPPSC_Pos (2UL)                     /*!< CH2CAPPSC (Bit 2) */
#define TIMER0_CHCTL1_Input_CH2CAPPSC_Msk (0xcUL)                   /*!< CH2CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER0_CHCTL1_Input_CH2MS_Pos     (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER0_CHCTL1_Input_CH2MS_Msk     (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER0_CHCTL2_CH3P_Pos            (13UL)                    /*!< CH3P (Bit 13) */
#define TIMER0_CHCTL2_CH3P_Msk            (0x2000UL)                /*!< CH3P (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH3EN_Pos           (12UL)                    /*!< CH3EN (Bit 12) */
#define TIMER0_CHCTL2_CH3EN_Msk           (0x1000UL)                /*!< CH3EN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH2NP_Pos           (11UL)                    /*!< CH2NP (Bit 11) */
#define TIMER0_CHCTL2_CH2NP_Msk           (0x800UL)                 /*!< CH2NP (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH2NEN_Pos          (10UL)                    /*!< CH2NEN (Bit 10) */
#define TIMER0_CHCTL2_CH2NEN_Msk          (0x400UL)                 /*!< CH2NEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH2P_Pos            (9UL)                     /*!< CH2P (Bit 9) */
#define TIMER0_CHCTL2_CH2P_Msk            (0x200UL)                 /*!< CH2P (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH2EN_Pos           (8UL)                     /*!< CH2EN (Bit 8) */
#define TIMER0_CHCTL2_CH2EN_Msk           (0x100UL)                 /*!< CH2EN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH1NP_Pos           (7UL)                     /*!< CH1NP (Bit 7) */
#define TIMER0_CHCTL2_CH1NP_Msk           (0x80UL)                  /*!< CH1NP (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH1NEN_Pos          (6UL)                     /*!< CH1NEN (Bit 6) */
#define TIMER0_CHCTL2_CH1NEN_Msk          (0x40UL)                  /*!< CH1NEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH1P_Pos            (5UL)                     /*!< CH1P (Bit 5) */
#define TIMER0_CHCTL2_CH1P_Msk            (0x20UL)                  /*!< CH1P (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH1EN_Pos           (4UL)                     /*!< CH1EN (Bit 4) */
#define TIMER0_CHCTL2_CH1EN_Msk           (0x10UL)                  /*!< CH1EN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH0NP_Pos           (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER0_CHCTL2_CH0NP_Msk           (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH0NEN_Pos          (2UL)                     /*!< CH0NEN (Bit 2) */
#define TIMER0_CHCTL2_CH0NEN_Msk          (0x4UL)                   /*!< CH0NEN (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH0P_Pos            (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER0_CHCTL2_CH0P_Msk            (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER0_CHCTL2_CH0EN_Pos           (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER0_CHCTL2_CH0EN_Msk           (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER0_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER0_CNT_CNT_Msk                (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER0_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER0_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER0_CAR_CAR_Pos                (0UL)                     /*!< CAR (Bit 0) */
#define TIMER0_CAR_CAR_Msk                (0xffffUL)                /*!< CAR (Bitfield-Mask: 0xffff) */
/* =========================================================  CREP  ========================================================== */
#define TIMER0_CREP_CREP_Pos              (0UL)                     /*!< CREP (Bit 0) */
#define TIMER0_CREP_CREP_Msk              (0xffUL)                  /*!< CREP (Bitfield-Mask: 0xff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER0_CH0CV_CH0VAL_Pos           (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER0_CH0CV_CH0VAL_Msk           (0xffffUL)                /*!< CH0VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH1CV  ========================================================= */
#define TIMER0_CH1CV_CH1VAL_Pos           (0UL)                     /*!< CH1VAL (Bit 0) */
#define TIMER0_CH1CV_CH1VAL_Msk           (0xffffUL)                /*!< CH1VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH2CV  ========================================================= */
#define TIMER0_CH2CV_CH2VAL_Pos           (0UL)                     /*!< CH2VAL (Bit 0) */
#define TIMER0_CH2CV_CH2VAL_Msk           (0xffffUL)                /*!< CH2VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH3CV  ========================================================= */
#define TIMER0_CH3CV_CH3VAL_Pos           (0UL)                     /*!< CH3VAL (Bit 0) */
#define TIMER0_CH3CV_CH3VAL_Msk           (0xffffUL)                /*!< CH3VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CCHP  ========================================================== */
#define TIMER0_CCHP_POEN_Pos              (15UL)                    /*!< POEN (Bit 15) */
#define TIMER0_CCHP_POEN_Msk              (0x8000UL)                /*!< POEN (Bitfield-Mask: 0x01) */
#define TIMER0_CCHP_OAEN_Pos              (14UL)                    /*!< OAEN (Bit 14) */
#define TIMER0_CCHP_OAEN_Msk              (0x4000UL)                /*!< OAEN (Bitfield-Mask: 0x01) */
#define TIMER0_CCHP_BRKP_Pos              (13UL)                    /*!< BRKP (Bit 13) */
#define TIMER0_CCHP_BRKP_Msk              (0x2000UL)                /*!< BRKP (Bitfield-Mask: 0x01) */
#define TIMER0_CCHP_BRKEN_Pos             (12UL)                    /*!< BRKEN (Bit 12) */
#define TIMER0_CCHP_BRKEN_Msk             (0x1000UL)                /*!< BRKEN (Bitfield-Mask: 0x01) */
#define TIMER0_CCHP_ROS_Pos               (11UL)                    /*!< ROS (Bit 11) */
#define TIMER0_CCHP_ROS_Msk               (0x800UL)                 /*!< ROS (Bitfield-Mask: 0x01) */
#define TIMER0_CCHP_IOS_Pos               (10UL)                    /*!< IOS (Bit 10) */
#define TIMER0_CCHP_IOS_Msk               (0x400UL)                 /*!< IOS (Bitfield-Mask: 0x01) */
#define TIMER0_CCHP_PROT_Pos              (8UL)                     /*!< PROT (Bit 8) */
#define TIMER0_CCHP_PROT_Msk              (0x300UL)                 /*!< PROT (Bitfield-Mask: 0x03) */
#define TIMER0_CCHP_DTCFG_Pos             (0UL)                     /*!< DTCFG (Bit 0) */
#define TIMER0_CCHP_DTCFG_Msk             (0xffUL)                  /*!< DTCFG (Bitfield-Mask: 0xff) */
/* ========================================================  DMACFG  ========================================================= */
#define TIMER0_DMACFG_DMATC_Pos           (8UL)                     /*!< DMATC (Bit 8) */
#define TIMER0_DMACFG_DMATC_Msk           (0x1f00UL)                /*!< DMATC (Bitfield-Mask: 0x1f) */
#define TIMER0_DMACFG_DMATA_Pos           (0UL)                     /*!< DMATA (Bit 0) */
#define TIMER0_DMACFG_DMATA_Msk           (0x1fUL)                  /*!< DMATA (Bitfield-Mask: 0x1f) */
/* =========================================================  DMATB  ========================================================= */
#define TIMER0_DMATB_DMATB_Pos            (0UL)                     /*!< DMATB (Bit 0) */
#define TIMER0_DMATB_DMATB_Msk            (0xffffUL)                /*!< DMATB (Bitfield-Mask: 0xffff) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER0_CFG_OUTSEL_Pos             (0UL)                     /*!< OUTSEL (Bit 0) */
#define TIMER0_CFG_OUTSEL_Msk             (0x1UL)                   /*!< OUTSEL (Bitfield-Mask: 0x01) */
#define TIMER0_CFG_CHVSEL_Pos             (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER0_CFG_CHVSEL_Msk             (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER1                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER1_CTL0_CKDIV_Pos             (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER1_CTL0_CKDIV_Msk             (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER1_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER1_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER1_CTL0_CAM_Pos               (5UL)                     /*!< CAM (Bit 5) */
#define TIMER1_CTL0_CAM_Msk               (0x60UL)                  /*!< CAM (Bitfield-Mask: 0x03) */
#define TIMER1_CTL0_DIR_Pos               (4UL)                     /*!< DIR (Bit 4) */
#define TIMER1_CTL0_DIR_Msk               (0x10UL)                  /*!< DIR (Bitfield-Mask: 0x01) */
#define TIMER1_CTL0_SPM_Pos               (3UL)                     /*!< SPM (Bit 3) */
#define TIMER1_CTL0_SPM_Msk               (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER1_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER1_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER1_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER1_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER1_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER1_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define TIMER1_CTL1_TI0S_Pos              (7UL)                     /*!< TI0S (Bit 7) */
#define TIMER1_CTL1_TI0S_Msk              (0x80UL)                  /*!< TI0S (Bitfield-Mask: 0x01) */
#define TIMER1_CTL1_MMC_Pos               (4UL)                     /*!< MMC (Bit 4) */
#define TIMER1_CTL1_MMC_Msk               (0x70UL)                  /*!< MMC (Bitfield-Mask: 0x07) */
#define TIMER1_CTL1_DMAS_Pos              (3UL)                     /*!< DMAS (Bit 3) */
#define TIMER1_CTL1_DMAS_Msk              (0x8UL)                   /*!< DMAS (Bitfield-Mask: 0x01) */
/* =========================================================  SMCFG  ========================================================= */
#define TIMER1_SMCFG_ETP_Pos              (15UL)                    /*!< ETP (Bit 15) */
#define TIMER1_SMCFG_ETP_Msk              (0x8000UL)                /*!< ETP (Bitfield-Mask: 0x01) */
#define TIMER1_SMCFG_SMC1_Pos             (14UL)                    /*!< SMC1 (Bit 14) */
#define TIMER1_SMCFG_SMC1_Msk             (0x4000UL)                /*!< SMC1 (Bitfield-Mask: 0x01) */
#define TIMER1_SMCFG_ETPSC_Pos            (12UL)                    /*!< ETPSC (Bit 12) */
#define TIMER1_SMCFG_ETPSC_Msk            (0x3000UL)                /*!< ETPSC (Bitfield-Mask: 0x03) */
#define TIMER1_SMCFG_ETFC_Pos             (8UL)                     /*!< ETFC (Bit 8) */
#define TIMER1_SMCFG_ETFC_Msk             (0xf00UL)                 /*!< ETFC (Bitfield-Mask: 0x0f) */
#define TIMER1_SMCFG_MSM_Pos              (7UL)                     /*!< MSM (Bit 7) */
#define TIMER1_SMCFG_MSM_Msk              (0x80UL)                  /*!< MSM (Bitfield-Mask: 0x01) */
#define TIMER1_SMCFG_TRGS_Pos             (4UL)                     /*!< TRGS (Bit 4) */
#define TIMER1_SMCFG_TRGS_Msk             (0x70UL)                  /*!< TRGS (Bitfield-Mask: 0x07) */
#define TIMER1_SMCFG_SMC_Pos              (0UL)                     /*!< SMC (Bit 0) */
#define TIMER1_SMCFG_SMC_Msk              (0x7UL)                   /*!< SMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER1_DMAINTEN_TRGDEN_Pos        (14UL)                    /*!< TRGDEN (Bit 14) */
#define TIMER1_DMAINTEN_TRGDEN_Msk        (0x4000UL)                /*!< TRGDEN (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_CH3DEN_Pos        (12UL)                    /*!< CH3DEN (Bit 12) */
#define TIMER1_DMAINTEN_CH3DEN_Msk        (0x1000UL)                /*!< CH3DEN (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_CH2DEN_Pos        (11UL)                    /*!< CH2DEN (Bit 11) */
#define TIMER1_DMAINTEN_CH2DEN_Msk        (0x800UL)                 /*!< CH2DEN (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_CH1DEN_Pos        (10UL)                    /*!< CH1DEN (Bit 10) */
#define TIMER1_DMAINTEN_CH1DEN_Msk        (0x400UL)                 /*!< CH1DEN (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_CH0DEN_Pos        (9UL)                     /*!< CH0DEN (Bit 9) */
#define TIMER1_DMAINTEN_CH0DEN_Msk        (0x200UL)                 /*!< CH0DEN (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_UPDEN_Pos         (8UL)                     /*!< UPDEN (Bit 8) */
#define TIMER1_DMAINTEN_UPDEN_Msk         (0x100UL)                 /*!< UPDEN (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_TRGIE_Pos         (6UL)                     /*!< TRGIE (Bit 6) */
#define TIMER1_DMAINTEN_TRGIE_Msk         (0x40UL)                  /*!< TRGIE (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_CH3IE_Pos         (4UL)                     /*!< CH3IE (Bit 4) */
#define TIMER1_DMAINTEN_CH3IE_Msk         (0x10UL)                  /*!< CH3IE (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_CH2IE_Pos         (3UL)                     /*!< CH2IE (Bit 3) */
#define TIMER1_DMAINTEN_CH2IE_Msk         (0x8UL)                   /*!< CH2IE (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_CH1IE_Pos         (2UL)                     /*!< CH1IE (Bit 2) */
#define TIMER1_DMAINTEN_CH1IE_Msk         (0x4UL)                   /*!< CH1IE (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_CH0IE_Pos         (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER1_DMAINTEN_CH0IE_Msk         (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER1_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER1_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER1_INTF_CH3OF_Pos             (12UL)                    /*!< CH3OF (Bit 12) */
#define TIMER1_INTF_CH3OF_Msk             (0x1000UL)                /*!< CH3OF (Bitfield-Mask: 0x01) */
#define TIMER1_INTF_CH2OF_Pos             (11UL)                    /*!< CH2OF (Bit 11) */
#define TIMER1_INTF_CH2OF_Msk             (0x800UL)                 /*!< CH2OF (Bitfield-Mask: 0x01) */
#define TIMER1_INTF_CH1OF_Pos             (10UL)                    /*!< CH1OF (Bit 10) */
#define TIMER1_INTF_CH1OF_Msk             (0x400UL)                 /*!< CH1OF (Bitfield-Mask: 0x01) */
#define TIMER1_INTF_CH0OF_Pos             (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER1_INTF_CH0OF_Msk             (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER1_INTF_TRGIF_Pos             (6UL)                     /*!< TRGIF (Bit 6) */
#define TIMER1_INTF_TRGIF_Msk             (0x40UL)                  /*!< TRGIF (Bitfield-Mask: 0x01) */
#define TIMER1_INTF_CH3IF_Pos             (4UL)                     /*!< CH3IF (Bit 4) */
#define TIMER1_INTF_CH3IF_Msk             (0x10UL)                  /*!< CH3IF (Bitfield-Mask: 0x01) */
#define TIMER1_INTF_CH2IF_Pos             (3UL)                     /*!< CH2IF (Bit 3) */
#define TIMER1_INTF_CH2IF_Msk             (0x8UL)                   /*!< CH2IF (Bitfield-Mask: 0x01) */
#define TIMER1_INTF_CH1IF_Pos             (2UL)                     /*!< CH1IF (Bit 2) */
#define TIMER1_INTF_CH1IF_Msk             (0x4UL)                   /*!< CH1IF (Bitfield-Mask: 0x01) */
#define TIMER1_INTF_CH0IF_Pos             (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER1_INTF_CH0IF_Msk             (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER1_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER1_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER1_SWEVG_TRGG_Pos             (6UL)                     /*!< TRGG (Bit 6) */
#define TIMER1_SWEVG_TRGG_Msk             (0x40UL)                  /*!< TRGG (Bitfield-Mask: 0x01) */
#define TIMER1_SWEVG_CH3G_Pos             (4UL)                     /*!< CH3G (Bit 4) */
#define TIMER1_SWEVG_CH3G_Msk             (0x10UL)                  /*!< CH3G (Bitfield-Mask: 0x01) */
#define TIMER1_SWEVG_CH2G_Pos             (3UL)                     /*!< CH2G (Bit 3) */
#define TIMER1_SWEVG_CH2G_Msk             (0x8UL)                   /*!< CH2G (Bitfield-Mask: 0x01) */
#define TIMER1_SWEVG_CH1G_Pos             (2UL)                     /*!< CH1G (Bit 2) */
#define TIMER1_SWEVG_CH1G_Msk             (0x4UL)                   /*!< CH1G (Bitfield-Mask: 0x01) */
#define TIMER1_SWEVG_CH0G_Pos             (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER1_SWEVG_CH0G_Msk             (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER1_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER1_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER1_CHCTL0_Output_CH1COMCEN_Pos (15UL)                   /*!< CH1COMCEN (Bit 15) */
#define TIMER1_CHCTL0_Output_CH1COMCEN_Msk (0x8000UL)               /*!< CH1COMCEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL0_Output_CH1COMCTL_Pos (12UL)                   /*!< CH1COMCTL (Bit 12) */
#define TIMER1_CHCTL0_Output_CH1COMCTL_Msk (0x7000UL)               /*!< CH1COMCTL (Bitfield-Mask: 0x07) */
#define TIMER1_CHCTL0_Output_CH1COMSEN_Pos (11UL)                   /*!< CH1COMSEN (Bit 11) */
#define TIMER1_CHCTL0_Output_CH1COMSEN_Msk (0x800UL)                /*!< CH1COMSEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL0_Output_CH1COMFEN_Pos (10UL)                   /*!< CH1COMFEN (Bit 10) */
#define TIMER1_CHCTL0_Output_CH1COMFEN_Msk (0x400UL)                /*!< CH1COMFEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL0_Output_CH1MS_Pos    (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER1_CHCTL0_Output_CH1MS_Msk    (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER1_CHCTL0_Output_CH0COMCEN_Pos (7UL)                    /*!< CH0COMCEN (Bit 7) */
#define TIMER1_CHCTL0_Output_CH0COMCEN_Msk (0x80UL)                 /*!< CH0COMCEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL0_Output_CH0COMCTL_Pos (4UL)                    /*!< CH0COMCTL (Bit 4) */
#define TIMER1_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                 /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
#define TIMER1_CHCTL0_Output_CH0COMSEN_Pos (3UL)                    /*!< CH0COMSEN (Bit 3) */
#define TIMER1_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                  /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL0_Output_CH0COMFEN_Pos (2UL)                    /*!< CH0COMFEN (Bit 2) */
#define TIMER1_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                  /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL0_Output_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER1_CHCTL0_Output_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER1_CHCTL0_Input_CH1CAPFLT_Pos (12UL)                    /*!< CH1CAPFLT (Bit 12) */
#define TIMER1_CHCTL0_Input_CH1CAPFLT_Msk (0xf000UL)                /*!< CH1CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER1_CHCTL0_Input_CH1CAPPSC_Pos (10UL)                    /*!< CH1CAPPSC (Bit 10) */
#define TIMER1_CHCTL0_Input_CH1CAPPSC_Msk (0xc00UL)                 /*!< CH1CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER1_CHCTL0_Input_CH1MS_Pos     (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER1_CHCTL0_Input_CH1MS_Msk     (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER1_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                     /*!< CH0CAPFLT (Bit 4) */
#define TIMER1_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                  /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER1_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                     /*!< CH0CAPPSC (Bit 2) */
#define TIMER1_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                   /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER1_CHCTL0_Input_CH0MS_Pos     (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER1_CHCTL0_Input_CH0MS_Msk     (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Output  ===================================================== */
#define TIMER1_CHCTL1_Output_CH3COMCEN_Pos (15UL)                   /*!< CH3COMCEN (Bit 15) */
#define TIMER1_CHCTL1_Output_CH3COMCEN_Msk (0x8000UL)               /*!< CH3COMCEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL1_Output_CH3COMCTL_Pos (12UL)                   /*!< CH3COMCTL (Bit 12) */
#define TIMER1_CHCTL1_Output_CH3COMCTL_Msk (0x7000UL)               /*!< CH3COMCTL (Bitfield-Mask: 0x07) */
#define TIMER1_CHCTL1_Output_CH3COMSEN_Pos (11UL)                   /*!< CH3COMSEN (Bit 11) */
#define TIMER1_CHCTL1_Output_CH3COMSEN_Msk (0x800UL)                /*!< CH3COMSEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL1_Output_CH3COMFEN_Pos (10UL)                   /*!< CH3COMFEN (Bit 10) */
#define TIMER1_CHCTL1_Output_CH3COMFEN_Msk (0x400UL)                /*!< CH3COMFEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL1_Output_CH3MS_Pos    (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER1_CHCTL1_Output_CH3MS_Msk    (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER1_CHCTL1_Output_CH2COMCEN_Pos (7UL)                    /*!< CH2COMCEN (Bit 7) */
#define TIMER1_CHCTL1_Output_CH2COMCEN_Msk (0x80UL)                 /*!< CH2COMCEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL1_Output_CH2COMCTL_Pos (4UL)                    /*!< CH2COMCTL (Bit 4) */
#define TIMER1_CHCTL1_Output_CH2COMCTL_Msk (0x70UL)                 /*!< CH2COMCTL (Bitfield-Mask: 0x07) */
#define TIMER1_CHCTL1_Output_CH2COMSEN_Pos (3UL)                    /*!< CH2COMSEN (Bit 3) */
#define TIMER1_CHCTL1_Output_CH2COMSEN_Msk (0x8UL)                  /*!< CH2COMSEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL1_Output_CH2COMFEN_Pos (2UL)                    /*!< CH2COMFEN (Bit 2) */
#define TIMER1_CHCTL1_Output_CH2COMFEN_Msk (0x4UL)                  /*!< CH2COMFEN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL1_Output_CH2MS_Pos    (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER1_CHCTL1_Output_CH2MS_Msk    (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Input  ====================================================== */
#define TIMER1_CHCTL1_Input_CH3CAPFLT_Pos (12UL)                    /*!< CH3CAPFLT (Bit 12) */
#define TIMER1_CHCTL1_Input_CH3CAPFLT_Msk (0xf000UL)                /*!< CH3CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER1_CHCTL1_Input_CH3CAPPSC_Pos (10UL)                    /*!< CH3CAPPSC (Bit 10) */
#define TIMER1_CHCTL1_Input_CH3CAPPSC_Msk (0xc00UL)                 /*!< CH3CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER1_CHCTL1_Input_CH3MS_Pos     (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER1_CHCTL1_Input_CH3MS_Msk     (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER1_CHCTL1_Input_CH2CAPFLT_Pos (4UL)                     /*!< CH2CAPFLT (Bit 4) */
#define TIMER1_CHCTL1_Input_CH2CAPFLT_Msk (0xf0UL)                  /*!< CH2CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER1_CHCTL1_Input_CH2CAPPSC_Pos (2UL)                     /*!< CH2CAPPSC (Bit 2) */
#define TIMER1_CHCTL1_Input_CH2CAPPSC_Msk (0xcUL)                   /*!< CH2CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER1_CHCTL1_Input_CH2MS_Pos     (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER1_CHCTL1_Input_CH2MS_Msk     (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER1_CHCTL2_CH3P_Pos            (13UL)                    /*!< CH3P (Bit 13) */
#define TIMER1_CHCTL2_CH3P_Msk            (0x2000UL)                /*!< CH3P (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH3EN_Pos           (12UL)                    /*!< CH3EN (Bit 12) */
#define TIMER1_CHCTL2_CH3EN_Msk           (0x1000UL)                /*!< CH3EN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH2NP_Pos           (11UL)                    /*!< CH2NP (Bit 11) */
#define TIMER1_CHCTL2_CH2NP_Msk           (0x800UL)                 /*!< CH2NP (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH2P_Pos            (9UL)                     /*!< CH2P (Bit 9) */
#define TIMER1_CHCTL2_CH2P_Msk            (0x200UL)                 /*!< CH2P (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH2EN_Pos           (8UL)                     /*!< CH2EN (Bit 8) */
#define TIMER1_CHCTL2_CH2EN_Msk           (0x100UL)                 /*!< CH2EN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH1NP_Pos           (7UL)                     /*!< CH1NP (Bit 7) */
#define TIMER1_CHCTL2_CH1NP_Msk           (0x80UL)                  /*!< CH1NP (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH1P_Pos            (5UL)                     /*!< CH1P (Bit 5) */
#define TIMER1_CHCTL2_CH1P_Msk            (0x20UL)                  /*!< CH1P (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH1EN_Pos           (4UL)                     /*!< CH1EN (Bit 4) */
#define TIMER1_CHCTL2_CH1EN_Msk           (0x10UL)                  /*!< CH1EN (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH0NP_Pos           (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER1_CHCTL2_CH0NP_Msk           (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH0P_Pos            (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER1_CHCTL2_CH0P_Msk            (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER1_CHCTL2_CH0EN_Pos           (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER1_CHCTL2_CH0EN_Msk           (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER1_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER1_CNT_CNT_Msk                (0xffffffffUL)            /*!< CNT (Bitfield-Mask: 0xffffffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER1_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER1_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER1_CAR_CARL_Pos               (0UL)                     /*!< CARL (Bit 0) */
#define TIMER1_CAR_CARL_Msk               (0xffffffffUL)            /*!< CARL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER1_CH0CV_CH0VAL_Pos           (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER1_CH0CV_CH0VAL_Msk           (0xffffffffUL)            /*!< CH0VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH1CV  ========================================================= */
#define TIMER1_CH1CV_CH1VAL_Pos           (0UL)                     /*!< CH1VAL (Bit 0) */
#define TIMER1_CH1CV_CH1VAL_Msk           (0xffffffffUL)            /*!< CH1VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH2CV  ========================================================= */
#define TIMER1_CH2CV_CH2VAL_Pos           (0UL)                     /*!< CH2VAL (Bit 0) */
#define TIMER1_CH2CV_CH2VAL_Msk           (0xffffffffUL)            /*!< CH2VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH3CV  ========================================================= */
#define TIMER1_CH3CV_CH3VAL_Pos           (0UL)                     /*!< CH3VAL (Bit 0) */
#define TIMER1_CH3CV_CH3VAL_Msk           (0xffffffffUL)            /*!< CH3VAL (Bitfield-Mask: 0xffffffff) */
/* ========================================================  DMACFG  ========================================================= */
#define TIMER1_DMACFG_DMATC_Pos           (8UL)                     /*!< DMATC (Bit 8) */
#define TIMER1_DMACFG_DMATC_Msk           (0x1f00UL)                /*!< DMATC (Bitfield-Mask: 0x1f) */
#define TIMER1_DMACFG_DMATA_Pos           (0UL)                     /*!< DMATA (Bit 0) */
#define TIMER1_DMACFG_DMATA_Msk           (0x1fUL)                  /*!< DMATA (Bitfield-Mask: 0x1f) */
/* =========================================================  DMATB  ========================================================= */
#define TIMER1_DMATB_DMATB_Pos            (0UL)                     /*!< DMATB (Bit 0) */
#define TIMER1_DMATB_DMATB_Msk            (0xffffUL)                /*!< DMATB (Bitfield-Mask: 0xffff) */
/* =========================================================  IRMP  ========================================================== */
#define TIMER1_IRMP_CI3_RMP_Pos           (6UL)                     /*!< CI3_RMP (Bit 6) */
#define TIMER1_IRMP_CI3_RMP_Msk           (0xc0UL)                  /*!< CI3_RMP (Bitfield-Mask: 0x03) */
#define TIMER1_IRMP_ITI1_RMP_Pos          (10UL)                    /*!< ITI1_RMP (Bit 10) */
#define TIMER1_IRMP_ITI1_RMP_Msk          (0xc00UL)                 /*!< ITI1_RMP (Bitfield-Mask: 0x03) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER1_CFG_CHVSEL_Pos             (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER1_CFG_CHVSEL_Msk             (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER2                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER2_CTL0_CKDIV_Pos             (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER2_CTL0_CKDIV_Msk             (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER2_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER2_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER2_CTL0_CAM_Pos               (5UL)                     /*!< CAM (Bit 5) */
#define TIMER2_CTL0_CAM_Msk               (0x60UL)                  /*!< CAM (Bitfield-Mask: 0x03) */
#define TIMER2_CTL0_DIR_Pos               (4UL)                     /*!< DIR (Bit 4) */
#define TIMER2_CTL0_DIR_Msk               (0x10UL)                  /*!< DIR (Bitfield-Mask: 0x01) */
#define TIMER2_CTL0_SPM_Pos               (3UL)                     /*!< SPM (Bit 3) */
#define TIMER2_CTL0_SPM_Msk               (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER2_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER2_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER2_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER2_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER2_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER2_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define TIMER2_CTL1_TI0S_Pos              (7UL)                     /*!< TI0S (Bit 7) */
#define TIMER2_CTL1_TI0S_Msk              (0x80UL)                  /*!< TI0S (Bitfield-Mask: 0x01) */
#define TIMER2_CTL1_MMC_Pos               (4UL)                     /*!< MMC (Bit 4) */
#define TIMER2_CTL1_MMC_Msk               (0x70UL)                  /*!< MMC (Bitfield-Mask: 0x07) */
#define TIMER2_CTL1_DMAS_Pos              (3UL)                     /*!< DMAS (Bit 3) */
#define TIMER2_CTL1_DMAS_Msk              (0x8UL)                   /*!< DMAS (Bitfield-Mask: 0x01) */
/* =========================================================  SMCFG  ========================================================= */
#define TIMER2_SMCFG_ETP_Pos              (15UL)                    /*!< ETP (Bit 15) */
#define TIMER2_SMCFG_ETP_Msk              (0x8000UL)                /*!< ETP (Bitfield-Mask: 0x01) */
#define TIMER2_SMCFG_SMC1_Pos             (14UL)                    /*!< SMC1 (Bit 14) */
#define TIMER2_SMCFG_SMC1_Msk             (0x4000UL)                /*!< SMC1 (Bitfield-Mask: 0x01) */
#define TIMER2_SMCFG_ETPSC_Pos            (12UL)                    /*!< ETPSC (Bit 12) */
#define TIMER2_SMCFG_ETPSC_Msk            (0x3000UL)                /*!< ETPSC (Bitfield-Mask: 0x03) */
#define TIMER2_SMCFG_ETFC_Pos             (8UL)                     /*!< ETFC (Bit 8) */
#define TIMER2_SMCFG_ETFC_Msk             (0xf00UL)                 /*!< ETFC (Bitfield-Mask: 0x0f) */
#define TIMER2_SMCFG_MSM_Pos              (7UL)                     /*!< MSM (Bit 7) */
#define TIMER2_SMCFG_MSM_Msk              (0x80UL)                  /*!< MSM (Bitfield-Mask: 0x01) */
#define TIMER2_SMCFG_TRGS_Pos             (4UL)                     /*!< TRGS (Bit 4) */
#define TIMER2_SMCFG_TRGS_Msk             (0x70UL)                  /*!< TRGS (Bitfield-Mask: 0x07) */
#define TIMER2_SMCFG_SMC_Pos              (0UL)                     /*!< SMC (Bit 0) */
#define TIMER2_SMCFG_SMC_Msk              (0x7UL)                   /*!< SMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER2_DMAINTEN_TRGDEN_Pos        (14UL)                    /*!< TRGDEN (Bit 14) */
#define TIMER2_DMAINTEN_TRGDEN_Msk        (0x4000UL)                /*!< TRGDEN (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_CH3DEN_Pos        (12UL)                    /*!< CH3DEN (Bit 12) */
#define TIMER2_DMAINTEN_CH3DEN_Msk        (0x1000UL)                /*!< CH3DEN (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_CH2DEN_Pos        (11UL)                    /*!< CH2DEN (Bit 11) */
#define TIMER2_DMAINTEN_CH2DEN_Msk        (0x800UL)                 /*!< CH2DEN (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_CH1DEN_Pos        (10UL)                    /*!< CH1DEN (Bit 10) */
#define TIMER2_DMAINTEN_CH1DEN_Msk        (0x400UL)                 /*!< CH1DEN (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_CH0DEN_Pos        (9UL)                     /*!< CH0DEN (Bit 9) */
#define TIMER2_DMAINTEN_CH0DEN_Msk        (0x200UL)                 /*!< CH0DEN (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_UPDEN_Pos         (8UL)                     /*!< UPDEN (Bit 8) */
#define TIMER2_DMAINTEN_UPDEN_Msk         (0x100UL)                 /*!< UPDEN (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_TRGIE_Pos         (6UL)                     /*!< TRGIE (Bit 6) */
#define TIMER2_DMAINTEN_TRGIE_Msk         (0x40UL)                  /*!< TRGIE (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_CH3IE_Pos         (4UL)                     /*!< CH3IE (Bit 4) */
#define TIMER2_DMAINTEN_CH3IE_Msk         (0x10UL)                  /*!< CH3IE (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_CH2IE_Pos         (3UL)                     /*!< CH2IE (Bit 3) */
#define TIMER2_DMAINTEN_CH2IE_Msk         (0x8UL)                   /*!< CH2IE (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_CH1IE_Pos         (2UL)                     /*!< CH1IE (Bit 2) */
#define TIMER2_DMAINTEN_CH1IE_Msk         (0x4UL)                   /*!< CH1IE (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_CH0IE_Pos         (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER2_DMAINTEN_CH0IE_Msk         (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER2_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER2_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER2_INTF_CH3OF_Pos             (12UL)                    /*!< CH3OF (Bit 12) */
#define TIMER2_INTF_CH3OF_Msk             (0x1000UL)                /*!< CH3OF (Bitfield-Mask: 0x01) */
#define TIMER2_INTF_CH2OF_Pos             (11UL)                    /*!< CH2OF (Bit 11) */
#define TIMER2_INTF_CH2OF_Msk             (0x800UL)                 /*!< CH2OF (Bitfield-Mask: 0x01) */
#define TIMER2_INTF_CH1OF_Pos             (10UL)                    /*!< CH1OF (Bit 10) */
#define TIMER2_INTF_CH1OF_Msk             (0x400UL)                 /*!< CH1OF (Bitfield-Mask: 0x01) */
#define TIMER2_INTF_CH0OF_Pos             (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER2_INTF_CH0OF_Msk             (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER2_INTF_TRGIF_Pos             (6UL)                     /*!< TRGIF (Bit 6) */
#define TIMER2_INTF_TRGIF_Msk             (0x40UL)                  /*!< TRGIF (Bitfield-Mask: 0x01) */
#define TIMER2_INTF_CH3IF_Pos             (4UL)                     /*!< CH3IF (Bit 4) */
#define TIMER2_INTF_CH3IF_Msk             (0x10UL)                  /*!< CH3IF (Bitfield-Mask: 0x01) */
#define TIMER2_INTF_CH2IF_Pos             (3UL)                     /*!< CH2IF (Bit 3) */
#define TIMER2_INTF_CH2IF_Msk             (0x8UL)                   /*!< CH2IF (Bitfield-Mask: 0x01) */
#define TIMER2_INTF_CH1IF_Pos             (2UL)                     /*!< CH1IF (Bit 2) */
#define TIMER2_INTF_CH1IF_Msk             (0x4UL)                   /*!< CH1IF (Bitfield-Mask: 0x01) */
#define TIMER2_INTF_CH0IF_Pos             (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER2_INTF_CH0IF_Msk             (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER2_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER2_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER2_SWEVG_TRGG_Pos             (6UL)                     /*!< TRGG (Bit 6) */
#define TIMER2_SWEVG_TRGG_Msk             (0x40UL)                  /*!< TRGG (Bitfield-Mask: 0x01) */
#define TIMER2_SWEVG_CH3G_Pos             (4UL)                     /*!< CH3G (Bit 4) */
#define TIMER2_SWEVG_CH3G_Msk             (0x10UL)                  /*!< CH3G (Bitfield-Mask: 0x01) */
#define TIMER2_SWEVG_CH2G_Pos             (3UL)                     /*!< CH2G (Bit 3) */
#define TIMER2_SWEVG_CH2G_Msk             (0x8UL)                   /*!< CH2G (Bitfield-Mask: 0x01) */
#define TIMER2_SWEVG_CH1G_Pos             (2UL)                     /*!< CH1G (Bit 2) */
#define TIMER2_SWEVG_CH1G_Msk             (0x4UL)                   /*!< CH1G (Bitfield-Mask: 0x01) */
#define TIMER2_SWEVG_CH0G_Pos             (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER2_SWEVG_CH0G_Msk             (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER2_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER2_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER2_CHCTL0_Output_CH1COMCEN_Pos (15UL)                   /*!< CH1COMCEN (Bit 15) */
#define TIMER2_CHCTL0_Output_CH1COMCEN_Msk (0x8000UL)               /*!< CH1COMCEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL0_Output_CH1COMCTL_Pos (12UL)                   /*!< CH1COMCTL (Bit 12) */
#define TIMER2_CHCTL0_Output_CH1COMCTL_Msk (0x7000UL)               /*!< CH1COMCTL (Bitfield-Mask: 0x07) */
#define TIMER2_CHCTL0_Output_CH1COMSEN_Pos (11UL)                   /*!< CH1COMSEN (Bit 11) */
#define TIMER2_CHCTL0_Output_CH1COMSEN_Msk (0x800UL)                /*!< CH1COMSEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL0_Output_CH1COMFEN_Pos (10UL)                   /*!< CH1COMFEN (Bit 10) */
#define TIMER2_CHCTL0_Output_CH1COMFEN_Msk (0x400UL)                /*!< CH1COMFEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL0_Output_CH1MS_Pos    (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER2_CHCTL0_Output_CH1MS_Msk    (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER2_CHCTL0_Output_CH0COMCEN_Pos (7UL)                    /*!< CH0COMCEN (Bit 7) */
#define TIMER2_CHCTL0_Output_CH0COMCEN_Msk (0x80UL)                 /*!< CH0COMCEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL0_Output_CH0COMCTL_Pos (4UL)                    /*!< CH0COMCTL (Bit 4) */
#define TIMER2_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                 /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
#define TIMER2_CHCTL0_Output_CH0COMSEN_Pos (3UL)                    /*!< CH0COMSEN (Bit 3) */
#define TIMER2_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                  /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL0_Output_CH0COMFEN_Pos (2UL)                    /*!< CH0COMFEN (Bit 2) */
#define TIMER2_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                  /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL0_Output_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER2_CHCTL0_Output_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER2_CHCTL0_Input_CH1CAPFLT_Pos (12UL)                    /*!< CH1CAPFLT (Bit 12) */
#define TIMER2_CHCTL0_Input_CH1CAPFLT_Msk (0xf000UL)                /*!< CH1CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER2_CHCTL0_Input_CH1CAPPSC_Pos (10UL)                    /*!< CH1CAPPSC (Bit 10) */
#define TIMER2_CHCTL0_Input_CH1CAPPSC_Msk (0xc00UL)                 /*!< CH1CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER2_CHCTL0_Input_CH1MS_Pos     (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER2_CHCTL0_Input_CH1MS_Msk     (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER2_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                     /*!< CH0CAPFLT (Bit 4) */
#define TIMER2_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                  /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER2_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                     /*!< CH0CAPPSC (Bit 2) */
#define TIMER2_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                   /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER2_CHCTL0_Input_CH0MS_Pos     (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER2_CHCTL0_Input_CH0MS_Msk     (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Output  ===================================================== */
#define TIMER2_CHCTL1_Output_CH3COMCEN_Pos (15UL)                   /*!< CH3COMCEN (Bit 15) */
#define TIMER2_CHCTL1_Output_CH3COMCEN_Msk (0x8000UL)               /*!< CH3COMCEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL1_Output_CH3COMCTL_Pos (12UL)                   /*!< CH3COMCTL (Bit 12) */
#define TIMER2_CHCTL1_Output_CH3COMCTL_Msk (0x7000UL)               /*!< CH3COMCTL (Bitfield-Mask: 0x07) */
#define TIMER2_CHCTL1_Output_CH3COMSEN_Pos (11UL)                   /*!< CH3COMSEN (Bit 11) */
#define TIMER2_CHCTL1_Output_CH3COMSEN_Msk (0x800UL)                /*!< CH3COMSEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL1_Output_CH3COMFEN_Pos (10UL)                   /*!< CH3COMFEN (Bit 10) */
#define TIMER2_CHCTL1_Output_CH3COMFEN_Msk (0x400UL)                /*!< CH3COMFEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL1_Output_CH3MS_Pos    (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER2_CHCTL1_Output_CH3MS_Msk    (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER2_CHCTL1_Output_CH2COMCEN_Pos (7UL)                    /*!< CH2COMCEN (Bit 7) */
#define TIMER2_CHCTL1_Output_CH2COMCEN_Msk (0x80UL)                 /*!< CH2COMCEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL1_Output_CH2COMCTL_Pos (4UL)                    /*!< CH2COMCTL (Bit 4) */
#define TIMER2_CHCTL1_Output_CH2COMCTL_Msk (0x70UL)                 /*!< CH2COMCTL (Bitfield-Mask: 0x07) */
#define TIMER2_CHCTL1_Output_CH2COMSEN_Pos (3UL)                    /*!< CH2COMSEN (Bit 3) */
#define TIMER2_CHCTL1_Output_CH2COMSEN_Msk (0x8UL)                  /*!< CH2COMSEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL1_Output_CH2COMFEN_Pos (2UL)                    /*!< CH2COMFEN (Bit 2) */
#define TIMER2_CHCTL1_Output_CH2COMFEN_Msk (0x4UL)                  /*!< CH2COMFEN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL1_Output_CH2MS_Pos    (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER2_CHCTL1_Output_CH2MS_Msk    (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Input  ====================================================== */
#define TIMER2_CHCTL1_Input_CH3CAPFLT_Pos (12UL)                    /*!< CH3CAPFLT (Bit 12) */
#define TIMER2_CHCTL1_Input_CH3CAPFLT_Msk (0xf000UL)                /*!< CH3CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER2_CHCTL1_Input_CH3CAPPSC_Pos (10UL)                    /*!< CH3CAPPSC (Bit 10) */
#define TIMER2_CHCTL1_Input_CH3CAPPSC_Msk (0xc00UL)                 /*!< CH3CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER2_CHCTL1_Input_CH3MS_Pos     (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER2_CHCTL1_Input_CH3MS_Msk     (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER2_CHCTL1_Input_CH2CAPFLT_Pos (4UL)                     /*!< CH2CAPFLT (Bit 4) */
#define TIMER2_CHCTL1_Input_CH2CAPFLT_Msk (0xf0UL)                  /*!< CH2CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER2_CHCTL1_Input_CH2CAPPSC_Pos (2UL)                     /*!< CH2CAPPSC (Bit 2) */
#define TIMER2_CHCTL1_Input_CH2CAPPSC_Msk (0xcUL)                   /*!< CH2CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER2_CHCTL1_Input_CH2MS_Pos     (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER2_CHCTL1_Input_CH2MS_Msk     (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER2_CHCTL2_CH3P_Pos            (13UL)                    /*!< CH3P (Bit 13) */
#define TIMER2_CHCTL2_CH3P_Msk            (0x2000UL)                /*!< CH3P (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH3EN_Pos           (12UL)                    /*!< CH3EN (Bit 12) */
#define TIMER2_CHCTL2_CH3EN_Msk           (0x1000UL)                /*!< CH3EN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH2NP_Pos           (11UL)                    /*!< CH2NP (Bit 11) */
#define TIMER2_CHCTL2_CH2NP_Msk           (0x800UL)                 /*!< CH2NP (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH2P_Pos            (9UL)                     /*!< CH2P (Bit 9) */
#define TIMER2_CHCTL2_CH2P_Msk            (0x200UL)                 /*!< CH2P (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH2EN_Pos           (8UL)                     /*!< CH2EN (Bit 8) */
#define TIMER2_CHCTL2_CH2EN_Msk           (0x100UL)                 /*!< CH2EN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH1NP_Pos           (7UL)                     /*!< CH1NP (Bit 7) */
#define TIMER2_CHCTL2_CH1NP_Msk           (0x80UL)                  /*!< CH1NP (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH1P_Pos            (5UL)                     /*!< CH1P (Bit 5) */
#define TIMER2_CHCTL2_CH1P_Msk            (0x20UL)                  /*!< CH1P (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH1EN_Pos           (4UL)                     /*!< CH1EN (Bit 4) */
#define TIMER2_CHCTL2_CH1EN_Msk           (0x10UL)                  /*!< CH1EN (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH0NP_Pos           (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER2_CHCTL2_CH0NP_Msk           (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH0P_Pos            (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER2_CHCTL2_CH0P_Msk            (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER2_CHCTL2_CH0EN_Pos           (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER2_CHCTL2_CH0EN_Msk           (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER2_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER2_CNT_CNT_Msk                (0xffffffffUL)            /*!< CNT (Bitfield-Mask: 0xffffffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER2_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER2_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER2_CAR_CARL_Pos               (0UL)                     /*!< CARL (Bit 0) */
#define TIMER2_CAR_CARL_Msk               (0xffffffffUL)            /*!< CARL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER2_CH0CV_CH0VAL_Pos           (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER2_CH0CV_CH0VAL_Msk           (0xffffffffUL)            /*!< CH0VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH1CV  ========================================================= */
#define TIMER2_CH1CV_CH1VAL_Pos           (0UL)                     /*!< CH1VAL (Bit 0) */
#define TIMER2_CH1CV_CH1VAL_Msk           (0xffffffffUL)            /*!< CH1VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH2CV  ========================================================= */
#define TIMER2_CH2CV_CH2VAL_Pos           (0UL)                     /*!< CH2VAL (Bit 0) */
#define TIMER2_CH2CV_CH2VAL_Msk           (0xffffffffUL)            /*!< CH2VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH3CV  ========================================================= */
#define TIMER2_CH3CV_CH3VAL_Pos           (0UL)                     /*!< CH3VAL (Bit 0) */
#define TIMER2_CH3CV_CH3VAL_Msk           (0xffffffffUL)            /*!< CH3VAL (Bitfield-Mask: 0xffffffff) */
/* ========================================================  DMACFG  ========================================================= */
#define TIMER2_DMACFG_DMATC_Pos           (8UL)                     /*!< DMATC (Bit 8) */
#define TIMER2_DMACFG_DMATC_Msk           (0x1f00UL)                /*!< DMATC (Bitfield-Mask: 0x1f) */
#define TIMER2_DMACFG_DMATA_Pos           (0UL)                     /*!< DMATA (Bit 0) */
#define TIMER2_DMACFG_DMATA_Msk           (0x1fUL)                  /*!< DMATA (Bitfield-Mask: 0x1f) */
/* =========================================================  DMATB  ========================================================= */
#define TIMER2_DMATB_DMATB_Pos            (0UL)                     /*!< DMATB (Bit 0) */
#define TIMER2_DMATB_DMATB_Msk            (0xffffUL)                /*!< DMATB (Bitfield-Mask: 0xffff) */
/* =========================================================  IRMP  ========================================================== */
#define TIMER2_IRMP_CI3_RMP_Pos           (6UL)                     /*!< CI3_RMP (Bit 6) */
#define TIMER2_IRMP_CI3_RMP_Msk           (0xc0UL)                  /*!< CI3_RMP (Bitfield-Mask: 0x03) */
#define TIMER2_IRMP_ITI1_RMP_Pos          (10UL)                    /*!< ITI1_RMP (Bit 10) */
#define TIMER2_IRMP_ITI1_RMP_Msk          (0xc00UL)                 /*!< ITI1_RMP (Bitfield-Mask: 0x03) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER2_CFG_CHVSEL_Pos             (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER2_CFG_CHVSEL_Msk             (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER3                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER3_CTL0_CKDIV_Pos             (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER3_CTL0_CKDIV_Msk             (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER3_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER3_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER3_CTL0_CAM_Pos               (5UL)                     /*!< CAM (Bit 5) */
#define TIMER3_CTL0_CAM_Msk               (0x60UL)                  /*!< CAM (Bitfield-Mask: 0x03) */
#define TIMER3_CTL0_DIR_Pos               (4UL)                     /*!< DIR (Bit 4) */
#define TIMER3_CTL0_DIR_Msk               (0x10UL)                  /*!< DIR (Bitfield-Mask: 0x01) */
#define TIMER3_CTL0_SPM_Pos               (3UL)                     /*!< SPM (Bit 3) */
#define TIMER3_CTL0_SPM_Msk               (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER3_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER3_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER3_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER3_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER3_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER3_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define TIMER3_CTL1_TI0S_Pos              (7UL)                     /*!< TI0S (Bit 7) */
#define TIMER3_CTL1_TI0S_Msk              (0x80UL)                  /*!< TI0S (Bitfield-Mask: 0x01) */
#define TIMER3_CTL1_MMC_Pos               (4UL)                     /*!< MMC (Bit 4) */
#define TIMER3_CTL1_MMC_Msk               (0x70UL)                  /*!< MMC (Bitfield-Mask: 0x07) */
#define TIMER3_CTL1_DMAS_Pos              (3UL)                     /*!< DMAS (Bit 3) */
#define TIMER3_CTL1_DMAS_Msk              (0x8UL)                   /*!< DMAS (Bitfield-Mask: 0x01) */
/* =========================================================  SMCFG  ========================================================= */
#define TIMER3_SMCFG_ETP_Pos              (15UL)                    /*!< ETP (Bit 15) */
#define TIMER3_SMCFG_ETP_Msk              (0x8000UL)                /*!< ETP (Bitfield-Mask: 0x01) */
#define TIMER3_SMCFG_SMC1_Pos             (14UL)                    /*!< SMC1 (Bit 14) */
#define TIMER3_SMCFG_SMC1_Msk             (0x4000UL)                /*!< SMC1 (Bitfield-Mask: 0x01) */
#define TIMER3_SMCFG_ETPSC_Pos            (12UL)                    /*!< ETPSC (Bit 12) */
#define TIMER3_SMCFG_ETPSC_Msk            (0x3000UL)                /*!< ETPSC (Bitfield-Mask: 0x03) */
#define TIMER3_SMCFG_ETFC_Pos             (8UL)                     /*!< ETFC (Bit 8) */
#define TIMER3_SMCFG_ETFC_Msk             (0xf00UL)                 /*!< ETFC (Bitfield-Mask: 0x0f) */
#define TIMER3_SMCFG_MSM_Pos              (7UL)                     /*!< MSM (Bit 7) */
#define TIMER3_SMCFG_MSM_Msk              (0x80UL)                  /*!< MSM (Bitfield-Mask: 0x01) */
#define TIMER3_SMCFG_TRGS_Pos             (4UL)                     /*!< TRGS (Bit 4) */
#define TIMER3_SMCFG_TRGS_Msk             (0x70UL)                  /*!< TRGS (Bitfield-Mask: 0x07) */
#define TIMER3_SMCFG_SMC_Pos              (0UL)                     /*!< SMC (Bit 0) */
#define TIMER3_SMCFG_SMC_Msk              (0x7UL)                   /*!< SMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER3_DMAINTEN_TRGDEN_Pos        (14UL)                    /*!< TRGDEN (Bit 14) */
#define TIMER3_DMAINTEN_TRGDEN_Msk        (0x4000UL)                /*!< TRGDEN (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_CH3DEN_Pos        (12UL)                    /*!< CH3DEN (Bit 12) */
#define TIMER3_DMAINTEN_CH3DEN_Msk        (0x1000UL)                /*!< CH3DEN (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_CH2DEN_Pos        (11UL)                    /*!< CH2DEN (Bit 11) */
#define TIMER3_DMAINTEN_CH2DEN_Msk        (0x800UL)                 /*!< CH2DEN (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_CH1DEN_Pos        (10UL)                    /*!< CH1DEN (Bit 10) */
#define TIMER3_DMAINTEN_CH1DEN_Msk        (0x400UL)                 /*!< CH1DEN (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_CH0DEN_Pos        (9UL)                     /*!< CH0DEN (Bit 9) */
#define TIMER3_DMAINTEN_CH0DEN_Msk        (0x200UL)                 /*!< CH0DEN (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_UPDEN_Pos         (8UL)                     /*!< UPDEN (Bit 8) */
#define TIMER3_DMAINTEN_UPDEN_Msk         (0x100UL)                 /*!< UPDEN (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_TRGIE_Pos         (6UL)                     /*!< TRGIE (Bit 6) */
#define TIMER3_DMAINTEN_TRGIE_Msk         (0x40UL)                  /*!< TRGIE (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_CH3IE_Pos         (4UL)                     /*!< CH3IE (Bit 4) */
#define TIMER3_DMAINTEN_CH3IE_Msk         (0x10UL)                  /*!< CH3IE (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_CH2IE_Pos         (3UL)                     /*!< CH2IE (Bit 3) */
#define TIMER3_DMAINTEN_CH2IE_Msk         (0x8UL)                   /*!< CH2IE (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_CH1IE_Pos         (2UL)                     /*!< CH1IE (Bit 2) */
#define TIMER3_DMAINTEN_CH1IE_Msk         (0x4UL)                   /*!< CH1IE (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_CH0IE_Pos         (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER3_DMAINTEN_CH0IE_Msk         (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER3_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER3_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER3_INTF_CH3OF_Pos             (12UL)                    /*!< CH3OF (Bit 12) */
#define TIMER3_INTF_CH3OF_Msk             (0x1000UL)                /*!< CH3OF (Bitfield-Mask: 0x01) */
#define TIMER3_INTF_CH2OF_Pos             (11UL)                    /*!< CH2OF (Bit 11) */
#define TIMER3_INTF_CH2OF_Msk             (0x800UL)                 /*!< CH2OF (Bitfield-Mask: 0x01) */
#define TIMER3_INTF_CH1OF_Pos             (10UL)                    /*!< CH1OF (Bit 10) */
#define TIMER3_INTF_CH1OF_Msk             (0x400UL)                 /*!< CH1OF (Bitfield-Mask: 0x01) */
#define TIMER3_INTF_CH0OF_Pos             (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER3_INTF_CH0OF_Msk             (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER3_INTF_TRGIF_Pos             (6UL)                     /*!< TRGIF (Bit 6) */
#define TIMER3_INTF_TRGIF_Msk             (0x40UL)                  /*!< TRGIF (Bitfield-Mask: 0x01) */
#define TIMER3_INTF_CH3IF_Pos             (4UL)                     /*!< CH3IF (Bit 4) */
#define TIMER3_INTF_CH3IF_Msk             (0x10UL)                  /*!< CH3IF (Bitfield-Mask: 0x01) */
#define TIMER3_INTF_CH2IF_Pos             (3UL)                     /*!< CH2IF (Bit 3) */
#define TIMER3_INTF_CH2IF_Msk             (0x8UL)                   /*!< CH2IF (Bitfield-Mask: 0x01) */
#define TIMER3_INTF_CH1IF_Pos             (2UL)                     /*!< CH1IF (Bit 2) */
#define TIMER3_INTF_CH1IF_Msk             (0x4UL)                   /*!< CH1IF (Bitfield-Mask: 0x01) */
#define TIMER3_INTF_CH0IF_Pos             (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER3_INTF_CH0IF_Msk             (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER3_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER3_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER3_SWEVG_TRGG_Pos             (6UL)                     /*!< TRGG (Bit 6) */
#define TIMER3_SWEVG_TRGG_Msk             (0x40UL)                  /*!< TRGG (Bitfield-Mask: 0x01) */
#define TIMER3_SWEVG_CH3G_Pos             (4UL)                     /*!< CH3G (Bit 4) */
#define TIMER3_SWEVG_CH3G_Msk             (0x10UL)                  /*!< CH3G (Bitfield-Mask: 0x01) */
#define TIMER3_SWEVG_CH2G_Pos             (3UL)                     /*!< CH2G (Bit 3) */
#define TIMER3_SWEVG_CH2G_Msk             (0x8UL)                   /*!< CH2G (Bitfield-Mask: 0x01) */
#define TIMER3_SWEVG_CH1G_Pos             (2UL)                     /*!< CH1G (Bit 2) */
#define TIMER3_SWEVG_CH1G_Msk             (0x4UL)                   /*!< CH1G (Bitfield-Mask: 0x01) */
#define TIMER3_SWEVG_CH0G_Pos             (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER3_SWEVG_CH0G_Msk             (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER3_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER3_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER3_CHCTL0_Output_CH1COMCEN_Pos (15UL)                   /*!< CH1COMCEN (Bit 15) */
#define TIMER3_CHCTL0_Output_CH1COMCEN_Msk (0x8000UL)               /*!< CH1COMCEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL0_Output_CH1COMCTL_Pos (12UL)                   /*!< CH1COMCTL (Bit 12) */
#define TIMER3_CHCTL0_Output_CH1COMCTL_Msk (0x7000UL)               /*!< CH1COMCTL (Bitfield-Mask: 0x07) */
#define TIMER3_CHCTL0_Output_CH1COMSEN_Pos (11UL)                   /*!< CH1COMSEN (Bit 11) */
#define TIMER3_CHCTL0_Output_CH1COMSEN_Msk (0x800UL)                /*!< CH1COMSEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL0_Output_CH1COMFEN_Pos (10UL)                   /*!< CH1COMFEN (Bit 10) */
#define TIMER3_CHCTL0_Output_CH1COMFEN_Msk (0x400UL)                /*!< CH1COMFEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL0_Output_CH1MS_Pos    (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER3_CHCTL0_Output_CH1MS_Msk    (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER3_CHCTL0_Output_CH0COMCEN_Pos (7UL)                    /*!< CH0COMCEN (Bit 7) */
#define TIMER3_CHCTL0_Output_CH0COMCEN_Msk (0x80UL)                 /*!< CH0COMCEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL0_Output_CH0COMCTL_Pos (4UL)                    /*!< CH0COMCTL (Bit 4) */
#define TIMER3_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                 /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
#define TIMER3_CHCTL0_Output_CH0COMSEN_Pos (3UL)                    /*!< CH0COMSEN (Bit 3) */
#define TIMER3_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                  /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL0_Output_CH0COMFEN_Pos (2UL)                    /*!< CH0COMFEN (Bit 2) */
#define TIMER3_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                  /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL0_Output_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER3_CHCTL0_Output_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER3_CHCTL0_Input_CH1CAPFLT_Pos (12UL)                    /*!< CH1CAPFLT (Bit 12) */
#define TIMER3_CHCTL0_Input_CH1CAPFLT_Msk (0xf000UL)                /*!< CH1CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER3_CHCTL0_Input_CH1CAPPSC_Pos (10UL)                    /*!< CH1CAPPSC (Bit 10) */
#define TIMER3_CHCTL0_Input_CH1CAPPSC_Msk (0xc00UL)                 /*!< CH1CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER3_CHCTL0_Input_CH1MS_Pos     (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER3_CHCTL0_Input_CH1MS_Msk     (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER3_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                     /*!< CH0CAPFLT (Bit 4) */
#define TIMER3_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                  /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER3_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                     /*!< CH0CAPPSC (Bit 2) */
#define TIMER3_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                   /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER3_CHCTL0_Input_CH0MS_Pos     (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER3_CHCTL0_Input_CH0MS_Msk     (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Output  ===================================================== */
#define TIMER3_CHCTL1_Output_CH3COMCEN_Pos (15UL)                   /*!< CH3COMCEN (Bit 15) */
#define TIMER3_CHCTL1_Output_CH3COMCEN_Msk (0x8000UL)               /*!< CH3COMCEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL1_Output_CH3COMCTL_Pos (12UL)                   /*!< CH3COMCTL (Bit 12) */
#define TIMER3_CHCTL1_Output_CH3COMCTL_Msk (0x7000UL)               /*!< CH3COMCTL (Bitfield-Mask: 0x07) */
#define TIMER3_CHCTL1_Output_CH3COMSEN_Pos (11UL)                   /*!< CH3COMSEN (Bit 11) */
#define TIMER3_CHCTL1_Output_CH3COMSEN_Msk (0x800UL)                /*!< CH3COMSEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL1_Output_CH3COMFEN_Pos (10UL)                   /*!< CH3COMFEN (Bit 10) */
#define TIMER3_CHCTL1_Output_CH3COMFEN_Msk (0x400UL)                /*!< CH3COMFEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL1_Output_CH3MS_Pos    (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER3_CHCTL1_Output_CH3MS_Msk    (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER3_CHCTL1_Output_CH2COMCEN_Pos (7UL)                    /*!< CH2COMCEN (Bit 7) */
#define TIMER3_CHCTL1_Output_CH2COMCEN_Msk (0x80UL)                 /*!< CH2COMCEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL1_Output_CH2COMCTL_Pos (4UL)                    /*!< CH2COMCTL (Bit 4) */
#define TIMER3_CHCTL1_Output_CH2COMCTL_Msk (0x70UL)                 /*!< CH2COMCTL (Bitfield-Mask: 0x07) */
#define TIMER3_CHCTL1_Output_CH2COMSEN_Pos (3UL)                    /*!< CH2COMSEN (Bit 3) */
#define TIMER3_CHCTL1_Output_CH2COMSEN_Msk (0x8UL)                  /*!< CH2COMSEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL1_Output_CH2COMFEN_Pos (2UL)                    /*!< CH2COMFEN (Bit 2) */
#define TIMER3_CHCTL1_Output_CH2COMFEN_Msk (0x4UL)                  /*!< CH2COMFEN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL1_Output_CH2MS_Pos    (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER3_CHCTL1_Output_CH2MS_Msk    (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Input  ====================================================== */
#define TIMER3_CHCTL1_Input_CH3CAPFLT_Pos (12UL)                    /*!< CH3CAPFLT (Bit 12) */
#define TIMER3_CHCTL1_Input_CH3CAPFLT_Msk (0xf000UL)                /*!< CH3CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER3_CHCTL1_Input_CH3CAPPSC_Pos (10UL)                    /*!< CH3CAPPSC (Bit 10) */
#define TIMER3_CHCTL1_Input_CH3CAPPSC_Msk (0xc00UL)                 /*!< CH3CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER3_CHCTL1_Input_CH3MS_Pos     (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER3_CHCTL1_Input_CH3MS_Msk     (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER3_CHCTL1_Input_CH2CAPFLT_Pos (4UL)                     /*!< CH2CAPFLT (Bit 4) */
#define TIMER3_CHCTL1_Input_CH2CAPFLT_Msk (0xf0UL)                  /*!< CH2CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER3_CHCTL1_Input_CH2CAPPSC_Pos (2UL)                     /*!< CH2CAPPSC (Bit 2) */
#define TIMER3_CHCTL1_Input_CH2CAPPSC_Msk (0xcUL)                   /*!< CH2CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER3_CHCTL1_Input_CH2MS_Pos     (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER3_CHCTL1_Input_CH2MS_Msk     (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER3_CHCTL2_CH3P_Pos            (13UL)                    /*!< CH3P (Bit 13) */
#define TIMER3_CHCTL2_CH3P_Msk            (0x2000UL)                /*!< CH3P (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH3EN_Pos           (12UL)                    /*!< CH3EN (Bit 12) */
#define TIMER3_CHCTL2_CH3EN_Msk           (0x1000UL)                /*!< CH3EN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH2NP_Pos           (11UL)                    /*!< CH2NP (Bit 11) */
#define TIMER3_CHCTL2_CH2NP_Msk           (0x800UL)                 /*!< CH2NP (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH2P_Pos            (9UL)                     /*!< CH2P (Bit 9) */
#define TIMER3_CHCTL2_CH2P_Msk            (0x200UL)                 /*!< CH2P (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH2EN_Pos           (8UL)                     /*!< CH2EN (Bit 8) */
#define TIMER3_CHCTL2_CH2EN_Msk           (0x100UL)                 /*!< CH2EN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH1NP_Pos           (7UL)                     /*!< CH1NP (Bit 7) */
#define TIMER3_CHCTL2_CH1NP_Msk           (0x80UL)                  /*!< CH1NP (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH1P_Pos            (5UL)                     /*!< CH1P (Bit 5) */
#define TIMER3_CHCTL2_CH1P_Msk            (0x20UL)                  /*!< CH1P (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH1EN_Pos           (4UL)                     /*!< CH1EN (Bit 4) */
#define TIMER3_CHCTL2_CH1EN_Msk           (0x10UL)                  /*!< CH1EN (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH0NP_Pos           (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER3_CHCTL2_CH0NP_Msk           (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH0P_Pos            (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER3_CHCTL2_CH0P_Msk            (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER3_CHCTL2_CH0EN_Pos           (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER3_CHCTL2_CH0EN_Msk           (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER3_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER3_CNT_CNT_Msk                (0xffffffffUL)            /*!< CNT (Bitfield-Mask: 0xffffffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER3_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER3_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER3_CAR_CARL_Pos               (0UL)                     /*!< CARL (Bit 0) */
#define TIMER3_CAR_CARL_Msk               (0xffffffffUL)            /*!< CARL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER3_CH0CV_CH0VAL_Pos           (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER3_CH0CV_CH0VAL_Msk           (0xffffffffUL)            /*!< CH0VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH1CV  ========================================================= */
#define TIMER3_CH1CV_CH1VAL_Pos           (0UL)                     /*!< CH1VAL (Bit 0) */
#define TIMER3_CH1CV_CH1VAL_Msk           (0xffffffffUL)            /*!< CH1VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH2CV  ========================================================= */
#define TIMER3_CH2CV_CH2VAL_Pos           (0UL)                     /*!< CH2VAL (Bit 0) */
#define TIMER3_CH2CV_CH2VAL_Msk           (0xffffffffUL)            /*!< CH2VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH3CV  ========================================================= */
#define TIMER3_CH3CV_CH3VAL_Pos           (0UL)                     /*!< CH3VAL (Bit 0) */
#define TIMER3_CH3CV_CH3VAL_Msk           (0xffffffffUL)            /*!< CH3VAL (Bitfield-Mask: 0xffffffff) */
/* ========================================================  DMACFG  ========================================================= */
#define TIMER3_DMACFG_DMATC_Pos           (8UL)                     /*!< DMATC (Bit 8) */
#define TIMER3_DMACFG_DMATC_Msk           (0x1f00UL)                /*!< DMATC (Bitfield-Mask: 0x1f) */
#define TIMER3_DMACFG_DMATA_Pos           (0UL)                     /*!< DMATA (Bit 0) */
#define TIMER3_DMACFG_DMATA_Msk           (0x1fUL)                  /*!< DMATA (Bitfield-Mask: 0x1f) */
/* =========================================================  DMATB  ========================================================= */
#define TIMER3_DMATB_DMATB_Pos            (0UL)                     /*!< DMATB (Bit 0) */
#define TIMER3_DMATB_DMATB_Msk            (0xffffUL)                /*!< DMATB (Bitfield-Mask: 0xffff) */
/* =========================================================  IRMP  ========================================================== */
#define TIMER3_IRMP_CI3_RMP_Pos           (6UL)                     /*!< CI3_RMP (Bit 6) */
#define TIMER3_IRMP_CI3_RMP_Msk           (0xc0UL)                  /*!< CI3_RMP (Bitfield-Mask: 0x03) */
#define TIMER3_IRMP_ITI1_RMP_Pos          (10UL)                    /*!< ITI1_RMP (Bit 10) */
#define TIMER3_IRMP_ITI1_RMP_Msk          (0xc00UL)                 /*!< ITI1_RMP (Bitfield-Mask: 0x03) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER3_CFG_CHVSEL_Pos             (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER3_CFG_CHVSEL_Msk             (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER4                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER4_CTL0_CKDIV_Pos             (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER4_CTL0_CKDIV_Msk             (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER4_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER4_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER4_CTL0_CAM_Pos               (5UL)                     /*!< CAM (Bit 5) */
#define TIMER4_CTL0_CAM_Msk               (0x60UL)                  /*!< CAM (Bitfield-Mask: 0x03) */
#define TIMER4_CTL0_DIR_Pos               (4UL)                     /*!< DIR (Bit 4) */
#define TIMER4_CTL0_DIR_Msk               (0x10UL)                  /*!< DIR (Bitfield-Mask: 0x01) */
#define TIMER4_CTL0_SPM_Pos               (3UL)                     /*!< SPM (Bit 3) */
#define TIMER4_CTL0_SPM_Msk               (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER4_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER4_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER4_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER4_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER4_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER4_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define TIMER4_CTL1_TI0S_Pos              (7UL)                     /*!< TI0S (Bit 7) */
#define TIMER4_CTL1_TI0S_Msk              (0x80UL)                  /*!< TI0S (Bitfield-Mask: 0x01) */
#define TIMER4_CTL1_MMC_Pos               (4UL)                     /*!< MMC (Bit 4) */
#define TIMER4_CTL1_MMC_Msk               (0x70UL)                  /*!< MMC (Bitfield-Mask: 0x07) */
#define TIMER4_CTL1_DMAS_Pos              (3UL)                     /*!< DMAS (Bit 3) */
#define TIMER4_CTL1_DMAS_Msk              (0x8UL)                   /*!< DMAS (Bitfield-Mask: 0x01) */
/* =========================================================  SMCFG  ========================================================= */
#define TIMER4_SMCFG_ETP_Pos              (15UL)                    /*!< ETP (Bit 15) */
#define TIMER4_SMCFG_ETP_Msk              (0x8000UL)                /*!< ETP (Bitfield-Mask: 0x01) */
#define TIMER4_SMCFG_SMC1_Pos             (14UL)                    /*!< SMC1 (Bit 14) */
#define TIMER4_SMCFG_SMC1_Msk             (0x4000UL)                /*!< SMC1 (Bitfield-Mask: 0x01) */
#define TIMER4_SMCFG_ETPSC_Pos            (12UL)                    /*!< ETPSC (Bit 12) */
#define TIMER4_SMCFG_ETPSC_Msk            (0x3000UL)                /*!< ETPSC (Bitfield-Mask: 0x03) */
#define TIMER4_SMCFG_ETFC_Pos             (8UL)                     /*!< ETFC (Bit 8) */
#define TIMER4_SMCFG_ETFC_Msk             (0xf00UL)                 /*!< ETFC (Bitfield-Mask: 0x0f) */
#define TIMER4_SMCFG_MSM_Pos              (7UL)                     /*!< MSM (Bit 7) */
#define TIMER4_SMCFG_MSM_Msk              (0x80UL)                  /*!< MSM (Bitfield-Mask: 0x01) */
#define TIMER4_SMCFG_TRGS_Pos             (4UL)                     /*!< TRGS (Bit 4) */
#define TIMER4_SMCFG_TRGS_Msk             (0x70UL)                  /*!< TRGS (Bitfield-Mask: 0x07) */
#define TIMER4_SMCFG_SMC_Pos              (0UL)                     /*!< SMC (Bit 0) */
#define TIMER4_SMCFG_SMC_Msk              (0x7UL)                   /*!< SMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER4_DMAINTEN_TRGDEN_Pos        (14UL)                    /*!< TRGDEN (Bit 14) */
#define TIMER4_DMAINTEN_TRGDEN_Msk        (0x4000UL)                /*!< TRGDEN (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_CH3DEN_Pos        (12UL)                    /*!< CH3DEN (Bit 12) */
#define TIMER4_DMAINTEN_CH3DEN_Msk        (0x1000UL)                /*!< CH3DEN (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_CH2DEN_Pos        (11UL)                    /*!< CH2DEN (Bit 11) */
#define TIMER4_DMAINTEN_CH2DEN_Msk        (0x800UL)                 /*!< CH2DEN (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_CH1DEN_Pos        (10UL)                    /*!< CH1DEN (Bit 10) */
#define TIMER4_DMAINTEN_CH1DEN_Msk        (0x400UL)                 /*!< CH1DEN (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_CH0DEN_Pos        (9UL)                     /*!< CH0DEN (Bit 9) */
#define TIMER4_DMAINTEN_CH0DEN_Msk        (0x200UL)                 /*!< CH0DEN (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_UPDEN_Pos         (8UL)                     /*!< UPDEN (Bit 8) */
#define TIMER4_DMAINTEN_UPDEN_Msk         (0x100UL)                 /*!< UPDEN (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_TRGIE_Pos         (6UL)                     /*!< TRGIE (Bit 6) */
#define TIMER4_DMAINTEN_TRGIE_Msk         (0x40UL)                  /*!< TRGIE (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_CH3IE_Pos         (4UL)                     /*!< CH3IE (Bit 4) */
#define TIMER4_DMAINTEN_CH3IE_Msk         (0x10UL)                  /*!< CH3IE (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_CH2IE_Pos         (3UL)                     /*!< CH2IE (Bit 3) */
#define TIMER4_DMAINTEN_CH2IE_Msk         (0x8UL)                   /*!< CH2IE (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_CH1IE_Pos         (2UL)                     /*!< CH1IE (Bit 2) */
#define TIMER4_DMAINTEN_CH1IE_Msk         (0x4UL)                   /*!< CH1IE (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_CH0IE_Pos         (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER4_DMAINTEN_CH0IE_Msk         (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER4_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER4_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER4_INTF_CH3OF_Pos             (12UL)                    /*!< CH3OF (Bit 12) */
#define TIMER4_INTF_CH3OF_Msk             (0x1000UL)                /*!< CH3OF (Bitfield-Mask: 0x01) */
#define TIMER4_INTF_CH2OF_Pos             (11UL)                    /*!< CH2OF (Bit 11) */
#define TIMER4_INTF_CH2OF_Msk             (0x800UL)                 /*!< CH2OF (Bitfield-Mask: 0x01) */
#define TIMER4_INTF_CH1OF_Pos             (10UL)                    /*!< CH1OF (Bit 10) */
#define TIMER4_INTF_CH1OF_Msk             (0x400UL)                 /*!< CH1OF (Bitfield-Mask: 0x01) */
#define TIMER4_INTF_CH0OF_Pos             (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER4_INTF_CH0OF_Msk             (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER4_INTF_TRGIF_Pos             (6UL)                     /*!< TRGIF (Bit 6) */
#define TIMER4_INTF_TRGIF_Msk             (0x40UL)                  /*!< TRGIF (Bitfield-Mask: 0x01) */
#define TIMER4_INTF_CH3IF_Pos             (4UL)                     /*!< CH3IF (Bit 4) */
#define TIMER4_INTF_CH3IF_Msk             (0x10UL)                  /*!< CH3IF (Bitfield-Mask: 0x01) */
#define TIMER4_INTF_CH2IF_Pos             (3UL)                     /*!< CH2IF (Bit 3) */
#define TIMER4_INTF_CH2IF_Msk             (0x8UL)                   /*!< CH2IF (Bitfield-Mask: 0x01) */
#define TIMER4_INTF_CH1IF_Pos             (2UL)                     /*!< CH1IF (Bit 2) */
#define TIMER4_INTF_CH1IF_Msk             (0x4UL)                   /*!< CH1IF (Bitfield-Mask: 0x01) */
#define TIMER4_INTF_CH0IF_Pos             (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER4_INTF_CH0IF_Msk             (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER4_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER4_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER4_SWEVG_TRGG_Pos             (6UL)                     /*!< TRGG (Bit 6) */
#define TIMER4_SWEVG_TRGG_Msk             (0x40UL)                  /*!< TRGG (Bitfield-Mask: 0x01) */
#define TIMER4_SWEVG_CH3G_Pos             (4UL)                     /*!< CH3G (Bit 4) */
#define TIMER4_SWEVG_CH3G_Msk             (0x10UL)                  /*!< CH3G (Bitfield-Mask: 0x01) */
#define TIMER4_SWEVG_CH2G_Pos             (3UL)                     /*!< CH2G (Bit 3) */
#define TIMER4_SWEVG_CH2G_Msk             (0x8UL)                   /*!< CH2G (Bitfield-Mask: 0x01) */
#define TIMER4_SWEVG_CH1G_Pos             (2UL)                     /*!< CH1G (Bit 2) */
#define TIMER4_SWEVG_CH1G_Msk             (0x4UL)                   /*!< CH1G (Bitfield-Mask: 0x01) */
#define TIMER4_SWEVG_CH0G_Pos             (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER4_SWEVG_CH0G_Msk             (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER4_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER4_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER4_CHCTL0_Output_CH1COMCEN_Pos (15UL)                   /*!< CH1COMCEN (Bit 15) */
#define TIMER4_CHCTL0_Output_CH1COMCEN_Msk (0x8000UL)               /*!< CH1COMCEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL0_Output_CH1COMCTL_Pos (12UL)                   /*!< CH1COMCTL (Bit 12) */
#define TIMER4_CHCTL0_Output_CH1COMCTL_Msk (0x7000UL)               /*!< CH1COMCTL (Bitfield-Mask: 0x07) */
#define TIMER4_CHCTL0_Output_CH1COMSEN_Pos (11UL)                   /*!< CH1COMSEN (Bit 11) */
#define TIMER4_CHCTL0_Output_CH1COMSEN_Msk (0x800UL)                /*!< CH1COMSEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL0_Output_CH1COMFEN_Pos (10UL)                   /*!< CH1COMFEN (Bit 10) */
#define TIMER4_CHCTL0_Output_CH1COMFEN_Msk (0x400UL)                /*!< CH1COMFEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL0_Output_CH1MS_Pos    (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER4_CHCTL0_Output_CH1MS_Msk    (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER4_CHCTL0_Output_CH0COMCEN_Pos (7UL)                    /*!< CH0COMCEN (Bit 7) */
#define TIMER4_CHCTL0_Output_CH0COMCEN_Msk (0x80UL)                 /*!< CH0COMCEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL0_Output_CH0COMCTL_Pos (4UL)                    /*!< CH0COMCTL (Bit 4) */
#define TIMER4_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                 /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
#define TIMER4_CHCTL0_Output_CH0COMSEN_Pos (3UL)                    /*!< CH0COMSEN (Bit 3) */
#define TIMER4_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                  /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL0_Output_CH0COMFEN_Pos (2UL)                    /*!< CH0COMFEN (Bit 2) */
#define TIMER4_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                  /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL0_Output_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER4_CHCTL0_Output_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER4_CHCTL0_Input_CH1CAPFLT_Pos (12UL)                    /*!< CH1CAPFLT (Bit 12) */
#define TIMER4_CHCTL0_Input_CH1CAPFLT_Msk (0xf000UL)                /*!< CH1CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER4_CHCTL0_Input_CH1CAPPSC_Pos (10UL)                    /*!< CH1CAPPSC (Bit 10) */
#define TIMER4_CHCTL0_Input_CH1CAPPSC_Msk (0xc00UL)                 /*!< CH1CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER4_CHCTL0_Input_CH1MS_Pos     (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER4_CHCTL0_Input_CH1MS_Msk     (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER4_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                     /*!< CH0CAPFLT (Bit 4) */
#define TIMER4_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                  /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER4_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                     /*!< CH0CAPPSC (Bit 2) */
#define TIMER4_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                   /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER4_CHCTL0_Input_CH0MS_Pos     (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER4_CHCTL0_Input_CH0MS_Msk     (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Output  ===================================================== */
#define TIMER4_CHCTL1_Output_CH3COMCEN_Pos (15UL)                   /*!< CH3COMCEN (Bit 15) */
#define TIMER4_CHCTL1_Output_CH3COMCEN_Msk (0x8000UL)               /*!< CH3COMCEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL1_Output_CH3COMCTL_Pos (12UL)                   /*!< CH3COMCTL (Bit 12) */
#define TIMER4_CHCTL1_Output_CH3COMCTL_Msk (0x7000UL)               /*!< CH3COMCTL (Bitfield-Mask: 0x07) */
#define TIMER4_CHCTL1_Output_CH3COMSEN_Pos (11UL)                   /*!< CH3COMSEN (Bit 11) */
#define TIMER4_CHCTL1_Output_CH3COMSEN_Msk (0x800UL)                /*!< CH3COMSEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL1_Output_CH3COMFEN_Pos (10UL)                   /*!< CH3COMFEN (Bit 10) */
#define TIMER4_CHCTL1_Output_CH3COMFEN_Msk (0x400UL)                /*!< CH3COMFEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL1_Output_CH3MS_Pos    (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER4_CHCTL1_Output_CH3MS_Msk    (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER4_CHCTL1_Output_CH2COMCEN_Pos (7UL)                    /*!< CH2COMCEN (Bit 7) */
#define TIMER4_CHCTL1_Output_CH2COMCEN_Msk (0x80UL)                 /*!< CH2COMCEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL1_Output_CH2COMCTL_Pos (4UL)                    /*!< CH2COMCTL (Bit 4) */
#define TIMER4_CHCTL1_Output_CH2COMCTL_Msk (0x70UL)                 /*!< CH2COMCTL (Bitfield-Mask: 0x07) */
#define TIMER4_CHCTL1_Output_CH2COMSEN_Pos (3UL)                    /*!< CH2COMSEN (Bit 3) */
#define TIMER4_CHCTL1_Output_CH2COMSEN_Msk (0x8UL)                  /*!< CH2COMSEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL1_Output_CH2COMFEN_Pos (2UL)                    /*!< CH2COMFEN (Bit 2) */
#define TIMER4_CHCTL1_Output_CH2COMFEN_Msk (0x4UL)                  /*!< CH2COMFEN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL1_Output_CH2MS_Pos    (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER4_CHCTL1_Output_CH2MS_Msk    (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Input  ====================================================== */
#define TIMER4_CHCTL1_Input_CH3CAPFLT_Pos (12UL)                    /*!< CH3CAPFLT (Bit 12) */
#define TIMER4_CHCTL1_Input_CH3CAPFLT_Msk (0xf000UL)                /*!< CH3CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER4_CHCTL1_Input_CH3CAPPSC_Pos (10UL)                    /*!< CH3CAPPSC (Bit 10) */
#define TIMER4_CHCTL1_Input_CH3CAPPSC_Msk (0xc00UL)                 /*!< CH3CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER4_CHCTL1_Input_CH3MS_Pos     (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER4_CHCTL1_Input_CH3MS_Msk     (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER4_CHCTL1_Input_CH2CAPFLT_Pos (4UL)                     /*!< CH2CAPFLT (Bit 4) */
#define TIMER4_CHCTL1_Input_CH2CAPFLT_Msk (0xf0UL)                  /*!< CH2CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER4_CHCTL1_Input_CH2CAPPSC_Pos (2UL)                     /*!< CH2CAPPSC (Bit 2) */
#define TIMER4_CHCTL1_Input_CH2CAPPSC_Msk (0xcUL)                   /*!< CH2CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER4_CHCTL1_Input_CH2MS_Pos     (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER4_CHCTL1_Input_CH2MS_Msk     (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER4_CHCTL2_CH3P_Pos            (13UL)                    /*!< CH3P (Bit 13) */
#define TIMER4_CHCTL2_CH3P_Msk            (0x2000UL)                /*!< CH3P (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH3EN_Pos           (12UL)                    /*!< CH3EN (Bit 12) */
#define TIMER4_CHCTL2_CH3EN_Msk           (0x1000UL)                /*!< CH3EN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH2NP_Pos           (11UL)                    /*!< CH2NP (Bit 11) */
#define TIMER4_CHCTL2_CH2NP_Msk           (0x800UL)                 /*!< CH2NP (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH2P_Pos            (9UL)                     /*!< CH2P (Bit 9) */
#define TIMER4_CHCTL2_CH2P_Msk            (0x200UL)                 /*!< CH2P (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH2EN_Pos           (8UL)                     /*!< CH2EN (Bit 8) */
#define TIMER4_CHCTL2_CH2EN_Msk           (0x100UL)                 /*!< CH2EN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH1NP_Pos           (7UL)                     /*!< CH1NP (Bit 7) */
#define TIMER4_CHCTL2_CH1NP_Msk           (0x80UL)                  /*!< CH1NP (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH1P_Pos            (5UL)                     /*!< CH1P (Bit 5) */
#define TIMER4_CHCTL2_CH1P_Msk            (0x20UL)                  /*!< CH1P (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH1EN_Pos           (4UL)                     /*!< CH1EN (Bit 4) */
#define TIMER4_CHCTL2_CH1EN_Msk           (0x10UL)                  /*!< CH1EN (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH0NP_Pos           (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER4_CHCTL2_CH0NP_Msk           (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH0P_Pos            (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER4_CHCTL2_CH0P_Msk            (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER4_CHCTL2_CH0EN_Pos           (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER4_CHCTL2_CH0EN_Msk           (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER4_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER4_CNT_CNT_Msk                (0xffffffffUL)            /*!< CNT (Bitfield-Mask: 0xffffffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER4_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER4_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER4_CAR_CARL_Pos               (0UL)                     /*!< CARL (Bit 0) */
#define TIMER4_CAR_CARL_Msk               (0xffffffffUL)            /*!< CARL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER4_CH0CV_CH0VAL_Pos           (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER4_CH0CV_CH0VAL_Msk           (0xffffffffUL)            /*!< CH0VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH1CV  ========================================================= */
#define TIMER4_CH1CV_CH1VAL_Pos           (0UL)                     /*!< CH1VAL (Bit 0) */
#define TIMER4_CH1CV_CH1VAL_Msk           (0xffffffffUL)            /*!< CH1VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH2CV  ========================================================= */
#define TIMER4_CH2CV_CH2VAL_Pos           (0UL)                     /*!< CH2VAL (Bit 0) */
#define TIMER4_CH2CV_CH2VAL_Msk           (0xffffffffUL)            /*!< CH2VAL (Bitfield-Mask: 0xffffffff) */
/* =========================================================  CH3CV  ========================================================= */
#define TIMER4_CH3CV_CH3VAL_Pos           (0UL)                     /*!< CH3VAL (Bit 0) */
#define TIMER4_CH3CV_CH3VAL_Msk           (0xffffffffUL)            /*!< CH3VAL (Bitfield-Mask: 0xffffffff) */
/* ========================================================  DMACFG  ========================================================= */
#define TIMER4_DMACFG_DMATC_Pos           (8UL)                     /*!< DMATC (Bit 8) */
#define TIMER4_DMACFG_DMATC_Msk           (0x1f00UL)                /*!< DMATC (Bitfield-Mask: 0x1f) */
#define TIMER4_DMACFG_DMATA_Pos           (0UL)                     /*!< DMATA (Bit 0) */
#define TIMER4_DMACFG_DMATA_Msk           (0x1fUL)                  /*!< DMATA (Bitfield-Mask: 0x1f) */
/* =========================================================  DMATB  ========================================================= */
#define TIMER4_DMATB_DMATB_Pos            (0UL)                     /*!< DMATB (Bit 0) */
#define TIMER4_DMATB_DMATB_Msk            (0xffffUL)                /*!< DMATB (Bitfield-Mask: 0xffff) */
/* =========================================================  IRMP  ========================================================== */
#define TIMER4_IRMP_CI3_RMP_Pos           (6UL)                     /*!< CI3_RMP (Bit 6) */
#define TIMER4_IRMP_CI3_RMP_Msk           (0xc0UL)                  /*!< CI3_RMP (Bitfield-Mask: 0x03) */
#define TIMER4_IRMP_ITI1_RMP_Pos          (10UL)                    /*!< ITI1_RMP (Bit 10) */
#define TIMER4_IRMP_ITI1_RMP_Msk          (0xc00UL)                 /*!< ITI1_RMP (Bitfield-Mask: 0x03) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER4_CFG_CHVSEL_Pos             (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER4_CFG_CHVSEL_Msk             (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER5                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER5_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER5_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER5_CTL0_SPM_Pos               (3UL)                     /*!< SPM (Bit 3) */
#define TIMER5_CTL0_SPM_Msk               (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER5_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER5_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER5_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER5_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER5_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER5_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define TIMER5_CTL1_MMC_Pos               (4UL)                     /*!< MMC (Bit 4) */
#define TIMER5_CTL1_MMC_Msk               (0x70UL)                  /*!< MMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER5_DMAINTEN_UPDEN_Pos         (8UL)                     /*!< UPDEN (Bit 8) */
#define TIMER5_DMAINTEN_UPDEN_Msk         (0x100UL)                 /*!< UPDEN (Bitfield-Mask: 0x01) */
#define TIMER5_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER5_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER5_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER5_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER5_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER5_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER5_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER5_CNT_CNT_Msk                (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER5_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER5_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER5_CAR_CAR_Pos                (0UL)                     /*!< CAR (Bit 0) */
#define TIMER5_CAR_CAR_Msk                (0xffffUL)                /*!< CAR (Bitfield-Mask: 0xffff) */


/* =========================================================================================================================== */
/* ================                                          TIMER6                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER6_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER6_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER6_CTL0_SPM_Pos               (3UL)                     /*!< SPM (Bit 3) */
#define TIMER6_CTL0_SPM_Msk               (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER6_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER6_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER6_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER6_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER6_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER6_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define TIMER6_CTL1_MMC_Pos               (4UL)                     /*!< MMC (Bit 4) */
#define TIMER6_CTL1_MMC_Msk               (0x70UL)                  /*!< MMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER6_DMAINTEN_UPDEN_Pos         (8UL)                     /*!< UPDEN (Bit 8) */
#define TIMER6_DMAINTEN_UPDEN_Msk         (0x100UL)                 /*!< UPDEN (Bitfield-Mask: 0x01) */
#define TIMER6_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER6_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER6_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER6_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER6_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER6_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER6_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER6_CNT_CNT_Msk                (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER6_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER6_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER6_CAR_CAR_Pos                (0UL)                     /*!< CAR (Bit 0) */
#define TIMER6_CAR_CAR_Msk                (0xffffUL)                /*!< CAR (Bitfield-Mask: 0xffff) */


/* =========================================================================================================================== */
/* ================                                          TIMER7                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER7_CTL0_CKDIV_Pos             (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER7_CTL0_CKDIV_Msk             (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER7_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER7_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER7_CTL0_CAM_Pos               (5UL)                     /*!< CAM (Bit 5) */
#define TIMER7_CTL0_CAM_Msk               (0x60UL)                  /*!< CAM (Bitfield-Mask: 0x03) */
#define TIMER7_CTL0_DIR_Pos               (4UL)                     /*!< DIR (Bit 4) */
#define TIMER7_CTL0_DIR_Msk               (0x10UL)                  /*!< DIR (Bitfield-Mask: 0x01) */
#define TIMER7_CTL0_SPM_Pos               (3UL)                     /*!< SPM (Bit 3) */
#define TIMER7_CTL0_SPM_Msk               (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER7_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER7_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER7_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER7_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER7_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER7_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define TIMER7_CTL1_ISO3_Pos              (14UL)                    /*!< ISO3 (Bit 14) */
#define TIMER7_CTL1_ISO3_Msk              (0x4000UL)                /*!< ISO3 (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_ISO2N_Pos             (13UL)                    /*!< ISO2N (Bit 13) */
#define TIMER7_CTL1_ISO2N_Msk             (0x2000UL)                /*!< ISO2N (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_ISO2_Pos              (12UL)                    /*!< ISO2 (Bit 12) */
#define TIMER7_CTL1_ISO2_Msk              (0x1000UL)                /*!< ISO2 (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_ISO1N_Pos             (11UL)                    /*!< ISO1N (Bit 11) */
#define TIMER7_CTL1_ISO1N_Msk             (0x800UL)                 /*!< ISO1N (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_ISO1_Pos              (10UL)                    /*!< ISO1 (Bit 10) */
#define TIMER7_CTL1_ISO1_Msk              (0x400UL)                 /*!< ISO1 (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_ISO0N_Pos             (9UL)                     /*!< ISO0N (Bit 9) */
#define TIMER7_CTL1_ISO0N_Msk             (0x200UL)                 /*!< ISO0N (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_ISO0_Pos              (8UL)                     /*!< ISO0 (Bit 8) */
#define TIMER7_CTL1_ISO0_Msk              (0x100UL)                 /*!< ISO0 (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_TI0S_Pos              (7UL)                     /*!< TI0S (Bit 7) */
#define TIMER7_CTL1_TI0S_Msk              (0x80UL)                  /*!< TI0S (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_MMC_Pos               (4UL)                     /*!< MMC (Bit 4) */
#define TIMER7_CTL1_MMC_Msk               (0x70UL)                  /*!< MMC (Bitfield-Mask: 0x07) */
#define TIMER7_CTL1_DMAS_Pos              (3UL)                     /*!< DMAS (Bit 3) */
#define TIMER7_CTL1_DMAS_Msk              (0x8UL)                   /*!< DMAS (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_CCUC_Pos              (2UL)                     /*!< CCUC (Bit 2) */
#define TIMER7_CTL1_CCUC_Msk              (0x4UL)                   /*!< CCUC (Bitfield-Mask: 0x01) */
#define TIMER7_CTL1_CCSE_Pos              (0UL)                     /*!< CCSE (Bit 0) */
#define TIMER7_CTL1_CCSE_Msk              (0x1UL)                   /*!< CCSE (Bitfield-Mask: 0x01) */
/* =========================================================  SMCFG  ========================================================= */
#define TIMER7_SMCFG_ETP_Pos              (15UL)                    /*!< ETP (Bit 15) */
#define TIMER7_SMCFG_ETP_Msk              (0x8000UL)                /*!< ETP (Bitfield-Mask: 0x01) */
#define TIMER7_SMCFG_SCM1_Pos             (14UL)                    /*!< SCM1 (Bit 14) */
#define TIMER7_SMCFG_SCM1_Msk             (0x4000UL)                /*!< SCM1 (Bitfield-Mask: 0x01) */
#define TIMER7_SMCFG_ETPSC_Pos            (12UL)                    /*!< ETPSC (Bit 12) */
#define TIMER7_SMCFG_ETPSC_Msk            (0x3000UL)                /*!< ETPSC (Bitfield-Mask: 0x03) */
#define TIMER7_SMCFG_ETFC_Pos             (8UL)                     /*!< ETFC (Bit 8) */
#define TIMER7_SMCFG_ETFC_Msk             (0xf00UL)                 /*!< ETFC (Bitfield-Mask: 0x0f) */
#define TIMER7_SMCFG_MSM_Pos              (7UL)                     /*!< MSM (Bit 7) */
#define TIMER7_SMCFG_MSM_Msk              (0x80UL)                  /*!< MSM (Bitfield-Mask: 0x01) */
#define TIMER7_SMCFG_TRGS_Pos             (4UL)                     /*!< TRGS (Bit 4) */
#define TIMER7_SMCFG_TRGS_Msk             (0x70UL)                  /*!< TRGS (Bitfield-Mask: 0x07) */
#define TIMER7_SMCFG_SMC_Pos              (0UL)                     /*!< SMC (Bit 0) */
#define TIMER7_SMCFG_SMC_Msk              (0x7UL)                   /*!< SMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER7_DMAINTEN_TRGDEN_Pos        (14UL)                    /*!< TRGDEN (Bit 14) */
#define TIMER7_DMAINTEN_TRGDEN_Msk        (0x4000UL)                /*!< TRGDEN (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CMTDEN_Pos        (13UL)                    /*!< CMTDEN (Bit 13) */
#define TIMER7_DMAINTEN_CMTDEN_Msk        (0x2000UL)                /*!< CMTDEN (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CH3DEN_Pos        (12UL)                    /*!< CH3DEN (Bit 12) */
#define TIMER7_DMAINTEN_CH3DEN_Msk        (0x1000UL)                /*!< CH3DEN (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CH2DEN_Pos        (11UL)                    /*!< CH2DEN (Bit 11) */
#define TIMER7_DMAINTEN_CH2DEN_Msk        (0x800UL)                 /*!< CH2DEN (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CH1DEN_Pos        (10UL)                    /*!< CH1DEN (Bit 10) */
#define TIMER7_DMAINTEN_CH1DEN_Msk        (0x400UL)                 /*!< CH1DEN (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CH0DEN_Pos        (9UL)                     /*!< CH0DEN (Bit 9) */
#define TIMER7_DMAINTEN_CH0DEN_Msk        (0x200UL)                 /*!< CH0DEN (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_UPDEN_Pos         (8UL)                     /*!< UPDEN (Bit 8) */
#define TIMER7_DMAINTEN_UPDEN_Msk         (0x100UL)                 /*!< UPDEN (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_BRKIE_Pos         (7UL)                     /*!< BRKIE (Bit 7) */
#define TIMER7_DMAINTEN_BRKIE_Msk         (0x80UL)                  /*!< BRKIE (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_TRGIE_Pos         (6UL)                     /*!< TRGIE (Bit 6) */
#define TIMER7_DMAINTEN_TRGIE_Msk         (0x40UL)                  /*!< TRGIE (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CMTIE_Pos         (5UL)                     /*!< CMTIE (Bit 5) */
#define TIMER7_DMAINTEN_CMTIE_Msk         (0x20UL)                  /*!< CMTIE (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CH3IE_Pos         (4UL)                     /*!< CH3IE (Bit 4) */
#define TIMER7_DMAINTEN_CH3IE_Msk         (0x10UL)                  /*!< CH3IE (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CH2IE_Pos         (3UL)                     /*!< CH2IE (Bit 3) */
#define TIMER7_DMAINTEN_CH2IE_Msk         (0x8UL)                   /*!< CH2IE (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CH1IE_Pos         (2UL)                     /*!< CH1IE (Bit 2) */
#define TIMER7_DMAINTEN_CH1IE_Msk         (0x4UL)                   /*!< CH1IE (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_CH0IE_Pos         (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER7_DMAINTEN_CH0IE_Msk         (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER7_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER7_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER7_INTF_CH3OF_Pos             (12UL)                    /*!< CH3OF (Bit 12) */
#define TIMER7_INTF_CH3OF_Msk             (0x1000UL)                /*!< CH3OF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_CH2OF_Pos             (11UL)                    /*!< CH2OF (Bit 11) */
#define TIMER7_INTF_CH2OF_Msk             (0x800UL)                 /*!< CH2OF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_CH1OF_Pos             (10UL)                    /*!< CH1OF (Bit 10) */
#define TIMER7_INTF_CH1OF_Msk             (0x400UL)                 /*!< CH1OF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_CH0OF_Pos             (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER7_INTF_CH0OF_Msk             (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_BRKIF_Pos             (7UL)                     /*!< BRKIF (Bit 7) */
#define TIMER7_INTF_BRKIF_Msk             (0x80UL)                  /*!< BRKIF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_TRGIF_Pos             (6UL)                     /*!< TRGIF (Bit 6) */
#define TIMER7_INTF_TRGIF_Msk             (0x40UL)                  /*!< TRGIF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_CMTIF_Pos             (5UL)                     /*!< CMTIF (Bit 5) */
#define TIMER7_INTF_CMTIF_Msk             (0x20UL)                  /*!< CMTIF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_CH3IF_Pos             (4UL)                     /*!< CH3IF (Bit 4) */
#define TIMER7_INTF_CH3IF_Msk             (0x10UL)                  /*!< CH3IF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_CH2IF_Pos             (3UL)                     /*!< CH2IF (Bit 3) */
#define TIMER7_INTF_CH2IF_Msk             (0x8UL)                   /*!< CH2IF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_CH1IF_Pos             (2UL)                     /*!< CH1IF (Bit 2) */
#define TIMER7_INTF_CH1IF_Msk             (0x4UL)                   /*!< CH1IF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_CH0IF_Pos             (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER7_INTF_CH0IF_Msk             (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER7_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER7_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER7_SWEVG_BRKG_Pos             (7UL)                     /*!< BRKG (Bit 7) */
#define TIMER7_SWEVG_BRKG_Msk             (0x80UL)                  /*!< BRKG (Bitfield-Mask: 0x01) */
#define TIMER7_SWEVG_TRGG_Pos             (6UL)                     /*!< TRGG (Bit 6) */
#define TIMER7_SWEVG_TRGG_Msk             (0x40UL)                  /*!< TRGG (Bitfield-Mask: 0x01) */
#define TIMER7_SWEVG_CMTG_Pos             (5UL)                     /*!< CMTG (Bit 5) */
#define TIMER7_SWEVG_CMTG_Msk             (0x20UL)                  /*!< CMTG (Bitfield-Mask: 0x01) */
#define TIMER7_SWEVG_CH3G_Pos             (4UL)                     /*!< CH3G (Bit 4) */
#define TIMER7_SWEVG_CH3G_Msk             (0x10UL)                  /*!< CH3G (Bitfield-Mask: 0x01) */
#define TIMER7_SWEVG_CH2G_Pos             (3UL)                     /*!< CH2G (Bit 3) */
#define TIMER7_SWEVG_CH2G_Msk             (0x8UL)                   /*!< CH2G (Bitfield-Mask: 0x01) */
#define TIMER7_SWEVG_CH1G_Pos             (2UL)                     /*!< CH1G (Bit 2) */
#define TIMER7_SWEVG_CH1G_Msk             (0x4UL)                   /*!< CH1G (Bitfield-Mask: 0x01) */
#define TIMER7_SWEVG_CH0G_Pos             (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER7_SWEVG_CH0G_Msk             (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER7_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER7_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER7_CHCTL0_Output_CH1COMCEN_Pos (15UL)                   /*!< CH1COMCEN (Bit 15) */
#define TIMER7_CHCTL0_Output_CH1COMCEN_Msk (0x8000UL)               /*!< CH1COMCEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL0_Output_CH1COMCTL_Pos (12UL)                   /*!< CH1COMCTL (Bit 12) */
#define TIMER7_CHCTL0_Output_CH1COMCTL_Msk (0x7000UL)               /*!< CH1COMCTL (Bitfield-Mask: 0x07) */
#define TIMER7_CHCTL0_Output_CH1COMSEN_Pos (11UL)                   /*!< CH1COMSEN (Bit 11) */
#define TIMER7_CHCTL0_Output_CH1COMSEN_Msk (0x800UL)                /*!< CH1COMSEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL0_Output_CH1COMFEN_Pos (10UL)                   /*!< CH1COMFEN (Bit 10) */
#define TIMER7_CHCTL0_Output_CH1COMFEN_Msk (0x400UL)                /*!< CH1COMFEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL0_Output_CH1MS_Pos    (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER7_CHCTL0_Output_CH1MS_Msk    (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER7_CHCTL0_Output_CH0COMCEN_Pos (7UL)                    /*!< CH0COMCEN (Bit 7) */
#define TIMER7_CHCTL0_Output_CH0COMCEN_Msk (0x80UL)                 /*!< CH0COMCEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL0_Output_CH0COMCTL_Pos (4UL)                    /*!< CH0COMCTL (Bit 4) */
#define TIMER7_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                 /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
#define TIMER7_CHCTL0_Output_CH0COMSEN_Pos (3UL)                    /*!< CH0COMSEN (Bit 3) */
#define TIMER7_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                  /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL0_Output_CH0COMFEN_Pos (2UL)                    /*!< CH0COMFEN (Bit 2) */
#define TIMER7_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                  /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL0_Output_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER7_CHCTL0_Output_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER7_CHCTL0_Input_CH1CAPFLT_Pos (12UL)                    /*!< CH1CAPFLT (Bit 12) */
#define TIMER7_CHCTL0_Input_CH1CAPFLT_Msk (0xf000UL)                /*!< CH1CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER7_CHCTL0_Input_CH1CAPPSC_Pos (10UL)                    /*!< CH1CAPPSC (Bit 10) */
#define TIMER7_CHCTL0_Input_CH1CAPPSC_Msk (0xc00UL)                 /*!< CH1CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER7_CHCTL0_Input_CH1MS_Pos     (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER7_CHCTL0_Input_CH1MS_Msk     (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER7_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                     /*!< CH0CAPFLT (Bit 4) */
#define TIMER7_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                  /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER7_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                     /*!< CH0CAPPSC (Bit 2) */
#define TIMER7_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                   /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER7_CHCTL0_Input_CH0MS_Pos     (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER7_CHCTL0_Input_CH0MS_Msk     (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Output  ===================================================== */
#define TIMER7_CHCTL1_Output_CH3COMCEN_Pos (15UL)                   /*!< CH3COMCEN (Bit 15) */
#define TIMER7_CHCTL1_Output_CH3COMCEN_Msk (0x8000UL)               /*!< CH3COMCEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL1_Output_CH3COMCTL_Pos (12UL)                   /*!< CH3COMCTL (Bit 12) */
#define TIMER7_CHCTL1_Output_CH3COMCTL_Msk (0x7000UL)               /*!< CH3COMCTL (Bitfield-Mask: 0x07) */
#define TIMER7_CHCTL1_Output_CH3COMSEN_Pos (11UL)                   /*!< CH3COMSEN (Bit 11) */
#define TIMER7_CHCTL1_Output_CH3COMSEN_Msk (0x800UL)                /*!< CH3COMSEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL1_Output_CH3COMFEN_Pos (10UL)                   /*!< CH3COMFEN (Bit 10) */
#define TIMER7_CHCTL1_Output_CH3COMFEN_Msk (0x400UL)                /*!< CH3COMFEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL1_Output_CH3MS_Pos    (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER7_CHCTL1_Output_CH3MS_Msk    (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER7_CHCTL1_Output_CH2COMCEN_Pos (7UL)                    /*!< CH2COMCEN (Bit 7) */
#define TIMER7_CHCTL1_Output_CH2COMCEN_Msk (0x80UL)                 /*!< CH2COMCEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL1_Output_CH2COMCTL_Pos (4UL)                    /*!< CH2COMCTL (Bit 4) */
#define TIMER7_CHCTL1_Output_CH2COMCTL_Msk (0x70UL)                 /*!< CH2COMCTL (Bitfield-Mask: 0x07) */
#define TIMER7_CHCTL1_Output_CH2COMSEN_Pos (3UL)                    /*!< CH2COMSEN (Bit 3) */
#define TIMER7_CHCTL1_Output_CH2COMSEN_Msk (0x8UL)                  /*!< CH2COMSEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL1_Output_CH2COMFEN_Pos (2UL)                    /*!< CH2COMFEN (Bit 2) */
#define TIMER7_CHCTL1_Output_CH2COMFEN_Msk (0x4UL)                  /*!< CH2COMFEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL1_Output_CH2MS_Pos    (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER7_CHCTL1_Output_CH2MS_Msk    (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL1_Input  ====================================================== */
#define TIMER7_CHCTL1_Input_CH3CAPFLT_Pos (12UL)                    /*!< CH3CAPFLT (Bit 12) */
#define TIMER7_CHCTL1_Input_CH3CAPFLT_Msk (0xf000UL)                /*!< CH3CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER7_CHCTL1_Input_CH3CAPPSC_Pos (10UL)                    /*!< CH3CAPPSC (Bit 10) */
#define TIMER7_CHCTL1_Input_CH3CAPPSC_Msk (0xc00UL)                 /*!< CH3CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER7_CHCTL1_Input_CH3MS_Pos     (8UL)                     /*!< CH3MS (Bit 8) */
#define TIMER7_CHCTL1_Input_CH3MS_Msk     (0x300UL)                 /*!< CH3MS (Bitfield-Mask: 0x03) */
#define TIMER7_CHCTL1_Input_CH2CAPFLT_Pos (4UL)                     /*!< CH2CAPFLT (Bit 4) */
#define TIMER7_CHCTL1_Input_CH2CAPFLT_Msk (0xf0UL)                  /*!< CH2CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER7_CHCTL1_Input_CH2CAPPSC_Pos (2UL)                     /*!< CH2CAPPSC (Bit 2) */
#define TIMER7_CHCTL1_Input_CH2CAPPSC_Msk (0xcUL)                   /*!< CH2CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER7_CHCTL1_Input_CH2MS_Pos     (0UL)                     /*!< CH2MS (Bit 0) */
#define TIMER7_CHCTL1_Input_CH2MS_Msk     (0x3UL)                   /*!< CH2MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER7_CHCTL2_CH3P_Pos            (13UL)                    /*!< CH3P (Bit 13) */
#define TIMER7_CHCTL2_CH3P_Msk            (0x2000UL)                /*!< CH3P (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH3EN_Pos           (12UL)                    /*!< CH3EN (Bit 12) */
#define TIMER7_CHCTL2_CH3EN_Msk           (0x1000UL)                /*!< CH3EN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH2NP_Pos           (11UL)                    /*!< CH2NP (Bit 11) */
#define TIMER7_CHCTL2_CH2NP_Msk           (0x800UL)                 /*!< CH2NP (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH2NEN_Pos          (10UL)                    /*!< CH2NEN (Bit 10) */
#define TIMER7_CHCTL2_CH2NEN_Msk          (0x400UL)                 /*!< CH2NEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH2P_Pos            (9UL)                     /*!< CH2P (Bit 9) */
#define TIMER7_CHCTL2_CH2P_Msk            (0x200UL)                 /*!< CH2P (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH2EN_Pos           (8UL)                     /*!< CH2EN (Bit 8) */
#define TIMER7_CHCTL2_CH2EN_Msk           (0x100UL)                 /*!< CH2EN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH1NP_Pos           (7UL)                     /*!< CH1NP (Bit 7) */
#define TIMER7_CHCTL2_CH1NP_Msk           (0x80UL)                  /*!< CH1NP (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH1NEN_Pos          (6UL)                     /*!< CH1NEN (Bit 6) */
#define TIMER7_CHCTL2_CH1NEN_Msk          (0x40UL)                  /*!< CH1NEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH1P_Pos            (5UL)                     /*!< CH1P (Bit 5) */
#define TIMER7_CHCTL2_CH1P_Msk            (0x20UL)                  /*!< CH1P (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH1EN_Pos           (4UL)                     /*!< CH1EN (Bit 4) */
#define TIMER7_CHCTL2_CH1EN_Msk           (0x10UL)                  /*!< CH1EN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH0NP_Pos           (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER7_CHCTL2_CH0NP_Msk           (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH0NEN_Pos          (2UL)                     /*!< CH0NEN (Bit 2) */
#define TIMER7_CHCTL2_CH0NEN_Msk          (0x4UL)                   /*!< CH0NEN (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH0P_Pos            (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER7_CHCTL2_CH0P_Msk            (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER7_CHCTL2_CH0EN_Pos           (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER7_CHCTL2_CH0EN_Msk           (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER7_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER7_CNT_CNT_Msk                (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER7_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER7_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER7_CAR_CAR_Pos                (0UL)                     /*!< CAR (Bit 0) */
#define TIMER7_CAR_CAR_Msk                (0xffffUL)                /*!< CAR (Bitfield-Mask: 0xffff) */
/* =========================================================  CREP  ========================================================== */
#define TIMER7_CREP_CREP_Pos              (0UL)                     /*!< CREP (Bit 0) */
#define TIMER7_CREP_CREP_Msk              (0xffUL)                  /*!< CREP (Bitfield-Mask: 0xff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER7_CH0CV_CH0VAL_Pos           (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER7_CH0CV_CH0VAL_Msk           (0xffffUL)                /*!< CH0VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH1CV  ========================================================= */
#define TIMER7_CH1CV_CH1VAL_Pos           (0UL)                     /*!< CH1VAL (Bit 0) */
#define TIMER7_CH1CV_CH1VAL_Msk           (0xffffUL)                /*!< CH1VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH2CV  ========================================================= */
#define TIMER7_CH2CV_CH2VAL_Pos           (0UL)                     /*!< CH2VAL (Bit 0) */
#define TIMER7_CH2CV_CH2VAL_Msk           (0xffffUL)                /*!< CH2VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH3CV  ========================================================= */
#define TIMER7_CH3CV_CH3VAL_Pos           (0UL)                     /*!< CH3VAL (Bit 0) */
#define TIMER7_CH3CV_CH3VAL_Msk           (0xffffUL)                /*!< CH3VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CCHP  ========================================================== */
#define TIMER7_CCHP_POEN_Pos              (15UL)                    /*!< POEN (Bit 15) */
#define TIMER7_CCHP_POEN_Msk              (0x8000UL)                /*!< POEN (Bitfield-Mask: 0x01) */
#define TIMER7_CCHP_OAEN_Pos              (14UL)                    /*!< OAEN (Bit 14) */
#define TIMER7_CCHP_OAEN_Msk              (0x4000UL)                /*!< OAEN (Bitfield-Mask: 0x01) */
#define TIMER7_CCHP_BRKP_Pos              (13UL)                    /*!< BRKP (Bit 13) */
#define TIMER7_CCHP_BRKP_Msk              (0x2000UL)                /*!< BRKP (Bitfield-Mask: 0x01) */
#define TIMER7_CCHP_BRKEN_Pos             (12UL)                    /*!< BRKEN (Bit 12) */
#define TIMER7_CCHP_BRKEN_Msk             (0x1000UL)                /*!< BRKEN (Bitfield-Mask: 0x01) */
#define TIMER7_CCHP_ROS_Pos               (11UL)                    /*!< ROS (Bit 11) */
#define TIMER7_CCHP_ROS_Msk               (0x800UL)                 /*!< ROS (Bitfield-Mask: 0x01) */
#define TIMER7_CCHP_IOS_Pos               (10UL)                    /*!< IOS (Bit 10) */
#define TIMER7_CCHP_IOS_Msk               (0x400UL)                 /*!< IOS (Bitfield-Mask: 0x01) */
#define TIMER7_CCHP_PROT_Pos              (8UL)                     /*!< PROT (Bit 8) */
#define TIMER7_CCHP_PROT_Msk              (0x300UL)                 /*!< PROT (Bitfield-Mask: 0x03) */
#define TIMER7_CCHP_DTCFG_Pos             (0UL)                     /*!< DTCFG (Bit 0) */
#define TIMER7_CCHP_DTCFG_Msk             (0xffUL)                  /*!< DTCFG (Bitfield-Mask: 0xff) */
/* ========================================================  DMACFG  ========================================================= */
#define TIMER7_DMACFG_DMATC_Pos           (8UL)                     /*!< DMATC (Bit 8) */
#define TIMER7_DMACFG_DMATC_Msk           (0x1f00UL)                /*!< DMATC (Bitfield-Mask: 0x1f) */
#define TIMER7_DMACFG_DMATA_Pos           (0UL)                     /*!< DMATA (Bit 0) */
#define TIMER7_DMACFG_DMATA_Msk           (0x1fUL)                  /*!< DMATA (Bitfield-Mask: 0x1f) */
/* =========================================================  DMATB  ========================================================= */
#define TIMER7_DMATB_DMATB_Pos            (0UL)                     /*!< DMATB (Bit 0) */
#define TIMER7_DMATB_DMATB_Msk            (0xffffUL)                /*!< DMATB (Bitfield-Mask: 0xffff) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER7_CFG_OUTSEL_Pos             (0UL)                     /*!< OUTSEL (Bit 0) */
#define TIMER7_CFG_OUTSEL_Msk             (0x1UL)                   /*!< OUTSEL (Bitfield-Mask: 0x01) */
#define TIMER7_CFG_CHVSEL_Pos             (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER7_CFG_CHVSEL_Msk             (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER8                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER8_CTL0_CKDIV_Pos             (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER8_CTL0_CKDIV_Msk             (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER8_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER8_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER8_CTL0_SPM_Pos               (3UL)                     /*!< SPM (Bit 3) */
#define TIMER8_CTL0_SPM_Msk               (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER8_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER8_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER8_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER8_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER8_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER8_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  SMCFG  ========================================================= */
#define TIMER8_SMCFG_MSM_Pos              (7UL)                     /*!< MSM (Bit 7) */
#define TIMER8_SMCFG_MSM_Msk              (0x80UL)                  /*!< MSM (Bitfield-Mask: 0x01) */
#define TIMER8_SMCFG_TRGS_Pos             (4UL)                     /*!< TRGS (Bit 4) */
#define TIMER8_SMCFG_TRGS_Msk             (0x70UL)                  /*!< TRGS (Bitfield-Mask: 0x07) */
#define TIMER8_SMCFG_SMC_Pos              (0UL)                     /*!< SMC (Bit 0) */
#define TIMER8_SMCFG_SMC_Msk              (0x7UL)                   /*!< SMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER8_DMAINTEN_TRGIE_Pos         (6UL)                     /*!< TRGIE (Bit 6) */
#define TIMER8_DMAINTEN_TRGIE_Msk         (0x40UL)                  /*!< TRGIE (Bitfield-Mask: 0x01) */
#define TIMER8_DMAINTEN_CH1IE_Pos         (2UL)                     /*!< CH1IE (Bit 2) */
#define TIMER8_DMAINTEN_CH1IE_Msk         (0x4UL)                   /*!< CH1IE (Bitfield-Mask: 0x01) */
#define TIMER8_DMAINTEN_CH0IE_Pos         (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER8_DMAINTEN_CH0IE_Msk         (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER8_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER8_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER8_INTF_CH1OF_Pos             (10UL)                    /*!< CH1OF (Bit 10) */
#define TIMER8_INTF_CH1OF_Msk             (0x400UL)                 /*!< CH1OF (Bitfield-Mask: 0x01) */
#define TIMER8_INTF_CH0OF_Pos             (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER8_INTF_CH0OF_Msk             (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER8_INTF_TRGIF_Pos             (6UL)                     /*!< TRGIF (Bit 6) */
#define TIMER8_INTF_TRGIF_Msk             (0x40UL)                  /*!< TRGIF (Bitfield-Mask: 0x01) */
#define TIMER8_INTF_CH1IF_Pos             (2UL)                     /*!< CH1IF (Bit 2) */
#define TIMER8_INTF_CH1IF_Msk             (0x4UL)                   /*!< CH1IF (Bitfield-Mask: 0x01) */
#define TIMER8_INTF_CH0IF_Pos             (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER8_INTF_CH0IF_Msk             (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER8_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER8_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER8_SWEVG_TRGG_Pos             (6UL)                     /*!< TRGG (Bit 6) */
#define TIMER8_SWEVG_TRGG_Msk             (0x40UL)                  /*!< TRGG (Bitfield-Mask: 0x01) */
#define TIMER8_SWEVG_CH1G_Pos             (2UL)                     /*!< CH1G (Bit 2) */
#define TIMER8_SWEVG_CH1G_Msk             (0x4UL)                   /*!< CH1G (Bitfield-Mask: 0x01) */
#define TIMER8_SWEVG_CH0G_Pos             (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER8_SWEVG_CH0G_Msk             (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER8_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER8_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER8_CHCTL0_Output_CH1COMCTL_Pos (12UL)                   /*!< CH1COMCTL (Bit 12) */
#define TIMER8_CHCTL0_Output_CH1COMCTL_Msk (0x7000UL)               /*!< CH1COMCTL (Bitfield-Mask: 0x07) */
#define TIMER8_CHCTL0_Output_CH1COMSEN_Pos (11UL)                   /*!< CH1COMSEN (Bit 11) */
#define TIMER8_CHCTL0_Output_CH1COMSEN_Msk (0x800UL)                /*!< CH1COMSEN (Bitfield-Mask: 0x01) */
#define TIMER8_CHCTL0_Output_CH1COMFEN_Pos (10UL)                   /*!< CH1COMFEN (Bit 10) */
#define TIMER8_CHCTL0_Output_CH1COMFEN_Msk (0x400UL)                /*!< CH1COMFEN (Bitfield-Mask: 0x01) */
#define TIMER8_CHCTL0_Output_CH1MS_Pos    (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER8_CHCTL0_Output_CH1MS_Msk    (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER8_CHCTL0_Output_CH0COMCTL_Pos (4UL)                    /*!< CH0COMCTL (Bit 4) */
#define TIMER8_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                 /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
#define TIMER8_CHCTL0_Output_CH0COMSEN_Pos (3UL)                    /*!< CH0COMSEN (Bit 3) */
#define TIMER8_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                  /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER8_CHCTL0_Output_CH0COMFEN_Pos (2UL)                    /*!< CH0COMFEN (Bit 2) */
#define TIMER8_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                  /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER8_CHCTL0_Output_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER8_CHCTL0_Output_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER8_CHCTL0_Input_CH1CAPFLT_Pos (12UL)                    /*!< CH1CAPFLT (Bit 12) */
#define TIMER8_CHCTL0_Input_CH1CAPFLT_Msk (0xf000UL)                /*!< CH1CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER8_CHCTL0_Input_CH1CAPPSC_Pos (10UL)                    /*!< CH1CAPPSC (Bit 10) */
#define TIMER8_CHCTL0_Input_CH1CAPPSC_Msk (0xc00UL)                 /*!< CH1CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER8_CHCTL0_Input_CH1MS_Pos     (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER8_CHCTL0_Input_CH1MS_Msk     (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER8_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                     /*!< CH0CAPFLT (Bit 4) */
#define TIMER8_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                  /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER8_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                     /*!< CH0CAPPSC (Bit 2) */
#define TIMER8_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                   /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER8_CHCTL0_Input_CH0MS_Pos     (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER8_CHCTL0_Input_CH0MS_Msk     (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER8_CHCTL2_CH1NP_Pos           (7UL)                     /*!< CH1NP (Bit 7) */
#define TIMER8_CHCTL2_CH1NP_Msk           (0x80UL)                  /*!< CH1NP (Bitfield-Mask: 0x01) */
#define TIMER8_CHCTL2_CH1P_Pos            (5UL)                     /*!< CH1P (Bit 5) */
#define TIMER8_CHCTL2_CH1P_Msk            (0x20UL)                  /*!< CH1P (Bitfield-Mask: 0x01) */
#define TIMER8_CHCTL2_CH1EN_Pos           (4UL)                     /*!< CH1EN (Bit 4) */
#define TIMER8_CHCTL2_CH1EN_Msk           (0x10UL)                  /*!< CH1EN (Bitfield-Mask: 0x01) */
#define TIMER8_CHCTL2_CH0NP_Pos           (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER8_CHCTL2_CH0NP_Msk           (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER8_CHCTL2_CH0P_Pos            (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER8_CHCTL2_CH0P_Msk            (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER8_CHCTL2_CH0EN_Pos           (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER8_CHCTL2_CH0EN_Msk           (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER8_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER8_CNT_CNT_Msk                (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER8_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER8_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER8_CAR_CARL_Pos               (0UL)                     /*!< CARL (Bit 0) */
#define TIMER8_CAR_CARL_Msk               (0xffffUL)                /*!< CARL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER8_CH0CV_CH0VAL_Pos           (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER8_CH0CV_CH0VAL_Msk           (0xffffUL)                /*!< CH0VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH1CV  ========================================================= */
#define TIMER8_CH1CV_CH1VAL_Pos           (0UL)                     /*!< CH1VAL (Bit 0) */
#define TIMER8_CH1CV_CH1VAL_Msk           (0xffffUL)                /*!< CH1VAL (Bitfield-Mask: 0xffff) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER8_CFG_CHVSEL_Pos             (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER8_CFG_CHVSEL_Msk             (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER9                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER9_CTL0_CKDIV_Pos             (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER9_CTL0_CKDIV_Msk             (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER9_CTL0_ARSE_Pos              (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER9_CTL0_ARSE_Msk              (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER9_CTL0_UPS_Pos               (2UL)                     /*!< UPS (Bit 2) */
#define TIMER9_CTL0_UPS_Msk               (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER9_CTL0_UPDIS_Pos             (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER9_CTL0_UPDIS_Msk             (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER9_CTL0_CEN_Pos               (0UL)                     /*!< CEN (Bit 0) */
#define TIMER9_CTL0_CEN_Msk               (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER9_DMAINTEN_CH0IE_Pos         (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER9_DMAINTEN_CH0IE_Msk         (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER9_DMAINTEN_UPIE_Pos          (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER9_DMAINTEN_UPIE_Msk          (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER9_INTF_CH0OF_Pos             (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER9_INTF_CH0OF_Msk             (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER9_INTF_CH0IF_Pos             (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER9_INTF_CH0IF_Msk             (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER9_INTF_UPIF_Pos              (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER9_INTF_UPIF_Msk              (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER9_SWEVG_CH0G_Pos             (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER9_SWEVG_CH0G_Msk             (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER9_SWEVG_UPG_Pos              (0UL)                     /*!< UPG (Bit 0) */
#define TIMER9_SWEVG_UPG_Msk              (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER9_CHCTL0_Output_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER9_CHCTL0_Output_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
#define TIMER9_CHCTL0_Output_CH0COMFEN_Pos (2UL)                    /*!< CH0COMFEN (Bit 2) */
#define TIMER9_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                  /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER9_CHCTL0_Output_CH0COMSEN_Pos (3UL)                    /*!< CH0COMSEN (Bit 3) */
#define TIMER9_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                  /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER9_CHCTL0_Output_CH0COMCTL_Pos (4UL)                    /*!< CH0COMCTL (Bit 4) */
#define TIMER9_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                 /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER9_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                     /*!< CH0CAPFLT (Bit 4) */
#define TIMER9_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                  /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER9_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                     /*!< CH0CAPPSC (Bit 2) */
#define TIMER9_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                   /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER9_CHCTL0_Input_CH0MS_Pos     (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER9_CHCTL0_Input_CH0MS_Msk     (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER9_CHCTL2_CH0NP_Pos           (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER9_CHCTL2_CH0NP_Msk           (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER9_CHCTL2_CH0P_Pos            (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER9_CHCTL2_CH0P_Msk            (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER9_CHCTL2_CH0EN_Pos           (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER9_CHCTL2_CH0EN_Msk           (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER9_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0) */
#define TIMER9_CNT_CNT_Msk                (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER9_PSC_PSC_Pos                (0UL)                     /*!< PSC (Bit 0) */
#define TIMER9_PSC_PSC_Msk                (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER9_CAR_CARL_Pos               (0UL)                     /*!< CARL (Bit 0) */
#define TIMER9_CAR_CARL_Msk               (0xffffUL)                /*!< CARL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER9_CH0CV_CH0VAL_Pos           (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER9_CH0CV_CH0VAL_Msk           (0xffffUL)                /*!< CH0VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  IRMP  ========================================================== */
#define TIMER9_IRMP_ITI1_RMP_Pos          (10UL)                    /*!< ITI1_RMP (Bit 10) */
#define TIMER9_IRMP_ITI1_RMP_Msk          (0xc00UL)                 /*!< ITI1_RMP (Bitfield-Mask: 0x03) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER9_CFG_CHVSEL_Pos             (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER9_CFG_CHVSEL_Msk             (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER10                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER10_CTL0_CKDIV_Pos            (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER10_CTL0_CKDIV_Msk            (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER10_CTL0_ARSE_Pos             (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER10_CTL0_ARSE_Msk             (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER10_CTL0_UPS_Pos              (2UL)                     /*!< UPS (Bit 2) */
#define TIMER10_CTL0_UPS_Msk              (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER10_CTL0_UPDIS_Pos            (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER10_CTL0_UPDIS_Msk            (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER10_CTL0_CEN_Pos              (0UL)                     /*!< CEN (Bit 0) */
#define TIMER10_CTL0_CEN_Msk              (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER10_DMAINTEN_CH0IE_Pos        (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER10_DMAINTEN_CH0IE_Msk        (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER10_DMAINTEN_UPIE_Pos         (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER10_DMAINTEN_UPIE_Msk         (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER10_INTF_CH0OF_Pos            (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER10_INTF_CH0OF_Msk            (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER10_INTF_CH0IF_Pos            (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER10_INTF_CH0IF_Msk            (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER10_INTF_UPIF_Pos             (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER10_INTF_UPIF_Msk             (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER10_SWEVG_CH0G_Pos            (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER10_SWEVG_CH0G_Msk            (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER10_SWEVG_UPG_Pos             (0UL)                     /*!< UPG (Bit 0) */
#define TIMER10_SWEVG_UPG_Msk             (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER10_CHCTL0_Output_CH0MS_Pos   (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER10_CHCTL0_Output_CH0MS_Msk   (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
#define TIMER10_CHCTL0_Output_CH0COMFEN_Pos (2UL)                   /*!< CH0COMFEN (Bit 2) */
#define TIMER10_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                 /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER10_CHCTL0_Output_CH0COMSEN_Pos (3UL)                   /*!< CH0COMSEN (Bit 3) */
#define TIMER10_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                 /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER10_CHCTL0_Output_CH0COMCTL_Pos (4UL)                   /*!< CH0COMCTL (Bit 4) */
#define TIMER10_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER10_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                    /*!< CH0CAPFLT (Bit 4) */
#define TIMER10_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                 /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER10_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                    /*!< CH0CAPPSC (Bit 2) */
#define TIMER10_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                  /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER10_CHCTL0_Input_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER10_CHCTL0_Input_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER10_CHCTL2_CH0NP_Pos          (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER10_CHCTL2_CH0NP_Msk          (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER10_CHCTL2_CH0P_Pos           (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER10_CHCTL2_CH0P_Msk           (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER10_CHCTL2_CH0EN_Pos          (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER10_CHCTL2_CH0EN_Msk          (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER10_CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define TIMER10_CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER10_PSC_PSC_Pos               (0UL)                     /*!< PSC (Bit 0) */
#define TIMER10_PSC_PSC_Msk               (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER10_CAR_CARL_Pos              (0UL)                     /*!< CARL (Bit 0) */
#define TIMER10_CAR_CARL_Msk              (0xffffUL)                /*!< CARL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER10_CH0CV_CH0VAL_Pos          (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER10_CH0CV_CH0VAL_Msk          (0xffffUL)                /*!< CH0VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  IRMP  ========================================================== */
#define TIMER10_IRMP_ITI1_RMP_Pos         (10UL)                    /*!< ITI1_RMP (Bit 10) */
#define TIMER10_IRMP_ITI1_RMP_Msk         (0xc00UL)                 /*!< ITI1_RMP (Bitfield-Mask: 0x03) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER10_CFG_CHVSEL_Pos            (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER10_CFG_CHVSEL_Msk            (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER11                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER11_CTL0_CKDIV_Pos            (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER11_CTL0_CKDIV_Msk            (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER11_CTL0_ARSE_Pos             (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER11_CTL0_ARSE_Msk             (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER11_CTL0_SPM_Pos              (3UL)                     /*!< SPM (Bit 3) */
#define TIMER11_CTL0_SPM_Msk              (0x8UL)                   /*!< SPM (Bitfield-Mask: 0x01) */
#define TIMER11_CTL0_UPS_Pos              (2UL)                     /*!< UPS (Bit 2) */
#define TIMER11_CTL0_UPS_Msk              (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER11_CTL0_UPDIS_Pos            (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER11_CTL0_UPDIS_Msk            (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER11_CTL0_CEN_Pos              (0UL)                     /*!< CEN (Bit 0) */
#define TIMER11_CTL0_CEN_Msk              (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =========================================================  SMCFG  ========================================================= */
#define TIMER11_SMCFG_MSM_Pos             (7UL)                     /*!< MSM (Bit 7) */
#define TIMER11_SMCFG_MSM_Msk             (0x80UL)                  /*!< MSM (Bitfield-Mask: 0x01) */
#define TIMER11_SMCFG_TRGS_Pos            (4UL)                     /*!< TRGS (Bit 4) */
#define TIMER11_SMCFG_TRGS_Msk            (0x70UL)                  /*!< TRGS (Bitfield-Mask: 0x07) */
#define TIMER11_SMCFG_SMC_Pos             (0UL)                     /*!< SMC (Bit 0) */
#define TIMER11_SMCFG_SMC_Msk             (0x7UL)                   /*!< SMC (Bitfield-Mask: 0x07) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER11_DMAINTEN_TRGIE_Pos        (6UL)                     /*!< TRGIE (Bit 6) */
#define TIMER11_DMAINTEN_TRGIE_Msk        (0x40UL)                  /*!< TRGIE (Bitfield-Mask: 0x01) */
#define TIMER11_DMAINTEN_CH1IE_Pos        (2UL)                     /*!< CH1IE (Bit 2) */
#define TIMER11_DMAINTEN_CH1IE_Msk        (0x4UL)                   /*!< CH1IE (Bitfield-Mask: 0x01) */
#define TIMER11_DMAINTEN_CH0IE_Pos        (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER11_DMAINTEN_CH0IE_Msk        (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER11_DMAINTEN_UPIE_Pos         (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER11_DMAINTEN_UPIE_Msk         (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER11_INTF_CH1OF_Pos            (10UL)                    /*!< CH1OF (Bit 10) */
#define TIMER11_INTF_CH1OF_Msk            (0x400UL)                 /*!< CH1OF (Bitfield-Mask: 0x01) */
#define TIMER11_INTF_CH0OF_Pos            (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER11_INTF_CH0OF_Msk            (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER11_INTF_TRGIF_Pos            (6UL)                     /*!< TRGIF (Bit 6) */
#define TIMER11_INTF_TRGIF_Msk            (0x40UL)                  /*!< TRGIF (Bitfield-Mask: 0x01) */
#define TIMER11_INTF_CH1IF_Pos            (2UL)                     /*!< CH1IF (Bit 2) */
#define TIMER11_INTF_CH1IF_Msk            (0x4UL)                   /*!< CH1IF (Bitfield-Mask: 0x01) */
#define TIMER11_INTF_CH0IF_Pos            (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER11_INTF_CH0IF_Msk            (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER11_INTF_UPIF_Pos             (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER11_INTF_UPIF_Msk             (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER11_SWEVG_TRGG_Pos            (6UL)                     /*!< TRGG (Bit 6) */
#define TIMER11_SWEVG_TRGG_Msk            (0x40UL)                  /*!< TRGG (Bitfield-Mask: 0x01) */
#define TIMER11_SWEVG_CH1G_Pos            (2UL)                     /*!< CH1G (Bit 2) */
#define TIMER11_SWEVG_CH1G_Msk            (0x4UL)                   /*!< CH1G (Bitfield-Mask: 0x01) */
#define TIMER11_SWEVG_CH0G_Pos            (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER11_SWEVG_CH0G_Msk            (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER11_SWEVG_UPG_Pos             (0UL)                     /*!< UPG (Bit 0) */
#define TIMER11_SWEVG_UPG_Msk             (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER11_CHCTL0_Output_CH1COMCTL_Pos (12UL)                  /*!< CH1COMCTL (Bit 12) */
#define TIMER11_CHCTL0_Output_CH1COMCTL_Msk (0x7000UL)              /*!< CH1COMCTL (Bitfield-Mask: 0x07) */
#define TIMER11_CHCTL0_Output_CH1COMSEN_Pos (11UL)                  /*!< CH1COMSEN (Bit 11) */
#define TIMER11_CHCTL0_Output_CH1COMSEN_Msk (0x800UL)               /*!< CH1COMSEN (Bitfield-Mask: 0x01) */
#define TIMER11_CHCTL0_Output_CH1COMFEN_Pos (10UL)                  /*!< CH1COMFEN (Bit 10) */
#define TIMER11_CHCTL0_Output_CH1COMFEN_Msk (0x400UL)               /*!< CH1COMFEN (Bitfield-Mask: 0x01) */
#define TIMER11_CHCTL0_Output_CH1MS_Pos   (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER11_CHCTL0_Output_CH1MS_Msk   (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER11_CHCTL0_Output_CH0COMCTL_Pos (4UL)                   /*!< CH0COMCTL (Bit 4) */
#define TIMER11_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
#define TIMER11_CHCTL0_Output_CH0COMSEN_Pos (3UL)                   /*!< CH0COMSEN (Bit 3) */
#define TIMER11_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                 /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER11_CHCTL0_Output_CH0COMFEN_Pos (2UL)                   /*!< CH0COMFEN (Bit 2) */
#define TIMER11_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                 /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER11_CHCTL0_Output_CH0MS_Pos   (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER11_CHCTL0_Output_CH0MS_Msk   (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER11_CHCTL0_Input_CH1CAPFLT_Pos (12UL)                   /*!< CH1CAPFLT (Bit 12) */
#define TIMER11_CHCTL0_Input_CH1CAPFLT_Msk (0xf000UL)               /*!< CH1CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER11_CHCTL0_Input_CH1CAPPSC_Pos (10UL)                   /*!< CH1CAPPSC (Bit 10) */
#define TIMER11_CHCTL0_Input_CH1CAPPSC_Msk (0xc00UL)                /*!< CH1CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER11_CHCTL0_Input_CH1MS_Pos    (8UL)                     /*!< CH1MS (Bit 8) */
#define TIMER11_CHCTL0_Input_CH1MS_Msk    (0x300UL)                 /*!< CH1MS (Bitfield-Mask: 0x03) */
#define TIMER11_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                    /*!< CH0CAPFLT (Bit 4) */
#define TIMER11_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                 /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER11_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                    /*!< CH0CAPPSC (Bit 2) */
#define TIMER11_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                  /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER11_CHCTL0_Input_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER11_CHCTL0_Input_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER11_CHCTL2_CH1NP_Pos          (7UL)                     /*!< CH1NP (Bit 7) */
#define TIMER11_CHCTL2_CH1NP_Msk          (0x80UL)                  /*!< CH1NP (Bitfield-Mask: 0x01) */
#define TIMER11_CHCTL2_CH1P_Pos           (5UL)                     /*!< CH1P (Bit 5) */
#define TIMER11_CHCTL2_CH1P_Msk           (0x20UL)                  /*!< CH1P (Bitfield-Mask: 0x01) */
#define TIMER11_CHCTL2_CH1EN_Pos          (4UL)                     /*!< CH1EN (Bit 4) */
#define TIMER11_CHCTL2_CH1EN_Msk          (0x10UL)                  /*!< CH1EN (Bitfield-Mask: 0x01) */
#define TIMER11_CHCTL2_CH0NP_Pos          (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER11_CHCTL2_CH0NP_Msk          (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER11_CHCTL2_CH0P_Pos           (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER11_CHCTL2_CH0P_Msk           (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER11_CHCTL2_CH0EN_Pos          (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER11_CHCTL2_CH0EN_Msk          (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER11_CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define TIMER11_CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER11_PSC_PSC_Pos               (0UL)                     /*!< PSC (Bit 0) */
#define TIMER11_PSC_PSC_Msk               (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER11_CAR_CARL_Pos              (0UL)                     /*!< CARL (Bit 0) */
#define TIMER11_CAR_CARL_Msk              (0xffffUL)                /*!< CARL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER11_CH0CV_CH0VAL_Pos          (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER11_CH0CV_CH0VAL_Msk          (0xffffUL)                /*!< CH0VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH1CV  ========================================================= */
#define TIMER11_CH1CV_CH1VAL_Pos          (0UL)                     /*!< CH1VAL (Bit 0) */
#define TIMER11_CH1CV_CH1VAL_Msk          (0xffffUL)                /*!< CH1VAL (Bitfield-Mask: 0xffff) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER11_CFG_CHVSEL_Pos            (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER11_CFG_CHVSEL_Msk            (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER12                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER12_CTL0_CKDIV_Pos            (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER12_CTL0_CKDIV_Msk            (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER12_CTL0_ARSE_Pos             (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER12_CTL0_ARSE_Msk             (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER12_CTL0_UPS_Pos              (2UL)                     /*!< UPS (Bit 2) */
#define TIMER12_CTL0_UPS_Msk              (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER12_CTL0_UPDIS_Pos            (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER12_CTL0_UPDIS_Msk            (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER12_CTL0_CEN_Pos              (0UL)                     /*!< CEN (Bit 0) */
#define TIMER12_CTL0_CEN_Msk              (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER12_DMAINTEN_CH0IE_Pos        (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER12_DMAINTEN_CH0IE_Msk        (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER12_DMAINTEN_UPIE_Pos         (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER12_DMAINTEN_UPIE_Msk         (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER12_INTF_CH0OF_Pos            (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER12_INTF_CH0OF_Msk            (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER12_INTF_CH0IF_Pos            (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER12_INTF_CH0IF_Msk            (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER12_INTF_UPIF_Pos             (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER12_INTF_UPIF_Msk             (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER12_SWEVG_CH0G_Pos            (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER12_SWEVG_CH0G_Msk            (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER12_SWEVG_UPG_Pos             (0UL)                     /*!< UPG (Bit 0) */
#define TIMER12_SWEVG_UPG_Msk             (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER12_CHCTL0_Output_CH0MS_Pos   (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER12_CHCTL0_Output_CH0MS_Msk   (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
#define TIMER12_CHCTL0_Output_CH0COMFEN_Pos (2UL)                   /*!< CH0COMFEN (Bit 2) */
#define TIMER12_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                 /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER12_CHCTL0_Output_CH0COMSEN_Pos (3UL)                   /*!< CH0COMSEN (Bit 3) */
#define TIMER12_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                 /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER12_CHCTL0_Output_CH0COMCTL_Pos (4UL)                   /*!< CH0COMCTL (Bit 4) */
#define TIMER12_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER12_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                    /*!< CH0CAPFLT (Bit 4) */
#define TIMER12_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                 /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER12_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                    /*!< CH0CAPPSC (Bit 2) */
#define TIMER12_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                  /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER12_CHCTL0_Input_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER12_CHCTL0_Input_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER12_CHCTL2_CH0NP_Pos          (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER12_CHCTL2_CH0NP_Msk          (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER12_CHCTL2_CH0P_Pos           (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER12_CHCTL2_CH0P_Msk           (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER12_CHCTL2_CH0EN_Pos          (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER12_CHCTL2_CH0EN_Msk          (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER12_CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define TIMER12_CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER12_PSC_PSC_Pos               (0UL)                     /*!< PSC (Bit 0) */
#define TIMER12_PSC_PSC_Msk               (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER12_CAR_CARL_Pos              (0UL)                     /*!< CARL (Bit 0) */
#define TIMER12_CAR_CARL_Msk              (0xffffUL)                /*!< CARL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER12_CH0CV_CH0VAL_Pos          (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER12_CH0CV_CH0VAL_Msk          (0xffffUL)                /*!< CH0VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  IRMP  ========================================================== */
#define TIMER12_IRMP_ITI1_RMP_Pos         (10UL)                    /*!< ITI1_RMP (Bit 10) */
#define TIMER12_IRMP_ITI1_RMP_Msk         (0xc00UL)                 /*!< ITI1_RMP (Bitfield-Mask: 0x03) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER12_CFG_CHVSEL_Pos            (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER12_CFG_CHVSEL_Msk            (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          TIMER13                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  CTL0  ========================================================== */
#define TIMER13_CTL0_CKDIV_Pos            (8UL)                     /*!< CKDIV (Bit 8) */
#define TIMER13_CTL0_CKDIV_Msk            (0x300UL)                 /*!< CKDIV (Bitfield-Mask: 0x03) */
#define TIMER13_CTL0_ARSE_Pos             (7UL)                     /*!< ARSE (Bit 7) */
#define TIMER13_CTL0_ARSE_Msk             (0x80UL)                  /*!< ARSE (Bitfield-Mask: 0x01) */
#define TIMER13_CTL0_UPS_Pos              (2UL)                     /*!< UPS (Bit 2) */
#define TIMER13_CTL0_UPS_Msk              (0x4UL)                   /*!< UPS (Bitfield-Mask: 0x01) */
#define TIMER13_CTL0_UPDIS_Pos            (1UL)                     /*!< UPDIS (Bit 1) */
#define TIMER13_CTL0_UPDIS_Msk            (0x2UL)                   /*!< UPDIS (Bitfield-Mask: 0x01) */
#define TIMER13_CTL0_CEN_Pos              (0UL)                     /*!< CEN (Bit 0) */
#define TIMER13_CTL0_CEN_Msk              (0x1UL)                   /*!< CEN (Bitfield-Mask: 0x01) */
/* =======================================================  DMAINTEN  ======================================================== */
#define TIMER13_DMAINTEN_CH0IE_Pos        (1UL)                     /*!< CH0IE (Bit 1) */
#define TIMER13_DMAINTEN_CH0IE_Msk        (0x2UL)                   /*!< CH0IE (Bitfield-Mask: 0x01) */
#define TIMER13_DMAINTEN_UPIE_Pos         (0UL)                     /*!< UPIE (Bit 0) */
#define TIMER13_DMAINTEN_UPIE_Msk         (0x1UL)                   /*!< UPIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TIMER13_INTF_CH0OF_Pos            (9UL)                     /*!< CH0OF (Bit 9) */
#define TIMER13_INTF_CH0OF_Msk            (0x200UL)                 /*!< CH0OF (Bitfield-Mask: 0x01) */
#define TIMER13_INTF_CH0IF_Pos            (1UL)                     /*!< CH0IF (Bit 1) */
#define TIMER13_INTF_CH0IF_Msk            (0x2UL)                   /*!< CH0IF (Bitfield-Mask: 0x01) */
#define TIMER13_INTF_UPIF_Pos             (0UL)                     /*!< UPIF (Bit 0) */
#define TIMER13_INTF_UPIF_Msk             (0x1UL)                   /*!< UPIF (Bitfield-Mask: 0x01) */
/* =========================================================  SWEVG  ========================================================= */
#define TIMER13_SWEVG_CH0G_Pos            (1UL)                     /*!< CH0G (Bit 1) */
#define TIMER13_SWEVG_CH0G_Msk            (0x2UL)                   /*!< CH0G (Bitfield-Mask: 0x01) */
#define TIMER13_SWEVG_UPG_Pos             (0UL)                     /*!< UPG (Bit 0) */
#define TIMER13_SWEVG_UPG_Msk             (0x1UL)                   /*!< UPG (Bitfield-Mask: 0x01) */
/* =====================================================  CHCTL0_Output  ===================================================== */
#define TIMER13_CHCTL0_Output_CH0MS_Pos   (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER13_CHCTL0_Output_CH0MS_Msk   (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
#define TIMER13_CHCTL0_Output_CH0COMFEN_Pos (2UL)                   /*!< CH0COMFEN (Bit 2) */
#define TIMER13_CHCTL0_Output_CH0COMFEN_Msk (0x4UL)                 /*!< CH0COMFEN (Bitfield-Mask: 0x01) */
#define TIMER13_CHCTL0_Output_CH0COMSEN_Pos (3UL)                   /*!< CH0COMSEN (Bit 3) */
#define TIMER13_CHCTL0_Output_CH0COMSEN_Msk (0x8UL)                 /*!< CH0COMSEN (Bitfield-Mask: 0x01) */
#define TIMER13_CHCTL0_Output_CH0COMCTL_Pos (4UL)                   /*!< CH0COMCTL (Bit 4) */
#define TIMER13_CHCTL0_Output_CH0COMCTL_Msk (0x70UL)                /*!< CH0COMCTL (Bitfield-Mask: 0x07) */
/* =====================================================  CHCTL0_Input  ====================================================== */
#define TIMER13_CHCTL0_Input_CH0CAPFLT_Pos (4UL)                    /*!< CH0CAPFLT (Bit 4) */
#define TIMER13_CHCTL0_Input_CH0CAPFLT_Msk (0xf0UL)                 /*!< CH0CAPFLT (Bitfield-Mask: 0x0f) */
#define TIMER13_CHCTL0_Input_CH0CAPPSC_Pos (2UL)                    /*!< CH0CAPPSC (Bit 2) */
#define TIMER13_CHCTL0_Input_CH0CAPPSC_Msk (0xcUL)                  /*!< CH0CAPPSC (Bitfield-Mask: 0x03) */
#define TIMER13_CHCTL0_Input_CH0MS_Pos    (0UL)                     /*!< CH0MS (Bit 0) */
#define TIMER13_CHCTL0_Input_CH0MS_Msk    (0x3UL)                   /*!< CH0MS (Bitfield-Mask: 0x03) */
/* ========================================================  CHCTL2  ========================================================= */
#define TIMER13_CHCTL2_CH0NP_Pos          (3UL)                     /*!< CH0NP (Bit 3) */
#define TIMER13_CHCTL2_CH0NP_Msk          (0x8UL)                   /*!< CH0NP (Bitfield-Mask: 0x01) */
#define TIMER13_CHCTL2_CH0P_Pos           (1UL)                     /*!< CH0P (Bit 1) */
#define TIMER13_CHCTL2_CH0P_Msk           (0x2UL)                   /*!< CH0P (Bitfield-Mask: 0x01) */
#define TIMER13_CHCTL2_CH0EN_Pos          (0UL)                     /*!< CH0EN (Bit 0) */
#define TIMER13_CHCTL2_CH0EN_Msk          (0x1UL)                   /*!< CH0EN (Bitfield-Mask: 0x01) */
/* ==========================================================  CNT  ========================================================== */
#define TIMER13_CNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0) */
#define TIMER13_CNT_CNT_Msk               (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff) */
/* ==========================================================  PSC  ========================================================== */
#define TIMER13_PSC_PSC_Pos               (0UL)                     /*!< PSC (Bit 0) */
#define TIMER13_PSC_PSC_Msk               (0xffffUL)                /*!< PSC (Bitfield-Mask: 0xffff) */
/* ==========================================================  CAR  ========================================================== */
#define TIMER13_CAR_CARL_Pos              (0UL)                     /*!< CARL (Bit 0) */
#define TIMER13_CAR_CARL_Msk              (0xffffUL)                /*!< CARL (Bitfield-Mask: 0xffff) */
/* =========================================================  CH0CV  ========================================================= */
#define TIMER13_CH0CV_CH0VAL_Pos          (0UL)                     /*!< CH0VAL (Bit 0) */
#define TIMER13_CH0CV_CH0VAL_Msk          (0xffffUL)                /*!< CH0VAL (Bitfield-Mask: 0xffff) */
/* =========================================================  IRMP  ========================================================== */
#define TIMER13_IRMP_ITI1_RMP_Pos         (10UL)                    /*!< ITI1_RMP (Bit 10) */
#define TIMER13_IRMP_ITI1_RMP_Msk         (0xc00UL)                 /*!< ITI1_RMP (Bitfield-Mask: 0x03) */
/* ==========================================================  CFG  ========================================================== */
#define TIMER13_CFG_CHVSEL_Pos            (1UL)                     /*!< CHVSEL (Bit 1) */
#define TIMER13_CFG_CHVSEL_Msk            (0x2UL)                   /*!< CHVSEL (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                            TLI                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  SPSZ  ========================================================== */
#define TLI_SPSZ_VPSZ_Pos                 (0UL)                     /*!< VPSZ (Bit 0) */
#define TLI_SPSZ_VPSZ_Msk                 (0xfffUL)                 /*!< VPSZ (Bitfield-Mask: 0xfff) */
#define TLI_SPSZ_HPSZ_Pos                 (16UL)                    /*!< HPSZ (Bit 16) */
#define TLI_SPSZ_HPSZ_Msk                 (0xfff0000UL)             /*!< HPSZ (Bitfield-Mask: 0xfff) */
/* =========================================================  BPSZ  ========================================================== */
#define TLI_BPSZ_VBPSZ_Pos                (0UL)                     /*!< VBPSZ (Bit 0) */
#define TLI_BPSZ_VBPSZ_Msk                (0xfffUL)                 /*!< VBPSZ (Bitfield-Mask: 0xfff) */
#define TLI_BPSZ_HBPSZ_Pos                (16UL)                    /*!< HBPSZ (Bit 16) */
#define TLI_BPSZ_HBPSZ_Msk                (0xfff0000UL)             /*!< HBPSZ (Bitfield-Mask: 0xfff) */
/* ==========================================================  ASZ  ========================================================== */
#define TLI_ASZ_VASZ_Pos                  (0UL)                     /*!< VASZ (Bit 0) */
#define TLI_ASZ_VASZ_Msk                  (0xfffUL)                 /*!< VASZ (Bitfield-Mask: 0xfff) */
#define TLI_ASZ_HASZ_Pos                  (16UL)                    /*!< HASZ (Bit 16) */
#define TLI_ASZ_HASZ_Msk                  (0xfff0000UL)             /*!< HASZ (Bitfield-Mask: 0xfff) */
/* ==========================================================  TSZ  ========================================================== */
#define TLI_TSZ_VTSZ_Pos                  (0UL)                     /*!< VTSZ (Bit 0) */
#define TLI_TSZ_VTSZ_Msk                  (0xfffUL)                 /*!< VTSZ (Bitfield-Mask: 0xfff) */
#define TLI_TSZ_HTSZ_Pos                  (16UL)                    /*!< HTSZ (Bit 16) */
#define TLI_TSZ_HTSZ_Msk                  (0xfff0000UL)             /*!< HTSZ (Bitfield-Mask: 0xfff) */
/* ==========================================================  CTL  ========================================================== */
#define TLI_CTL_HPPS_Pos                  (31UL)                    /*!< HPPS (Bit 31) */
#define TLI_CTL_HPPS_Msk                  (0x80000000UL)            /*!< HPPS (Bitfield-Mask: 0x01) */
#define TLI_CTL_VPPS_Pos                  (30UL)                    /*!< VPPS (Bit 30) */
#define TLI_CTL_VPPS_Msk                  (0x40000000UL)            /*!< VPPS (Bitfield-Mask: 0x01) */
#define TLI_CTL_DEPS_Pos                  (29UL)                    /*!< DEPS (Bit 29) */
#define TLI_CTL_DEPS_Msk                  (0x20000000UL)            /*!< DEPS (Bitfield-Mask: 0x01) */
#define TLI_CTL_CLKPS_Pos                 (28UL)                    /*!< CLKPS (Bit 28) */
#define TLI_CTL_CLKPS_Msk                 (0x10000000UL)            /*!< CLKPS (Bitfield-Mask: 0x01) */
#define TLI_CTL_DFEN_Pos                  (16UL)                    /*!< DFEN (Bit 16) */
#define TLI_CTL_DFEN_Msk                  (0x10000UL)               /*!< DFEN (Bitfield-Mask: 0x01) */
#define TLI_CTL_RDB_Pos                   (12UL)                    /*!< RDB (Bit 12) */
#define TLI_CTL_RDB_Msk                   (0x7000UL)                /*!< RDB (Bitfield-Mask: 0x07) */
#define TLI_CTL_GDB_Pos                   (8UL)                     /*!< GDB (Bit 8) */
#define TLI_CTL_GDB_Msk                   (0x700UL)                 /*!< GDB (Bitfield-Mask: 0x07) */
#define TLI_CTL_BDB_Pos                   (4UL)                     /*!< BDB (Bit 4) */
#define TLI_CTL_BDB_Msk                   (0x70UL)                  /*!< BDB (Bitfield-Mask: 0x07) */
#define TLI_CTL_TLIEN_Pos                 (0UL)                     /*!< TLIEN (Bit 0) */
#define TLI_CTL_TLIEN_Msk                 (0x1UL)                   /*!< TLIEN (Bitfield-Mask: 0x01) */
/* ==========================================================  RL  =========================================================== */
#define TLI_RL_FBR_Pos                    (1UL)                     /*!< FBR (Bit 1) */
#define TLI_RL_FBR_Msk                    (0x2UL)                   /*!< FBR (Bitfield-Mask: 0x01) */
#define TLI_RL_RQR_Pos                    (0UL)                     /*!< RQR (Bit 0) */
#define TLI_RL_RQR_Msk                    (0x1UL)                   /*!< RQR (Bitfield-Mask: 0x01) */
/* ==========================================================  BGC  ========================================================== */
#define TLI_BGC_BVR_Pos                   (16UL)                    /*!< BVR (Bit 16) */
#define TLI_BGC_BVR_Msk                   (0xff0000UL)              /*!< BVR (Bitfield-Mask: 0xff) */
#define TLI_BGC_BVG_Pos                   (8UL)                     /*!< BVG (Bit 8) */
#define TLI_BGC_BVG_Msk                   (0xff00UL)                /*!< BVG (Bitfield-Mask: 0xff) */
#define TLI_BGC_BVB_Pos                   (0UL)                     /*!< BVB (Bit 0) */
#define TLI_BGC_BVB_Msk                   (0xffUL)                  /*!< BVB (Bitfield-Mask: 0xff) */
/* =========================================================  INTEN  ========================================================= */
#define TLI_INTEN_LCRIE_Pos               (3UL)                     /*!< LCRIE (Bit 3) */
#define TLI_INTEN_LCRIE_Msk               (0x8UL)                   /*!< LCRIE (Bitfield-Mask: 0x01) */
#define TLI_INTEN_TEIE_Pos                (2UL)                     /*!< TEIE (Bit 2) */
#define TLI_INTEN_TEIE_Msk                (0x4UL)                   /*!< TEIE (Bitfield-Mask: 0x01) */
#define TLI_INTEN_FEIE_Pos                (1UL)                     /*!< FEIE (Bit 1) */
#define TLI_INTEN_FEIE_Msk                (0x2UL)                   /*!< FEIE (Bitfield-Mask: 0x01) */
#define TLI_INTEN_LMIE_Pos                (0UL)                     /*!< LMIE (Bit 0) */
#define TLI_INTEN_LMIE_Msk                (0x1UL)                   /*!< LMIE (Bitfield-Mask: 0x01) */
/* =========================================================  INTF  ========================================================== */
#define TLI_INTF_LCRF_Pos                 (3UL)                     /*!< LCRF (Bit 3) */
#define TLI_INTF_LCRF_Msk                 (0x8UL)                   /*!< LCRF (Bitfield-Mask: 0x01) */
#define TLI_INTF_TEF_Pos                  (2UL)                     /*!< TEF (Bit 2) */
#define TLI_INTF_TEF_Msk                  (0x4UL)                   /*!< TEF (Bitfield-Mask: 0x01) */
#define TLI_INTF_FEF_Pos                  (1UL)                     /*!< FEF (Bit 1) */
#define TLI_INTF_FEF_Msk                  (0x2UL)                   /*!< FEF (Bitfield-Mask: 0x01) */
#define TLI_INTF_LMF_Pos                  (0UL)                     /*!< LMF (Bit 0) */
#define TLI_INTF_LMF_Msk                  (0x1UL)                   /*!< LMF (Bitfield-Mask: 0x01) */
/* =========================================================  INTC  ========================================================== */
#define TLI_INTC_LCRC_Pos                 (3UL)                     /*!< LCRC (Bit 3) */
#define TLI_INTC_LCRC_Msk                 (0x8UL)                   /*!< LCRC (Bitfield-Mask: 0x01) */
#define TLI_INTC_TEC_Pos                  (2UL)                     /*!< TEC (Bit 2) */
#define TLI_INTC_TEC_Msk                  (0x4UL)                   /*!< TEC (Bitfield-Mask: 0x01) */
#define TLI_INTC_FEC_Pos                  (1UL)                     /*!< FEC (Bit 1) */
#define TLI_INTC_FEC_Msk                  (0x2UL)                   /*!< FEC (Bitfield-Mask: 0x01) */
#define TLI_INTC_LMC_Pos                  (0UL)                     /*!< LMC (Bit 0) */
#define TLI_INTC_LMC_Msk                  (0x1UL)                   /*!< LMC (Bitfield-Mask: 0x01) */
/* ==========================================================  LM  =========================================================== */
#define TLI_LM_LM_Pos                     (0UL)                     /*!< LM (Bit 0) */
#define TLI_LM_LM_Msk                     (0x7ffUL)                 /*!< LM (Bitfield-Mask: 0x7ff) */
/* =========================================================  CPPOS  ========================================================= */
#define TLI_CPPOS_HPOS_Pos                (16UL)                    /*!< HPOS (Bit 16) */
#define TLI_CPPOS_HPOS_Msk                (0xffff0000UL)            /*!< HPOS (Bitfield-Mask: 0xffff) */
#define TLI_CPPOS_VPOS_Pos                (0UL)                     /*!< VPOS (Bit 0) */
#define TLI_CPPOS_VPOS_Msk                (0xffffUL)                /*!< VPOS (Bitfield-Mask: 0xffff) */
/* =========================================================  STAT  ========================================================== */
#define TLI_STAT_HS_Pos                   (3UL)                     /*!< HS (Bit 3) */
#define TLI_STAT_HS_Msk                   (0x8UL)                   /*!< HS (Bitfield-Mask: 0x01) */
#define TLI_STAT_VS_Pos                   (2UL)                     /*!< VS (Bit 2) */
#define TLI_STAT_VS_Msk                   (0x4UL)                   /*!< VS (Bitfield-Mask: 0x01) */
#define TLI_STAT_HDE_Pos                  (1UL)                     /*!< HDE (Bit 1) */
#define TLI_STAT_HDE_Msk                  (0x2UL)                   /*!< HDE (Bitfield-Mask: 0x01) */
#define TLI_STAT_VDE_Pos                  (0UL)                     /*!< VDE (Bit 0) */
#define TLI_STAT_VDE_Msk                  (0x1UL)                   /*!< VDE (Bitfield-Mask: 0x01) */
/* =========================================================  L0CTL  ========================================================= */
#define TLI_L0CTL_LUTEN_Pos               (4UL)                     /*!< LUTEN (Bit 4) */
#define TLI_L0CTL_LUTEN_Msk               (0x10UL)                  /*!< LUTEN (Bitfield-Mask: 0x01) */
#define TLI_L0CTL_CKEYEN_Pos              (1UL)                     /*!< CKEYEN (Bit 1) */
#define TLI_L0CTL_CKEYEN_Msk              (0x2UL)                   /*!< CKEYEN (Bitfield-Mask: 0x01) */
#define TLI_L0CTL_LEN_Pos                 (0UL)                     /*!< LEN (Bit 0) */
#define TLI_L0CTL_LEN_Msk                 (0x1UL)                   /*!< LEN (Bitfield-Mask: 0x01) */
/* =========================================================  L1CTL  ========================================================= */
#define TLI_L1CTL_LUTEN_Pos               (4UL)                     /*!< LUTEN (Bit 4) */
#define TLI_L1CTL_LUTEN_Msk               (0x10UL)                  /*!< LUTEN (Bitfield-Mask: 0x01) */
#define TLI_L1CTL_CKEYEN_Pos              (1UL)                     /*!< CKEYEN (Bit 1) */
#define TLI_L1CTL_CKEYEN_Msk              (0x2UL)                   /*!< CKEYEN (Bitfield-Mask: 0x01) */
#define TLI_L1CTL_LEN_Pos                 (0UL)                     /*!< LEN (Bit 0) */
#define TLI_L1CTL_LEN_Msk                 (0x1UL)                   /*!< LEN (Bitfield-Mask: 0x01) */
/* ========================================================  L0HPOS  ========================================================= */
#define TLI_L0HPOS_WLP_Pos                (0UL)                     /*!< WLP (Bit 0) */
#define TLI_L0HPOS_WLP_Msk                (0xfffUL)                 /*!< WLP (Bitfield-Mask: 0xfff) */
#define TLI_L0HPOS_WRP_Pos                (16UL)                    /*!< WRP (Bit 16) */
#define TLI_L0HPOS_WRP_Msk                (0xfff0000UL)             /*!< WRP (Bitfield-Mask: 0xfff) */
/* ========================================================  L1HPOS  ========================================================= */
#define TLI_L1HPOS_WLP_Pos                (0UL)                     /*!< WLP (Bit 0) */
#define TLI_L1HPOS_WLP_Msk                (0xfffUL)                 /*!< WLP (Bitfield-Mask: 0xfff) */
#define TLI_L1HPOS_WRP_Pos                (16UL)                    /*!< WRP (Bit 16) */
#define TLI_L1HPOS_WRP_Msk                (0xfff0000UL)             /*!< WRP (Bitfield-Mask: 0xfff) */
/* ========================================================  L0VPOS  ========================================================= */
#define TLI_L0VPOS_WTP_Pos                (0UL)                     /*!< WTP (Bit 0) */
#define TLI_L0VPOS_WTP_Msk                (0xfffUL)                 /*!< WTP (Bitfield-Mask: 0xfff) */
#define TLI_L0VPOS_WBP_Pos                (16UL)                    /*!< WBP (Bit 16) */
#define TLI_L0VPOS_WBP_Msk                (0xfff0000UL)             /*!< WBP (Bitfield-Mask: 0xfff) */
/* ========================================================  L1VPOS  ========================================================= */
#define TLI_L1VPOS_WTP_Pos                (0UL)                     /*!< WTP (Bit 0) */
#define TLI_L1VPOS_WTP_Msk                (0xfffUL)                 /*!< WTP (Bitfield-Mask: 0xfff) */
#define TLI_L1VPOS_WBP_Pos                (16UL)                    /*!< WBP (Bit 16) */
#define TLI_L1VPOS_WBP_Msk                (0xfff0000UL)             /*!< WBP (Bitfield-Mask: 0xfff) */
/* ========================================================  L0CKEY  ========================================================= */
#define TLI_L0CKEY_CKEYR_Pos              (16UL)                    /*!< CKEYR (Bit 16) */
#define TLI_L0CKEY_CKEYR_Msk              (0xff0000UL)              /*!< CKEYR (Bitfield-Mask: 0xff) */
#define TLI_L0CKEY_CKEYG_Pos              (8UL)                     /*!< CKEYG (Bit 8) */
#define TLI_L0CKEY_CKEYG_Msk              (0xff00UL)                /*!< CKEYG (Bitfield-Mask: 0xff) */
#define TLI_L0CKEY_CKEYB_Pos              (0UL)                     /*!< CKEYB (Bit 0) */
#define TLI_L0CKEY_CKEYB_Msk              (0xffUL)                  /*!< CKEYB (Bitfield-Mask: 0xff) */
/* ========================================================  L1CKEY  ========================================================= */
#define TLI_L1CKEY_CKEYR_Pos              (16UL)                    /*!< CKEYR (Bit 16) */
#define TLI_L1CKEY_CKEYR_Msk              (0xff0000UL)              /*!< CKEYR (Bitfield-Mask: 0xff) */
#define TLI_L1CKEY_CKEYG_Pos              (8UL)                     /*!< CKEYG (Bit 8) */
#define TLI_L1CKEY_CKEYG_Msk              (0xff00UL)                /*!< CKEYG (Bitfield-Mask: 0xff) */
#define TLI_L1CKEY_CKEYB_Pos              (0UL)                     /*!< CKEYB (Bit 0) */
#define TLI_L1CKEY_CKEYB_Msk              (0xffUL)                  /*!< CKEYB (Bitfield-Mask: 0xff) */
/* =========================================================  L0PPF  ========================================================= */
#define TLI_L0PPF_PPF_Pos                 (0UL)                     /*!< PPF (Bit 0) */
#define TLI_L0PPF_PPF_Msk                 (0x7UL)                   /*!< PPF (Bitfield-Mask: 0x07) */
/* =========================================================  L1PPF  ========================================================= */
#define TLI_L1PPF_PPF_Pos                 (0UL)                     /*!< PPF (Bit 0) */
#define TLI_L1PPF_PPF_Msk                 (0x7UL)                   /*!< PPF (Bitfield-Mask: 0x07) */
/* =========================================================  L0SA  ========================================================== */
#define TLI_L0SA_SA_Pos                   (0UL)                     /*!< SA (Bit 0) */
#define TLI_L0SA_SA_Msk                   (0xffUL)                  /*!< SA (Bitfield-Mask: 0xff) */
/* =========================================================  L1SA  ========================================================== */
#define TLI_L1SA_SA_Pos                   (0UL)                     /*!< SA (Bit 0) */
#define TLI_L1SA_SA_Msk                   (0xffUL)                  /*!< SA (Bitfield-Mask: 0xff) */
/* =========================================================  L0DC  ========================================================== */
#define TLI_L0DC_DCA_Pos                  (24UL)                    /*!< DCA (Bit 24) */
#define TLI_L0DC_DCA_Msk                  (0xff000000UL)            /*!< DCA (Bitfield-Mask: 0xff) */
#define TLI_L0DC_DCR_Pos                  (16UL)                    /*!< DCR (Bit 16) */
#define TLI_L0DC_DCR_Msk                  (0xff0000UL)              /*!< DCR (Bitfield-Mask: 0xff) */
#define TLI_L0DC_DCG_Pos                  (8UL)                     /*!< DCG (Bit 8) */
#define TLI_L0DC_DCG_Msk                  (0xff00UL)                /*!< DCG (Bitfield-Mask: 0xff) */
#define TLI_L0DC_DCB_Pos                  (0UL)                     /*!< DCB (Bit 0) */
#define TLI_L0DC_DCB_Msk                  (0xffUL)                  /*!< DCB (Bitfield-Mask: 0xff) */
/* =========================================================  L1DC  ========================================================== */
#define TLI_L1DC_DCA_Pos                  (24UL)                    /*!< DCA (Bit 24) */
#define TLI_L1DC_DCA_Msk                  (0xff000000UL)            /*!< DCA (Bitfield-Mask: 0xff) */
#define TLI_L1DC_DCR_Pos                  (16UL)                    /*!< DCR (Bit 16) */
#define TLI_L1DC_DCR_Msk                  (0xff0000UL)              /*!< DCR (Bitfield-Mask: 0xff) */
#define TLI_L1DC_DCG_Pos                  (8UL)                     /*!< DCG (Bit 8) */
#define TLI_L1DC_DCG_Msk                  (0xff00UL)                /*!< DCG (Bitfield-Mask: 0xff) */
#define TLI_L1DC_DCB_Pos                  (0UL)                     /*!< DCB (Bit 0) */
#define TLI_L1DC_DCB_Msk                  (0xffUL)                  /*!< DCB (Bitfield-Mask: 0xff) */
/* ========================================================  L0BLEND  ======================================================== */
#define TLI_L0BLEND_ACF1_Pos              (8UL)                     /*!< ACF1 (Bit 8) */
#define TLI_L0BLEND_ACF1_Msk              (0x700UL)                 /*!< ACF1 (Bitfield-Mask: 0x07) */
#define TLI_L0BLEND_ACF2_Pos              (0UL)                     /*!< ACF2 (Bit 0) */
#define TLI_L0BLEND_ACF2_Msk              (0x7UL)                   /*!< ACF2 (Bitfield-Mask: 0x07) */
/* ========================================================  L1BLEND  ======================================================== */
#define TLI_L1BLEND_ACF1_Pos              (8UL)                     /*!< ACF1 (Bit 8) */
#define TLI_L1BLEND_ACF1_Msk              (0x700UL)                 /*!< ACF1 (Bitfield-Mask: 0x07) */
#define TLI_L1BLEND_ACF2_Pos              (0UL)                     /*!< ACF2 (Bit 0) */
#define TLI_L1BLEND_ACF2_Msk              (0x7UL)                   /*!< ACF2 (Bitfield-Mask: 0x07) */
/* =======================================================  L0FBADDR  ======================================================== */
#define TLI_L0FBADDR_FBADD_Pos            (0UL)                     /*!< FBADD (Bit 0) */
#define TLI_L0FBADDR_FBADD_Msk            (0xffffffffUL)            /*!< FBADD (Bitfield-Mask: 0xffffffff) */
/* =======================================================  L1FBADDR  ======================================================== */
#define TLI_L1FBADDR_FBADD_Pos            (0UL)                     /*!< FBADD (Bit 0) */
#define TLI_L1FBADDR_FBADD_Msk            (0xffffffffUL)            /*!< FBADD (Bitfield-Mask: 0xffffffff) */
/* ========================================================  L0FLLEN  ======================================================== */
#define TLI_L0FLLEN_STDOFF_Pos            (16UL)                    /*!< STDOFF (Bit 16) */
#define TLI_L0FLLEN_STDOFF_Msk            (0x3fff0000UL)            /*!< STDOFF (Bitfield-Mask: 0x3fff) */
#define TLI_L0FLLEN_FLL_Pos               (0UL)                     /*!< FLL (Bit 0) */
#define TLI_L0FLLEN_FLL_Msk               (0x3fffUL)                /*!< FLL (Bitfield-Mask: 0x3fff) */
/* ========================================================  L1FLLEN  ======================================================== */
#define TLI_L1FLLEN_STDOFF_Pos            (16UL)                    /*!< STDOFF (Bit 16) */
#define TLI_L1FLLEN_STDOFF_Msk            (0x3fff0000UL)            /*!< STDOFF (Bitfield-Mask: 0x3fff) */
#define TLI_L1FLLEN_FLL_Pos               (0UL)                     /*!< FLL (Bit 0) */
#define TLI_L1FLLEN_FLL_Msk               (0x3fffUL)                /*!< FLL (Bitfield-Mask: 0x3fff) */
/* ========================================================  L0FTLN  ========================================================= */
#define TLI_L0FTLN_FTLN_Pos               (0UL)                     /*!< FTLN (Bit 0) */
#define TLI_L0FTLN_FTLN_Msk               (0x7ffUL)                 /*!< FTLN (Bitfield-Mask: 0x7ff) */
/* ========================================================  L1FTLN  ========================================================= */
#define TLI_L1FTLN_FTLN_Pos               (0UL)                     /*!< FTLN (Bit 0) */
#define TLI_L1FTLN_FTLN_Msk               (0x7ffUL)                 /*!< FTLN (Bitfield-Mask: 0x7ff) */
/* =========================================================  L0LUT  ========================================================= */
#define TLI_L0LUT_TADD_Pos                (24UL)                    /*!< TADD (Bit 24) */
#define TLI_L0LUT_TADD_Msk                (0xff000000UL)            /*!< TADD (Bitfield-Mask: 0xff) */
#define TLI_L0LUT_TR_Pos                  (16UL)                    /*!< TR (Bit 16) */
#define TLI_L0LUT_TR_Msk                  (0xff0000UL)              /*!< TR (Bitfield-Mask: 0xff) */
#define TLI_L0LUT_TG_Pos                  (8UL)                     /*!< TG (Bit 8) */
#define TLI_L0LUT_TG_Msk                  (0xff00UL)                /*!< TG (Bitfield-Mask: 0xff) */
#define TLI_L0LUT_TB_Pos                  (0UL)                     /*!< TB (Bit 0) */
#define TLI_L0LUT_TB_Msk                  (0xffUL)                  /*!< TB (Bitfield-Mask: 0xff) */
/* =========================================================  L1LUT  ========================================================= */
#define TLI_L1LUT_TADD_Pos                (24UL)                    /*!< TADD (Bit 24) */
#define TLI_L1LUT_TADD_Msk                (0xff000000UL)            /*!< TADD (Bitfield-Mask: 0xff) */
#define TLI_L1LUT_TR_Pos                  (16UL)                    /*!< TR (Bit 16) */
#define TLI_L1LUT_TR_Msk                  (0xff0000UL)              /*!< TR (Bitfield-Mask: 0xff) */
#define TLI_L1LUT_TG_Pos                  (8UL)                     /*!< TG (Bit 8) */
#define TLI_L1LUT_TG_Msk                  (0xff00UL)                /*!< TG (Bitfield-Mask: 0xff) */
#define TLI_L1LUT_TB_Pos                  (0UL)                     /*!< TB (Bit 0) */
#define TLI_L1LUT_TB_Msk                  (0xffUL)                  /*!< TB (Bitfield-Mask: 0xff) */


/* =========================================================================================================================== */
/* ================                                           TRNG                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define TRNG_CTL_IE_Pos                   (3UL)                     /*!< IE (Bit 3) */
#define TRNG_CTL_IE_Msk                   (0x8UL)                   /*!< IE (Bitfield-Mask: 0x01) */
#define TRNG_CTL_TRNGEN_Pos               (2UL)                     /*!< TRNGEN (Bit 2) */
#define TRNG_CTL_TRNGEN_Msk               (0x4UL)                   /*!< TRNGEN (Bitfield-Mask: 0x01) */
/* =========================================================  STAT  ========================================================== */
#define TRNG_STAT_SEIF_Pos                (6UL)                     /*!< SEIF (Bit 6) */
#define TRNG_STAT_SEIF_Msk                (0x40UL)                  /*!< SEIF (Bitfield-Mask: 0x01) */
#define TRNG_STAT_CEIF_Pos                (5UL)                     /*!< CEIF (Bit 5) */
#define TRNG_STAT_CEIF_Msk                (0x20UL)                  /*!< CEIF (Bitfield-Mask: 0x01) */
#define TRNG_STAT_SECS_Pos                (2UL)                     /*!< SECS (Bit 2) */
#define TRNG_STAT_SECS_Msk                (0x4UL)                   /*!< SECS (Bitfield-Mask: 0x01) */
#define TRNG_STAT_CECS_Pos                (1UL)                     /*!< CECS (Bit 1) */
#define TRNG_STAT_CECS_Msk                (0x2UL)                   /*!< CECS (Bitfield-Mask: 0x01) */
#define TRNG_STAT_DRDY_Pos                (0UL)                     /*!< DRDY (Bit 0) */
#define TRNG_STAT_DRDY_Msk                (0x1UL)                   /*!< DRDY (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define TRNG_DATA_TRNDATA_Pos             (0UL)                     /*!< TRNDATA (Bit 0) */
#define TRNG_DATA_TRNDATA_Msk             (0xffffffffUL)            /*!< TRNDATA (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                          USART0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT0  ========================================================= */
#define USART0_STAT0_CTSF_Pos             (9UL)                     /*!< CTSF (Bit 9) */
#define USART0_STAT0_CTSF_Msk             (0x200UL)                 /*!< CTSF (Bitfield-Mask: 0x01) */
#define USART0_STAT0_LBDF_Pos             (8UL)                     /*!< LBDF (Bit 8) */
#define USART0_STAT0_LBDF_Msk             (0x100UL)                 /*!< LBDF (Bitfield-Mask: 0x01) */
#define USART0_STAT0_TBE_Pos              (7UL)                     /*!< TBE (Bit 7) */
#define USART0_STAT0_TBE_Msk              (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define USART0_STAT0_TC_Pos               (6UL)                     /*!< TC (Bit 6) */
#define USART0_STAT0_TC_Msk               (0x40UL)                  /*!< TC (Bitfield-Mask: 0x01) */
#define USART0_STAT0_RBNE_Pos             (5UL)                     /*!< RBNE (Bit 5) */
#define USART0_STAT0_RBNE_Msk             (0x20UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define USART0_STAT0_IDLEF_Pos            (4UL)                     /*!< IDLEF (Bit 4) */
#define USART0_STAT0_IDLEF_Msk            (0x10UL)                  /*!< IDLEF (Bitfield-Mask: 0x01) */
#define USART0_STAT0_ORERR_Pos            (3UL)                     /*!< ORERR (Bit 3) */
#define USART0_STAT0_ORERR_Msk            (0x8UL)                   /*!< ORERR (Bitfield-Mask: 0x01) */
#define USART0_STAT0_NERR_Pos             (2UL)                     /*!< NERR (Bit 2) */
#define USART0_STAT0_NERR_Msk             (0x4UL)                   /*!< NERR (Bitfield-Mask: 0x01) */
#define USART0_STAT0_FERR_Pos             (1UL)                     /*!< FERR (Bit 1) */
#define USART0_STAT0_FERR_Msk             (0x2UL)                   /*!< FERR (Bitfield-Mask: 0x01) */
#define USART0_STAT0_PERR_Pos             (0UL)                     /*!< PERR (Bit 0) */
#define USART0_STAT0_PERR_Msk             (0x1UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define USART0_DATA_DATA_Pos              (0UL)                     /*!< DATA (Bit 0) */
#define USART0_DATA_DATA_Msk              (0x1ffUL)                 /*!< DATA (Bitfield-Mask: 0x1ff) */
/* =========================================================  BAUD  ========================================================== */
#define USART0_BAUD_INTDIV_Pos            (4UL)                     /*!< INTDIV (Bit 4) */
#define USART0_BAUD_INTDIV_Msk            (0xfff0UL)                /*!< INTDIV (Bitfield-Mask: 0xfff) */
#define USART0_BAUD_FRADIV_Pos            (0UL)                     /*!< FRADIV (Bit 0) */
#define USART0_BAUD_FRADIV_Msk            (0xfUL)                   /*!< FRADIV (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL0  ========================================================== */
#define USART0_CTL0_OVSMOD_Pos            (15UL)                    /*!< OVSMOD (Bit 15) */
#define USART0_CTL0_OVSMOD_Msk            (0x8000UL)                /*!< OVSMOD (Bitfield-Mask: 0x01) */
#define USART0_CTL0_UEN_Pos               (13UL)                    /*!< UEN (Bit 13) */
#define USART0_CTL0_UEN_Msk               (0x2000UL)                /*!< UEN (Bitfield-Mask: 0x01) */
#define USART0_CTL0_WL_Pos                (12UL)                    /*!< WL (Bit 12) */
#define USART0_CTL0_WL_Msk                (0x1000UL)                /*!< WL (Bitfield-Mask: 0x01) */
#define USART0_CTL0_WM_Pos                (11UL)                    /*!< WM (Bit 11) */
#define USART0_CTL0_WM_Msk                (0x800UL)                 /*!< WM (Bitfield-Mask: 0x01) */
#define USART0_CTL0_PCEN_Pos              (10UL)                    /*!< PCEN (Bit 10) */
#define USART0_CTL0_PCEN_Msk              (0x400UL)                 /*!< PCEN (Bitfield-Mask: 0x01) */
#define USART0_CTL0_PM_Pos                (9UL)                     /*!< PM (Bit 9) */
#define USART0_CTL0_PM_Msk                (0x200UL)                 /*!< PM (Bitfield-Mask: 0x01) */
#define USART0_CTL0_PERRIE_Pos            (8UL)                     /*!< PERRIE (Bit 8) */
#define USART0_CTL0_PERRIE_Msk            (0x100UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define USART0_CTL0_TBEIE_Pos             (7UL)                     /*!< TBEIE (Bit 7) */
#define USART0_CTL0_TBEIE_Msk             (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define USART0_CTL0_TCIE_Pos              (6UL)                     /*!< TCIE (Bit 6) */
#define USART0_CTL0_TCIE_Msk              (0x40UL)                  /*!< TCIE (Bitfield-Mask: 0x01) */
#define USART0_CTL0_RBNEIE_Pos            (5UL)                     /*!< RBNEIE (Bit 5) */
#define USART0_CTL0_RBNEIE_Msk            (0x20UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define USART0_CTL0_IDLEIE_Pos            (4UL)                     /*!< IDLEIE (Bit 4) */
#define USART0_CTL0_IDLEIE_Msk            (0x10UL)                  /*!< IDLEIE (Bitfield-Mask: 0x01) */
#define USART0_CTL0_TEN_Pos               (3UL)                     /*!< TEN (Bit 3) */
#define USART0_CTL0_TEN_Msk               (0x8UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define USART0_CTL0_REN_Pos               (2UL)                     /*!< REN (Bit 2) */
#define USART0_CTL0_REN_Msk               (0x4UL)                   /*!< REN (Bitfield-Mask: 0x01) */
#define USART0_CTL0_RWU_Pos               (1UL)                     /*!< RWU (Bit 1) */
#define USART0_CTL0_RWU_Msk               (0x2UL)                   /*!< RWU (Bitfield-Mask: 0x01) */
#define USART0_CTL0_SBKCMD_Pos            (0UL)                     /*!< SBKCMD (Bit 0) */
#define USART0_CTL0_SBKCMD_Msk            (0x1UL)                   /*!< SBKCMD (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define USART0_CTL1_LMEN_Pos              (14UL)                    /*!< LMEN (Bit 14) */
#define USART0_CTL1_LMEN_Msk              (0x4000UL)                /*!< LMEN (Bitfield-Mask: 0x01) */
#define USART0_CTL1_STB_Pos               (12UL)                    /*!< STB (Bit 12) */
#define USART0_CTL1_STB_Msk               (0x3000UL)                /*!< STB (Bitfield-Mask: 0x03) */
#define USART0_CTL1_CKEN_Pos              (11UL)                    /*!< CKEN (Bit 11) */
#define USART0_CTL1_CKEN_Msk              (0x800UL)                 /*!< CKEN (Bitfield-Mask: 0x01) */
#define USART0_CTL1_CPL_Pos               (10UL)                    /*!< CPL (Bit 10) */
#define USART0_CTL1_CPL_Msk               (0x400UL)                 /*!< CPL (Bitfield-Mask: 0x01) */
#define USART0_CTL1_CPH_Pos               (9UL)                     /*!< CPH (Bit 9) */
#define USART0_CTL1_CPH_Msk               (0x200UL)                 /*!< CPH (Bitfield-Mask: 0x01) */
#define USART0_CTL1_CLEN_Pos              (8UL)                     /*!< CLEN (Bit 8) */
#define USART0_CTL1_CLEN_Msk              (0x100UL)                 /*!< CLEN (Bitfield-Mask: 0x01) */
#define USART0_CTL1_LBDIE_Pos             (6UL)                     /*!< LBDIE (Bit 6) */
#define USART0_CTL1_LBDIE_Msk             (0x40UL)                  /*!< LBDIE (Bitfield-Mask: 0x01) */
#define USART0_CTL1_LBLEN_Pos             (5UL)                     /*!< LBLEN (Bit 5) */
#define USART0_CTL1_LBLEN_Msk             (0x20UL)                  /*!< LBLEN (Bitfield-Mask: 0x01) */
#define USART0_CTL1_ADDR_Pos              (0UL)                     /*!< ADDR (Bit 0) */
#define USART0_CTL1_ADDR_Msk              (0xfUL)                   /*!< ADDR (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL2  ========================================================== */
#define USART0_CTL2_OSB_Pos               (11UL)                    /*!< OSB (Bit 11) */
#define USART0_CTL2_OSB_Msk               (0x800UL)                 /*!< OSB (Bitfield-Mask: 0x01) */
#define USART0_CTL2_CTSIE_Pos             (10UL)                    /*!< CTSIE (Bit 10) */
#define USART0_CTL2_CTSIE_Msk             (0x400UL)                 /*!< CTSIE (Bitfield-Mask: 0x01) */
#define USART0_CTL2_CTSEN_Pos             (9UL)                     /*!< CTSEN (Bit 9) */
#define USART0_CTL2_CTSEN_Msk             (0x200UL)                 /*!< CTSEN (Bitfield-Mask: 0x01) */
#define USART0_CTL2_RTSEN_Pos             (8UL)                     /*!< RTSEN (Bit 8) */
#define USART0_CTL2_RTSEN_Msk             (0x100UL)                 /*!< RTSEN (Bitfield-Mask: 0x01) */
#define USART0_CTL2_DENT_Pos              (7UL)                     /*!< DENT (Bit 7) */
#define USART0_CTL2_DENT_Msk              (0x80UL)                  /*!< DENT (Bitfield-Mask: 0x01) */
#define USART0_CTL2_DENR_Pos              (6UL)                     /*!< DENR (Bit 6) */
#define USART0_CTL2_DENR_Msk              (0x40UL)                  /*!< DENR (Bitfield-Mask: 0x01) */
#define USART0_CTL2_SCEN_Pos              (5UL)                     /*!< SCEN (Bit 5) */
#define USART0_CTL2_SCEN_Msk              (0x20UL)                  /*!< SCEN (Bitfield-Mask: 0x01) */
#define USART0_CTL2_NKEN_Pos              (4UL)                     /*!< NKEN (Bit 4) */
#define USART0_CTL2_NKEN_Msk              (0x10UL)                  /*!< NKEN (Bitfield-Mask: 0x01) */
#define USART0_CTL2_HDEN_Pos              (3UL)                     /*!< HDEN (Bit 3) */
#define USART0_CTL2_HDEN_Msk              (0x8UL)                   /*!< HDEN (Bitfield-Mask: 0x01) */
#define USART0_CTL2_IRLP_Pos              (2UL)                     /*!< IRLP (Bit 2) */
#define USART0_CTL2_IRLP_Msk              (0x4UL)                   /*!< IRLP (Bitfield-Mask: 0x01) */
#define USART0_CTL2_IREN_Pos              (1UL)                     /*!< IREN (Bit 1) */
#define USART0_CTL2_IREN_Msk              (0x2UL)                   /*!< IREN (Bitfield-Mask: 0x01) */
#define USART0_CTL2_ERRIE_Pos             (0UL)                     /*!< ERRIE (Bit 0) */
#define USART0_CTL2_ERRIE_Msk             (0x1UL)                   /*!< ERRIE (Bitfield-Mask: 0x01) */
/* ==========================================================  GP  =========================================================== */
#define USART0_GP_GUAT_Pos                (8UL)                     /*!< GUAT (Bit 8) */
#define USART0_GP_GUAT_Msk                (0xff00UL)                /*!< GUAT (Bitfield-Mask: 0xff) */
#define USART0_GP_PSC_Pos                 (0UL)                     /*!< PSC (Bit 0) */
#define USART0_GP_PSC_Msk                 (0xffUL)                  /*!< PSC (Bitfield-Mask: 0xff) */
/* =========================================================  CTL3  ========================================================== */
#define USART0_CTL3_MSBF_Pos              (11UL)                    /*!< MSBF (Bit 11) */
#define USART0_CTL3_MSBF_Msk              (0x800UL)                 /*!< MSBF (Bitfield-Mask: 0x01) */
#define USART0_CTL3_DINV_Pos              (10UL)                    /*!< DINV (Bit 10) */
#define USART0_CTL3_DINV_Msk              (0x400UL)                 /*!< DINV (Bitfield-Mask: 0x01) */
#define USART0_CTL3_TINV_Pos              (9UL)                     /*!< TINV (Bit 9) */
#define USART0_CTL3_TINV_Msk              (0x200UL)                 /*!< TINV (Bitfield-Mask: 0x01) */
#define USART0_CTL3_RINV_Pos              (8UL)                     /*!< RINV (Bit 8) */
#define USART0_CTL3_RINV_Msk              (0x100UL)                 /*!< RINV (Bitfield-Mask: 0x01) */
#define USART0_CTL3_EBIE_Pos              (5UL)                     /*!< EBIE (Bit 5) */
#define USART0_CTL3_EBIE_Msk              (0x20UL)                  /*!< EBIE (Bitfield-Mask: 0x01) */
#define USART0_CTL3_RTIE_Pos              (4UL)                     /*!< RTIE (Bit 4) */
#define USART0_CTL3_RTIE_Msk              (0x10UL)                  /*!< RTIE (Bitfield-Mask: 0x01) */
#define USART0_CTL3_SCRTNUM_Pos           (1UL)                     /*!< SCRTNUM (Bit 1) */
#define USART0_CTL3_SCRTNUM_Msk           (0xeUL)                   /*!< SCRTNUM (Bitfield-Mask: 0x07) */
#define USART0_CTL3_RTEN_Pos              (0UL)                     /*!< RTEN (Bit 0) */
#define USART0_CTL3_RTEN_Msk              (0x1UL)                   /*!< RTEN (Bitfield-Mask: 0x01) */
/* ==========================================================  RT  =========================================================== */
#define USART0_RT_BL_Pos                  (24UL)                    /*!< BL (Bit 24) */
#define USART0_RT_BL_Msk                  (0xff000000UL)            /*!< BL (Bitfield-Mask: 0xff) */
#define USART0_RT_RT_Pos                  (0UL)                     /*!< RT (Bit 0) */
#define USART0_RT_RT_Msk                  (0xffffffUL)              /*!< RT (Bitfield-Mask: 0xffffff) */
/* =========================================================  STAT1  ========================================================= */
#define USART0_STAT1_BSY_Pos              (16UL)                    /*!< BSY (Bit 16) */
#define USART0_STAT1_BSY_Msk              (0x10000UL)               /*!< BSY (Bitfield-Mask: 0x01) */
#define USART0_STAT1_EBF_Pos              (12UL)                    /*!< EBF (Bit 12) */
#define USART0_STAT1_EBF_Msk              (0x1000UL)                /*!< EBF (Bitfield-Mask: 0x01) */
#define USART0_STAT1_RTF_Pos              (11UL)                    /*!< RTF (Bit 11) */
#define USART0_STAT1_RTF_Msk              (0x800UL)                 /*!< RTF (Bitfield-Mask: 0x01) */
/* ==========================================================  CHC  ========================================================== */
#define USART0_CHC_EPERR_Pos              (8UL)                     /*!< EPERR (Bit 8) */
#define USART0_CHC_EPERR_Msk              (0x100UL)                 /*!< EPERR (Bitfield-Mask: 0x01) */
#define USART0_CHC_BCM_Pos                (2UL)                     /*!< BCM (Bit 2) */
#define USART0_CHC_BCM_Msk                (0x4UL)                   /*!< BCM (Bitfield-Mask: 0x01) */
#define USART0_CHC_PCM_Pos                (1UL)                     /*!< PCM (Bit 1) */
#define USART0_CHC_PCM_Msk                (0x2UL)                   /*!< PCM (Bitfield-Mask: 0x01) */
#define USART0_CHC_HCM_Pos                (0UL)                     /*!< HCM (Bit 0) */
#define USART0_CHC_HCM_Msk                (0x1UL)                   /*!< HCM (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          USART1                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT0  ========================================================= */
#define USART1_STAT0_CTSF_Pos             (9UL)                     /*!< CTSF (Bit 9) */
#define USART1_STAT0_CTSF_Msk             (0x200UL)                 /*!< CTSF (Bitfield-Mask: 0x01) */
#define USART1_STAT0_LBDF_Pos             (8UL)                     /*!< LBDF (Bit 8) */
#define USART1_STAT0_LBDF_Msk             (0x100UL)                 /*!< LBDF (Bitfield-Mask: 0x01) */
#define USART1_STAT0_TBE_Pos              (7UL)                     /*!< TBE (Bit 7) */
#define USART1_STAT0_TBE_Msk              (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define USART1_STAT0_TC_Pos               (6UL)                     /*!< TC (Bit 6) */
#define USART1_STAT0_TC_Msk               (0x40UL)                  /*!< TC (Bitfield-Mask: 0x01) */
#define USART1_STAT0_RBNE_Pos             (5UL)                     /*!< RBNE (Bit 5) */
#define USART1_STAT0_RBNE_Msk             (0x20UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define USART1_STAT0_IDLEF_Pos            (4UL)                     /*!< IDLEF (Bit 4) */
#define USART1_STAT0_IDLEF_Msk            (0x10UL)                  /*!< IDLEF (Bitfield-Mask: 0x01) */
#define USART1_STAT0_ORERR_Pos            (3UL)                     /*!< ORERR (Bit 3) */
#define USART1_STAT0_ORERR_Msk            (0x8UL)                   /*!< ORERR (Bitfield-Mask: 0x01) */
#define USART1_STAT0_NERR_Pos             (2UL)                     /*!< NERR (Bit 2) */
#define USART1_STAT0_NERR_Msk             (0x4UL)                   /*!< NERR (Bitfield-Mask: 0x01) */
#define USART1_STAT0_FERR_Pos             (1UL)                     /*!< FERR (Bit 1) */
#define USART1_STAT0_FERR_Msk             (0x2UL)                   /*!< FERR (Bitfield-Mask: 0x01) */
#define USART1_STAT0_PERR_Pos             (0UL)                     /*!< PERR (Bit 0) */
#define USART1_STAT0_PERR_Msk             (0x1UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define USART1_DATA_DATA_Pos              (0UL)                     /*!< DATA (Bit 0) */
#define USART1_DATA_DATA_Msk              (0x1ffUL)                 /*!< DATA (Bitfield-Mask: 0x1ff) */
/* =========================================================  BAUD  ========================================================== */
#define USART1_BAUD_INTDIV_Pos            (4UL)                     /*!< INTDIV (Bit 4) */
#define USART1_BAUD_INTDIV_Msk            (0xfff0UL)                /*!< INTDIV (Bitfield-Mask: 0xfff) */
#define USART1_BAUD_FRADIV_Pos            (0UL)                     /*!< FRADIV (Bit 0) */
#define USART1_BAUD_FRADIV_Msk            (0xfUL)                   /*!< FRADIV (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL0  ========================================================== */
#define USART1_CTL0_OVSMOD_Pos            (15UL)                    /*!< OVSMOD (Bit 15) */
#define USART1_CTL0_OVSMOD_Msk            (0x8000UL)                /*!< OVSMOD (Bitfield-Mask: 0x01) */
#define USART1_CTL0_UEN_Pos               (13UL)                    /*!< UEN (Bit 13) */
#define USART1_CTL0_UEN_Msk               (0x2000UL)                /*!< UEN (Bitfield-Mask: 0x01) */
#define USART1_CTL0_WL_Pos                (12UL)                    /*!< WL (Bit 12) */
#define USART1_CTL0_WL_Msk                (0x1000UL)                /*!< WL (Bitfield-Mask: 0x01) */
#define USART1_CTL0_WM_Pos                (11UL)                    /*!< WM (Bit 11) */
#define USART1_CTL0_WM_Msk                (0x800UL)                 /*!< WM (Bitfield-Mask: 0x01) */
#define USART1_CTL0_PCEN_Pos              (10UL)                    /*!< PCEN (Bit 10) */
#define USART1_CTL0_PCEN_Msk              (0x400UL)                 /*!< PCEN (Bitfield-Mask: 0x01) */
#define USART1_CTL0_PM_Pos                (9UL)                     /*!< PM (Bit 9) */
#define USART1_CTL0_PM_Msk                (0x200UL)                 /*!< PM (Bitfield-Mask: 0x01) */
#define USART1_CTL0_PERRIE_Pos            (8UL)                     /*!< PERRIE (Bit 8) */
#define USART1_CTL0_PERRIE_Msk            (0x100UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define USART1_CTL0_TBEIE_Pos             (7UL)                     /*!< TBEIE (Bit 7) */
#define USART1_CTL0_TBEIE_Msk             (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define USART1_CTL0_TCIE_Pos              (6UL)                     /*!< TCIE (Bit 6) */
#define USART1_CTL0_TCIE_Msk              (0x40UL)                  /*!< TCIE (Bitfield-Mask: 0x01) */
#define USART1_CTL0_RBNEIE_Pos            (5UL)                     /*!< RBNEIE (Bit 5) */
#define USART1_CTL0_RBNEIE_Msk            (0x20UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define USART1_CTL0_IDLEIE_Pos            (4UL)                     /*!< IDLEIE (Bit 4) */
#define USART1_CTL0_IDLEIE_Msk            (0x10UL)                  /*!< IDLEIE (Bitfield-Mask: 0x01) */
#define USART1_CTL0_TEN_Pos               (3UL)                     /*!< TEN (Bit 3) */
#define USART1_CTL0_TEN_Msk               (0x8UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define USART1_CTL0_REN_Pos               (2UL)                     /*!< REN (Bit 2) */
#define USART1_CTL0_REN_Msk               (0x4UL)                   /*!< REN (Bitfield-Mask: 0x01) */
#define USART1_CTL0_RWU_Pos               (1UL)                     /*!< RWU (Bit 1) */
#define USART1_CTL0_RWU_Msk               (0x2UL)                   /*!< RWU (Bitfield-Mask: 0x01) */
#define USART1_CTL0_SBKCMD_Pos            (0UL)                     /*!< SBKCMD (Bit 0) */
#define USART1_CTL0_SBKCMD_Msk            (0x1UL)                   /*!< SBKCMD (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define USART1_CTL1_LMEN_Pos              (14UL)                    /*!< LMEN (Bit 14) */
#define USART1_CTL1_LMEN_Msk              (0x4000UL)                /*!< LMEN (Bitfield-Mask: 0x01) */
#define USART1_CTL1_STB_Pos               (12UL)                    /*!< STB (Bit 12) */
#define USART1_CTL1_STB_Msk               (0x3000UL)                /*!< STB (Bitfield-Mask: 0x03) */
#define USART1_CTL1_CKEN_Pos              (11UL)                    /*!< CKEN (Bit 11) */
#define USART1_CTL1_CKEN_Msk              (0x800UL)                 /*!< CKEN (Bitfield-Mask: 0x01) */
#define USART1_CTL1_CPL_Pos               (10UL)                    /*!< CPL (Bit 10) */
#define USART1_CTL1_CPL_Msk               (0x400UL)                 /*!< CPL (Bitfield-Mask: 0x01) */
#define USART1_CTL1_CPH_Pos               (9UL)                     /*!< CPH (Bit 9) */
#define USART1_CTL1_CPH_Msk               (0x200UL)                 /*!< CPH (Bitfield-Mask: 0x01) */
#define USART1_CTL1_CLEN_Pos              (8UL)                     /*!< CLEN (Bit 8) */
#define USART1_CTL1_CLEN_Msk              (0x100UL)                 /*!< CLEN (Bitfield-Mask: 0x01) */
#define USART1_CTL1_LBDIE_Pos             (6UL)                     /*!< LBDIE (Bit 6) */
#define USART1_CTL1_LBDIE_Msk             (0x40UL)                  /*!< LBDIE (Bitfield-Mask: 0x01) */
#define USART1_CTL1_LBLEN_Pos             (5UL)                     /*!< LBLEN (Bit 5) */
#define USART1_CTL1_LBLEN_Msk             (0x20UL)                  /*!< LBLEN (Bitfield-Mask: 0x01) */
#define USART1_CTL1_ADDR_Pos              (0UL)                     /*!< ADDR (Bit 0) */
#define USART1_CTL1_ADDR_Msk              (0xfUL)                   /*!< ADDR (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL2  ========================================================== */
#define USART1_CTL2_OSB_Pos               (11UL)                    /*!< OSB (Bit 11) */
#define USART1_CTL2_OSB_Msk               (0x800UL)                 /*!< OSB (Bitfield-Mask: 0x01) */
#define USART1_CTL2_CTSIE_Pos             (10UL)                    /*!< CTSIE (Bit 10) */
#define USART1_CTL2_CTSIE_Msk             (0x400UL)                 /*!< CTSIE (Bitfield-Mask: 0x01) */
#define USART1_CTL2_CTSEN_Pos             (9UL)                     /*!< CTSEN (Bit 9) */
#define USART1_CTL2_CTSEN_Msk             (0x200UL)                 /*!< CTSEN (Bitfield-Mask: 0x01) */
#define USART1_CTL2_RTSEN_Pos             (8UL)                     /*!< RTSEN (Bit 8) */
#define USART1_CTL2_RTSEN_Msk             (0x100UL)                 /*!< RTSEN (Bitfield-Mask: 0x01) */
#define USART1_CTL2_DENT_Pos              (7UL)                     /*!< DENT (Bit 7) */
#define USART1_CTL2_DENT_Msk              (0x80UL)                  /*!< DENT (Bitfield-Mask: 0x01) */
#define USART1_CTL2_DENR_Pos              (6UL)                     /*!< DENR (Bit 6) */
#define USART1_CTL2_DENR_Msk              (0x40UL)                  /*!< DENR (Bitfield-Mask: 0x01) */
#define USART1_CTL2_SCEN_Pos              (5UL)                     /*!< SCEN (Bit 5) */
#define USART1_CTL2_SCEN_Msk              (0x20UL)                  /*!< SCEN (Bitfield-Mask: 0x01) */
#define USART1_CTL2_NKEN_Pos              (4UL)                     /*!< NKEN (Bit 4) */
#define USART1_CTL2_NKEN_Msk              (0x10UL)                  /*!< NKEN (Bitfield-Mask: 0x01) */
#define USART1_CTL2_HDEN_Pos              (3UL)                     /*!< HDEN (Bit 3) */
#define USART1_CTL2_HDEN_Msk              (0x8UL)                   /*!< HDEN (Bitfield-Mask: 0x01) */
#define USART1_CTL2_IRLP_Pos              (2UL)                     /*!< IRLP (Bit 2) */
#define USART1_CTL2_IRLP_Msk              (0x4UL)                   /*!< IRLP (Bitfield-Mask: 0x01) */
#define USART1_CTL2_IREN_Pos              (1UL)                     /*!< IREN (Bit 1) */
#define USART1_CTL2_IREN_Msk              (0x2UL)                   /*!< IREN (Bitfield-Mask: 0x01) */
#define USART1_CTL2_ERRIE_Pos             (0UL)                     /*!< ERRIE (Bit 0) */
#define USART1_CTL2_ERRIE_Msk             (0x1UL)                   /*!< ERRIE (Bitfield-Mask: 0x01) */
/* ==========================================================  GP  =========================================================== */
#define USART1_GP_GUAT_Pos                (8UL)                     /*!< GUAT (Bit 8) */
#define USART1_GP_GUAT_Msk                (0xff00UL)                /*!< GUAT (Bitfield-Mask: 0xff) */
#define USART1_GP_PSC_Pos                 (0UL)                     /*!< PSC (Bit 0) */
#define USART1_GP_PSC_Msk                 (0xffUL)                  /*!< PSC (Bitfield-Mask: 0xff) */
/* =========================================================  CTL3  ========================================================== */
#define USART1_CTL3_MSBF_Pos              (11UL)                    /*!< MSBF (Bit 11) */
#define USART1_CTL3_MSBF_Msk              (0x800UL)                 /*!< MSBF (Bitfield-Mask: 0x01) */
#define USART1_CTL3_DINV_Pos              (10UL)                    /*!< DINV (Bit 10) */
#define USART1_CTL3_DINV_Msk              (0x400UL)                 /*!< DINV (Bitfield-Mask: 0x01) */
#define USART1_CTL3_TINV_Pos              (9UL)                     /*!< TINV (Bit 9) */
#define USART1_CTL3_TINV_Msk              (0x200UL)                 /*!< TINV (Bitfield-Mask: 0x01) */
#define USART1_CTL3_RINV_Pos              (8UL)                     /*!< RINV (Bit 8) */
#define USART1_CTL3_RINV_Msk              (0x100UL)                 /*!< RINV (Bitfield-Mask: 0x01) */
#define USART1_CTL3_EBIE_Pos              (5UL)                     /*!< EBIE (Bit 5) */
#define USART1_CTL3_EBIE_Msk              (0x20UL)                  /*!< EBIE (Bitfield-Mask: 0x01) */
#define USART1_CTL3_RTIE_Pos              (4UL)                     /*!< RTIE (Bit 4) */
#define USART1_CTL3_RTIE_Msk              (0x10UL)                  /*!< RTIE (Bitfield-Mask: 0x01) */
#define USART1_CTL3_SCRTNUM_Pos           (1UL)                     /*!< SCRTNUM (Bit 1) */
#define USART1_CTL3_SCRTNUM_Msk           (0xeUL)                   /*!< SCRTNUM (Bitfield-Mask: 0x07) */
#define USART1_CTL3_RTEN_Pos              (0UL)                     /*!< RTEN (Bit 0) */
#define USART1_CTL3_RTEN_Msk              (0x1UL)                   /*!< RTEN (Bitfield-Mask: 0x01) */
/* ==========================================================  RT  =========================================================== */
#define USART1_RT_BL_Pos                  (24UL)                    /*!< BL (Bit 24) */
#define USART1_RT_BL_Msk                  (0xff000000UL)            /*!< BL (Bitfield-Mask: 0xff) */
#define USART1_RT_RT_Pos                  (0UL)                     /*!< RT (Bit 0) */
#define USART1_RT_RT_Msk                  (0xffffffUL)              /*!< RT (Bitfield-Mask: 0xffffff) */
/* =========================================================  STAT1  ========================================================= */
#define USART1_STAT1_BSY_Pos              (16UL)                    /*!< BSY (Bit 16) */
#define USART1_STAT1_BSY_Msk              (0x10000UL)               /*!< BSY (Bitfield-Mask: 0x01) */
#define USART1_STAT1_EBF_Pos              (12UL)                    /*!< EBF (Bit 12) */
#define USART1_STAT1_EBF_Msk              (0x1000UL)                /*!< EBF (Bitfield-Mask: 0x01) */
#define USART1_STAT1_RTF_Pos              (11UL)                    /*!< RTF (Bit 11) */
#define USART1_STAT1_RTF_Msk              (0x800UL)                 /*!< RTF (Bitfield-Mask: 0x01) */
/* ==========================================================  CHC  ========================================================== */
#define USART1_CHC_EPERR_Pos              (8UL)                     /*!< EPERR (Bit 8) */
#define USART1_CHC_EPERR_Msk              (0x100UL)                 /*!< EPERR (Bitfield-Mask: 0x01) */
#define USART1_CHC_BCM_Pos                (2UL)                     /*!< BCM (Bit 2) */
#define USART1_CHC_BCM_Msk                (0x4UL)                   /*!< BCM (Bitfield-Mask: 0x01) */
#define USART1_CHC_PCM_Pos                (1UL)                     /*!< PCM (Bit 1) */
#define USART1_CHC_PCM_Msk                (0x2UL)                   /*!< PCM (Bitfield-Mask: 0x01) */
#define USART1_CHC_HCM_Pos                (0UL)                     /*!< HCM (Bit 0) */
#define USART1_CHC_HCM_Msk                (0x1UL)                   /*!< HCM (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          USART2                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT0  ========================================================= */
#define USART2_STAT0_CTSF_Pos             (9UL)                     /*!< CTSF (Bit 9) */
#define USART2_STAT0_CTSF_Msk             (0x200UL)                 /*!< CTSF (Bitfield-Mask: 0x01) */
#define USART2_STAT0_LBDF_Pos             (8UL)                     /*!< LBDF (Bit 8) */
#define USART2_STAT0_LBDF_Msk             (0x100UL)                 /*!< LBDF (Bitfield-Mask: 0x01) */
#define USART2_STAT0_TBE_Pos              (7UL)                     /*!< TBE (Bit 7) */
#define USART2_STAT0_TBE_Msk              (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define USART2_STAT0_TC_Pos               (6UL)                     /*!< TC (Bit 6) */
#define USART2_STAT0_TC_Msk               (0x40UL)                  /*!< TC (Bitfield-Mask: 0x01) */
#define USART2_STAT0_RBNE_Pos             (5UL)                     /*!< RBNE (Bit 5) */
#define USART2_STAT0_RBNE_Msk             (0x20UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define USART2_STAT0_IDLEF_Pos            (4UL)                     /*!< IDLEF (Bit 4) */
#define USART2_STAT0_IDLEF_Msk            (0x10UL)                  /*!< IDLEF (Bitfield-Mask: 0x01) */
#define USART2_STAT0_ORERR_Pos            (3UL)                     /*!< ORERR (Bit 3) */
#define USART2_STAT0_ORERR_Msk            (0x8UL)                   /*!< ORERR (Bitfield-Mask: 0x01) */
#define USART2_STAT0_NERR_Pos             (2UL)                     /*!< NERR (Bit 2) */
#define USART2_STAT0_NERR_Msk             (0x4UL)                   /*!< NERR (Bitfield-Mask: 0x01) */
#define USART2_STAT0_FERR_Pos             (1UL)                     /*!< FERR (Bit 1) */
#define USART2_STAT0_FERR_Msk             (0x2UL)                   /*!< FERR (Bitfield-Mask: 0x01) */
#define USART2_STAT0_PERR_Pos             (0UL)                     /*!< PERR (Bit 0) */
#define USART2_STAT0_PERR_Msk             (0x1UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define USART2_DATA_DATA_Pos              (0UL)                     /*!< DATA (Bit 0) */
#define USART2_DATA_DATA_Msk              (0x1ffUL)                 /*!< DATA (Bitfield-Mask: 0x1ff) */
/* =========================================================  BAUD  ========================================================== */
#define USART2_BAUD_INTDIV_Pos            (4UL)                     /*!< INTDIV (Bit 4) */
#define USART2_BAUD_INTDIV_Msk            (0xfff0UL)                /*!< INTDIV (Bitfield-Mask: 0xfff) */
#define USART2_BAUD_FRADIV_Pos            (0UL)                     /*!< FRADIV (Bit 0) */
#define USART2_BAUD_FRADIV_Msk            (0xfUL)                   /*!< FRADIV (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL0  ========================================================== */
#define USART2_CTL0_OVSMOD_Pos            (15UL)                    /*!< OVSMOD (Bit 15) */
#define USART2_CTL0_OVSMOD_Msk            (0x8000UL)                /*!< OVSMOD (Bitfield-Mask: 0x01) */
#define USART2_CTL0_UEN_Pos               (13UL)                    /*!< UEN (Bit 13) */
#define USART2_CTL0_UEN_Msk               (0x2000UL)                /*!< UEN (Bitfield-Mask: 0x01) */
#define USART2_CTL0_WL_Pos                (12UL)                    /*!< WL (Bit 12) */
#define USART2_CTL0_WL_Msk                (0x1000UL)                /*!< WL (Bitfield-Mask: 0x01) */
#define USART2_CTL0_WM_Pos                (11UL)                    /*!< WM (Bit 11) */
#define USART2_CTL0_WM_Msk                (0x800UL)                 /*!< WM (Bitfield-Mask: 0x01) */
#define USART2_CTL0_PCEN_Pos              (10UL)                    /*!< PCEN (Bit 10) */
#define USART2_CTL0_PCEN_Msk              (0x400UL)                 /*!< PCEN (Bitfield-Mask: 0x01) */
#define USART2_CTL0_PM_Pos                (9UL)                     /*!< PM (Bit 9) */
#define USART2_CTL0_PM_Msk                (0x200UL)                 /*!< PM (Bitfield-Mask: 0x01) */
#define USART2_CTL0_PERRIE_Pos            (8UL)                     /*!< PERRIE (Bit 8) */
#define USART2_CTL0_PERRIE_Msk            (0x100UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define USART2_CTL0_TBEIE_Pos             (7UL)                     /*!< TBEIE (Bit 7) */
#define USART2_CTL0_TBEIE_Msk             (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define USART2_CTL0_TCIE_Pos              (6UL)                     /*!< TCIE (Bit 6) */
#define USART2_CTL0_TCIE_Msk              (0x40UL)                  /*!< TCIE (Bitfield-Mask: 0x01) */
#define USART2_CTL0_RBNEIE_Pos            (5UL)                     /*!< RBNEIE (Bit 5) */
#define USART2_CTL0_RBNEIE_Msk            (0x20UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define USART2_CTL0_IDLEIE_Pos            (4UL)                     /*!< IDLEIE (Bit 4) */
#define USART2_CTL0_IDLEIE_Msk            (0x10UL)                  /*!< IDLEIE (Bitfield-Mask: 0x01) */
#define USART2_CTL0_TEN_Pos               (3UL)                     /*!< TEN (Bit 3) */
#define USART2_CTL0_TEN_Msk               (0x8UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define USART2_CTL0_REN_Pos               (2UL)                     /*!< REN (Bit 2) */
#define USART2_CTL0_REN_Msk               (0x4UL)                   /*!< REN (Bitfield-Mask: 0x01) */
#define USART2_CTL0_RWU_Pos               (1UL)                     /*!< RWU (Bit 1) */
#define USART2_CTL0_RWU_Msk               (0x2UL)                   /*!< RWU (Bitfield-Mask: 0x01) */
#define USART2_CTL0_SBKCMD_Pos            (0UL)                     /*!< SBKCMD (Bit 0) */
#define USART2_CTL0_SBKCMD_Msk            (0x1UL)                   /*!< SBKCMD (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define USART2_CTL1_LMEN_Pos              (14UL)                    /*!< LMEN (Bit 14) */
#define USART2_CTL1_LMEN_Msk              (0x4000UL)                /*!< LMEN (Bitfield-Mask: 0x01) */
#define USART2_CTL1_STB_Pos               (12UL)                    /*!< STB (Bit 12) */
#define USART2_CTL1_STB_Msk               (0x3000UL)                /*!< STB (Bitfield-Mask: 0x03) */
#define USART2_CTL1_CKEN_Pos              (11UL)                    /*!< CKEN (Bit 11) */
#define USART2_CTL1_CKEN_Msk              (0x800UL)                 /*!< CKEN (Bitfield-Mask: 0x01) */
#define USART2_CTL1_CPL_Pos               (10UL)                    /*!< CPL (Bit 10) */
#define USART2_CTL1_CPL_Msk               (0x400UL)                 /*!< CPL (Bitfield-Mask: 0x01) */
#define USART2_CTL1_CPH_Pos               (9UL)                     /*!< CPH (Bit 9) */
#define USART2_CTL1_CPH_Msk               (0x200UL)                 /*!< CPH (Bitfield-Mask: 0x01) */
#define USART2_CTL1_CLEN_Pos              (8UL)                     /*!< CLEN (Bit 8) */
#define USART2_CTL1_CLEN_Msk              (0x100UL)                 /*!< CLEN (Bitfield-Mask: 0x01) */
#define USART2_CTL1_LBDIE_Pos             (6UL)                     /*!< LBDIE (Bit 6) */
#define USART2_CTL1_LBDIE_Msk             (0x40UL)                  /*!< LBDIE (Bitfield-Mask: 0x01) */
#define USART2_CTL1_LBLEN_Pos             (5UL)                     /*!< LBLEN (Bit 5) */
#define USART2_CTL1_LBLEN_Msk             (0x20UL)                  /*!< LBLEN (Bitfield-Mask: 0x01) */
#define USART2_CTL1_ADDR_Pos              (0UL)                     /*!< ADDR (Bit 0) */
#define USART2_CTL1_ADDR_Msk              (0xfUL)                   /*!< ADDR (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL2  ========================================================== */
#define USART2_CTL2_OSB_Pos               (11UL)                    /*!< OSB (Bit 11) */
#define USART2_CTL2_OSB_Msk               (0x800UL)                 /*!< OSB (Bitfield-Mask: 0x01) */
#define USART2_CTL2_CTSIE_Pos             (10UL)                    /*!< CTSIE (Bit 10) */
#define USART2_CTL2_CTSIE_Msk             (0x400UL)                 /*!< CTSIE (Bitfield-Mask: 0x01) */
#define USART2_CTL2_CTSEN_Pos             (9UL)                     /*!< CTSEN (Bit 9) */
#define USART2_CTL2_CTSEN_Msk             (0x200UL)                 /*!< CTSEN (Bitfield-Mask: 0x01) */
#define USART2_CTL2_RTSEN_Pos             (8UL)                     /*!< RTSEN (Bit 8) */
#define USART2_CTL2_RTSEN_Msk             (0x100UL)                 /*!< RTSEN (Bitfield-Mask: 0x01) */
#define USART2_CTL2_DENT_Pos              (7UL)                     /*!< DENT (Bit 7) */
#define USART2_CTL2_DENT_Msk              (0x80UL)                  /*!< DENT (Bitfield-Mask: 0x01) */
#define USART2_CTL2_DENR_Pos              (6UL)                     /*!< DENR (Bit 6) */
#define USART2_CTL2_DENR_Msk              (0x40UL)                  /*!< DENR (Bitfield-Mask: 0x01) */
#define USART2_CTL2_SCEN_Pos              (5UL)                     /*!< SCEN (Bit 5) */
#define USART2_CTL2_SCEN_Msk              (0x20UL)                  /*!< SCEN (Bitfield-Mask: 0x01) */
#define USART2_CTL2_NKEN_Pos              (4UL)                     /*!< NKEN (Bit 4) */
#define USART2_CTL2_NKEN_Msk              (0x10UL)                  /*!< NKEN (Bitfield-Mask: 0x01) */
#define USART2_CTL2_HDEN_Pos              (3UL)                     /*!< HDEN (Bit 3) */
#define USART2_CTL2_HDEN_Msk              (0x8UL)                   /*!< HDEN (Bitfield-Mask: 0x01) */
#define USART2_CTL2_IRLP_Pos              (2UL)                     /*!< IRLP (Bit 2) */
#define USART2_CTL2_IRLP_Msk              (0x4UL)                   /*!< IRLP (Bitfield-Mask: 0x01) */
#define USART2_CTL2_IREN_Pos              (1UL)                     /*!< IREN (Bit 1) */
#define USART2_CTL2_IREN_Msk              (0x2UL)                   /*!< IREN (Bitfield-Mask: 0x01) */
#define USART2_CTL2_ERRIE_Pos             (0UL)                     /*!< ERRIE (Bit 0) */
#define USART2_CTL2_ERRIE_Msk             (0x1UL)                   /*!< ERRIE (Bitfield-Mask: 0x01) */
/* ==========================================================  GP  =========================================================== */
#define USART2_GP_GUAT_Pos                (8UL)                     /*!< GUAT (Bit 8) */
#define USART2_GP_GUAT_Msk                (0xff00UL)                /*!< GUAT (Bitfield-Mask: 0xff) */
#define USART2_GP_PSC_Pos                 (0UL)                     /*!< PSC (Bit 0) */
#define USART2_GP_PSC_Msk                 (0xffUL)                  /*!< PSC (Bitfield-Mask: 0xff) */
/* =========================================================  CTL3  ========================================================== */
#define USART2_CTL3_MSBF_Pos              (11UL)                    /*!< MSBF (Bit 11) */
#define USART2_CTL3_MSBF_Msk              (0x800UL)                 /*!< MSBF (Bitfield-Mask: 0x01) */
#define USART2_CTL3_DINV_Pos              (10UL)                    /*!< DINV (Bit 10) */
#define USART2_CTL3_DINV_Msk              (0x400UL)                 /*!< DINV (Bitfield-Mask: 0x01) */
#define USART2_CTL3_TINV_Pos              (9UL)                     /*!< TINV (Bit 9) */
#define USART2_CTL3_TINV_Msk              (0x200UL)                 /*!< TINV (Bitfield-Mask: 0x01) */
#define USART2_CTL3_RINV_Pos              (8UL)                     /*!< RINV (Bit 8) */
#define USART2_CTL3_RINV_Msk              (0x100UL)                 /*!< RINV (Bitfield-Mask: 0x01) */
#define USART2_CTL3_EBIE_Pos              (5UL)                     /*!< EBIE (Bit 5) */
#define USART2_CTL3_EBIE_Msk              (0x20UL)                  /*!< EBIE (Bitfield-Mask: 0x01) */
#define USART2_CTL3_RTIE_Pos              (4UL)                     /*!< RTIE (Bit 4) */
#define USART2_CTL3_RTIE_Msk              (0x10UL)                  /*!< RTIE (Bitfield-Mask: 0x01) */
#define USART2_CTL3_SCRTNUM_Pos           (1UL)                     /*!< SCRTNUM (Bit 1) */
#define USART2_CTL3_SCRTNUM_Msk           (0xeUL)                   /*!< SCRTNUM (Bitfield-Mask: 0x07) */
#define USART2_CTL3_RTEN_Pos              (0UL)                     /*!< RTEN (Bit 0) */
#define USART2_CTL3_RTEN_Msk              (0x1UL)                   /*!< RTEN (Bitfield-Mask: 0x01) */
/* ==========================================================  RT  =========================================================== */
#define USART2_RT_BL_Pos                  (24UL)                    /*!< BL (Bit 24) */
#define USART2_RT_BL_Msk                  (0xff000000UL)            /*!< BL (Bitfield-Mask: 0xff) */
#define USART2_RT_RT_Pos                  (0UL)                     /*!< RT (Bit 0) */
#define USART2_RT_RT_Msk                  (0xffffffUL)              /*!< RT (Bitfield-Mask: 0xffffff) */
/* =========================================================  STAT1  ========================================================= */
#define USART2_STAT1_BSY_Pos              (16UL)                    /*!< BSY (Bit 16) */
#define USART2_STAT1_BSY_Msk              (0x10000UL)               /*!< BSY (Bitfield-Mask: 0x01) */
#define USART2_STAT1_EBF_Pos              (12UL)                    /*!< EBF (Bit 12) */
#define USART2_STAT1_EBF_Msk              (0x1000UL)                /*!< EBF (Bitfield-Mask: 0x01) */
#define USART2_STAT1_RTF_Pos              (11UL)                    /*!< RTF (Bit 11) */
#define USART2_STAT1_RTF_Msk              (0x800UL)                 /*!< RTF (Bitfield-Mask: 0x01) */
/* ==========================================================  CHC  ========================================================== */
#define USART2_CHC_EPERR_Pos              (8UL)                     /*!< EPERR (Bit 8) */
#define USART2_CHC_EPERR_Msk              (0x100UL)                 /*!< EPERR (Bitfield-Mask: 0x01) */
#define USART2_CHC_BCM_Pos                (2UL)                     /*!< BCM (Bit 2) */
#define USART2_CHC_BCM_Msk                (0x4UL)                   /*!< BCM (Bitfield-Mask: 0x01) */
#define USART2_CHC_PCM_Pos                (1UL)                     /*!< PCM (Bit 1) */
#define USART2_CHC_PCM_Msk                (0x2UL)                   /*!< PCM (Bitfield-Mask: 0x01) */
#define USART2_CHC_HCM_Pos                (0UL)                     /*!< HCM (Bit 0) */
#define USART2_CHC_HCM_Msk                (0x1UL)                   /*!< HCM (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                          USART5                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT0  ========================================================= */
#define USART5_STAT0_CTSF_Pos             (9UL)                     /*!< CTSF (Bit 9) */
#define USART5_STAT0_CTSF_Msk             (0x200UL)                 /*!< CTSF (Bitfield-Mask: 0x01) */
#define USART5_STAT0_LBDF_Pos             (8UL)                     /*!< LBDF (Bit 8) */
#define USART5_STAT0_LBDF_Msk             (0x100UL)                 /*!< LBDF (Bitfield-Mask: 0x01) */
#define USART5_STAT0_TBE_Pos              (7UL)                     /*!< TBE (Bit 7) */
#define USART5_STAT0_TBE_Msk              (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define USART5_STAT0_TC_Pos               (6UL)                     /*!< TC (Bit 6) */
#define USART5_STAT0_TC_Msk               (0x40UL)                  /*!< TC (Bitfield-Mask: 0x01) */
#define USART5_STAT0_RBNE_Pos             (5UL)                     /*!< RBNE (Bit 5) */
#define USART5_STAT0_RBNE_Msk             (0x20UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define USART5_STAT0_IDLEF_Pos            (4UL)                     /*!< IDLEF (Bit 4) */
#define USART5_STAT0_IDLEF_Msk            (0x10UL)                  /*!< IDLEF (Bitfield-Mask: 0x01) */
#define USART5_STAT0_ORERR_Pos            (3UL)                     /*!< ORERR (Bit 3) */
#define USART5_STAT0_ORERR_Msk            (0x8UL)                   /*!< ORERR (Bitfield-Mask: 0x01) */
#define USART5_STAT0_NERR_Pos             (2UL)                     /*!< NERR (Bit 2) */
#define USART5_STAT0_NERR_Msk             (0x4UL)                   /*!< NERR (Bitfield-Mask: 0x01) */
#define USART5_STAT0_FERR_Pos             (1UL)                     /*!< FERR (Bit 1) */
#define USART5_STAT0_FERR_Msk             (0x2UL)                   /*!< FERR (Bitfield-Mask: 0x01) */
#define USART5_STAT0_PERR_Pos             (0UL)                     /*!< PERR (Bit 0) */
#define USART5_STAT0_PERR_Msk             (0x1UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define USART5_DATA_DATA_Pos              (0UL)                     /*!< DATA (Bit 0) */
#define USART5_DATA_DATA_Msk              (0x1ffUL)                 /*!< DATA (Bitfield-Mask: 0x1ff) */
/* =========================================================  BAUD  ========================================================== */
#define USART5_BAUD_INTDIV_Pos            (4UL)                     /*!< INTDIV (Bit 4) */
#define USART5_BAUD_INTDIV_Msk            (0xfff0UL)                /*!< INTDIV (Bitfield-Mask: 0xfff) */
#define USART5_BAUD_FRADIV_Pos            (0UL)                     /*!< FRADIV (Bit 0) */
#define USART5_BAUD_FRADIV_Msk            (0xfUL)                   /*!< FRADIV (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL0  ========================================================== */
#define USART5_CTL0_OVSMOD_Pos            (15UL)                    /*!< OVSMOD (Bit 15) */
#define USART5_CTL0_OVSMOD_Msk            (0x8000UL)                /*!< OVSMOD (Bitfield-Mask: 0x01) */
#define USART5_CTL0_UEN_Pos               (13UL)                    /*!< UEN (Bit 13) */
#define USART5_CTL0_UEN_Msk               (0x2000UL)                /*!< UEN (Bitfield-Mask: 0x01) */
#define USART5_CTL0_WL_Pos                (12UL)                    /*!< WL (Bit 12) */
#define USART5_CTL0_WL_Msk                (0x1000UL)                /*!< WL (Bitfield-Mask: 0x01) */
#define USART5_CTL0_WM_Pos                (11UL)                    /*!< WM (Bit 11) */
#define USART5_CTL0_WM_Msk                (0x800UL)                 /*!< WM (Bitfield-Mask: 0x01) */
#define USART5_CTL0_PCEN_Pos              (10UL)                    /*!< PCEN (Bit 10) */
#define USART5_CTL0_PCEN_Msk              (0x400UL)                 /*!< PCEN (Bitfield-Mask: 0x01) */
#define USART5_CTL0_PM_Pos                (9UL)                     /*!< PM (Bit 9) */
#define USART5_CTL0_PM_Msk                (0x200UL)                 /*!< PM (Bitfield-Mask: 0x01) */
#define USART5_CTL0_PERRIE_Pos            (8UL)                     /*!< PERRIE (Bit 8) */
#define USART5_CTL0_PERRIE_Msk            (0x100UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define USART5_CTL0_TBEIE_Pos             (7UL)                     /*!< TBEIE (Bit 7) */
#define USART5_CTL0_TBEIE_Msk             (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define USART5_CTL0_TCIE_Pos              (6UL)                     /*!< TCIE (Bit 6) */
#define USART5_CTL0_TCIE_Msk              (0x40UL)                  /*!< TCIE (Bitfield-Mask: 0x01) */
#define USART5_CTL0_RBNEIE_Pos            (5UL)                     /*!< RBNEIE (Bit 5) */
#define USART5_CTL0_RBNEIE_Msk            (0x20UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define USART5_CTL0_IDLEIE_Pos            (4UL)                     /*!< IDLEIE (Bit 4) */
#define USART5_CTL0_IDLEIE_Msk            (0x10UL)                  /*!< IDLEIE (Bitfield-Mask: 0x01) */
#define USART5_CTL0_TEN_Pos               (3UL)                     /*!< TEN (Bit 3) */
#define USART5_CTL0_TEN_Msk               (0x8UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define USART5_CTL0_REN_Pos               (2UL)                     /*!< REN (Bit 2) */
#define USART5_CTL0_REN_Msk               (0x4UL)                   /*!< REN (Bitfield-Mask: 0x01) */
#define USART5_CTL0_RWU_Pos               (1UL)                     /*!< RWU (Bit 1) */
#define USART5_CTL0_RWU_Msk               (0x2UL)                   /*!< RWU (Bitfield-Mask: 0x01) */
#define USART5_CTL0_SBKCMD_Pos            (0UL)                     /*!< SBKCMD (Bit 0) */
#define USART5_CTL0_SBKCMD_Msk            (0x1UL)                   /*!< SBKCMD (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define USART5_CTL1_LMEN_Pos              (14UL)                    /*!< LMEN (Bit 14) */
#define USART5_CTL1_LMEN_Msk              (0x4000UL)                /*!< LMEN (Bitfield-Mask: 0x01) */
#define USART5_CTL1_STB_Pos               (12UL)                    /*!< STB (Bit 12) */
#define USART5_CTL1_STB_Msk               (0x3000UL)                /*!< STB (Bitfield-Mask: 0x03) */
#define USART5_CTL1_CKEN_Pos              (11UL)                    /*!< CKEN (Bit 11) */
#define USART5_CTL1_CKEN_Msk              (0x800UL)                 /*!< CKEN (Bitfield-Mask: 0x01) */
#define USART5_CTL1_CPL_Pos               (10UL)                    /*!< CPL (Bit 10) */
#define USART5_CTL1_CPL_Msk               (0x400UL)                 /*!< CPL (Bitfield-Mask: 0x01) */
#define USART5_CTL1_CPH_Pos               (9UL)                     /*!< CPH (Bit 9) */
#define USART5_CTL1_CPH_Msk               (0x200UL)                 /*!< CPH (Bitfield-Mask: 0x01) */
#define USART5_CTL1_CLEN_Pos              (8UL)                     /*!< CLEN (Bit 8) */
#define USART5_CTL1_CLEN_Msk              (0x100UL)                 /*!< CLEN (Bitfield-Mask: 0x01) */
#define USART5_CTL1_LBDIE_Pos             (6UL)                     /*!< LBDIE (Bit 6) */
#define USART5_CTL1_LBDIE_Msk             (0x40UL)                  /*!< LBDIE (Bitfield-Mask: 0x01) */
#define USART5_CTL1_LBLEN_Pos             (5UL)                     /*!< LBLEN (Bit 5) */
#define USART5_CTL1_LBLEN_Msk             (0x20UL)                  /*!< LBLEN (Bitfield-Mask: 0x01) */
#define USART5_CTL1_ADDR_Pos              (0UL)                     /*!< ADDR (Bit 0) */
#define USART5_CTL1_ADDR_Msk              (0xfUL)                   /*!< ADDR (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL2  ========================================================== */
#define USART5_CTL2_OSB_Pos               (11UL)                    /*!< OSB (Bit 11) */
#define USART5_CTL2_OSB_Msk               (0x800UL)                 /*!< OSB (Bitfield-Mask: 0x01) */
#define USART5_CTL2_CTSIE_Pos             (10UL)                    /*!< CTSIE (Bit 10) */
#define USART5_CTL2_CTSIE_Msk             (0x400UL)                 /*!< CTSIE (Bitfield-Mask: 0x01) */
#define USART5_CTL2_CTSEN_Pos             (9UL)                     /*!< CTSEN (Bit 9) */
#define USART5_CTL2_CTSEN_Msk             (0x200UL)                 /*!< CTSEN (Bitfield-Mask: 0x01) */
#define USART5_CTL2_RTSEN_Pos             (8UL)                     /*!< RTSEN (Bit 8) */
#define USART5_CTL2_RTSEN_Msk             (0x100UL)                 /*!< RTSEN (Bitfield-Mask: 0x01) */
#define USART5_CTL2_DENT_Pos              (7UL)                     /*!< DENT (Bit 7) */
#define USART5_CTL2_DENT_Msk              (0x80UL)                  /*!< DENT (Bitfield-Mask: 0x01) */
#define USART5_CTL2_DENR_Pos              (6UL)                     /*!< DENR (Bit 6) */
#define USART5_CTL2_DENR_Msk              (0x40UL)                  /*!< DENR (Bitfield-Mask: 0x01) */
#define USART5_CTL2_SCEN_Pos              (5UL)                     /*!< SCEN (Bit 5) */
#define USART5_CTL2_SCEN_Msk              (0x20UL)                  /*!< SCEN (Bitfield-Mask: 0x01) */
#define USART5_CTL2_NKEN_Pos              (4UL)                     /*!< NKEN (Bit 4) */
#define USART5_CTL2_NKEN_Msk              (0x10UL)                  /*!< NKEN (Bitfield-Mask: 0x01) */
#define USART5_CTL2_HDEN_Pos              (3UL)                     /*!< HDEN (Bit 3) */
#define USART5_CTL2_HDEN_Msk              (0x8UL)                   /*!< HDEN (Bitfield-Mask: 0x01) */
#define USART5_CTL2_IRLP_Pos              (2UL)                     /*!< IRLP (Bit 2) */
#define USART5_CTL2_IRLP_Msk              (0x4UL)                   /*!< IRLP (Bitfield-Mask: 0x01) */
#define USART5_CTL2_IREN_Pos              (1UL)                     /*!< IREN (Bit 1) */
#define USART5_CTL2_IREN_Msk              (0x2UL)                   /*!< IREN (Bitfield-Mask: 0x01) */
#define USART5_CTL2_ERRIE_Pos             (0UL)                     /*!< ERRIE (Bit 0) */
#define USART5_CTL2_ERRIE_Msk             (0x1UL)                   /*!< ERRIE (Bitfield-Mask: 0x01) */
/* ==========================================================  GP  =========================================================== */
#define USART5_GP_GUAT_Pos                (8UL)                     /*!< GUAT (Bit 8) */
#define USART5_GP_GUAT_Msk                (0xff00UL)                /*!< GUAT (Bitfield-Mask: 0xff) */
#define USART5_GP_PSC_Pos                 (0UL)                     /*!< PSC (Bit 0) */
#define USART5_GP_PSC_Msk                 (0xffUL)                  /*!< PSC (Bitfield-Mask: 0xff) */
/* =========================================================  CTL3  ========================================================== */
#define USART5_CTL3_MSBF_Pos              (11UL)                    /*!< MSBF (Bit 11) */
#define USART5_CTL3_MSBF_Msk              (0x800UL)                 /*!< MSBF (Bitfield-Mask: 0x01) */
#define USART5_CTL3_DINV_Pos              (10UL)                    /*!< DINV (Bit 10) */
#define USART5_CTL3_DINV_Msk              (0x400UL)                 /*!< DINV (Bitfield-Mask: 0x01) */
#define USART5_CTL3_TINV_Pos              (9UL)                     /*!< TINV (Bit 9) */
#define USART5_CTL3_TINV_Msk              (0x200UL)                 /*!< TINV (Bitfield-Mask: 0x01) */
#define USART5_CTL3_RINV_Pos              (8UL)                     /*!< RINV (Bit 8) */
#define USART5_CTL3_RINV_Msk              (0x100UL)                 /*!< RINV (Bitfield-Mask: 0x01) */
#define USART5_CTL3_EBIE_Pos              (5UL)                     /*!< EBIE (Bit 5) */
#define USART5_CTL3_EBIE_Msk              (0x20UL)                  /*!< EBIE (Bitfield-Mask: 0x01) */
#define USART5_CTL3_RTIE_Pos              (4UL)                     /*!< RTIE (Bit 4) */
#define USART5_CTL3_RTIE_Msk              (0x10UL)                  /*!< RTIE (Bitfield-Mask: 0x01) */
#define USART5_CTL3_SCRTNUM_Pos           (1UL)                     /*!< SCRTNUM (Bit 1) */
#define USART5_CTL3_SCRTNUM_Msk           (0xeUL)                   /*!< SCRTNUM (Bitfield-Mask: 0x07) */
#define USART5_CTL3_RTEN_Pos              (0UL)                     /*!< RTEN (Bit 0) */
#define USART5_CTL3_RTEN_Msk              (0x1UL)                   /*!< RTEN (Bitfield-Mask: 0x01) */
/* ==========================================================  RT  =========================================================== */
#define USART5_RT_BL_Pos                  (24UL)                    /*!< BL (Bit 24) */
#define USART5_RT_BL_Msk                  (0xff000000UL)            /*!< BL (Bitfield-Mask: 0xff) */
#define USART5_RT_RT_Pos                  (0UL)                     /*!< RT (Bit 0) */
#define USART5_RT_RT_Msk                  (0xffffffUL)              /*!< RT (Bitfield-Mask: 0xffffff) */
/* =========================================================  STAT1  ========================================================= */
#define USART5_STAT1_BSY_Pos              (16UL)                    /*!< BSY (Bit 16) */
#define USART5_STAT1_BSY_Msk              (0x10000UL)               /*!< BSY (Bitfield-Mask: 0x01) */
#define USART5_STAT1_EBF_Pos              (12UL)                    /*!< EBF (Bit 12) */
#define USART5_STAT1_EBF_Msk              (0x1000UL)                /*!< EBF (Bitfield-Mask: 0x01) */
#define USART5_STAT1_RTF_Pos              (11UL)                    /*!< RTF (Bit 11) */
#define USART5_STAT1_RTF_Msk              (0x800UL)                 /*!< RTF (Bitfield-Mask: 0x01) */
/* ==========================================================  CHC  ========================================================== */
#define USART5_CHC_EPERR_Pos              (8UL)                     /*!< EPERR (Bit 8) */
#define USART5_CHC_EPERR_Msk              (0x100UL)                 /*!< EPERR (Bitfield-Mask: 0x01) */
#define USART5_CHC_BCM_Pos                (2UL)                     /*!< BCM (Bit 2) */
#define USART5_CHC_BCM_Msk                (0x4UL)                   /*!< BCM (Bitfield-Mask: 0x01) */
#define USART5_CHC_PCM_Pos                (1UL)                     /*!< PCM (Bit 1) */
#define USART5_CHC_PCM_Msk                (0x2UL)                   /*!< PCM (Bitfield-Mask: 0x01) */
#define USART5_CHC_HCM_Pos                (0UL)                     /*!< HCM (Bit 0) */
#define USART5_CHC_HCM_Msk                (0x1UL)                   /*!< HCM (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           UART3                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT0  ========================================================= */
#define UART3_STAT0_CTSF_Pos              (9UL)                     /*!< CTSF (Bit 9) */
#define UART3_STAT0_CTSF_Msk              (0x200UL)                 /*!< CTSF (Bitfield-Mask: 0x01) */
#define UART3_STAT0_LBDF_Pos              (8UL)                     /*!< LBDF (Bit 8) */
#define UART3_STAT0_LBDF_Msk              (0x100UL)                 /*!< LBDF (Bitfield-Mask: 0x01) */
#define UART3_STAT0_TBE_Pos               (7UL)                     /*!< TBE (Bit 7) */
#define UART3_STAT0_TBE_Msk               (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define UART3_STAT0_TC_Pos                (6UL)                     /*!< TC (Bit 6) */
#define UART3_STAT0_TC_Msk                (0x40UL)                  /*!< TC (Bitfield-Mask: 0x01) */
#define UART3_STAT0_RBNE_Pos              (5UL)                     /*!< RBNE (Bit 5) */
#define UART3_STAT0_RBNE_Msk              (0x20UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define UART3_STAT0_IDLEF_Pos             (4UL)                     /*!< IDLEF (Bit 4) */
#define UART3_STAT0_IDLEF_Msk             (0x10UL)                  /*!< IDLEF (Bitfield-Mask: 0x01) */
#define UART3_STAT0_ORERR_Pos             (3UL)                     /*!< ORERR (Bit 3) */
#define UART3_STAT0_ORERR_Msk             (0x8UL)                   /*!< ORERR (Bitfield-Mask: 0x01) */
#define UART3_STAT0_NERR_Pos              (2UL)                     /*!< NERR (Bit 2) */
#define UART3_STAT0_NERR_Msk              (0x4UL)                   /*!< NERR (Bitfield-Mask: 0x01) */
#define UART3_STAT0_FERR_Pos              (1UL)                     /*!< FERR (Bit 1) */
#define UART3_STAT0_FERR_Msk              (0x2UL)                   /*!< FERR (Bitfield-Mask: 0x01) */
#define UART3_STAT0_PERR_Pos              (0UL)                     /*!< PERR (Bit 0) */
#define UART3_STAT0_PERR_Msk              (0x1UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define UART3_DATA_DATA_Pos               (0UL)                     /*!< DATA (Bit 0) */
#define UART3_DATA_DATA_Msk               (0x1ffUL)                 /*!< DATA (Bitfield-Mask: 0x1ff) */
/* =========================================================  BAUD  ========================================================== */
#define UART3_BAUD_INTDIV_Pos             (4UL)                     /*!< INTDIV (Bit 4) */
#define UART3_BAUD_INTDIV_Msk             (0xfff0UL)                /*!< INTDIV (Bitfield-Mask: 0xfff) */
#define UART3_BAUD_FRADIV_Pos             (0UL)                     /*!< FRADIV (Bit 0) */
#define UART3_BAUD_FRADIV_Msk             (0xfUL)                   /*!< FRADIV (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL0  ========================================================== */
#define UART3_CTL0_OVSMOD_Pos             (15UL)                    /*!< OVSMOD (Bit 15) */
#define UART3_CTL0_OVSMOD_Msk             (0x8000UL)                /*!< OVSMOD (Bitfield-Mask: 0x01) */
#define UART3_CTL0_UEN_Pos                (13UL)                    /*!< UEN (Bit 13) */
#define UART3_CTL0_UEN_Msk                (0x2000UL)                /*!< UEN (Bitfield-Mask: 0x01) */
#define UART3_CTL0_WL_Pos                 (12UL)                    /*!< WL (Bit 12) */
#define UART3_CTL0_WL_Msk                 (0x1000UL)                /*!< WL (Bitfield-Mask: 0x01) */
#define UART3_CTL0_WM_Pos                 (11UL)                    /*!< WM (Bit 11) */
#define UART3_CTL0_WM_Msk                 (0x800UL)                 /*!< WM (Bitfield-Mask: 0x01) */
#define UART3_CTL0_PCEN_Pos               (10UL)                    /*!< PCEN (Bit 10) */
#define UART3_CTL0_PCEN_Msk               (0x400UL)                 /*!< PCEN (Bitfield-Mask: 0x01) */
#define UART3_CTL0_PM_Pos                 (9UL)                     /*!< PM (Bit 9) */
#define UART3_CTL0_PM_Msk                 (0x200UL)                 /*!< PM (Bitfield-Mask: 0x01) */
#define UART3_CTL0_PERRIE_Pos             (8UL)                     /*!< PERRIE (Bit 8) */
#define UART3_CTL0_PERRIE_Msk             (0x100UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define UART3_CTL0_TBEIE_Pos              (7UL)                     /*!< TBEIE (Bit 7) */
#define UART3_CTL0_TBEIE_Msk              (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define UART3_CTL0_TCIE_Pos               (6UL)                     /*!< TCIE (Bit 6) */
#define UART3_CTL0_TCIE_Msk               (0x40UL)                  /*!< TCIE (Bitfield-Mask: 0x01) */
#define UART3_CTL0_RBNEIE_Pos             (5UL)                     /*!< RBNEIE (Bit 5) */
#define UART3_CTL0_RBNEIE_Msk             (0x20UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define UART3_CTL0_IDLEIE_Pos             (4UL)                     /*!< IDLEIE (Bit 4) */
#define UART3_CTL0_IDLEIE_Msk             (0x10UL)                  /*!< IDLEIE (Bitfield-Mask: 0x01) */
#define UART3_CTL0_TEN_Pos                (3UL)                     /*!< TEN (Bit 3) */
#define UART3_CTL0_TEN_Msk                (0x8UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define UART3_CTL0_REN_Pos                (2UL)                     /*!< REN (Bit 2) */
#define UART3_CTL0_REN_Msk                (0x4UL)                   /*!< REN (Bitfield-Mask: 0x01) */
#define UART3_CTL0_RWU_Pos                (1UL)                     /*!< RWU (Bit 1) */
#define UART3_CTL0_RWU_Msk                (0x2UL)                   /*!< RWU (Bitfield-Mask: 0x01) */
#define UART3_CTL0_SBKCMD_Pos             (0UL)                     /*!< SBKCMD (Bit 0) */
#define UART3_CTL0_SBKCMD_Msk             (0x1UL)                   /*!< SBKCMD (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define UART3_CTL1_LMEN_Pos               (14UL)                    /*!< LMEN (Bit 14) */
#define UART3_CTL1_LMEN_Msk               (0x4000UL)                /*!< LMEN (Bitfield-Mask: 0x01) */
#define UART3_CTL1_STB_Pos                (12UL)                    /*!< STB (Bit 12) */
#define UART3_CTL1_STB_Msk                (0x3000UL)                /*!< STB (Bitfield-Mask: 0x03) */
#define UART3_CTL1_CKEN_Pos               (11UL)                    /*!< CKEN (Bit 11) */
#define UART3_CTL1_CKEN_Msk               (0x800UL)                 /*!< CKEN (Bitfield-Mask: 0x01) */
#define UART3_CTL1_CPL_Pos                (10UL)                    /*!< CPL (Bit 10) */
#define UART3_CTL1_CPL_Msk                (0x400UL)                 /*!< CPL (Bitfield-Mask: 0x01) */
#define UART3_CTL1_CPH_Pos                (9UL)                     /*!< CPH (Bit 9) */
#define UART3_CTL1_CPH_Msk                (0x200UL)                 /*!< CPH (Bitfield-Mask: 0x01) */
#define UART3_CTL1_CLEN_Pos               (8UL)                     /*!< CLEN (Bit 8) */
#define UART3_CTL1_CLEN_Msk               (0x100UL)                 /*!< CLEN (Bitfield-Mask: 0x01) */
#define UART3_CTL1_LBDIE_Pos              (6UL)                     /*!< LBDIE (Bit 6) */
#define UART3_CTL1_LBDIE_Msk              (0x40UL)                  /*!< LBDIE (Bitfield-Mask: 0x01) */
#define UART3_CTL1_LBLEN_Pos              (5UL)                     /*!< LBLEN (Bit 5) */
#define UART3_CTL1_LBLEN_Msk              (0x20UL)                  /*!< LBLEN (Bitfield-Mask: 0x01) */
#define UART3_CTL1_ADDR_Pos               (0UL)                     /*!< ADDR (Bit 0) */
#define UART3_CTL1_ADDR_Msk               (0xfUL)                   /*!< ADDR (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL2  ========================================================== */
#define UART3_CTL2_OSB_Pos                (11UL)                    /*!< OSB (Bit 11) */
#define UART3_CTL2_OSB_Msk                (0x800UL)                 /*!< OSB (Bitfield-Mask: 0x01) */
#define UART3_CTL2_CTSIE_Pos              (10UL)                    /*!< CTSIE (Bit 10) */
#define UART3_CTL2_CTSIE_Msk              (0x400UL)                 /*!< CTSIE (Bitfield-Mask: 0x01) */
#define UART3_CTL2_CTSEN_Pos              (9UL)                     /*!< CTSEN (Bit 9) */
#define UART3_CTL2_CTSEN_Msk              (0x200UL)                 /*!< CTSEN (Bitfield-Mask: 0x01) */
#define UART3_CTL2_RTSEN_Pos              (8UL)                     /*!< RTSEN (Bit 8) */
#define UART3_CTL2_RTSEN_Msk              (0x100UL)                 /*!< RTSEN (Bitfield-Mask: 0x01) */
#define UART3_CTL2_DENT_Pos               (7UL)                     /*!< DENT (Bit 7) */
#define UART3_CTL2_DENT_Msk               (0x80UL)                  /*!< DENT (Bitfield-Mask: 0x01) */
#define UART3_CTL2_DENR_Pos               (6UL)                     /*!< DENR (Bit 6) */
#define UART3_CTL2_DENR_Msk               (0x40UL)                  /*!< DENR (Bitfield-Mask: 0x01) */
#define UART3_CTL2_SCEN_Pos               (5UL)                     /*!< SCEN (Bit 5) */
#define UART3_CTL2_SCEN_Msk               (0x20UL)                  /*!< SCEN (Bitfield-Mask: 0x01) */
#define UART3_CTL2_NKEN_Pos               (4UL)                     /*!< NKEN (Bit 4) */
#define UART3_CTL2_NKEN_Msk               (0x10UL)                  /*!< NKEN (Bitfield-Mask: 0x01) */
#define UART3_CTL2_HDEN_Pos               (3UL)                     /*!< HDEN (Bit 3) */
#define UART3_CTL2_HDEN_Msk               (0x8UL)                   /*!< HDEN (Bitfield-Mask: 0x01) */
#define UART3_CTL2_IRLP_Pos               (2UL)                     /*!< IRLP (Bit 2) */
#define UART3_CTL2_IRLP_Msk               (0x4UL)                   /*!< IRLP (Bitfield-Mask: 0x01) */
#define UART3_CTL2_IREN_Pos               (1UL)                     /*!< IREN (Bit 1) */
#define UART3_CTL2_IREN_Msk               (0x2UL)                   /*!< IREN (Bitfield-Mask: 0x01) */
#define UART3_CTL2_ERRIE_Pos              (0UL)                     /*!< ERRIE (Bit 0) */
#define UART3_CTL2_ERRIE_Msk              (0x1UL)                   /*!< ERRIE (Bitfield-Mask: 0x01) */
/* ==========================================================  GP  =========================================================== */
#define UART3_GP_GUAT_Pos                 (8UL)                     /*!< GUAT (Bit 8) */
#define UART3_GP_GUAT_Msk                 (0xff00UL)                /*!< GUAT (Bitfield-Mask: 0xff) */
#define UART3_GP_PSC_Pos                  (0UL)                     /*!< PSC (Bit 0) */
#define UART3_GP_PSC_Msk                  (0xffUL)                  /*!< PSC (Bitfield-Mask: 0xff) */
/* ==========================================================  CHC  ========================================================== */
#define UART3_CHC_EPERR_Pos               (8UL)                     /*!< EPERR (Bit 8) */
#define UART3_CHC_EPERR_Msk               (0x100UL)                 /*!< EPERR (Bitfield-Mask: 0x01) */
#define UART3_CHC_BCM_Pos                 (2UL)                     /*!< BCM (Bit 2) */
#define UART3_CHC_BCM_Msk                 (0x4UL)                   /*!< BCM (Bitfield-Mask: 0x01) */
#define UART3_CHC_PCM_Pos                 (1UL)                     /*!< PCM (Bit 1) */
#define UART3_CHC_PCM_Msk                 (0x2UL)                   /*!< PCM (Bitfield-Mask: 0x01) */
#define UART3_CHC_HCM_Pos                 (0UL)                     /*!< HCM (Bit 0) */
#define UART3_CHC_HCM_Msk                 (0x1UL)                   /*!< HCM (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           UART4                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT0  ========================================================= */
#define UART4_STAT0_CTSF_Pos              (9UL)                     /*!< CTSF (Bit 9) */
#define UART4_STAT0_CTSF_Msk              (0x200UL)                 /*!< CTSF (Bitfield-Mask: 0x01) */
#define UART4_STAT0_LBDF_Pos              (8UL)                     /*!< LBDF (Bit 8) */
#define UART4_STAT0_LBDF_Msk              (0x100UL)                 /*!< LBDF (Bitfield-Mask: 0x01) */
#define UART4_STAT0_TBE_Pos               (7UL)                     /*!< TBE (Bit 7) */
#define UART4_STAT0_TBE_Msk               (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define UART4_STAT0_TC_Pos                (6UL)                     /*!< TC (Bit 6) */
#define UART4_STAT0_TC_Msk                (0x40UL)                  /*!< TC (Bitfield-Mask: 0x01) */
#define UART4_STAT0_RBNE_Pos              (5UL)                     /*!< RBNE (Bit 5) */
#define UART4_STAT0_RBNE_Msk              (0x20UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define UART4_STAT0_IDLEF_Pos             (4UL)                     /*!< IDLEF (Bit 4) */
#define UART4_STAT0_IDLEF_Msk             (0x10UL)                  /*!< IDLEF (Bitfield-Mask: 0x01) */
#define UART4_STAT0_ORERR_Pos             (3UL)                     /*!< ORERR (Bit 3) */
#define UART4_STAT0_ORERR_Msk             (0x8UL)                   /*!< ORERR (Bitfield-Mask: 0x01) */
#define UART4_STAT0_NERR_Pos              (2UL)                     /*!< NERR (Bit 2) */
#define UART4_STAT0_NERR_Msk              (0x4UL)                   /*!< NERR (Bitfield-Mask: 0x01) */
#define UART4_STAT0_FERR_Pos              (1UL)                     /*!< FERR (Bit 1) */
#define UART4_STAT0_FERR_Msk              (0x2UL)                   /*!< FERR (Bitfield-Mask: 0x01) */
#define UART4_STAT0_PERR_Pos              (0UL)                     /*!< PERR (Bit 0) */
#define UART4_STAT0_PERR_Msk              (0x1UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define UART4_DATA_DATA_Pos               (0UL)                     /*!< DATA (Bit 0) */
#define UART4_DATA_DATA_Msk               (0x1ffUL)                 /*!< DATA (Bitfield-Mask: 0x1ff) */
/* =========================================================  BAUD  ========================================================== */
#define UART4_BAUD_INTDIV_Pos             (4UL)                     /*!< INTDIV (Bit 4) */
#define UART4_BAUD_INTDIV_Msk             (0xfff0UL)                /*!< INTDIV (Bitfield-Mask: 0xfff) */
#define UART4_BAUD_FRADIV_Pos             (0UL)                     /*!< FRADIV (Bit 0) */
#define UART4_BAUD_FRADIV_Msk             (0xfUL)                   /*!< FRADIV (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL0  ========================================================== */
#define UART4_CTL0_OVSMOD_Pos             (15UL)                    /*!< OVSMOD (Bit 15) */
#define UART4_CTL0_OVSMOD_Msk             (0x8000UL)                /*!< OVSMOD (Bitfield-Mask: 0x01) */
#define UART4_CTL0_UEN_Pos                (13UL)                    /*!< UEN (Bit 13) */
#define UART4_CTL0_UEN_Msk                (0x2000UL)                /*!< UEN (Bitfield-Mask: 0x01) */
#define UART4_CTL0_WL_Pos                 (12UL)                    /*!< WL (Bit 12) */
#define UART4_CTL0_WL_Msk                 (0x1000UL)                /*!< WL (Bitfield-Mask: 0x01) */
#define UART4_CTL0_WM_Pos                 (11UL)                    /*!< WM (Bit 11) */
#define UART4_CTL0_WM_Msk                 (0x800UL)                 /*!< WM (Bitfield-Mask: 0x01) */
#define UART4_CTL0_PCEN_Pos               (10UL)                    /*!< PCEN (Bit 10) */
#define UART4_CTL0_PCEN_Msk               (0x400UL)                 /*!< PCEN (Bitfield-Mask: 0x01) */
#define UART4_CTL0_PM_Pos                 (9UL)                     /*!< PM (Bit 9) */
#define UART4_CTL0_PM_Msk                 (0x200UL)                 /*!< PM (Bitfield-Mask: 0x01) */
#define UART4_CTL0_PERRIE_Pos             (8UL)                     /*!< PERRIE (Bit 8) */
#define UART4_CTL0_PERRIE_Msk             (0x100UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define UART4_CTL0_TBEIE_Pos              (7UL)                     /*!< TBEIE (Bit 7) */
#define UART4_CTL0_TBEIE_Msk              (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define UART4_CTL0_TCIE_Pos               (6UL)                     /*!< TCIE (Bit 6) */
#define UART4_CTL0_TCIE_Msk               (0x40UL)                  /*!< TCIE (Bitfield-Mask: 0x01) */
#define UART4_CTL0_RBNEIE_Pos             (5UL)                     /*!< RBNEIE (Bit 5) */
#define UART4_CTL0_RBNEIE_Msk             (0x20UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define UART4_CTL0_IDLEIE_Pos             (4UL)                     /*!< IDLEIE (Bit 4) */
#define UART4_CTL0_IDLEIE_Msk             (0x10UL)                  /*!< IDLEIE (Bitfield-Mask: 0x01) */
#define UART4_CTL0_TEN_Pos                (3UL)                     /*!< TEN (Bit 3) */
#define UART4_CTL0_TEN_Msk                (0x8UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define UART4_CTL0_REN_Pos                (2UL)                     /*!< REN (Bit 2) */
#define UART4_CTL0_REN_Msk                (0x4UL)                   /*!< REN (Bitfield-Mask: 0x01) */
#define UART4_CTL0_RWU_Pos                (1UL)                     /*!< RWU (Bit 1) */
#define UART4_CTL0_RWU_Msk                (0x2UL)                   /*!< RWU (Bitfield-Mask: 0x01) */
#define UART4_CTL0_SBKCMD_Pos             (0UL)                     /*!< SBKCMD (Bit 0) */
#define UART4_CTL0_SBKCMD_Msk             (0x1UL)                   /*!< SBKCMD (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define UART4_CTL1_LMEN_Pos               (14UL)                    /*!< LMEN (Bit 14) */
#define UART4_CTL1_LMEN_Msk               (0x4000UL)                /*!< LMEN (Bitfield-Mask: 0x01) */
#define UART4_CTL1_STB_Pos                (12UL)                    /*!< STB (Bit 12) */
#define UART4_CTL1_STB_Msk                (0x3000UL)                /*!< STB (Bitfield-Mask: 0x03) */
#define UART4_CTL1_CKEN_Pos               (11UL)                    /*!< CKEN (Bit 11) */
#define UART4_CTL1_CKEN_Msk               (0x800UL)                 /*!< CKEN (Bitfield-Mask: 0x01) */
#define UART4_CTL1_CPL_Pos                (10UL)                    /*!< CPL (Bit 10) */
#define UART4_CTL1_CPL_Msk                (0x400UL)                 /*!< CPL (Bitfield-Mask: 0x01) */
#define UART4_CTL1_CPH_Pos                (9UL)                     /*!< CPH (Bit 9) */
#define UART4_CTL1_CPH_Msk                (0x200UL)                 /*!< CPH (Bitfield-Mask: 0x01) */
#define UART4_CTL1_CLEN_Pos               (8UL)                     /*!< CLEN (Bit 8) */
#define UART4_CTL1_CLEN_Msk               (0x100UL)                 /*!< CLEN (Bitfield-Mask: 0x01) */
#define UART4_CTL1_LBDIE_Pos              (6UL)                     /*!< LBDIE (Bit 6) */
#define UART4_CTL1_LBDIE_Msk              (0x40UL)                  /*!< LBDIE (Bitfield-Mask: 0x01) */
#define UART4_CTL1_LBLEN_Pos              (5UL)                     /*!< LBLEN (Bit 5) */
#define UART4_CTL1_LBLEN_Msk              (0x20UL)                  /*!< LBLEN (Bitfield-Mask: 0x01) */
#define UART4_CTL1_ADDR_Pos               (0UL)                     /*!< ADDR (Bit 0) */
#define UART4_CTL1_ADDR_Msk               (0xfUL)                   /*!< ADDR (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL2  ========================================================== */
#define UART4_CTL2_OSB_Pos                (11UL)                    /*!< OSB (Bit 11) */
#define UART4_CTL2_OSB_Msk                (0x800UL)                 /*!< OSB (Bitfield-Mask: 0x01) */
#define UART4_CTL2_CTSIE_Pos              (10UL)                    /*!< CTSIE (Bit 10) */
#define UART4_CTL2_CTSIE_Msk              (0x400UL)                 /*!< CTSIE (Bitfield-Mask: 0x01) */
#define UART4_CTL2_CTSEN_Pos              (9UL)                     /*!< CTSEN (Bit 9) */
#define UART4_CTL2_CTSEN_Msk              (0x200UL)                 /*!< CTSEN (Bitfield-Mask: 0x01) */
#define UART4_CTL2_RTSEN_Pos              (8UL)                     /*!< RTSEN (Bit 8) */
#define UART4_CTL2_RTSEN_Msk              (0x100UL)                 /*!< RTSEN (Bitfield-Mask: 0x01) */
#define UART4_CTL2_DENT_Pos               (7UL)                     /*!< DENT (Bit 7) */
#define UART4_CTL2_DENT_Msk               (0x80UL)                  /*!< DENT (Bitfield-Mask: 0x01) */
#define UART4_CTL2_DENR_Pos               (6UL)                     /*!< DENR (Bit 6) */
#define UART4_CTL2_DENR_Msk               (0x40UL)                  /*!< DENR (Bitfield-Mask: 0x01) */
#define UART4_CTL2_SCEN_Pos               (5UL)                     /*!< SCEN (Bit 5) */
#define UART4_CTL2_SCEN_Msk               (0x20UL)                  /*!< SCEN (Bitfield-Mask: 0x01) */
#define UART4_CTL2_NKEN_Pos               (4UL)                     /*!< NKEN (Bit 4) */
#define UART4_CTL2_NKEN_Msk               (0x10UL)                  /*!< NKEN (Bitfield-Mask: 0x01) */
#define UART4_CTL2_HDEN_Pos               (3UL)                     /*!< HDEN (Bit 3) */
#define UART4_CTL2_HDEN_Msk               (0x8UL)                   /*!< HDEN (Bitfield-Mask: 0x01) */
#define UART4_CTL2_IRLP_Pos               (2UL)                     /*!< IRLP (Bit 2) */
#define UART4_CTL2_IRLP_Msk               (0x4UL)                   /*!< IRLP (Bitfield-Mask: 0x01) */
#define UART4_CTL2_IREN_Pos               (1UL)                     /*!< IREN (Bit 1) */
#define UART4_CTL2_IREN_Msk               (0x2UL)                   /*!< IREN (Bitfield-Mask: 0x01) */
#define UART4_CTL2_ERRIE_Pos              (0UL)                     /*!< ERRIE (Bit 0) */
#define UART4_CTL2_ERRIE_Msk              (0x1UL)                   /*!< ERRIE (Bitfield-Mask: 0x01) */
/* ==========================================================  GP  =========================================================== */
#define UART4_GP_GUAT_Pos                 (8UL)                     /*!< GUAT (Bit 8) */
#define UART4_GP_GUAT_Msk                 (0xff00UL)                /*!< GUAT (Bitfield-Mask: 0xff) */
#define UART4_GP_PSC_Pos                  (0UL)                     /*!< PSC (Bit 0) */
#define UART4_GP_PSC_Msk                  (0xffUL)                  /*!< PSC (Bitfield-Mask: 0xff) */
/* ==========================================================  CHC  ========================================================== */
#define UART4_CHC_EPERR_Pos               (8UL)                     /*!< EPERR (Bit 8) */
#define UART4_CHC_EPERR_Msk               (0x100UL)                 /*!< EPERR (Bitfield-Mask: 0x01) */
#define UART4_CHC_BCM_Pos                 (2UL)                     /*!< BCM (Bit 2) */
#define UART4_CHC_BCM_Msk                 (0x4UL)                   /*!< BCM (Bitfield-Mask: 0x01) */
#define UART4_CHC_PCM_Pos                 (1UL)                     /*!< PCM (Bit 1) */
#define UART4_CHC_PCM_Msk                 (0x2UL)                   /*!< PCM (Bitfield-Mask: 0x01) */
#define UART4_CHC_HCM_Pos                 (0UL)                     /*!< HCM (Bit 0) */
#define UART4_CHC_HCM_Msk                 (0x1UL)                   /*!< HCM (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           UART6                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT0  ========================================================= */
#define UART6_STAT0_CTSF_Pos              (9UL)                     /*!< CTSF (Bit 9) */
#define UART6_STAT0_CTSF_Msk              (0x200UL)                 /*!< CTSF (Bitfield-Mask: 0x01) */
#define UART6_STAT0_LBDF_Pos              (8UL)                     /*!< LBDF (Bit 8) */
#define UART6_STAT0_LBDF_Msk              (0x100UL)                 /*!< LBDF (Bitfield-Mask: 0x01) */
#define UART6_STAT0_TBE_Pos               (7UL)                     /*!< TBE (Bit 7) */
#define UART6_STAT0_TBE_Msk               (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define UART6_STAT0_TC_Pos                (6UL)                     /*!< TC (Bit 6) */
#define UART6_STAT0_TC_Msk                (0x40UL)                  /*!< TC (Bitfield-Mask: 0x01) */
#define UART6_STAT0_RBNE_Pos              (5UL)                     /*!< RBNE (Bit 5) */
#define UART6_STAT0_RBNE_Msk              (0x20UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define UART6_STAT0_IDLEF_Pos             (4UL)                     /*!< IDLEF (Bit 4) */
#define UART6_STAT0_IDLEF_Msk             (0x10UL)                  /*!< IDLEF (Bitfield-Mask: 0x01) */
#define UART6_STAT0_ORERR_Pos             (3UL)                     /*!< ORERR (Bit 3) */
#define UART6_STAT0_ORERR_Msk             (0x8UL)                   /*!< ORERR (Bitfield-Mask: 0x01) */
#define UART6_STAT0_NERR_Pos              (2UL)                     /*!< NERR (Bit 2) */
#define UART6_STAT0_NERR_Msk              (0x4UL)                   /*!< NERR (Bitfield-Mask: 0x01) */
#define UART6_STAT0_FERR_Pos              (1UL)                     /*!< FERR (Bit 1) */
#define UART6_STAT0_FERR_Msk              (0x2UL)                   /*!< FERR (Bitfield-Mask: 0x01) */
#define UART6_STAT0_PERR_Pos              (0UL)                     /*!< PERR (Bit 0) */
#define UART6_STAT0_PERR_Msk              (0x1UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define UART6_DATA_DATA_Pos               (0UL)                     /*!< DATA (Bit 0) */
#define UART6_DATA_DATA_Msk               (0x1ffUL)                 /*!< DATA (Bitfield-Mask: 0x1ff) */
/* =========================================================  BAUD  ========================================================== */
#define UART6_BAUD_INTDIV_Pos             (4UL)                     /*!< INTDIV (Bit 4) */
#define UART6_BAUD_INTDIV_Msk             (0xfff0UL)                /*!< INTDIV (Bitfield-Mask: 0xfff) */
#define UART6_BAUD_FRADIV_Pos             (0UL)                     /*!< FRADIV (Bit 0) */
#define UART6_BAUD_FRADIV_Msk             (0xfUL)                   /*!< FRADIV (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL0  ========================================================== */
#define UART6_CTL0_OVSMOD_Pos             (15UL)                    /*!< OVSMOD (Bit 15) */
#define UART6_CTL0_OVSMOD_Msk             (0x8000UL)                /*!< OVSMOD (Bitfield-Mask: 0x01) */
#define UART6_CTL0_UEN_Pos                (13UL)                    /*!< UEN (Bit 13) */
#define UART6_CTL0_UEN_Msk                (0x2000UL)                /*!< UEN (Bitfield-Mask: 0x01) */
#define UART6_CTL0_WL_Pos                 (12UL)                    /*!< WL (Bit 12) */
#define UART6_CTL0_WL_Msk                 (0x1000UL)                /*!< WL (Bitfield-Mask: 0x01) */
#define UART6_CTL0_WM_Pos                 (11UL)                    /*!< WM (Bit 11) */
#define UART6_CTL0_WM_Msk                 (0x800UL)                 /*!< WM (Bitfield-Mask: 0x01) */
#define UART6_CTL0_PCEN_Pos               (10UL)                    /*!< PCEN (Bit 10) */
#define UART6_CTL0_PCEN_Msk               (0x400UL)                 /*!< PCEN (Bitfield-Mask: 0x01) */
#define UART6_CTL0_PM_Pos                 (9UL)                     /*!< PM (Bit 9) */
#define UART6_CTL0_PM_Msk                 (0x200UL)                 /*!< PM (Bitfield-Mask: 0x01) */
#define UART6_CTL0_PERRIE_Pos             (8UL)                     /*!< PERRIE (Bit 8) */
#define UART6_CTL0_PERRIE_Msk             (0x100UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define UART6_CTL0_TBEIE_Pos              (7UL)                     /*!< TBEIE (Bit 7) */
#define UART6_CTL0_TBEIE_Msk              (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define UART6_CTL0_TCIE_Pos               (6UL)                     /*!< TCIE (Bit 6) */
#define UART6_CTL0_TCIE_Msk               (0x40UL)                  /*!< TCIE (Bitfield-Mask: 0x01) */
#define UART6_CTL0_RBNEIE_Pos             (5UL)                     /*!< RBNEIE (Bit 5) */
#define UART6_CTL0_RBNEIE_Msk             (0x20UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define UART6_CTL0_IDLEIE_Pos             (4UL)                     /*!< IDLEIE (Bit 4) */
#define UART6_CTL0_IDLEIE_Msk             (0x10UL)                  /*!< IDLEIE (Bitfield-Mask: 0x01) */
#define UART6_CTL0_TEN_Pos                (3UL)                     /*!< TEN (Bit 3) */
#define UART6_CTL0_TEN_Msk                (0x8UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define UART6_CTL0_REN_Pos                (2UL)                     /*!< REN (Bit 2) */
#define UART6_CTL0_REN_Msk                (0x4UL)                   /*!< REN (Bitfield-Mask: 0x01) */
#define UART6_CTL0_RWU_Pos                (1UL)                     /*!< RWU (Bit 1) */
#define UART6_CTL0_RWU_Msk                (0x2UL)                   /*!< RWU (Bitfield-Mask: 0x01) */
#define UART6_CTL0_SBKCMD_Pos             (0UL)                     /*!< SBKCMD (Bit 0) */
#define UART6_CTL0_SBKCMD_Msk             (0x1UL)                   /*!< SBKCMD (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define UART6_CTL1_LMEN_Pos               (14UL)                    /*!< LMEN (Bit 14) */
#define UART6_CTL1_LMEN_Msk               (0x4000UL)                /*!< LMEN (Bitfield-Mask: 0x01) */
#define UART6_CTL1_STB_Pos                (12UL)                    /*!< STB (Bit 12) */
#define UART6_CTL1_STB_Msk                (0x3000UL)                /*!< STB (Bitfield-Mask: 0x03) */
#define UART6_CTL1_CKEN_Pos               (11UL)                    /*!< CKEN (Bit 11) */
#define UART6_CTL1_CKEN_Msk               (0x800UL)                 /*!< CKEN (Bitfield-Mask: 0x01) */
#define UART6_CTL1_CPL_Pos                (10UL)                    /*!< CPL (Bit 10) */
#define UART6_CTL1_CPL_Msk                (0x400UL)                 /*!< CPL (Bitfield-Mask: 0x01) */
#define UART6_CTL1_CPH_Pos                (9UL)                     /*!< CPH (Bit 9) */
#define UART6_CTL1_CPH_Msk                (0x200UL)                 /*!< CPH (Bitfield-Mask: 0x01) */
#define UART6_CTL1_CLEN_Pos               (8UL)                     /*!< CLEN (Bit 8) */
#define UART6_CTL1_CLEN_Msk               (0x100UL)                 /*!< CLEN (Bitfield-Mask: 0x01) */
#define UART6_CTL1_LBDIE_Pos              (6UL)                     /*!< LBDIE (Bit 6) */
#define UART6_CTL1_LBDIE_Msk              (0x40UL)                  /*!< LBDIE (Bitfield-Mask: 0x01) */
#define UART6_CTL1_LBLEN_Pos              (5UL)                     /*!< LBLEN (Bit 5) */
#define UART6_CTL1_LBLEN_Msk              (0x20UL)                  /*!< LBLEN (Bitfield-Mask: 0x01) */
#define UART6_CTL1_ADDR_Pos               (0UL)                     /*!< ADDR (Bit 0) */
#define UART6_CTL1_ADDR_Msk               (0xfUL)                   /*!< ADDR (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL2  ========================================================== */
#define UART6_CTL2_OSB_Pos                (11UL)                    /*!< OSB (Bit 11) */
#define UART6_CTL2_OSB_Msk                (0x800UL)                 /*!< OSB (Bitfield-Mask: 0x01) */
#define UART6_CTL2_CTSIE_Pos              (10UL)                    /*!< CTSIE (Bit 10) */
#define UART6_CTL2_CTSIE_Msk              (0x400UL)                 /*!< CTSIE (Bitfield-Mask: 0x01) */
#define UART6_CTL2_CTSEN_Pos              (9UL)                     /*!< CTSEN (Bit 9) */
#define UART6_CTL2_CTSEN_Msk              (0x200UL)                 /*!< CTSEN (Bitfield-Mask: 0x01) */
#define UART6_CTL2_RTSEN_Pos              (8UL)                     /*!< RTSEN (Bit 8) */
#define UART6_CTL2_RTSEN_Msk              (0x100UL)                 /*!< RTSEN (Bitfield-Mask: 0x01) */
#define UART6_CTL2_DENT_Pos               (7UL)                     /*!< DENT (Bit 7) */
#define UART6_CTL2_DENT_Msk               (0x80UL)                  /*!< DENT (Bitfield-Mask: 0x01) */
#define UART6_CTL2_DENR_Pos               (6UL)                     /*!< DENR (Bit 6) */
#define UART6_CTL2_DENR_Msk               (0x40UL)                  /*!< DENR (Bitfield-Mask: 0x01) */
#define UART6_CTL2_SCEN_Pos               (5UL)                     /*!< SCEN (Bit 5) */
#define UART6_CTL2_SCEN_Msk               (0x20UL)                  /*!< SCEN (Bitfield-Mask: 0x01) */
#define UART6_CTL2_NKEN_Pos               (4UL)                     /*!< NKEN (Bit 4) */
#define UART6_CTL2_NKEN_Msk               (0x10UL)                  /*!< NKEN (Bitfield-Mask: 0x01) */
#define UART6_CTL2_HDEN_Pos               (3UL)                     /*!< HDEN (Bit 3) */
#define UART6_CTL2_HDEN_Msk               (0x8UL)                   /*!< HDEN (Bitfield-Mask: 0x01) */
#define UART6_CTL2_IRLP_Pos               (2UL)                     /*!< IRLP (Bit 2) */
#define UART6_CTL2_IRLP_Msk               (0x4UL)                   /*!< IRLP (Bitfield-Mask: 0x01) */
#define UART6_CTL2_IREN_Pos               (1UL)                     /*!< IREN (Bit 1) */
#define UART6_CTL2_IREN_Msk               (0x2UL)                   /*!< IREN (Bitfield-Mask: 0x01) */
#define UART6_CTL2_ERRIE_Pos              (0UL)                     /*!< ERRIE (Bit 0) */
#define UART6_CTL2_ERRIE_Msk              (0x1UL)                   /*!< ERRIE (Bitfield-Mask: 0x01) */
/* ==========================================================  GP  =========================================================== */
#define UART6_GP_GUAT_Pos                 (8UL)                     /*!< GUAT (Bit 8) */
#define UART6_GP_GUAT_Msk                 (0xff00UL)                /*!< GUAT (Bitfield-Mask: 0xff) */
#define UART6_GP_PSC_Pos                  (0UL)                     /*!< PSC (Bit 0) */
#define UART6_GP_PSC_Msk                  (0xffUL)                  /*!< PSC (Bitfield-Mask: 0xff) */
/* ==========================================================  CHC  ========================================================== */
#define UART6_CHC_EPERR_Pos               (8UL)                     /*!< EPERR (Bit 8) */
#define UART6_CHC_EPERR_Msk               (0x100UL)                 /*!< EPERR (Bitfield-Mask: 0x01) */
#define UART6_CHC_BCM_Pos                 (2UL)                     /*!< BCM (Bit 2) */
#define UART6_CHC_BCM_Msk                 (0x4UL)                   /*!< BCM (Bitfield-Mask: 0x01) */
#define UART6_CHC_PCM_Pos                 (1UL)                     /*!< PCM (Bit 1) */
#define UART6_CHC_PCM_Msk                 (0x2UL)                   /*!< PCM (Bitfield-Mask: 0x01) */
#define UART6_CHC_HCM_Pos                 (0UL)                     /*!< HCM (Bit 0) */
#define UART6_CHC_HCM_Msk                 (0x1UL)                   /*!< HCM (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           UART7                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  STAT0  ========================================================= */
#define UART7_STAT0_CTSF_Pos              (9UL)                     /*!< CTSF (Bit 9) */
#define UART7_STAT0_CTSF_Msk              (0x200UL)                 /*!< CTSF (Bitfield-Mask: 0x01) */
#define UART7_STAT0_LBDF_Pos              (8UL)                     /*!< LBDF (Bit 8) */
#define UART7_STAT0_LBDF_Msk              (0x100UL)                 /*!< LBDF (Bitfield-Mask: 0x01) */
#define UART7_STAT0_TBE_Pos               (7UL)                     /*!< TBE (Bit 7) */
#define UART7_STAT0_TBE_Msk               (0x80UL)                  /*!< TBE (Bitfield-Mask: 0x01) */
#define UART7_STAT0_TC_Pos                (6UL)                     /*!< TC (Bit 6) */
#define UART7_STAT0_TC_Msk                (0x40UL)                  /*!< TC (Bitfield-Mask: 0x01) */
#define UART7_STAT0_RBNE_Pos              (5UL)                     /*!< RBNE (Bit 5) */
#define UART7_STAT0_RBNE_Msk              (0x20UL)                  /*!< RBNE (Bitfield-Mask: 0x01) */
#define UART7_STAT0_IDLEF_Pos             (4UL)                     /*!< IDLEF (Bit 4) */
#define UART7_STAT0_IDLEF_Msk             (0x10UL)                  /*!< IDLEF (Bitfield-Mask: 0x01) */
#define UART7_STAT0_ORERR_Pos             (3UL)                     /*!< ORERR (Bit 3) */
#define UART7_STAT0_ORERR_Msk             (0x8UL)                   /*!< ORERR (Bitfield-Mask: 0x01) */
#define UART7_STAT0_NERR_Pos              (2UL)                     /*!< NERR (Bit 2) */
#define UART7_STAT0_NERR_Msk              (0x4UL)                   /*!< NERR (Bitfield-Mask: 0x01) */
#define UART7_STAT0_FERR_Pos              (1UL)                     /*!< FERR (Bit 1) */
#define UART7_STAT0_FERR_Msk              (0x2UL)                   /*!< FERR (Bitfield-Mask: 0x01) */
#define UART7_STAT0_PERR_Pos              (0UL)                     /*!< PERR (Bit 0) */
#define UART7_STAT0_PERR_Msk              (0x1UL)                   /*!< PERR (Bitfield-Mask: 0x01) */
/* =========================================================  DATA  ========================================================== */
#define UART7_DATA_DATA_Pos               (0UL)                     /*!< DATA (Bit 0) */
#define UART7_DATA_DATA_Msk               (0x1ffUL)                 /*!< DATA (Bitfield-Mask: 0x1ff) */
/* =========================================================  BAUD  ========================================================== */
#define UART7_BAUD_INTDIV_Pos             (4UL)                     /*!< INTDIV (Bit 4) */
#define UART7_BAUD_INTDIV_Msk             (0xfff0UL)                /*!< INTDIV (Bitfield-Mask: 0xfff) */
#define UART7_BAUD_FRADIV_Pos             (0UL)                     /*!< FRADIV (Bit 0) */
#define UART7_BAUD_FRADIV_Msk             (0xfUL)                   /*!< FRADIV (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL0  ========================================================== */
#define UART7_CTL0_OVSMOD_Pos             (15UL)                    /*!< OVSMOD (Bit 15) */
#define UART7_CTL0_OVSMOD_Msk             (0x8000UL)                /*!< OVSMOD (Bitfield-Mask: 0x01) */
#define UART7_CTL0_UEN_Pos                (13UL)                    /*!< UEN (Bit 13) */
#define UART7_CTL0_UEN_Msk                (0x2000UL)                /*!< UEN (Bitfield-Mask: 0x01) */
#define UART7_CTL0_WL_Pos                 (12UL)                    /*!< WL (Bit 12) */
#define UART7_CTL0_WL_Msk                 (0x1000UL)                /*!< WL (Bitfield-Mask: 0x01) */
#define UART7_CTL0_WM_Pos                 (11UL)                    /*!< WM (Bit 11) */
#define UART7_CTL0_WM_Msk                 (0x800UL)                 /*!< WM (Bitfield-Mask: 0x01) */
#define UART7_CTL0_PCEN_Pos               (10UL)                    /*!< PCEN (Bit 10) */
#define UART7_CTL0_PCEN_Msk               (0x400UL)                 /*!< PCEN (Bitfield-Mask: 0x01) */
#define UART7_CTL0_PM_Pos                 (9UL)                     /*!< PM (Bit 9) */
#define UART7_CTL0_PM_Msk                 (0x200UL)                 /*!< PM (Bitfield-Mask: 0x01) */
#define UART7_CTL0_PERRIE_Pos             (8UL)                     /*!< PERRIE (Bit 8) */
#define UART7_CTL0_PERRIE_Msk             (0x100UL)                 /*!< PERRIE (Bitfield-Mask: 0x01) */
#define UART7_CTL0_TBEIE_Pos              (7UL)                     /*!< TBEIE (Bit 7) */
#define UART7_CTL0_TBEIE_Msk              (0x80UL)                  /*!< TBEIE (Bitfield-Mask: 0x01) */
#define UART7_CTL0_TCIE_Pos               (6UL)                     /*!< TCIE (Bit 6) */
#define UART7_CTL0_TCIE_Msk               (0x40UL)                  /*!< TCIE (Bitfield-Mask: 0x01) */
#define UART7_CTL0_RBNEIE_Pos             (5UL)                     /*!< RBNEIE (Bit 5) */
#define UART7_CTL0_RBNEIE_Msk             (0x20UL)                  /*!< RBNEIE (Bitfield-Mask: 0x01) */
#define UART7_CTL0_IDLEIE_Pos             (4UL)                     /*!< IDLEIE (Bit 4) */
#define UART7_CTL0_IDLEIE_Msk             (0x10UL)                  /*!< IDLEIE (Bitfield-Mask: 0x01) */
#define UART7_CTL0_TEN_Pos                (3UL)                     /*!< TEN (Bit 3) */
#define UART7_CTL0_TEN_Msk                (0x8UL)                   /*!< TEN (Bitfield-Mask: 0x01) */
#define UART7_CTL0_REN_Pos                (2UL)                     /*!< REN (Bit 2) */
#define UART7_CTL0_REN_Msk                (0x4UL)                   /*!< REN (Bitfield-Mask: 0x01) */
#define UART7_CTL0_RWU_Pos                (1UL)                     /*!< RWU (Bit 1) */
#define UART7_CTL0_RWU_Msk                (0x2UL)                   /*!< RWU (Bitfield-Mask: 0x01) */
#define UART7_CTL0_SBKCMD_Pos             (0UL)                     /*!< SBKCMD (Bit 0) */
#define UART7_CTL0_SBKCMD_Msk             (0x1UL)                   /*!< SBKCMD (Bitfield-Mask: 0x01) */
/* =========================================================  CTL1  ========================================================== */
#define UART7_CTL1_LMEN_Pos               (14UL)                    /*!< LMEN (Bit 14) */
#define UART7_CTL1_LMEN_Msk               (0x4000UL)                /*!< LMEN (Bitfield-Mask: 0x01) */
#define UART7_CTL1_STB_Pos                (12UL)                    /*!< STB (Bit 12) */
#define UART7_CTL1_STB_Msk                (0x3000UL)                /*!< STB (Bitfield-Mask: 0x03) */
#define UART7_CTL1_CKEN_Pos               (11UL)                    /*!< CKEN (Bit 11) */
#define UART7_CTL1_CKEN_Msk               (0x800UL)                 /*!< CKEN (Bitfield-Mask: 0x01) */
#define UART7_CTL1_CPL_Pos                (10UL)                    /*!< CPL (Bit 10) */
#define UART7_CTL1_CPL_Msk                (0x400UL)                 /*!< CPL (Bitfield-Mask: 0x01) */
#define UART7_CTL1_CPH_Pos                (9UL)                     /*!< CPH (Bit 9) */
#define UART7_CTL1_CPH_Msk                (0x200UL)                 /*!< CPH (Bitfield-Mask: 0x01) */
#define UART7_CTL1_CLEN_Pos               (8UL)                     /*!< CLEN (Bit 8) */
#define UART7_CTL1_CLEN_Msk               (0x100UL)                 /*!< CLEN (Bitfield-Mask: 0x01) */
#define UART7_CTL1_LBDIE_Pos              (6UL)                     /*!< LBDIE (Bit 6) */
#define UART7_CTL1_LBDIE_Msk              (0x40UL)                  /*!< LBDIE (Bitfield-Mask: 0x01) */
#define UART7_CTL1_LBLEN_Pos              (5UL)                     /*!< LBLEN (Bit 5) */
#define UART7_CTL1_LBLEN_Msk              (0x20UL)                  /*!< LBLEN (Bitfield-Mask: 0x01) */
#define UART7_CTL1_ADDR_Pos               (0UL)                     /*!< ADDR (Bit 0) */
#define UART7_CTL1_ADDR_Msk               (0xfUL)                   /*!< ADDR (Bitfield-Mask: 0x0f) */
/* =========================================================  CTL2  ========================================================== */
#define UART7_CTL2_OSB_Pos                (11UL)                    /*!< OSB (Bit 11) */
#define UART7_CTL2_OSB_Msk                (0x800UL)                 /*!< OSB (Bitfield-Mask: 0x01) */
#define UART7_CTL2_CTSIE_Pos              (10UL)                    /*!< CTSIE (Bit 10) */
#define UART7_CTL2_CTSIE_Msk              (0x400UL)                 /*!< CTSIE (Bitfield-Mask: 0x01) */
#define UART7_CTL2_CTSEN_Pos              (9UL)                     /*!< CTSEN (Bit 9) */
#define UART7_CTL2_CTSEN_Msk              (0x200UL)                 /*!< CTSEN (Bitfield-Mask: 0x01) */
#define UART7_CTL2_RTSEN_Pos              (8UL)                     /*!< RTSEN (Bit 8) */
#define UART7_CTL2_RTSEN_Msk              (0x100UL)                 /*!< RTSEN (Bitfield-Mask: 0x01) */
#define UART7_CTL2_DENT_Pos               (7UL)                     /*!< DENT (Bit 7) */
#define UART7_CTL2_DENT_Msk               (0x80UL)                  /*!< DENT (Bitfield-Mask: 0x01) */
#define UART7_CTL2_DENR_Pos               (6UL)                     /*!< DENR (Bit 6) */
#define UART7_CTL2_DENR_Msk               (0x40UL)                  /*!< DENR (Bitfield-Mask: 0x01) */
#define UART7_CTL2_SCEN_Pos               (5UL)                     /*!< SCEN (Bit 5) */
#define UART7_CTL2_SCEN_Msk               (0x20UL)                  /*!< SCEN (Bitfield-Mask: 0x01) */
#define UART7_CTL2_NKEN_Pos               (4UL)                     /*!< NKEN (Bit 4) */
#define UART7_CTL2_NKEN_Msk               (0x10UL)                  /*!< NKEN (Bitfield-Mask: 0x01) */
#define UART7_CTL2_HDEN_Pos               (3UL)                     /*!< HDEN (Bit 3) */
#define UART7_CTL2_HDEN_Msk               (0x8UL)                   /*!< HDEN (Bitfield-Mask: 0x01) */
#define UART7_CTL2_IRLP_Pos               (2UL)                     /*!< IRLP (Bit 2) */
#define UART7_CTL2_IRLP_Msk               (0x4UL)                   /*!< IRLP (Bitfield-Mask: 0x01) */
#define UART7_CTL2_IREN_Pos               (1UL)                     /*!< IREN (Bit 1) */
#define UART7_CTL2_IREN_Msk               (0x2UL)                   /*!< IREN (Bitfield-Mask: 0x01) */
#define UART7_CTL2_ERRIE_Pos              (0UL)                     /*!< ERRIE (Bit 0) */
#define UART7_CTL2_ERRIE_Msk              (0x1UL)                   /*!< ERRIE (Bitfield-Mask: 0x01) */
/* ==========================================================  GP  =========================================================== */
#define UART7_GP_GUAT_Pos                 (8UL)                     /*!< GUAT (Bit 8) */
#define UART7_GP_GUAT_Msk                 (0xff00UL)                /*!< GUAT (Bitfield-Mask: 0xff) */
#define UART7_GP_PSC_Pos                  (0UL)                     /*!< PSC (Bit 0) */
#define UART7_GP_PSC_Msk                  (0xffUL)                  /*!< PSC (Bitfield-Mask: 0xff) */
/* ==========================================================  CHC  ========================================================== */
#define UART7_CHC_EPERR_Pos               (8UL)                     /*!< EPERR (Bit 8) */
#define UART7_CHC_EPERR_Msk               (0x100UL)                 /*!< EPERR (Bitfield-Mask: 0x01) */
#define UART7_CHC_BCM_Pos                 (2UL)                     /*!< BCM (Bit 2) */
#define UART7_CHC_BCM_Msk                 (0x4UL)                   /*!< BCM (Bitfield-Mask: 0x01) */
#define UART7_CHC_PCM_Pos                 (1UL)                     /*!< PCM (Bit 1) */
#define UART7_CHC_PCM_Msk                 (0x2UL)                   /*!< PCM (Bitfield-Mask: 0x01) */
#define UART7_CHC_HCM_Pos                 (0UL)                     /*!< HCM (Bit 0) */
#define UART7_CHC_HCM_Msk                 (0x1UL)                   /*!< HCM (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                         FS_GLOBAL                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  GOTGCS  ========================================================= */
#define FS_GLOBAL_GOTGCS_SRPS_Pos         (0UL)                     /*!< SRPS (Bit 0) */
#define FS_GLOBAL_GOTGCS_SRPS_Msk         (0x1UL)                   /*!< SRPS (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGCS_SRPREQ_Pos       (1UL)                     /*!< SRPREQ (Bit 1) */
#define FS_GLOBAL_GOTGCS_SRPREQ_Msk       (0x2UL)                   /*!< SRPREQ (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGCS_HNPS_Pos         (8UL)                     /*!< HNPS (Bit 8) */
#define FS_GLOBAL_GOTGCS_HNPS_Msk         (0x100UL)                 /*!< HNPS (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGCS_HNPREQ_Pos       (9UL)                     /*!< HNPREQ (Bit 9) */
#define FS_GLOBAL_GOTGCS_HNPREQ_Msk       (0x200UL)                 /*!< HNPREQ (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGCS_HHNPEN_Pos       (10UL)                    /*!< HHNPEN (Bit 10) */
#define FS_GLOBAL_GOTGCS_HHNPEN_Msk       (0x400UL)                 /*!< HHNPEN (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGCS_DHNPEN_Pos       (11UL)                    /*!< DHNPEN (Bit 11) */
#define FS_GLOBAL_GOTGCS_DHNPEN_Msk       (0x800UL)                 /*!< DHNPEN (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGCS_IDPS_Pos         (16UL)                    /*!< IDPS (Bit 16) */
#define FS_GLOBAL_GOTGCS_IDPS_Msk         (0x10000UL)               /*!< IDPS (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGCS_DI_Pos           (17UL)                    /*!< DI (Bit 17) */
#define FS_GLOBAL_GOTGCS_DI_Msk           (0x20000UL)               /*!< DI (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGCS_ASV_Pos          (18UL)                    /*!< ASV (Bit 18) */
#define FS_GLOBAL_GOTGCS_ASV_Msk          (0x40000UL)               /*!< ASV (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGCS_BSV_Pos          (19UL)                    /*!< BSV (Bit 19) */
#define FS_GLOBAL_GOTGCS_BSV_Msk          (0x80000UL)               /*!< BSV (Bitfield-Mask: 0x01) */
/* =======================================================  GOTGINTF  ======================================================== */
#define FS_GLOBAL_GOTGINTF_SESEND_Pos     (2UL)                     /*!< SESEND (Bit 2) */
#define FS_GLOBAL_GOTGINTF_SESEND_Msk     (0x4UL)                   /*!< SESEND (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGINTF_SRPEND_Pos     (8UL)                     /*!< SRPEND (Bit 8) */
#define FS_GLOBAL_GOTGINTF_SRPEND_Msk     (0x100UL)                 /*!< SRPEND (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGINTF_HNPEND_Pos     (9UL)                     /*!< HNPEND (Bit 9) */
#define FS_GLOBAL_GOTGINTF_HNPEND_Msk     (0x200UL)                 /*!< HNPEND (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGINTF_HNPDET_Pos     (17UL)                    /*!< HNPDET (Bit 17) */
#define FS_GLOBAL_GOTGINTF_HNPDET_Msk     (0x20000UL)               /*!< HNPDET (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGINTF_ADTO_Pos       (18UL)                    /*!< ADTO (Bit 18) */
#define FS_GLOBAL_GOTGINTF_ADTO_Msk       (0x40000UL)               /*!< ADTO (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GOTGINTF_DF_Pos         (19UL)                    /*!< DF (Bit 19) */
#define FS_GLOBAL_GOTGINTF_DF_Msk         (0x80000UL)               /*!< DF (Bitfield-Mask: 0x01) */
/* ========================================================  GAHBCS  ========================================================= */
#define FS_GLOBAL_GAHBCS_GINTEN_Pos       (0UL)                     /*!< GINTEN (Bit 0) */
#define FS_GLOBAL_GAHBCS_GINTEN_Msk       (0x1UL)                   /*!< GINTEN (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GAHBCS_TXFTH_Pos        (7UL)                     /*!< TXFTH (Bit 7) */
#define FS_GLOBAL_GAHBCS_TXFTH_Msk        (0x80UL)                  /*!< TXFTH (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GAHBCS_PTXFTH_Pos       (8UL)                     /*!< PTXFTH (Bit 8) */
#define FS_GLOBAL_GAHBCS_PTXFTH_Msk       (0x100UL)                 /*!< PTXFTH (Bitfield-Mask: 0x01) */
/* ========================================================  GUSBCS  ========================================================= */
#define FS_GLOBAL_GUSBCS_TOC_Pos          (0UL)                     /*!< TOC (Bit 0) */
#define FS_GLOBAL_GUSBCS_TOC_Msk          (0x7UL)                   /*!< TOC (Bitfield-Mask: 0x07) */
#define FS_GLOBAL_GUSBCS_SRPCEN_Pos       (8UL)                     /*!< SRPCEN (Bit 8) */
#define FS_GLOBAL_GUSBCS_SRPCEN_Msk       (0x100UL)                 /*!< SRPCEN (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GUSBCS_HNPCEN_Pos       (9UL)                     /*!< HNPCEN (Bit 9) */
#define FS_GLOBAL_GUSBCS_HNPCEN_Msk       (0x200UL)                 /*!< HNPCEN (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GUSBCS_UTT_Pos          (10UL)                    /*!< UTT (Bit 10) */
#define FS_GLOBAL_GUSBCS_UTT_Msk          (0x3c00UL)                /*!< UTT (Bitfield-Mask: 0x0f) */
#define FS_GLOBAL_GUSBCS_FHM_Pos          (29UL)                    /*!< FHM (Bit 29) */
#define FS_GLOBAL_GUSBCS_FHM_Msk          (0x20000000UL)            /*!< FHM (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GUSBCS_FDM_Pos          (30UL)                    /*!< FDM (Bit 30) */
#define FS_GLOBAL_GUSBCS_FDM_Msk          (0x40000000UL)            /*!< FDM (Bitfield-Mask: 0x01) */
/* ========================================================  GRSTCTL  ======================================================== */
#define FS_GLOBAL_GRSTCTL_CSRST_Pos       (0UL)                     /*!< CSRST (Bit 0) */
#define FS_GLOBAL_GRSTCTL_CSRST_Msk       (0x1UL)                   /*!< CSRST (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GRSTCTL_HCSRST_Pos      (1UL)                     /*!< HCSRST (Bit 1) */
#define FS_GLOBAL_GRSTCTL_HCSRST_Msk      (0x2UL)                   /*!< HCSRST (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GRSTCTL_HFCRST_Pos      (2UL)                     /*!< HFCRST (Bit 2) */
#define FS_GLOBAL_GRSTCTL_HFCRST_Msk      (0x4UL)                   /*!< HFCRST (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GRSTCTL_RXFF_Pos        (4UL)                     /*!< RXFF (Bit 4) */
#define FS_GLOBAL_GRSTCTL_RXFF_Msk        (0x10UL)                  /*!< RXFF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GRSTCTL_TXFF_Pos        (5UL)                     /*!< TXFF (Bit 5) */
#define FS_GLOBAL_GRSTCTL_TXFF_Msk        (0x20UL)                  /*!< TXFF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GRSTCTL_TXFNUM_Pos      (6UL)                     /*!< TXFNUM (Bit 6) */
#define FS_GLOBAL_GRSTCTL_TXFNUM_Msk      (0x7c0UL)                 /*!< TXFNUM (Bitfield-Mask: 0x1f) */
/* =========================================================  GINTF  ========================================================= */
#define FS_GLOBAL_GINTF_COPM_Pos          (0UL)                     /*!< COPM (Bit 0) */
#define FS_GLOBAL_GINTF_COPM_Msk          (0x1UL)                   /*!< COPM (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_MFIF_Pos          (1UL)                     /*!< MFIF (Bit 1) */
#define FS_GLOBAL_GINTF_MFIF_Msk          (0x2UL)                   /*!< MFIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_OTGIF_Pos         (2UL)                     /*!< OTGIF (Bit 2) */
#define FS_GLOBAL_GINTF_OTGIF_Msk         (0x4UL)                   /*!< OTGIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_SOF_Pos           (3UL)                     /*!< SOF (Bit 3) */
#define FS_GLOBAL_GINTF_SOF_Msk           (0x8UL)                   /*!< SOF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_RXFNEIF_Pos       (4UL)                     /*!< RXFNEIF (Bit 4) */
#define FS_GLOBAL_GINTF_RXFNEIF_Msk       (0x10UL)                  /*!< RXFNEIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_NPTXFEIF_Pos      (5UL)                     /*!< NPTXFEIF (Bit 5) */
#define FS_GLOBAL_GINTF_NPTXFEIF_Msk      (0x20UL)                  /*!< NPTXFEIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_GNPINAK_Pos       (6UL)                     /*!< GNPINAK (Bit 6) */
#define FS_GLOBAL_GINTF_GNPINAK_Msk       (0x40UL)                  /*!< GNPINAK (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_GONAK_Pos         (7UL)                     /*!< GONAK (Bit 7) */
#define FS_GLOBAL_GINTF_GONAK_Msk         (0x80UL)                  /*!< GONAK (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_ESP_Pos           (10UL)                    /*!< ESP (Bit 10) */
#define FS_GLOBAL_GINTF_ESP_Msk           (0x400UL)                 /*!< ESP (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_SP_Pos            (11UL)                    /*!< SP (Bit 11) */
#define FS_GLOBAL_GINTF_SP_Msk            (0x800UL)                 /*!< SP (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_RST_Pos           (12UL)                    /*!< RST (Bit 12) */
#define FS_GLOBAL_GINTF_RST_Msk           (0x1000UL)                /*!< RST (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_ENUMF_Pos         (13UL)                    /*!< ENUMF (Bit 13) */
#define FS_GLOBAL_GINTF_ENUMF_Msk         (0x2000UL)                /*!< ENUMF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_ISOOPDIF_Pos      (14UL)                    /*!< ISOOPDIF (Bit 14) */
#define FS_GLOBAL_GINTF_ISOOPDIF_Msk      (0x4000UL)                /*!< ISOOPDIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_EOPFIF_Pos        (15UL)                    /*!< EOPFIF (Bit 15) */
#define FS_GLOBAL_GINTF_EOPFIF_Msk        (0x8000UL)                /*!< EOPFIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_IEPIF_Pos         (18UL)                    /*!< IEPIF (Bit 18) */
#define FS_GLOBAL_GINTF_IEPIF_Msk         (0x40000UL)               /*!< IEPIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_OEPIF_Pos         (19UL)                    /*!< OEPIF (Bit 19) */
#define FS_GLOBAL_GINTF_OEPIF_Msk         (0x80000UL)               /*!< OEPIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_ISOINCIF_Pos      (20UL)                    /*!< ISOINCIF (Bit 20) */
#define FS_GLOBAL_GINTF_ISOINCIF_Msk      (0x100000UL)              /*!< ISOINCIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_PXNCIF_ISOONCIF_Pos (21UL)                  /*!< PXNCIF_ISOONCIF (Bit 21) */
#define FS_GLOBAL_GINTF_PXNCIF_ISOONCIF_Msk (0x200000UL)            /*!< PXNCIF_ISOONCIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_HPIF_Pos          (24UL)                    /*!< HPIF (Bit 24) */
#define FS_GLOBAL_GINTF_HPIF_Msk          (0x1000000UL)             /*!< HPIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_HCIF_Pos          (25UL)                    /*!< HCIF (Bit 25) */
#define FS_GLOBAL_GINTF_HCIF_Msk          (0x2000000UL)             /*!< HCIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_PTXFEIF_Pos       (26UL)                    /*!< PTXFEIF (Bit 26) */
#define FS_GLOBAL_GINTF_PTXFEIF_Msk       (0x4000000UL)             /*!< PTXFEIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_IDPSC_Pos         (28UL)                    /*!< IDPSC (Bit 28) */
#define FS_GLOBAL_GINTF_IDPSC_Msk         (0x10000000UL)            /*!< IDPSC (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_DISCIF_Pos        (29UL)                    /*!< DISCIF (Bit 29) */
#define FS_GLOBAL_GINTF_DISCIF_Msk        (0x20000000UL)            /*!< DISCIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_SESIF_Pos         (30UL)                    /*!< SESIF (Bit 30) */
#define FS_GLOBAL_GINTF_SESIF_Msk         (0x40000000UL)            /*!< SESIF (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTF_WKUPIF_Pos        (31UL)                    /*!< WKUPIF (Bit 31) */
#define FS_GLOBAL_GINTF_WKUPIF_Msk        (0x80000000UL)            /*!< WKUPIF (Bitfield-Mask: 0x01) */
/* ========================================================  GINTEN  ========================================================= */
#define FS_GLOBAL_GINTEN_MFIE_Pos         (1UL)                     /*!< MFIE (Bit 1) */
#define FS_GLOBAL_GINTEN_MFIE_Msk         (0x2UL)                   /*!< MFIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_OTGIE_Pos        (2UL)                     /*!< OTGIE (Bit 2) */
#define FS_GLOBAL_GINTEN_OTGIE_Msk        (0x4UL)                   /*!< OTGIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_SOFIE_Pos        (3UL)                     /*!< SOFIE (Bit 3) */
#define FS_GLOBAL_GINTEN_SOFIE_Msk        (0x8UL)                   /*!< SOFIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_RXFNEIE_Pos      (4UL)                     /*!< RXFNEIE (Bit 4) */
#define FS_GLOBAL_GINTEN_RXFNEIE_Msk      (0x10UL)                  /*!< RXFNEIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_NPTXFEIE_Pos     (5UL)                     /*!< NPTXFEIE (Bit 5) */
#define FS_GLOBAL_GINTEN_NPTXFEIE_Msk     (0x20UL)                  /*!< NPTXFEIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_GNPINAKIE_Pos    (6UL)                     /*!< GNPINAKIE (Bit 6) */
#define FS_GLOBAL_GINTEN_GNPINAKIE_Msk    (0x40UL)                  /*!< GNPINAKIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_GONAKIE_Pos      (7UL)                     /*!< GONAKIE (Bit 7) */
#define FS_GLOBAL_GINTEN_GONAKIE_Msk      (0x80UL)                  /*!< GONAKIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_ESPIE_Pos        (10UL)                    /*!< ESPIE (Bit 10) */
#define FS_GLOBAL_GINTEN_ESPIE_Msk        (0x400UL)                 /*!< ESPIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_SPIE_Pos         (11UL)                    /*!< SPIE (Bit 11) */
#define FS_GLOBAL_GINTEN_SPIE_Msk         (0x800UL)                 /*!< SPIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_RSTIE_Pos        (12UL)                    /*!< RSTIE (Bit 12) */
#define FS_GLOBAL_GINTEN_RSTIE_Msk        (0x1000UL)                /*!< RSTIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_ENUMFIE_Pos      (13UL)                    /*!< ENUMFIE (Bit 13) */
#define FS_GLOBAL_GINTEN_ENUMFIE_Msk      (0x2000UL)                /*!< ENUMFIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_ISOOPDIE_Pos     (14UL)                    /*!< ISOOPDIE (Bit 14) */
#define FS_GLOBAL_GINTEN_ISOOPDIE_Msk     (0x4000UL)                /*!< ISOOPDIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_EOPFIE_Pos       (15UL)                    /*!< EOPFIE (Bit 15) */
#define FS_GLOBAL_GINTEN_EOPFIE_Msk       (0x8000UL)                /*!< EOPFIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_IEPIE_Pos        (18UL)                    /*!< IEPIE (Bit 18) */
#define FS_GLOBAL_GINTEN_IEPIE_Msk        (0x40000UL)               /*!< IEPIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_OEPIE_Pos        (19UL)                    /*!< OEPIE (Bit 19) */
#define FS_GLOBAL_GINTEN_OEPIE_Msk        (0x80000UL)               /*!< OEPIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_ISOINCIE_Pos     (20UL)                    /*!< ISOINCIE (Bit 20) */
#define FS_GLOBAL_GINTEN_ISOINCIE_Msk     (0x100000UL)              /*!< ISOINCIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_PXNCIE_ISOONCIE_Pos (21UL)                 /*!< PXNCIE_ISOONCIE (Bit 21) */
#define FS_GLOBAL_GINTEN_PXNCIE_ISOONCIE_Msk (0x200000UL)           /*!< PXNCIE_ISOONCIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_HPIE_Pos         (24UL)                    /*!< HPIE (Bit 24) */
#define FS_GLOBAL_GINTEN_HPIE_Msk         (0x1000000UL)             /*!< HPIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_HCIE_Pos         (25UL)                    /*!< HCIE (Bit 25) */
#define FS_GLOBAL_GINTEN_HCIE_Msk         (0x2000000UL)             /*!< HCIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_PTXFEIE_Pos      (26UL)                    /*!< PTXFEIE (Bit 26) */
#define FS_GLOBAL_GINTEN_PTXFEIE_Msk      (0x4000000UL)             /*!< PTXFEIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_IDPSCIE_Pos      (28UL)                    /*!< IDPSCIE (Bit 28) */
#define FS_GLOBAL_GINTEN_IDPSCIE_Msk      (0x10000000UL)            /*!< IDPSCIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_DISCIE_Pos       (29UL)                    /*!< DISCIE (Bit 29) */
#define FS_GLOBAL_GINTEN_DISCIE_Msk       (0x20000000UL)            /*!< DISCIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_SESIE_Pos        (30UL)                    /*!< SESIE (Bit 30) */
#define FS_GLOBAL_GINTEN_SESIE_Msk        (0x40000000UL)            /*!< SESIE (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GINTEN_WKUPIE_Pos       (31UL)                    /*!< WKUPIE (Bit 31) */
#define FS_GLOBAL_GINTEN_WKUPIE_Msk       (0x80000000UL)            /*!< WKUPIE (Bitfield-Mask: 0x01) */
/* ====================================================  GRSTATR_Device  ===================================================== */
#define FS_GLOBAL_GRSTATR_Device_EPNUM_Pos (0UL)                    /*!< EPNUM (Bit 0) */
#define FS_GLOBAL_GRSTATR_Device_EPNUM_Msk (0xfUL)                  /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_GLOBAL_GRSTATR_Device_BCOUNT_Pos (4UL)                   /*!< BCOUNT (Bit 4) */
#define FS_GLOBAL_GRSTATR_Device_BCOUNT_Msk (0x7ff0UL)              /*!< BCOUNT (Bitfield-Mask: 0x7ff) */
#define FS_GLOBAL_GRSTATR_Device_DPID_Pos (15UL)                    /*!< DPID (Bit 15) */
#define FS_GLOBAL_GRSTATR_Device_DPID_Msk (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03) */
#define FS_GLOBAL_GRSTATR_Device_RPCKST_Pos (17UL)                  /*!< RPCKST (Bit 17) */
#define FS_GLOBAL_GRSTATR_Device_RPCKST_Msk (0x1e0000UL)            /*!< RPCKST (Bitfield-Mask: 0x0f) */
/* =====================================================  GRSTATR_Host  ====================================================== */
#define FS_GLOBAL_GRSTATR_Host_CNUM_Pos   (0UL)                     /*!< CNUM (Bit 0) */
#define FS_GLOBAL_GRSTATR_Host_CNUM_Msk   (0xfUL)                   /*!< CNUM (Bitfield-Mask: 0x0f) */
#define FS_GLOBAL_GRSTATR_Host_BCOUNT_Pos (4UL)                     /*!< BCOUNT (Bit 4) */
#define FS_GLOBAL_GRSTATR_Host_BCOUNT_Msk (0x7ff0UL)                /*!< BCOUNT (Bitfield-Mask: 0x7ff) */
#define FS_GLOBAL_GRSTATR_Host_DPID_Pos   (15UL)                    /*!< DPID (Bit 15) */
#define FS_GLOBAL_GRSTATR_Host_DPID_Msk   (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03) */
#define FS_GLOBAL_GRSTATR_Host_RPCKST_Pos (17UL)                    /*!< RPCKST (Bit 17) */
#define FS_GLOBAL_GRSTATR_Host_RPCKST_Msk (0x1e0000UL)              /*!< RPCKST (Bitfield-Mask: 0x0f) */
/* ====================================================  GRSTATP_Device  ===================================================== */
#define FS_GLOBAL_GRSTATP_Device_EPNUM_Pos (0UL)                    /*!< EPNUM (Bit 0) */
#define FS_GLOBAL_GRSTATP_Device_EPNUM_Msk (0xfUL)                  /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_GLOBAL_GRSTATP_Device_BCOUNT_Pos (4UL)                   /*!< BCOUNT (Bit 4) */
#define FS_GLOBAL_GRSTATP_Device_BCOUNT_Msk (0x7ff0UL)              /*!< BCOUNT (Bitfield-Mask: 0x7ff) */
#define FS_GLOBAL_GRSTATP_Device_DPID_Pos (15UL)                    /*!< DPID (Bit 15) */
#define FS_GLOBAL_GRSTATP_Device_DPID_Msk (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03) */
#define FS_GLOBAL_GRSTATP_Device_RPCKST_Pos (17UL)                  /*!< RPCKST (Bit 17) */
#define FS_GLOBAL_GRSTATP_Device_RPCKST_Msk (0x1e0000UL)            /*!< RPCKST (Bitfield-Mask: 0x0f) */
/* =====================================================  GRSTATP_Host  ====================================================== */
#define FS_GLOBAL_GRSTATP_Host_CNUM_Pos   (0UL)                     /*!< CNUM (Bit 0) */
#define FS_GLOBAL_GRSTATP_Host_CNUM_Msk   (0xfUL)                   /*!< CNUM (Bitfield-Mask: 0x0f) */
#define FS_GLOBAL_GRSTATP_Host_BCOUNT_Pos (4UL)                     /*!< BCOUNT (Bit 4) */
#define FS_GLOBAL_GRSTATP_Host_BCOUNT_Msk (0x7ff0UL)                /*!< BCOUNT (Bitfield-Mask: 0x7ff) */
#define FS_GLOBAL_GRSTATP_Host_DPID_Pos   (15UL)                    /*!< DPID (Bit 15) */
#define FS_GLOBAL_GRSTATP_Host_DPID_Msk   (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03) */
#define FS_GLOBAL_GRSTATP_Host_RPCKST_Pos (17UL)                    /*!< RPCKST (Bit 17) */
#define FS_GLOBAL_GRSTATP_Host_RPCKST_Msk (0x1e0000UL)              /*!< RPCKST (Bitfield-Mask: 0x0f) */
/* ========================================================  GRFLEN  ========================================================= */
#define FS_GLOBAL_GRFLEN_RXFD_Pos         (0UL)                     /*!< RXFD (Bit 0) */
#define FS_GLOBAL_GRFLEN_RXFD_Msk         (0xffffUL)                /*!< RXFD (Bitfield-Mask: 0xffff) */
/* =======================================================  HNPTFLEN  ======================================================== */
#define FS_GLOBAL_HNPTFLEN_HNPTXRSAR_Pos  (0UL)                     /*!< HNPTXRSAR (Bit 0) */
#define FS_GLOBAL_HNPTFLEN_HNPTXRSAR_Msk  (0xffffUL)                /*!< HNPTXRSAR (Bitfield-Mask: 0xffff) */
#define FS_GLOBAL_HNPTFLEN_HNPTXFD_Pos    (16UL)                    /*!< HNPTXFD (Bit 16) */
#define FS_GLOBAL_HNPTFLEN_HNPTXFD_Msk    (0xffff0000UL)            /*!< HNPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP0TFLEN  ======================================================= */
#define FS_GLOBAL_DIEP0TFLEN_IEP0TXFD_Pos (0UL)                     /*!< IEP0TXFD (Bit 0) */
#define FS_GLOBAL_DIEP0TFLEN_IEP0TXFD_Msk (0xffffUL)                /*!< IEP0TXFD (Bitfield-Mask: 0xffff) */
#define FS_GLOBAL_DIEP0TFLEN_IEP0TXRSAR_Pos (16UL)                  /*!< IEP0TXRSAR (Bit 16) */
#define FS_GLOBAL_DIEP0TFLEN_IEP0TXRSAR_Msk (0xffff0000UL)          /*!< IEP0TXRSAR (Bitfield-Mask: 0xffff) */
/* ======================================================  HNPTFQSTAT  ======================================================= */
#define FS_GLOBAL_HNPTFQSTAT_NPTXFS_Pos   (0UL)                     /*!< NPTXFS (Bit 0) */
#define FS_GLOBAL_HNPTFQSTAT_NPTXFS_Msk   (0xffffUL)                /*!< NPTXFS (Bitfield-Mask: 0xffff) */
#define FS_GLOBAL_HNPTFQSTAT_NPTXRQS_Pos  (16UL)                    /*!< NPTXRQS (Bit 16) */
#define FS_GLOBAL_HNPTFQSTAT_NPTXRQS_Msk  (0xff0000UL)              /*!< NPTXRQS (Bitfield-Mask: 0xff) */
#define FS_GLOBAL_HNPTFQSTAT_NPTXRQTOP_Pos (24UL)                   /*!< NPTXRQTOP (Bit 24) */
#define FS_GLOBAL_HNPTFQSTAT_NPTXRQTOP_Msk (0x7f000000UL)           /*!< NPTXRQTOP (Bitfield-Mask: 0x7f) */
/* =========================================================  GCCFG  ========================================================= */
#define FS_GLOBAL_GCCFG_PWRON_Pos         (16UL)                    /*!< PWRON (Bit 16) */
#define FS_GLOBAL_GCCFG_PWRON_Msk         (0x10000UL)               /*!< PWRON (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GCCFG_VBUSACEN_Pos      (18UL)                    /*!< VBUSACEN (Bit 18) */
#define FS_GLOBAL_GCCFG_VBUSACEN_Msk      (0x40000UL)               /*!< VBUSACEN (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GCCFG_VBUSBCEN_Pos      (19UL)                    /*!< VBUSBCEN (Bit 19) */
#define FS_GLOBAL_GCCFG_VBUSBCEN_Msk      (0x80000UL)               /*!< VBUSBCEN (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GCCFG_SOFOEN_Pos        (20UL)                    /*!< SOFOEN (Bit 20) */
#define FS_GLOBAL_GCCFG_SOFOEN_Msk        (0x100000UL)              /*!< SOFOEN (Bitfield-Mask: 0x01) */
#define FS_GLOBAL_GCCFG_VBUSIG_Pos        (21UL)                    /*!< VBUSIG (Bit 21) */
#define FS_GLOBAL_GCCFG_VBUSIG_Msk        (0x200000UL)              /*!< VBUSIG (Bitfield-Mask: 0x01) */
/* ==========================================================  CID  ========================================================== */
#define FS_GLOBAL_CID_CID_Pos             (0UL)                     /*!< CID (Bit 0) */
#define FS_GLOBAL_CID_CID_Msk             (0xffffffffUL)            /*!< CID (Bitfield-Mask: 0xffffffff) */
/* ========================================================  HPTFLEN  ======================================================== */
#define FS_GLOBAL_HPTFLEN_HPTXFSAR_Pos    (0UL)                     /*!< HPTXFSAR (Bit 0) */
#define FS_GLOBAL_HPTFLEN_HPTXFSAR_Msk    (0xffffUL)                /*!< HPTXFSAR (Bitfield-Mask: 0xffff) */
#define FS_GLOBAL_HPTFLEN_HPTXFD_Pos      (16UL)                    /*!< HPTXFD (Bit 16) */
#define FS_GLOBAL_HPTFLEN_HPTXFD_Msk      (0xffff0000UL)            /*!< HPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP1TFLEN  ======================================================= */
#define FS_GLOBAL_DIEP1TFLEN_IEPTXRSAR_Pos (0UL)                    /*!< IEPTXRSAR (Bit 0) */
#define FS_GLOBAL_DIEP1TFLEN_IEPTXRSAR_Msk (0xffffUL)               /*!< IEPTXRSAR (Bitfield-Mask: 0xffff) */
#define FS_GLOBAL_DIEP1TFLEN_IEPTXFD_Pos  (16UL)                    /*!< IEPTXFD (Bit 16) */
#define FS_GLOBAL_DIEP1TFLEN_IEPTXFD_Msk  (0xffff0000UL)            /*!< IEPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP2TFLEN  ======================================================= */
#define FS_GLOBAL_DIEP2TFLEN_IEPTXRSAR_Pos (0UL)                    /*!< IEPTXRSAR (Bit 0) */
#define FS_GLOBAL_DIEP2TFLEN_IEPTXRSAR_Msk (0xffffUL)               /*!< IEPTXRSAR (Bitfield-Mask: 0xffff) */
#define FS_GLOBAL_DIEP2TFLEN_IEPTXFD_Pos  (16UL)                    /*!< IEPTXFD (Bit 16) */
#define FS_GLOBAL_DIEP2TFLEN_IEPTXFD_Msk  (0xffff0000UL)            /*!< IEPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP3TFLEN  ======================================================= */
#define FS_GLOBAL_DIEP3TFLEN_IEPTXRSAR_Pos (0UL)                    /*!< IEPTXRSAR (Bit 0) */
#define FS_GLOBAL_DIEP3TFLEN_IEPTXRSAR_Msk (0xffffUL)               /*!< IEPTXRSAR (Bitfield-Mask: 0xffff) */
#define FS_GLOBAL_DIEP3TFLEN_IEPTXFD_Pos  (16UL)                    /*!< IEPTXFD (Bit 16) */
#define FS_GLOBAL_DIEP3TFLEN_IEPTXFD_Msk  (0xffff0000UL)            /*!< IEPTXFD (Bitfield-Mask: 0xffff) */


/* =========================================================================================================================== */
/* ================                                          FS_HOST                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  HCTL  ========================================================== */
#define FS_HOST_HCTL_CLKSEL_Pos           (0UL)                     /*!< CLKSEL (Bit 0) */
#define FS_HOST_HCTL_CLKSEL_Msk           (0x3UL)                   /*!< CLKSEL (Bitfield-Mask: 0x03) */
/* ==========================================================  HFT  ========================================================== */
#define FS_HOST_HFT_FRI_Pos               (0UL)                     /*!< FRI (Bit 0) */
#define FS_HOST_HFT_FRI_Msk               (0xffffUL)                /*!< FRI (Bitfield-Mask: 0xffff) */
/* ========================================================  HFINFR  ========================================================= */
#define FS_HOST_HFINFR_FRNUM_Pos          (0UL)                     /*!< FRNUM (Bit 0) */
#define FS_HOST_HFINFR_FRNUM_Msk          (0xffffUL)                /*!< FRNUM (Bitfield-Mask: 0xffff) */
#define FS_HOST_HFINFR_FRT_Pos            (16UL)                    /*!< FRT (Bit 16) */
#define FS_HOST_HFINFR_FRT_Msk            (0xffff0000UL)            /*!< FRT (Bitfield-Mask: 0xffff) */
/* =======================================================  HPTFQSTAT  ======================================================= */
#define FS_HOST_HPTFQSTAT_PTXFS_Pos       (0UL)                     /*!< PTXFS (Bit 0) */
#define FS_HOST_HPTFQSTAT_PTXFS_Msk       (0xffffUL)                /*!< PTXFS (Bitfield-Mask: 0xffff) */
#define FS_HOST_HPTFQSTAT_PTXREQS_Pos     (16UL)                    /*!< PTXREQS (Bit 16) */
#define FS_HOST_HPTFQSTAT_PTXREQS_Msk     (0xff0000UL)              /*!< PTXREQS (Bitfield-Mask: 0xff) */
#define FS_HOST_HPTFQSTAT_PTXREQT_Pos     (24UL)                    /*!< PTXREQT (Bit 24) */
#define FS_HOST_HPTFQSTAT_PTXREQT_Msk     (0xff000000UL)            /*!< PTXREQT (Bitfield-Mask: 0xff) */
/* ========================================================  HACHINT  ======================================================== */
#define FS_HOST_HACHINT_HACHINT_Pos       (0UL)                     /*!< HACHINT (Bit 0) */
#define FS_HOST_HACHINT_HACHINT_Msk       (0xffUL)                  /*!< HACHINT (Bitfield-Mask: 0xff) */
/* =======================================================  HACHINTEN  ======================================================= */
#define FS_HOST_HACHINTEN_CINTEN_Pos      (0UL)                     /*!< CINTEN (Bit 0) */
#define FS_HOST_HACHINTEN_CINTEN_Msk      (0xffUL)                  /*!< CINTEN (Bitfield-Mask: 0xff) */
/* =========================================================  HPCS  ========================================================== */
#define FS_HOST_HPCS_PCST_Pos             (0UL)                     /*!< PCST (Bit 0) */
#define FS_HOST_HPCS_PCST_Msk             (0x1UL)                   /*!< PCST (Bitfield-Mask: 0x01) */
#define FS_HOST_HPCS_PCD_Pos              (1UL)                     /*!< PCD (Bit 1) */
#define FS_HOST_HPCS_PCD_Msk              (0x2UL)                   /*!< PCD (Bitfield-Mask: 0x01) */
#define FS_HOST_HPCS_PE_Pos               (2UL)                     /*!< PE (Bit 2) */
#define FS_HOST_HPCS_PE_Msk               (0x4UL)                   /*!< PE (Bitfield-Mask: 0x01) */
#define FS_HOST_HPCS_PEDC_Pos             (3UL)                     /*!< PEDC (Bit 3) */
#define FS_HOST_HPCS_PEDC_Msk             (0x8UL)                   /*!< PEDC (Bitfield-Mask: 0x01) */
#define FS_HOST_HPCS_PREM_Pos             (6UL)                     /*!< PREM (Bit 6) */
#define FS_HOST_HPCS_PREM_Msk             (0x40UL)                  /*!< PREM (Bitfield-Mask: 0x01) */
#define FS_HOST_HPCS_PSP_Pos              (7UL)                     /*!< PSP (Bit 7) */
#define FS_HOST_HPCS_PSP_Msk              (0x80UL)                  /*!< PSP (Bitfield-Mask: 0x01) */
#define FS_HOST_HPCS_PRST_Pos             (8UL)                     /*!< PRST (Bit 8) */
#define FS_HOST_HPCS_PRST_Msk             (0x100UL)                 /*!< PRST (Bitfield-Mask: 0x01) */
#define FS_HOST_HPCS_PLST_Pos             (10UL)                    /*!< PLST (Bit 10) */
#define FS_HOST_HPCS_PLST_Msk             (0xc00UL)                 /*!< PLST (Bitfield-Mask: 0x03) */
#define FS_HOST_HPCS_PP_Pos               (12UL)                    /*!< PP (Bit 12) */
#define FS_HOST_HPCS_PP_Msk               (0x1000UL)                /*!< PP (Bitfield-Mask: 0x01) */
#define FS_HOST_HPCS_PS_Pos               (17UL)                    /*!< PS (Bit 17) */
#define FS_HOST_HPCS_PS_Msk               (0x60000UL)               /*!< PS (Bitfield-Mask: 0x03) */
/* ========================================================  HCH0CTL  ======================================================== */
#define FS_HOST_HCH0CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define FS_HOST_HCH0CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define FS_HOST_HCH0CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define FS_HOST_HCH0CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_HOST_HCH0CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define FS_HOST_HCH0CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define FS_HOST_HCH0CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_HOST_HCH0CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_HOST_HCH0CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define FS_HOST_HCH0CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define FS_HOST_HCH0CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define FS_HOST_HCH0CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define FS_HOST_HCH0CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define FS_HOST_HCH0CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH1CTL  ======================================================== */
#define FS_HOST_HCH1CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define FS_HOST_HCH1CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define FS_HOST_HCH1CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define FS_HOST_HCH1CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_HOST_HCH1CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define FS_HOST_HCH1CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define FS_HOST_HCH1CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_HOST_HCH1CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_HOST_HCH1CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define FS_HOST_HCH1CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define FS_HOST_HCH1CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define FS_HOST_HCH1CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define FS_HOST_HCH1CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define FS_HOST_HCH1CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH2CTL  ======================================================== */
#define FS_HOST_HCH2CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define FS_HOST_HCH2CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define FS_HOST_HCH2CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define FS_HOST_HCH2CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_HOST_HCH2CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define FS_HOST_HCH2CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define FS_HOST_HCH2CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_HOST_HCH2CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_HOST_HCH2CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define FS_HOST_HCH2CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define FS_HOST_HCH2CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define FS_HOST_HCH2CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define FS_HOST_HCH2CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define FS_HOST_HCH2CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH3CTL  ======================================================== */
#define FS_HOST_HCH3CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define FS_HOST_HCH3CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define FS_HOST_HCH3CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define FS_HOST_HCH3CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_HOST_HCH3CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define FS_HOST_HCH3CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define FS_HOST_HCH3CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_HOST_HCH3CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_HOST_HCH3CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define FS_HOST_HCH3CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define FS_HOST_HCH3CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define FS_HOST_HCH3CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define FS_HOST_HCH3CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define FS_HOST_HCH3CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH4CTL  ======================================================== */
#define FS_HOST_HCH4CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define FS_HOST_HCH4CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define FS_HOST_HCH4CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define FS_HOST_HCH4CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_HOST_HCH4CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define FS_HOST_HCH4CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define FS_HOST_HCH4CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_HOST_HCH4CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_HOST_HCH4CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define FS_HOST_HCH4CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define FS_HOST_HCH4CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define FS_HOST_HCH4CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define FS_HOST_HCH4CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define FS_HOST_HCH4CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH5CTL  ======================================================== */
#define FS_HOST_HCH5CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define FS_HOST_HCH5CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define FS_HOST_HCH5CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define FS_HOST_HCH5CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_HOST_HCH5CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define FS_HOST_HCH5CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define FS_HOST_HCH5CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_HOST_HCH5CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_HOST_HCH5CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define FS_HOST_HCH5CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define FS_HOST_HCH5CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define FS_HOST_HCH5CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define FS_HOST_HCH5CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define FS_HOST_HCH5CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH6CTL  ======================================================== */
#define FS_HOST_HCH6CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define FS_HOST_HCH6CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define FS_HOST_HCH6CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define FS_HOST_HCH6CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_HOST_HCH6CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define FS_HOST_HCH6CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define FS_HOST_HCH6CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_HOST_HCH6CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_HOST_HCH6CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define FS_HOST_HCH6CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define FS_HOST_HCH6CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define FS_HOST_HCH6CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define FS_HOST_HCH6CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define FS_HOST_HCH6CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH7CTL  ======================================================== */
#define FS_HOST_HCH7CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define FS_HOST_HCH7CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define FS_HOST_HCH7CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define FS_HOST_HCH7CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define FS_HOST_HCH7CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define FS_HOST_HCH7CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define FS_HOST_HCH7CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_HOST_HCH7CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_HOST_HCH7CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define FS_HOST_HCH7CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define FS_HOST_HCH7CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define FS_HOST_HCH7CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define FS_HOST_HCH7CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define FS_HOST_HCH7CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH0INTF  ======================================================== */
#define FS_HOST_HCH0INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define FS_HOST_HCH0INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define FS_HOST_HCH0INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define FS_HOST_HCH0INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define FS_HOST_HCH0INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define FS_HOST_HCH0INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define FS_HOST_HCH0INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define FS_HOST_HCH0INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define FS_HOST_HCH0INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define FS_HOST_HCH0INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH1INTF  ======================================================== */
#define FS_HOST_HCH1INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define FS_HOST_HCH1INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define FS_HOST_HCH1INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define FS_HOST_HCH1INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define FS_HOST_HCH1INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define FS_HOST_HCH1INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define FS_HOST_HCH1INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define FS_HOST_HCH1INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define FS_HOST_HCH1INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define FS_HOST_HCH1INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH2INTF  ======================================================== */
#define FS_HOST_HCH2INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define FS_HOST_HCH2INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define FS_HOST_HCH2INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define FS_HOST_HCH2INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define FS_HOST_HCH2INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define FS_HOST_HCH2INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define FS_HOST_HCH2INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define FS_HOST_HCH2INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define FS_HOST_HCH2INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define FS_HOST_HCH2INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH3INTF  ======================================================== */
#define FS_HOST_HCH3INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define FS_HOST_HCH3INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define FS_HOST_HCH3INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define FS_HOST_HCH3INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define FS_HOST_HCH3INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define FS_HOST_HCH3INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define FS_HOST_HCH3INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define FS_HOST_HCH3INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define FS_HOST_HCH3INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define FS_HOST_HCH3INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH4INTF  ======================================================== */
#define FS_HOST_HCH4INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define FS_HOST_HCH4INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define FS_HOST_HCH4INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define FS_HOST_HCH4INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define FS_HOST_HCH4INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define FS_HOST_HCH4INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define FS_HOST_HCH4INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define FS_HOST_HCH4INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define FS_HOST_HCH4INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define FS_HOST_HCH4INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH5INTF  ======================================================== */
#define FS_HOST_HCH5INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define FS_HOST_HCH5INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define FS_HOST_HCH5INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define FS_HOST_HCH5INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define FS_HOST_HCH5INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define FS_HOST_HCH5INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define FS_HOST_HCH5INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define FS_HOST_HCH5INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define FS_HOST_HCH5INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define FS_HOST_HCH5INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH6INTF  ======================================================== */
#define FS_HOST_HCH6INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define FS_HOST_HCH6INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define FS_HOST_HCH6INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define FS_HOST_HCH6INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define FS_HOST_HCH6INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define FS_HOST_HCH6INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define FS_HOST_HCH6INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define FS_HOST_HCH6INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define FS_HOST_HCH6INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define FS_HOST_HCH6INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH7INTF  ======================================================== */
#define FS_HOST_HCH7INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define FS_HOST_HCH7INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define FS_HOST_HCH7INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define FS_HOST_HCH7INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define FS_HOST_HCH7INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define FS_HOST_HCH7INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define FS_HOST_HCH7INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define FS_HOST_HCH7INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define FS_HOST_HCH7INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define FS_HOST_HCH7INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH0INTEN  ======================================================= */
#define FS_HOST_HCH0INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define FS_HOST_HCH0INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define FS_HOST_HCH0INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define FS_HOST_HCH0INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define FS_HOST_HCH0INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define FS_HOST_HCH0INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define FS_HOST_HCH0INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define FS_HOST_HCH0INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define FS_HOST_HCH0INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH0INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define FS_HOST_HCH0INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH1INTEN  ======================================================= */
#define FS_HOST_HCH1INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define FS_HOST_HCH1INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define FS_HOST_HCH1INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define FS_HOST_HCH1INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define FS_HOST_HCH1INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define FS_HOST_HCH1INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define FS_HOST_HCH1INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define FS_HOST_HCH1INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define FS_HOST_HCH1INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH1INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define FS_HOST_HCH1INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH2INTEN  ======================================================= */
#define FS_HOST_HCH2INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define FS_HOST_HCH2INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define FS_HOST_HCH2INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define FS_HOST_HCH2INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define FS_HOST_HCH2INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define FS_HOST_HCH2INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define FS_HOST_HCH2INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define FS_HOST_HCH2INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define FS_HOST_HCH2INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH2INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define FS_HOST_HCH2INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH3INTEN  ======================================================= */
#define FS_HOST_HCH3INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define FS_HOST_HCH3INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define FS_HOST_HCH3INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define FS_HOST_HCH3INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define FS_HOST_HCH3INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define FS_HOST_HCH3INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define FS_HOST_HCH3INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define FS_HOST_HCH3INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define FS_HOST_HCH3INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH3INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define FS_HOST_HCH3INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH4INTEN  ======================================================= */
#define FS_HOST_HCH4INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define FS_HOST_HCH4INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define FS_HOST_HCH4INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define FS_HOST_HCH4INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define FS_HOST_HCH4INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define FS_HOST_HCH4INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define FS_HOST_HCH4INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define FS_HOST_HCH4INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define FS_HOST_HCH4INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH4INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define FS_HOST_HCH4INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH5INTEN  ======================================================= */
#define FS_HOST_HCH5INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define FS_HOST_HCH5INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define FS_HOST_HCH5INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define FS_HOST_HCH5INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define FS_HOST_HCH5INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define FS_HOST_HCH5INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define FS_HOST_HCH5INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define FS_HOST_HCH5INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define FS_HOST_HCH5INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH5INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define FS_HOST_HCH5INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH6INTEN  ======================================================= */
#define FS_HOST_HCH6INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define FS_HOST_HCH6INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define FS_HOST_HCH6INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define FS_HOST_HCH6INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define FS_HOST_HCH6INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define FS_HOST_HCH6INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define FS_HOST_HCH6INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define FS_HOST_HCH6INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define FS_HOST_HCH6INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH6INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define FS_HOST_HCH6INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH7INTEN  ======================================================= */
#define FS_HOST_HCH7INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define FS_HOST_HCH7INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define FS_HOST_HCH7INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define FS_HOST_HCH7INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define FS_HOST_HCH7INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define FS_HOST_HCH7INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define FS_HOST_HCH7INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define FS_HOST_HCH7INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define FS_HOST_HCH7INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define FS_HOST_HCH7INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define FS_HOST_HCH7INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* ========================================================  HCH0LEN  ======================================================== */
#define FS_HOST_HCH0LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define FS_HOST_HCH0LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define FS_HOST_HCH0LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define FS_HOST_HCH0LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_HOST_HCH0LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define FS_HOST_HCH0LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
/* ========================================================  HCH1LEN  ======================================================== */
#define FS_HOST_HCH1LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define FS_HOST_HCH1LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define FS_HOST_HCH1LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define FS_HOST_HCH1LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_HOST_HCH1LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define FS_HOST_HCH1LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
/* ========================================================  HCH2LEN  ======================================================== */
#define FS_HOST_HCH2LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define FS_HOST_HCH2LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define FS_HOST_HCH2LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define FS_HOST_HCH2LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_HOST_HCH2LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define FS_HOST_HCH2LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
/* ========================================================  HCH3LEN  ======================================================== */
#define FS_HOST_HCH3LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define FS_HOST_HCH3LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define FS_HOST_HCH3LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define FS_HOST_HCH3LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_HOST_HCH3LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define FS_HOST_HCH3LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
/* ========================================================  HCH4LEN  ======================================================== */
#define FS_HOST_HCH4LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define FS_HOST_HCH4LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define FS_HOST_HCH4LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define FS_HOST_HCH4LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_HOST_HCH4LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define FS_HOST_HCH4LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
/* ========================================================  HCH5LEN  ======================================================== */
#define FS_HOST_HCH5LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define FS_HOST_HCH5LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define FS_HOST_HCH5LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define FS_HOST_HCH5LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_HOST_HCH5LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define FS_HOST_HCH5LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
/* ========================================================  HCH6LEN  ======================================================== */
#define FS_HOST_HCH6LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define FS_HOST_HCH6LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define FS_HOST_HCH6LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define FS_HOST_HCH6LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_HOST_HCH6LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define FS_HOST_HCH6LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
/* ========================================================  HCH7LEN  ======================================================== */
#define FS_HOST_HCH7LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define FS_HOST_HCH7LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define FS_HOST_HCH7LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define FS_HOST_HCH7LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_HOST_HCH7LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define FS_HOST_HCH7LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */


/* =========================================================================================================================== */
/* ================                                         FS_DEVICE                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  DCFG  ========================================================== */
#define FS_DEVICE_DCFG_DS_Pos             (0UL)                     /*!< DS (Bit 0) */
#define FS_DEVICE_DCFG_DS_Msk             (0x3UL)                   /*!< DS (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DCFG_NZLSOH_Pos         (2UL)                     /*!< NZLSOH (Bit 2) */
#define FS_DEVICE_DCFG_NZLSOH_Msk         (0x4UL)                   /*!< NZLSOH (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DCFG_DAR_Pos            (4UL)                     /*!< DAR (Bit 4) */
#define FS_DEVICE_DCFG_DAR_Msk            (0x7f0UL)                 /*!< DAR (Bitfield-Mask: 0x7f) */
#define FS_DEVICE_DCFG_EOPFT_Pos          (11UL)                    /*!< EOPFT (Bit 11) */
#define FS_DEVICE_DCFG_EOPFT_Msk          (0x1800UL)                /*!< EOPFT (Bitfield-Mask: 0x03) */
/* =========================================================  DCTL  ========================================================== */
#define FS_DEVICE_DCTL_RWKUP_Pos          (0UL)                     /*!< RWKUP (Bit 0) */
#define FS_DEVICE_DCTL_RWKUP_Msk          (0x1UL)                   /*!< RWKUP (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DCTL_SD_Pos             (1UL)                     /*!< SD (Bit 1) */
#define FS_DEVICE_DCTL_SD_Msk             (0x2UL)                   /*!< SD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DCTL_GINS_Pos           (2UL)                     /*!< GINS (Bit 2) */
#define FS_DEVICE_DCTL_GINS_Msk           (0x4UL)                   /*!< GINS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DCTL_GONS_Pos           (3UL)                     /*!< GONS (Bit 3) */
#define FS_DEVICE_DCTL_GONS_Msk           (0x8UL)                   /*!< GONS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DCTL_SGINAK_Pos         (7UL)                     /*!< SGINAK (Bit 7) */
#define FS_DEVICE_DCTL_SGINAK_Msk         (0x80UL)                  /*!< SGINAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DCTL_CGINAK_Pos         (8UL)                     /*!< CGINAK (Bit 8) */
#define FS_DEVICE_DCTL_CGINAK_Msk         (0x100UL)                 /*!< CGINAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DCTL_SGONAK_Pos         (9UL)                     /*!< SGONAK (Bit 9) */
#define FS_DEVICE_DCTL_SGONAK_Msk         (0x200UL)                 /*!< SGONAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DCTL_CGONAK_Pos         (10UL)                    /*!< CGONAK (Bit 10) */
#define FS_DEVICE_DCTL_CGONAK_Msk         (0x400UL)                 /*!< CGONAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DCTL_POIF_Pos           (11UL)                    /*!< POIF (Bit 11) */
#define FS_DEVICE_DCTL_POIF_Msk           (0x800UL)                 /*!< POIF (Bitfield-Mask: 0x01) */
/* =========================================================  DSTAT  ========================================================= */
#define FS_DEVICE_DSTAT_SPST_Pos          (0UL)                     /*!< SPST (Bit 0) */
#define FS_DEVICE_DSTAT_SPST_Msk          (0x1UL)                   /*!< SPST (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DSTAT_ES_Pos            (1UL)                     /*!< ES (Bit 1) */
#define FS_DEVICE_DSTAT_ES_Msk            (0x6UL)                   /*!< ES (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DSTAT_FNRSOF_Pos        (8UL)                     /*!< FNRSOF (Bit 8) */
#define FS_DEVICE_DSTAT_FNRSOF_Msk        (0x3fff00UL)              /*!< FNRSOF (Bitfield-Mask: 0x3fff) */
/* =======================================================  DIEPINTEN  ======================================================= */
#define FS_DEVICE_DIEPINTEN_TFEN_Pos      (0UL)                     /*!< TFEN (Bit 0) */
#define FS_DEVICE_DIEPINTEN_TFEN_Msk      (0x1UL)                   /*!< TFEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEPINTEN_EPDISEN_Pos   (1UL)                     /*!< EPDISEN (Bit 1) */
#define FS_DEVICE_DIEPINTEN_EPDISEN_Msk   (0x2UL)                   /*!< EPDISEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEPINTEN_CITOEN_Pos    (3UL)                     /*!< CITOEN (Bit 3) */
#define FS_DEVICE_DIEPINTEN_CITOEN_Msk    (0x8UL)                   /*!< CITOEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEPINTEN_EPTXFUDEN_Pos (4UL)                     /*!< EPTXFUDEN (Bit 4) */
#define FS_DEVICE_DIEPINTEN_EPTXFUDEN_Msk (0x10UL)                  /*!< EPTXFUDEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEPINTEN_IEPNEEN_Pos   (6UL)                     /*!< IEPNEEN (Bit 6) */
#define FS_DEVICE_DIEPINTEN_IEPNEEN_Msk   (0x40UL)                  /*!< IEPNEEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEPINTEN_TXFEEN_Pos    (7UL)                     /*!< TXFEEN (Bit 7) */
#define FS_DEVICE_DIEPINTEN_TXFEEN_Msk    (0x80UL)                  /*!< TXFEEN (Bitfield-Mask: 0x01) */
/* =======================================================  DOEPINTEN  ======================================================= */
#define FS_DEVICE_DOEPINTEN_TFEN_Pos      (0UL)                     /*!< TFEN (Bit 0) */
#define FS_DEVICE_DOEPINTEN_TFEN_Msk      (0x1UL)                   /*!< TFEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEPINTEN_EPDISEN_Pos   (1UL)                     /*!< EPDISEN (Bit 1) */
#define FS_DEVICE_DOEPINTEN_EPDISEN_Msk   (0x2UL)                   /*!< EPDISEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEPINTEN_STPFEN_Pos    (3UL)                     /*!< STPFEN (Bit 3) */
#define FS_DEVICE_DOEPINTEN_STPFEN_Msk    (0x8UL)                   /*!< STPFEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEPINTEN_EPRXFOVREN_Pos (4UL)                    /*!< EPRXFOVREN (Bit 4) */
#define FS_DEVICE_DOEPINTEN_EPRXFOVREN_Msk (0x10UL)                 /*!< EPRXFOVREN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEPINTEN_BTBSTPEN_Pos  (6UL)                     /*!< BTBSTPEN (Bit 6) */
#define FS_DEVICE_DOEPINTEN_BTBSTPEN_Msk  (0x40UL)                  /*!< BTBSTPEN (Bitfield-Mask: 0x01) */
/* ========================================================  DAEPINT  ======================================================== */
#define FS_DEVICE_DAEPINT_IEPITB_Pos      (0UL)                     /*!< IEPITB (Bit 0) */
#define FS_DEVICE_DAEPINT_IEPITB_Msk      (0xfUL)                   /*!< IEPITB (Bitfield-Mask: 0x0f) */
#define FS_DEVICE_DAEPINT_OEPITB_Pos      (16UL)                    /*!< OEPITB (Bit 16) */
#define FS_DEVICE_DAEPINT_OEPITB_Msk      (0xf0000UL)               /*!< OEPITB (Bitfield-Mask: 0x0f) */
/* =======================================================  DAEPINTEN  ======================================================= */
#define FS_DEVICE_DAEPINTEN_IEPIE_Pos     (0UL)                     /*!< IEPIE (Bit 0) */
#define FS_DEVICE_DAEPINTEN_IEPIE_Msk     (0xfUL)                   /*!< IEPIE (Bitfield-Mask: 0x0f) */
#define FS_DEVICE_DAEPINTEN_OEPIE_Pos     (16UL)                    /*!< OEPIE (Bit 16) */
#define FS_DEVICE_DAEPINTEN_OEPIE_Msk     (0xf0000UL)               /*!< OEPIE (Bitfield-Mask: 0x0f) */
/* ========================================================  DVBUSDT  ======================================================== */
#define FS_DEVICE_DVBUSDT_DVBUSDT_Pos     (0UL)                     /*!< DVBUSDT (Bit 0) */
#define FS_DEVICE_DVBUSDT_DVBUSDT_Msk     (0xffffUL)                /*!< DVBUSDT (Bitfield-Mask: 0xffff) */
/* ========================================================  DVBUSPT  ======================================================== */
#define FS_DEVICE_DVBUSPT_DVBUSPT_Pos     (0UL)                     /*!< DVBUSPT (Bit 0) */
#define FS_DEVICE_DVBUSPT_DVBUSPT_Msk     (0xfffUL)                 /*!< DVBUSPT (Bitfield-Mask: 0xfff) */
/* ======================================================  DIEPFEINTEN  ====================================================== */
#define FS_DEVICE_DIEPFEINTEN_IEPTXFEIE_Pos (0UL)                   /*!< IEPTXFEIE (Bit 0) */
#define FS_DEVICE_DIEPFEINTEN_IEPTXFEIE_Msk (0xfUL)                 /*!< IEPTXFEIE (Bitfield-Mask: 0x0f) */
/* =======================================================  DIEP0CTL  ======================================================== */
#define FS_DEVICE_DIEP0CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define FS_DEVICE_DIEP0CTL_MPL_Msk        (0x3UL)                   /*!< MPL (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DIEP0CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define FS_DEVICE_DIEP0CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define FS_DEVICE_DIEP0CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_DEVICE_DIEP0CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DIEP0CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define FS_DEVICE_DIEP0CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define FS_DEVICE_DIEP0CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define FS_DEVICE_DIEP0CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define FS_DEVICE_DIEP0CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define FS_DEVICE_DIEP0CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define FS_DEVICE_DIEP0CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define FS_DEVICE_DIEP0CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP1CTL  ======================================================== */
#define FS_DEVICE_DIEP1CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define FS_DEVICE_DIEP1CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define FS_DEVICE_DIEP1CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define FS_DEVICE_DIEP1CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define FS_DEVICE_DIEP1CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define FS_DEVICE_DIEP1CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define FS_DEVICE_DIEP1CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define FS_DEVICE_DIEP1CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define FS_DEVICE_DIEP1CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define FS_DEVICE_DIEP1CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_DEVICE_DIEP1CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DIEP1CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define FS_DEVICE_DIEP1CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define FS_DEVICE_DIEP1CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define FS_DEVICE_DIEP1CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define FS_DEVICE_DIEP1CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DIEP2CTL  ======================================================== */
#define FS_DEVICE_DIEP2CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define FS_DEVICE_DIEP2CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define FS_DEVICE_DIEP2CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define FS_DEVICE_DIEP2CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define FS_DEVICE_DIEP2CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define FS_DEVICE_DIEP2CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define FS_DEVICE_DIEP2CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define FS_DEVICE_DIEP2CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define FS_DEVICE_DIEP2CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define FS_DEVICE_DIEP2CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_DEVICE_DIEP2CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DIEP2CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define FS_DEVICE_DIEP2CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define FS_DEVICE_DIEP2CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define FS_DEVICE_DIEP2CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define FS_DEVICE_DIEP2CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DIEP3CTL  ======================================================== */
#define FS_DEVICE_DIEP3CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define FS_DEVICE_DIEP3CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define FS_DEVICE_DIEP3CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define FS_DEVICE_DIEP3CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define FS_DEVICE_DIEP3CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define FS_DEVICE_DIEP3CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define FS_DEVICE_DIEP3CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define FS_DEVICE_DIEP3CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define FS_DEVICE_DIEP3CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define FS_DEVICE_DIEP3CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_DEVICE_DIEP3CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DIEP3CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define FS_DEVICE_DIEP3CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define FS_DEVICE_DIEP3CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define FS_DEVICE_DIEP3CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define FS_DEVICE_DIEP3CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DOEP0CTL  ======================================================== */
#define FS_DEVICE_DOEP0CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define FS_DEVICE_DOEP0CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define FS_DEVICE_DOEP0CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define FS_DEVICE_DOEP0CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define FS_DEVICE_DOEP0CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define FS_DEVICE_DOEP0CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define FS_DEVICE_DOEP0CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_DEVICE_DOEP0CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DOEP0CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define FS_DEVICE_DOEP0CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define FS_DEVICE_DOEP0CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define FS_DEVICE_DOEP0CTL_MPL_Msk        (0x3UL)                   /*!< MPL (Bitfield-Mask: 0x03) */
/* =======================================================  DOEP1CTL  ======================================================== */
#define FS_DEVICE_DOEP1CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define FS_DEVICE_DOEP1CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define FS_DEVICE_DOEP1CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define FS_DEVICE_DOEP1CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define FS_DEVICE_DOEP1CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define FS_DEVICE_DOEP1CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define FS_DEVICE_DOEP1CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define FS_DEVICE_DOEP1CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define FS_DEVICE_DOEP1CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_DEVICE_DOEP1CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DOEP1CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define FS_DEVICE_DOEP1CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define FS_DEVICE_DOEP1CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define FS_DEVICE_DOEP1CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define FS_DEVICE_DOEP1CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DOEP2CTL  ======================================================== */
#define FS_DEVICE_DOEP2CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define FS_DEVICE_DOEP2CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define FS_DEVICE_DOEP2CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define FS_DEVICE_DOEP2CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define FS_DEVICE_DOEP2CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define FS_DEVICE_DOEP2CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define FS_DEVICE_DOEP2CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define FS_DEVICE_DOEP2CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define FS_DEVICE_DOEP2CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_DEVICE_DOEP2CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DOEP2CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define FS_DEVICE_DOEP2CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define FS_DEVICE_DOEP2CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define FS_DEVICE_DOEP2CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define FS_DEVICE_DOEP2CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DOEP3CTL  ======================================================== */
#define FS_DEVICE_DOEP3CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define FS_DEVICE_DOEP3CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define FS_DEVICE_DOEP3CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define FS_DEVICE_DOEP3CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define FS_DEVICE_DOEP3CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define FS_DEVICE_DOEP3CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define FS_DEVICE_DOEP3CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define FS_DEVICE_DOEP3CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define FS_DEVICE_DOEP3CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define FS_DEVICE_DOEP3CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DOEP3CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define FS_DEVICE_DOEP3CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define FS_DEVICE_DOEP3CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define FS_DEVICE_DOEP3CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define FS_DEVICE_DOEP3CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DIEP0INTF  ======================================================= */
#define FS_DEVICE_DIEP0INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define FS_DEVICE_DIEP0INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define FS_DEVICE_DIEP0INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define FS_DEVICE_DIEP0INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define FS_DEVICE_DIEP0INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define FS_DEVICE_DIEP0INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP0INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define FS_DEVICE_DIEP0INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP1INTF  ======================================================= */
#define FS_DEVICE_DIEP1INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define FS_DEVICE_DIEP1INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define FS_DEVICE_DIEP1INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define FS_DEVICE_DIEP1INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define FS_DEVICE_DIEP1INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define FS_DEVICE_DIEP1INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP1INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define FS_DEVICE_DIEP1INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP2INTF  ======================================================= */
#define FS_DEVICE_DIEP2INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define FS_DEVICE_DIEP2INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define FS_DEVICE_DIEP2INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define FS_DEVICE_DIEP2INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define FS_DEVICE_DIEP2INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define FS_DEVICE_DIEP2INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP2INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define FS_DEVICE_DIEP2INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP3INTF  ======================================================= */
#define FS_DEVICE_DIEP3INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define FS_DEVICE_DIEP3INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define FS_DEVICE_DIEP3INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define FS_DEVICE_DIEP3INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define FS_DEVICE_DIEP3INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define FS_DEVICE_DIEP3INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DIEP3INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define FS_DEVICE_DIEP3INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP0INTF  ======================================================= */
#define FS_DEVICE_DOEP0INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define FS_DEVICE_DOEP0INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define FS_DEVICE_DOEP0INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define FS_DEVICE_DOEP0INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define FS_DEVICE_DOEP0INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define FS_DEVICE_DOEP0INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP1INTF  ======================================================= */
#define FS_DEVICE_DOEP1INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define FS_DEVICE_DOEP1INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define FS_DEVICE_DOEP1INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define FS_DEVICE_DOEP1INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define FS_DEVICE_DOEP1INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP1INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define FS_DEVICE_DOEP1INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP2INTF  ======================================================= */
#define FS_DEVICE_DOEP2INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define FS_DEVICE_DOEP2INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define FS_DEVICE_DOEP2INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define FS_DEVICE_DOEP2INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define FS_DEVICE_DOEP2INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP2INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define FS_DEVICE_DOEP2INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP3INTF  ======================================================= */
#define FS_DEVICE_DOEP3INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define FS_DEVICE_DOEP3INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define FS_DEVICE_DOEP3INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define FS_DEVICE_DOEP3INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define FS_DEVICE_DOEP3INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP3INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define FS_DEVICE_DOEP3INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP0LEN  ======================================================== */
#define FS_DEVICE_DIEP0LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define FS_DEVICE_DIEP0LEN_PCNT_Msk       (0x180000UL)              /*!< PCNT (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DIEP0LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define FS_DEVICE_DIEP0LEN_TLEN_Msk       (0x7fUL)                  /*!< TLEN (Bitfield-Mask: 0x7f) */
/* =======================================================  DOEP0LEN  ======================================================== */
#define FS_DEVICE_DOEP0LEN_STPCNT_Pos     (29UL)                    /*!< STPCNT (Bit 29) */
#define FS_DEVICE_DOEP0LEN_STPCNT_Msk     (0x60000000UL)            /*!< STPCNT (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DOEP0LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define FS_DEVICE_DOEP0LEN_PCNT_Msk       (0x80000UL)               /*!< PCNT (Bitfield-Mask: 0x01) */
#define FS_DEVICE_DOEP0LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define FS_DEVICE_DOEP0LEN_TLEN_Msk       (0x7fUL)                  /*!< TLEN (Bitfield-Mask: 0x7f) */
/* =======================================================  DIEP1LEN  ======================================================== */
#define FS_DEVICE_DIEP1LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define FS_DEVICE_DIEP1LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_DEVICE_DIEP1LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define FS_DEVICE_DIEP1LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DIEP2LEN  ======================================================== */
#define FS_DEVICE_DIEP2LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define FS_DEVICE_DIEP2LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_DEVICE_DIEP2LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define FS_DEVICE_DIEP2LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DIEP3LEN  ======================================================== */
#define FS_DEVICE_DIEP3LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define FS_DEVICE_DIEP3LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_DEVICE_DIEP3LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define FS_DEVICE_DIEP3LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DOEP1LEN  ======================================================== */
#define FS_DEVICE_DOEP1LEN_STPCNT_RXDPID_Pos (29UL)                 /*!< STPCNT_RXDPID (Bit 29) */
#define FS_DEVICE_DOEP1LEN_STPCNT_RXDPID_Msk (0x60000000UL)         /*!< STPCNT_RXDPID (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DOEP1LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define FS_DEVICE_DOEP1LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_DEVICE_DOEP1LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define FS_DEVICE_DOEP1LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DOEP2LEN  ======================================================== */
#define FS_DEVICE_DOEP2LEN_STPCNT_RXDPID_Pos (29UL)                 /*!< STPCNT_RXDPID (Bit 29) */
#define FS_DEVICE_DOEP2LEN_STPCNT_RXDPID_Msk (0x60000000UL)         /*!< STPCNT_RXDPID (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DOEP2LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define FS_DEVICE_DOEP2LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_DEVICE_DOEP2LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define FS_DEVICE_DOEP2LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DOEP3LEN  ======================================================== */
#define FS_DEVICE_DOEP3LEN_STPCNT_RXDPID_Pos (29UL)                 /*!< STPCNT_RXDPID (Bit 29) */
#define FS_DEVICE_DOEP3LEN_STPCNT_RXDPID_Msk (0x60000000UL)         /*!< STPCNT_RXDPID (Bitfield-Mask: 0x03) */
#define FS_DEVICE_DOEP3LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define FS_DEVICE_DOEP3LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define FS_DEVICE_DOEP3LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define FS_DEVICE_DOEP3LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* ======================================================  DIEP0TFSTAT  ====================================================== */
#define FS_DEVICE_DIEP0TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define FS_DEVICE_DIEP0TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP1TFSTAT  ====================================================== */
#define FS_DEVICE_DIEP1TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define FS_DEVICE_DIEP1TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP2TFSTAT  ====================================================== */
#define FS_DEVICE_DIEP2TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define FS_DEVICE_DIEP2TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP3TFSTAT  ====================================================== */
#define FS_DEVICE_DIEP3TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define FS_DEVICE_DIEP3TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */


/* =========================================================================================================================== */
/* ================                                         FS_PWRCLK                                         ================ */
/* =========================================================================================================================== */

/* =======================================================  PWRCLKCTL  ======================================================= */
#define FS_PWRCLK_PWRCLKCTL_SUCLK_Pos     (0UL)                     /*!< SUCLK (Bit 0) */
#define FS_PWRCLK_PWRCLKCTL_SUCLK_Msk     (0x1UL)                   /*!< SUCLK (Bitfield-Mask: 0x01) */
#define FS_PWRCLK_PWRCLKCTL_SHCLK_Pos     (1UL)                     /*!< SHCLK (Bit 1) */
#define FS_PWRCLK_PWRCLKCTL_SHCLK_Msk     (0x2UL)                   /*!< SHCLK (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                         HS_GLOBAL                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  GOTGCS  ========================================================= */
#define HS_GLOBAL_GOTGCS_SRPS_Pos         (0UL)                     /*!< SRPS (Bit 0) */
#define HS_GLOBAL_GOTGCS_SRPS_Msk         (0x1UL)                   /*!< SRPS (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGCS_SRPREQ_Pos       (1UL)                     /*!< SRPREQ (Bit 1) */
#define HS_GLOBAL_GOTGCS_SRPREQ_Msk       (0x2UL)                   /*!< SRPREQ (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGCS_HNPS_Pos         (8UL)                     /*!< HNPS (Bit 8) */
#define HS_GLOBAL_GOTGCS_HNPS_Msk         (0x100UL)                 /*!< HNPS (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGCS_HNPREQ_Pos       (9UL)                     /*!< HNPREQ (Bit 9) */
#define HS_GLOBAL_GOTGCS_HNPREQ_Msk       (0x200UL)                 /*!< HNPREQ (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGCS_HHNPEN_Pos       (10UL)                    /*!< HHNPEN (Bit 10) */
#define HS_GLOBAL_GOTGCS_HHNPEN_Msk       (0x400UL)                 /*!< HHNPEN (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGCS_DHNPEN_Pos       (11UL)                    /*!< DHNPEN (Bit 11) */
#define HS_GLOBAL_GOTGCS_DHNPEN_Msk       (0x800UL)                 /*!< DHNPEN (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGCS_CIDPS_Pos        (16UL)                    /*!< CIDPS (Bit 16) */
#define HS_GLOBAL_GOTGCS_CIDPS_Msk        (0x10000UL)               /*!< CIDPS (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGCS_DI_Pos           (17UL)                    /*!< DI (Bit 17) */
#define HS_GLOBAL_GOTGCS_DI_Msk           (0x20000UL)               /*!< DI (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGCS_ASV_Pos          (18UL)                    /*!< ASV (Bit 18) */
#define HS_GLOBAL_GOTGCS_ASV_Msk          (0x40000UL)               /*!< ASV (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGCS_BSV_Pos          (19UL)                    /*!< BSV (Bit 19) */
#define HS_GLOBAL_GOTGCS_BSV_Msk          (0x80000UL)               /*!< BSV (Bitfield-Mask: 0x01) */
/* =======================================================  GOTGINTF  ======================================================== */
#define HS_GLOBAL_GOTGINTF_SESEND_Pos     (2UL)                     /*!< SESEND (Bit 2) */
#define HS_GLOBAL_GOTGINTF_SESEND_Msk     (0x4UL)                   /*!< SESEND (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGINTF_SRPEND_Pos     (8UL)                     /*!< SRPEND (Bit 8) */
#define HS_GLOBAL_GOTGINTF_SRPEND_Msk     (0x100UL)                 /*!< SRPEND (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGINTF_HNPEND_Pos     (9UL)                     /*!< HNPEND (Bit 9) */
#define HS_GLOBAL_GOTGINTF_HNPEND_Msk     (0x200UL)                 /*!< HNPEND (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGINTF_HNPDET_Pos     (17UL)                    /*!< HNPDET (Bit 17) */
#define HS_GLOBAL_GOTGINTF_HNPDET_Msk     (0x20000UL)               /*!< HNPDET (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGINTF_ADTO_Pos       (18UL)                    /*!< ADTO (Bit 18) */
#define HS_GLOBAL_GOTGINTF_ADTO_Msk       (0x40000UL)               /*!< ADTO (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GOTGINTF_DF_Pos         (19UL)                    /*!< DF (Bit 19) */
#define HS_GLOBAL_GOTGINTF_DF_Msk         (0x80000UL)               /*!< DF (Bitfield-Mask: 0x01) */
/* ========================================================  GAHBCS  ========================================================= */
#define HS_GLOBAL_GAHBCS_GINTEN_Pos       (0UL)                     /*!< GINTEN (Bit 0) */
#define HS_GLOBAL_GAHBCS_GINTEN_Msk       (0x1UL)                   /*!< GINTEN (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GAHBCS_BURST_Pos        (1UL)                     /*!< BURST (Bit 1) */
#define HS_GLOBAL_GAHBCS_BURST_Msk        (0x1eUL)                  /*!< BURST (Bitfield-Mask: 0x0f) */
#define HS_GLOBAL_GAHBCS_DMAEN_Pos        (5UL)                     /*!< DMAEN (Bit 5) */
#define HS_GLOBAL_GAHBCS_DMAEN_Msk        (0x20UL)                  /*!< DMAEN (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GAHBCS_TXFTH_Pos        (7UL)                     /*!< TXFTH (Bit 7) */
#define HS_GLOBAL_GAHBCS_TXFTH_Msk        (0x80UL)                  /*!< TXFTH (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GAHBCS_PTXFTH_Pos       (8UL)                     /*!< PTXFTH (Bit 8) */
#define HS_GLOBAL_GAHBCS_PTXFTH_Msk       (0x100UL)                 /*!< PTXFTH (Bitfield-Mask: 0x01) */
/* ========================================================  GUSBCS  ========================================================= */
#define HS_GLOBAL_GUSBCS_TOC_Pos          (0UL)                     /*!< TOC (Bit 0) */
#define HS_GLOBAL_GUSBCS_TOC_Msk          (0x7UL)                   /*!< TOC (Bitfield-Mask: 0x07) */
#define HS_GLOBAL_GUSBCS_EMBPHY_Pos       (6UL)                     /*!< EMBPHY (Bit 6) */
#define HS_GLOBAL_GUSBCS_EMBPHY_Msk       (0x40UL)                  /*!< EMBPHY (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GUSBCS_SRPCEN_Pos       (8UL)                     /*!< SRPCEN (Bit 8) */
#define HS_GLOBAL_GUSBCS_SRPCEN_Msk       (0x100UL)                 /*!< SRPCEN (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GUSBCS_HNPCEN_Pos       (9UL)                     /*!< HNPCEN (Bit 9) */
#define HS_GLOBAL_GUSBCS_HNPCEN_Msk       (0x200UL)                 /*!< HNPCEN (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GUSBCS_UTT_Pos          (10UL)                    /*!< UTT (Bit 10) */
#define HS_GLOBAL_GUSBCS_UTT_Msk          (0x3c00UL)                /*!< UTT (Bitfield-Mask: 0x0f) */
#define HS_GLOBAL_GUSBCS_ULPIEVD_Pos      (20UL)                    /*!< ULPIEVD (Bit 20) */
#define HS_GLOBAL_GUSBCS_ULPIEVD_Msk      (0x100000UL)              /*!< ULPIEVD (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GUSBCS_ULPIEOI_Pos      (21UL)                    /*!< ULPIEOI (Bit 21) */
#define HS_GLOBAL_GUSBCS_ULPIEOI_Msk      (0x200000UL)              /*!< ULPIEOI (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GUSBCS_FHM_Pos          (29UL)                    /*!< FHM (Bit 29) */
#define HS_GLOBAL_GUSBCS_FHM_Msk          (0x20000000UL)            /*!< FHM (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GUSBCS_FDM_Pos          (30UL)                    /*!< FDM (Bit 30) */
#define HS_GLOBAL_GUSBCS_FDM_Msk          (0x40000000UL)            /*!< FDM (Bitfield-Mask: 0x01) */
/* ========================================================  GRSTCTL  ======================================================== */
#define HS_GLOBAL_GRSTCTL_CSRST_Pos       (0UL)                     /*!< CSRST (Bit 0) */
#define HS_GLOBAL_GRSTCTL_CSRST_Msk       (0x1UL)                   /*!< CSRST (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GRSTCTL_HCSRST_Pos      (1UL)                     /*!< HCSRST (Bit 1) */
#define HS_GLOBAL_GRSTCTL_HCSRST_Msk      (0x2UL)                   /*!< HCSRST (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GRSTCTL_HFCRST_Pos      (2UL)                     /*!< HFCRST (Bit 2) */
#define HS_GLOBAL_GRSTCTL_HFCRST_Msk      (0x4UL)                   /*!< HFCRST (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GRSTCTL_RXFF_Pos        (4UL)                     /*!< RXFF (Bit 4) */
#define HS_GLOBAL_GRSTCTL_RXFF_Msk        (0x10UL)                  /*!< RXFF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GRSTCTL_TXFF_Pos        (5UL)                     /*!< TXFF (Bit 5) */
#define HS_GLOBAL_GRSTCTL_TXFF_Msk        (0x20UL)                  /*!< TXFF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GRSTCTL_TXFNUM_Pos      (6UL)                     /*!< TXFNUM (Bit 6) */
#define HS_GLOBAL_GRSTCTL_TXFNUM_Msk      (0x7c0UL)                 /*!< TXFNUM (Bitfield-Mask: 0x1f) */
#define HS_GLOBAL_GRSTCTL_DMABSY_Pos      (30UL)                    /*!< DMABSY (Bit 30) */
#define HS_GLOBAL_GRSTCTL_DMABSY_Msk      (0x40000000UL)            /*!< DMABSY (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GRSTCTL_DMAIDL_Pos      (31UL)                    /*!< DMAIDL (Bit 31) */
#define HS_GLOBAL_GRSTCTL_DMAIDL_Msk      (0x80000000UL)            /*!< DMAIDL (Bitfield-Mask: 0x01) */
/* =========================================================  GINTF  ========================================================= */
#define HS_GLOBAL_GINTF_COPM_Pos          (0UL)                     /*!< COPM (Bit 0) */
#define HS_GLOBAL_GINTF_COPM_Msk          (0x1UL)                   /*!< COPM (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_MFIF_Pos          (1UL)                     /*!< MFIF (Bit 1) */
#define HS_GLOBAL_GINTF_MFIF_Msk          (0x2UL)                   /*!< MFIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_OTGIF_Pos         (2UL)                     /*!< OTGIF (Bit 2) */
#define HS_GLOBAL_GINTF_OTGIF_Msk         (0x4UL)                   /*!< OTGIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_SOF_Pos           (3UL)                     /*!< SOF (Bit 3) */
#define HS_GLOBAL_GINTF_SOF_Msk           (0x8UL)                   /*!< SOF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_RXFNEIF_Pos       (4UL)                     /*!< RXFNEIF (Bit 4) */
#define HS_GLOBAL_GINTF_RXFNEIF_Msk       (0x10UL)                  /*!< RXFNEIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_NPTXFEIF_Pos      (5UL)                     /*!< NPTXFEIF (Bit 5) */
#define HS_GLOBAL_GINTF_NPTXFEIF_Msk      (0x20UL)                  /*!< NPTXFEIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_GNPINAK_Pos       (6UL)                     /*!< GNPINAK (Bit 6) */
#define HS_GLOBAL_GINTF_GNPINAK_Msk       (0x40UL)                  /*!< GNPINAK (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_GONAK_Pos         (7UL)                     /*!< GONAK (Bit 7) */
#define HS_GLOBAL_GINTF_GONAK_Msk         (0x80UL)                  /*!< GONAK (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_ESP_Pos           (10UL)                    /*!< ESP (Bit 10) */
#define HS_GLOBAL_GINTF_ESP_Msk           (0x400UL)                 /*!< ESP (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_SP_Pos            (11UL)                    /*!< SP (Bit 11) */
#define HS_GLOBAL_GINTF_SP_Msk            (0x800UL)                 /*!< SP (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_RST_Pos           (12UL)                    /*!< RST (Bit 12) */
#define HS_GLOBAL_GINTF_RST_Msk           (0x1000UL)                /*!< RST (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_ENUMF_Pos         (13UL)                    /*!< ENUMF (Bit 13) */
#define HS_GLOBAL_GINTF_ENUMF_Msk         (0x2000UL)                /*!< ENUMF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_ISOOPDIF_Pos      (14UL)                    /*!< ISOOPDIF (Bit 14) */
#define HS_GLOBAL_GINTF_ISOOPDIF_Msk      (0x4000UL)                /*!< ISOOPDIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_EOPFIF_Pos        (15UL)                    /*!< EOPFIF (Bit 15) */
#define HS_GLOBAL_GINTF_EOPFIF_Msk        (0x8000UL)                /*!< EOPFIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_IEPIF_Pos         (18UL)                    /*!< IEPIF (Bit 18) */
#define HS_GLOBAL_GINTF_IEPIF_Msk         (0x40000UL)               /*!< IEPIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_OEPIF_Pos         (19UL)                    /*!< OEPIF (Bit 19) */
#define HS_GLOBAL_GINTF_OEPIF_Msk         (0x80000UL)               /*!< OEPIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_ISOINCIF_Pos      (20UL)                    /*!< ISOINCIF (Bit 20) */
#define HS_GLOBAL_GINTF_ISOINCIF_Msk      (0x100000UL)              /*!< ISOINCIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_PXNCIF_ISOONCIF_Pos (21UL)                  /*!< PXNCIF_ISOONCIF (Bit 21) */
#define HS_GLOBAL_GINTF_PXNCIF_ISOONCIF_Msk (0x200000UL)            /*!< PXNCIF_ISOONCIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_HPIF_Pos          (24UL)                    /*!< HPIF (Bit 24) */
#define HS_GLOBAL_GINTF_HPIF_Msk          (0x1000000UL)             /*!< HPIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_HCIF_Pos          (25UL)                    /*!< HCIF (Bit 25) */
#define HS_GLOBAL_GINTF_HCIF_Msk          (0x2000000UL)             /*!< HCIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_PTXFEIF_Pos       (26UL)                    /*!< PTXFEIF (Bit 26) */
#define HS_GLOBAL_GINTF_PTXFEIF_Msk       (0x4000000UL)             /*!< PTXFEIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_IDPSC_Pos         (28UL)                    /*!< IDPSC (Bit 28) */
#define HS_GLOBAL_GINTF_IDPSC_Msk         (0x10000000UL)            /*!< IDPSC (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_DISCIF_Pos        (29UL)                    /*!< DISCIF (Bit 29) */
#define HS_GLOBAL_GINTF_DISCIF_Msk        (0x20000000UL)            /*!< DISCIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_SESIF_Pos         (30UL)                    /*!< SESIF (Bit 30) */
#define HS_GLOBAL_GINTF_SESIF_Msk         (0x40000000UL)            /*!< SESIF (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTF_WKUPIF_Pos        (31UL)                    /*!< WKUPIF (Bit 31) */
#define HS_GLOBAL_GINTF_WKUPIF_Msk        (0x80000000UL)            /*!< WKUPIF (Bitfield-Mask: 0x01) */
/* ========================================================  GINTEN  ========================================================= */
#define HS_GLOBAL_GINTEN_MFIE_Pos         (1UL)                     /*!< MFIE (Bit 1) */
#define HS_GLOBAL_GINTEN_MFIE_Msk         (0x2UL)                   /*!< MFIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_OTGIE_Pos        (2UL)                     /*!< OTGIE (Bit 2) */
#define HS_GLOBAL_GINTEN_OTGIE_Msk        (0x4UL)                   /*!< OTGIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_SOFIE_Pos        (3UL)                     /*!< SOFIE (Bit 3) */
#define HS_GLOBAL_GINTEN_SOFIE_Msk        (0x8UL)                   /*!< SOFIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_RXFNEIE_Pos      (4UL)                     /*!< RXFNEIE (Bit 4) */
#define HS_GLOBAL_GINTEN_RXFNEIE_Msk      (0x10UL)                  /*!< RXFNEIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_NPTXFEIE_Pos     (5UL)                     /*!< NPTXFEIE (Bit 5) */
#define HS_GLOBAL_GINTEN_NPTXFEIE_Msk     (0x20UL)                  /*!< NPTXFEIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_GNPINAKIE_Pos    (6UL)                     /*!< GNPINAKIE (Bit 6) */
#define HS_GLOBAL_GINTEN_GNPINAKIE_Msk    (0x40UL)                  /*!< GNPINAKIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_GONAKIE_Pos      (7UL)                     /*!< GONAKIE (Bit 7) */
#define HS_GLOBAL_GINTEN_GONAKIE_Msk      (0x80UL)                  /*!< GONAKIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_ESPIE_Pos        (10UL)                    /*!< ESPIE (Bit 10) */
#define HS_GLOBAL_GINTEN_ESPIE_Msk        (0x400UL)                 /*!< ESPIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_SPIE_Pos         (11UL)                    /*!< SPIE (Bit 11) */
#define HS_GLOBAL_GINTEN_SPIE_Msk         (0x800UL)                 /*!< SPIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_RSTIE_Pos        (12UL)                    /*!< RSTIE (Bit 12) */
#define HS_GLOBAL_GINTEN_RSTIE_Msk        (0x1000UL)                /*!< RSTIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_ENUMFIE_Pos      (13UL)                    /*!< ENUMFIE (Bit 13) */
#define HS_GLOBAL_GINTEN_ENUMFIE_Msk      (0x2000UL)                /*!< ENUMFIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_ISOOPDIE_Pos     (14UL)                    /*!< ISOOPDIE (Bit 14) */
#define HS_GLOBAL_GINTEN_ISOOPDIE_Msk     (0x4000UL)                /*!< ISOOPDIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_EOPFIE_Pos       (15UL)                    /*!< EOPFIE (Bit 15) */
#define HS_GLOBAL_GINTEN_EOPFIE_Msk       (0x8000UL)                /*!< EOPFIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_IEPIE_Pos        (18UL)                    /*!< IEPIE (Bit 18) */
#define HS_GLOBAL_GINTEN_IEPIE_Msk        (0x40000UL)               /*!< IEPIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_OEPIE_Pos        (19UL)                    /*!< OEPIE (Bit 19) */
#define HS_GLOBAL_GINTEN_OEPIE_Msk        (0x80000UL)               /*!< OEPIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_ISOINCIE_Pos     (20UL)                    /*!< ISOINCIE (Bit 20) */
#define HS_GLOBAL_GINTEN_ISOINCIE_Msk     (0x100000UL)              /*!< ISOINCIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_PXNCIE_ISOONCIE_Pos (21UL)                 /*!< PXNCIE_ISOONCIE (Bit 21) */
#define HS_GLOBAL_GINTEN_PXNCIE_ISOONCIE_Msk (0x200000UL)           /*!< PXNCIE_ISOONCIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_HPIE_Pos         (24UL)                    /*!< HPIE (Bit 24) */
#define HS_GLOBAL_GINTEN_HPIE_Msk         (0x1000000UL)             /*!< HPIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_HCIE_Pos         (25UL)                    /*!< HCIE (Bit 25) */
#define HS_GLOBAL_GINTEN_HCIE_Msk         (0x2000000UL)             /*!< HCIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_PTXFEIE_Pos      (26UL)                    /*!< PTXFEIE (Bit 26) */
#define HS_GLOBAL_GINTEN_PTXFEIE_Msk      (0x4000000UL)             /*!< PTXFEIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_IDPSCIE_Pos      (28UL)                    /*!< IDPSCIE (Bit 28) */
#define HS_GLOBAL_GINTEN_IDPSCIE_Msk      (0x10000000UL)            /*!< IDPSCIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_DISCIE_Pos       (29UL)                    /*!< DISCIE (Bit 29) */
#define HS_GLOBAL_GINTEN_DISCIE_Msk       (0x20000000UL)            /*!< DISCIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_SESIE_Pos        (30UL)                    /*!< SESIE (Bit 30) */
#define HS_GLOBAL_GINTEN_SESIE_Msk        (0x40000000UL)            /*!< SESIE (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GINTEN_WKUPIE_Pos       (31UL)                    /*!< WKUPIE (Bit 31) */
#define HS_GLOBAL_GINTEN_WKUPIE_Msk       (0x80000000UL)            /*!< WKUPIE (Bitfield-Mask: 0x01) */
/* ====================================================  GRSTATR_Device  ===================================================== */
#define HS_GLOBAL_GRSTATR_Device_EPNUM_Pos (0UL)                    /*!< EPNUM (Bit 0) */
#define HS_GLOBAL_GRSTATR_Device_EPNUM_Msk (0xfUL)                  /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_GLOBAL_GRSTATR_Device_BCOUNT_Pos (4UL)                   /*!< BCOUNT (Bit 4) */
#define HS_GLOBAL_GRSTATR_Device_BCOUNT_Msk (0x7ff0UL)              /*!< BCOUNT (Bitfield-Mask: 0x7ff) */
#define HS_GLOBAL_GRSTATR_Device_DPID_Pos (15UL)                    /*!< DPID (Bit 15) */
#define HS_GLOBAL_GRSTATR_Device_DPID_Msk (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_GLOBAL_GRSTATR_Device_RPCKST_Pos (17UL)                  /*!< RPCKST (Bit 17) */
#define HS_GLOBAL_GRSTATR_Device_RPCKST_Msk (0x1e0000UL)            /*!< RPCKST (Bitfield-Mask: 0x0f) */
/* =====================================================  GRSTATR_Host  ====================================================== */
#define HS_GLOBAL_GRSTATR_Host_CNUM_Pos   (0UL)                     /*!< CNUM (Bit 0) */
#define HS_GLOBAL_GRSTATR_Host_CNUM_Msk   (0xfUL)                   /*!< CNUM (Bitfield-Mask: 0x0f) */
#define HS_GLOBAL_GRSTATR_Host_BCOUNT_Pos (4UL)                     /*!< BCOUNT (Bit 4) */
#define HS_GLOBAL_GRSTATR_Host_BCOUNT_Msk (0x7ff0UL)                /*!< BCOUNT (Bitfield-Mask: 0x7ff) */
#define HS_GLOBAL_GRSTATR_Host_DPID_Pos   (15UL)                    /*!< DPID (Bit 15) */
#define HS_GLOBAL_GRSTATR_Host_DPID_Msk   (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_GLOBAL_GRSTATR_Host_RPCKST_Pos (17UL)                    /*!< RPCKST (Bit 17) */
#define HS_GLOBAL_GRSTATR_Host_RPCKST_Msk (0x1e0000UL)              /*!< RPCKST (Bitfield-Mask: 0x0f) */
/* ====================================================  GRSTATP_Device  ===================================================== */
#define HS_GLOBAL_GRSTATP_Device_EPNUM_Pos (0UL)                    /*!< EPNUM (Bit 0) */
#define HS_GLOBAL_GRSTATP_Device_EPNUM_Msk (0xfUL)                  /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_GLOBAL_GRSTATP_Device_BCOUNT_Pos (4UL)                   /*!< BCOUNT (Bit 4) */
#define HS_GLOBAL_GRSTATP_Device_BCOUNT_Msk (0x7ff0UL)              /*!< BCOUNT (Bitfield-Mask: 0x7ff) */
#define HS_GLOBAL_GRSTATP_Device_DPID_Pos (15UL)                    /*!< DPID (Bit 15) */
#define HS_GLOBAL_GRSTATP_Device_DPID_Msk (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_GLOBAL_GRSTATP_Device_RPCKST_Pos (17UL)                  /*!< RPCKST (Bit 17) */
#define HS_GLOBAL_GRSTATP_Device_RPCKST_Msk (0x1e0000UL)            /*!< RPCKST (Bitfield-Mask: 0x0f) */
/* =====================================================  GRSTATP_Host  ====================================================== */
#define HS_GLOBAL_GRSTATP_Host_CNUM_Pos   (0UL)                     /*!< CNUM (Bit 0) */
#define HS_GLOBAL_GRSTATP_Host_CNUM_Msk   (0xfUL)                   /*!< CNUM (Bitfield-Mask: 0x0f) */
#define HS_GLOBAL_GRSTATP_Host_BCOUNT_Pos (4UL)                     /*!< BCOUNT (Bit 4) */
#define HS_GLOBAL_GRSTATP_Host_BCOUNT_Msk (0x7ff0UL)                /*!< BCOUNT (Bitfield-Mask: 0x7ff) */
#define HS_GLOBAL_GRSTATP_Host_DPID_Pos   (15UL)                    /*!< DPID (Bit 15) */
#define HS_GLOBAL_GRSTATP_Host_DPID_Msk   (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_GLOBAL_GRSTATP_Host_RPCKST_Pos (17UL)                    /*!< RPCKST (Bit 17) */
#define HS_GLOBAL_GRSTATP_Host_RPCKST_Msk (0x1e0000UL)              /*!< RPCKST (Bitfield-Mask: 0x0f) */
/* ========================================================  GRFLEN  ========================================================= */
#define HS_GLOBAL_GRFLEN_RXFD_Pos         (0UL)                     /*!< RXFD (Bit 0) */
#define HS_GLOBAL_GRFLEN_RXFD_Msk         (0xffffUL)                /*!< RXFD (Bitfield-Mask: 0xffff) */
/* =======================================================  HNPTFLEN  ======================================================== */
#define HS_GLOBAL_HNPTFLEN_HNPTXRSAR_Pos  (0UL)                     /*!< HNPTXRSAR (Bit 0) */
#define HS_GLOBAL_HNPTFLEN_HNPTXRSAR_Msk  (0xffffUL)                /*!< HNPTXRSAR (Bitfield-Mask: 0xffff) */
#define HS_GLOBAL_HNPTFLEN_HNPTXFD_Pos    (16UL)                    /*!< HNPTXFD (Bit 16) */
#define HS_GLOBAL_HNPTFLEN_HNPTXFD_Msk    (0xffff0000UL)            /*!< HNPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP0TFLEN  ======================================================= */
#define HS_GLOBAL_DIEP0TFLEN_IEP0TXFD_Pos (0UL)                     /*!< IEP0TXFD (Bit 0) */
#define HS_GLOBAL_DIEP0TFLEN_IEP0TXFD_Msk (0xffffUL)                /*!< IEP0TXFD (Bitfield-Mask: 0xffff) */
#define HS_GLOBAL_DIEP0TFLEN_IEP0TXRSAR_Pos (16UL)                  /*!< IEP0TXRSAR (Bit 16) */
#define HS_GLOBAL_DIEP0TFLEN_IEP0TXRSAR_Msk (0xffff0000UL)          /*!< IEP0TXRSAR (Bitfield-Mask: 0xffff) */
/* ======================================================  HNPTFQSTAT  ======================================================= */
#define HS_GLOBAL_HNPTFQSTAT_NPTXFS_Pos   (0UL)                     /*!< NPTXFS (Bit 0) */
#define HS_GLOBAL_HNPTFQSTAT_NPTXFS_Msk   (0xffffUL)                /*!< NPTXFS (Bitfield-Mask: 0xffff) */
#define HS_GLOBAL_HNPTFQSTAT_NPTXRQS_Pos  (16UL)                    /*!< NPTXRQS (Bit 16) */
#define HS_GLOBAL_HNPTFQSTAT_NPTXRQS_Msk  (0xff0000UL)              /*!< NPTXRQS (Bitfield-Mask: 0xff) */
#define HS_GLOBAL_HNPTFQSTAT_NPTXRQTOP_Pos (24UL)                   /*!< NPTXRQTOP (Bit 24) */
#define HS_GLOBAL_HNPTFQSTAT_NPTXRQTOP_Msk (0x7f000000UL)           /*!< NPTXRQTOP (Bitfield-Mask: 0x7f) */
/* =========================================================  GCCFG  ========================================================= */
#define HS_GLOBAL_GCCFG_PWRON_Pos         (16UL)                    /*!< PWRON (Bit 16) */
#define HS_GLOBAL_GCCFG_PWRON_Msk         (0x10000UL)               /*!< PWRON (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GCCFG_VBUSACEN_Pos      (18UL)                    /*!< VBUSACEN (Bit 18) */
#define HS_GLOBAL_GCCFG_VBUSACEN_Msk      (0x40000UL)               /*!< VBUSACEN (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GCCFG_VBUSBCEN_Pos      (19UL)                    /*!< VBUSBCEN (Bit 19) */
#define HS_GLOBAL_GCCFG_VBUSBCEN_Msk      (0x80000UL)               /*!< VBUSBCEN (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GCCFG_SOFOEN_Pos        (20UL)                    /*!< SOFOEN (Bit 20) */
#define HS_GLOBAL_GCCFG_SOFOEN_Msk        (0x100000UL)              /*!< SOFOEN (Bitfield-Mask: 0x01) */
#define HS_GLOBAL_GCCFG_VBUSIG_Pos        (21UL)                    /*!< VBUSIG (Bit 21) */
#define HS_GLOBAL_GCCFG_VBUSIG_Msk        (0x200000UL)              /*!< VBUSIG (Bitfield-Mask: 0x01) */
/* ==========================================================  CID  ========================================================== */
#define HS_GLOBAL_CID_CID_Pos             (0UL)                     /*!< CID (Bit 0) */
#define HS_GLOBAL_CID_CID_Msk             (0xffffffffUL)            /*!< CID (Bitfield-Mask: 0xffffffff) */
/* ========================================================  HPTFLEN  ======================================================== */
#define HS_GLOBAL_HPTFLEN_HPTXFSAR_Pos    (0UL)                     /*!< HPTXFSAR (Bit 0) */
#define HS_GLOBAL_HPTFLEN_HPTXFSAR_Msk    (0xffffUL)                /*!< HPTXFSAR (Bitfield-Mask: 0xffff) */
#define HS_GLOBAL_HPTFLEN_HPTXFD_Pos      (16UL)                    /*!< HPTXFD (Bit 16) */
#define HS_GLOBAL_HPTFLEN_HPTXFD_Msk      (0xffff0000UL)            /*!< HPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP1TFLEN  ======================================================= */
#define HS_GLOBAL_DIEP1TFLEN_IEPTXRSAR_Pos (0UL)                    /*!< IEPTXRSAR (Bit 0) */
#define HS_GLOBAL_DIEP1TFLEN_IEPTXRSAR_Msk (0xffffUL)               /*!< IEPTXRSAR (Bitfield-Mask: 0xffff) */
#define HS_GLOBAL_DIEP1TFLEN_IEPTXFD_Pos  (16UL)                    /*!< IEPTXFD (Bit 16) */
#define HS_GLOBAL_DIEP1TFLEN_IEPTXFD_Msk  (0xffff0000UL)            /*!< IEPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP2TFLEN  ======================================================= */
#define HS_GLOBAL_DIEP2TFLEN_IEPTXRSAR_Pos (0UL)                    /*!< IEPTXRSAR (Bit 0) */
#define HS_GLOBAL_DIEP2TFLEN_IEPTXRSAR_Msk (0xffffUL)               /*!< IEPTXRSAR (Bitfield-Mask: 0xffff) */
#define HS_GLOBAL_DIEP2TFLEN_IEPTXFD_Pos  (16UL)                    /*!< IEPTXFD (Bit 16) */
#define HS_GLOBAL_DIEP2TFLEN_IEPTXFD_Msk  (0xffff0000UL)            /*!< IEPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP3TFLEN  ======================================================= */
#define HS_GLOBAL_DIEP3TFLEN_IEPTXRSAR_Pos (0UL)                    /*!< IEPTXRSAR (Bit 0) */
#define HS_GLOBAL_DIEP3TFLEN_IEPTXRSAR_Msk (0xffffUL)               /*!< IEPTXRSAR (Bitfield-Mask: 0xffff) */
#define HS_GLOBAL_DIEP3TFLEN_IEPTXFD_Pos  (16UL)                    /*!< IEPTXFD (Bit 16) */
#define HS_GLOBAL_DIEP3TFLEN_IEPTXFD_Msk  (0xffff0000UL)            /*!< IEPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP4TFLEN  ======================================================= */
#define HS_GLOBAL_DIEP4TFLEN_IEPTXRSAR_Pos (0UL)                    /*!< IEPTXRSAR (Bit 0) */
#define HS_GLOBAL_DIEP4TFLEN_IEPTXRSAR_Msk (0xffffUL)               /*!< IEPTXRSAR (Bitfield-Mask: 0xffff) */
#define HS_GLOBAL_DIEP4TFLEN_IEPTXFD_Pos  (16UL)                    /*!< IEPTXFD (Bit 16) */
#define HS_GLOBAL_DIEP4TFLEN_IEPTXFD_Msk  (0xffff0000UL)            /*!< IEPTXFD (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP5TFLEN  ======================================================= */
#define HS_GLOBAL_DIEP5TFLEN_IEPTXRSAR_Pos (0UL)                    /*!< IEPTXRSAR (Bit 0) */
#define HS_GLOBAL_DIEP5TFLEN_IEPTXRSAR_Msk (0xffffUL)               /*!< IEPTXRSAR (Bitfield-Mask: 0xffff) */
#define HS_GLOBAL_DIEP5TFLEN_IEPTXFD_Pos  (16UL)                    /*!< IEPTXFD (Bit 16) */
#define HS_GLOBAL_DIEP5TFLEN_IEPTXFD_Msk  (0xffff0000UL)            /*!< IEPTXFD (Bitfield-Mask: 0xffff) */


/* =========================================================================================================================== */
/* ================                                          HS_HOST                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  HCTL  ========================================================== */
#define HS_HOST_HCTL_SPDFSLS_Pos          (2UL)                     /*!< SPDFSLS (Bit 2) */
#define HS_HOST_HCTL_SPDFSLS_Msk          (0x4UL)                   /*!< SPDFSLS (Bitfield-Mask: 0x01) */
/* ==========================================================  HFT  ========================================================== */
#define HS_HOST_HFT_FRI_Pos               (0UL)                     /*!< FRI (Bit 0) */
#define HS_HOST_HFT_FRI_Msk               (0xffffUL)                /*!< FRI (Bitfield-Mask: 0xffff) */
/* ========================================================  HFINFR  ========================================================= */
#define HS_HOST_HFINFR_FRNUM_Pos          (0UL)                     /*!< FRNUM (Bit 0) */
#define HS_HOST_HFINFR_FRNUM_Msk          (0xffffUL)                /*!< FRNUM (Bitfield-Mask: 0xffff) */
#define HS_HOST_HFINFR_FRT_Pos            (16UL)                    /*!< FRT (Bit 16) */
#define HS_HOST_HFINFR_FRT_Msk            (0xffff0000UL)            /*!< FRT (Bitfield-Mask: 0xffff) */
/* =======================================================  HPTFQSTAT  ======================================================= */
#define HS_HOST_HPTFQSTAT_PTXFS_Pos       (0UL)                     /*!< PTXFS (Bit 0) */
#define HS_HOST_HPTFQSTAT_PTXFS_Msk       (0xffffUL)                /*!< PTXFS (Bitfield-Mask: 0xffff) */
#define HS_HOST_HPTFQSTAT_PTXREQS_Pos     (16UL)                    /*!< PTXREQS (Bit 16) */
#define HS_HOST_HPTFQSTAT_PTXREQS_Msk     (0xff0000UL)              /*!< PTXREQS (Bitfield-Mask: 0xff) */
#define HS_HOST_HPTFQSTAT_PTXREQT_Pos     (24UL)                    /*!< PTXREQT (Bit 24) */
#define HS_HOST_HPTFQSTAT_PTXREQT_Msk     (0xff000000UL)            /*!< PTXREQT (Bitfield-Mask: 0xff) */
/* ========================================================  HACHINT  ======================================================== */
#define HS_HOST_HACHINT_HACHINT_Pos       (0UL)                     /*!< HACHINT (Bit 0) */
#define HS_HOST_HACHINT_HACHINT_Msk       (0xfffUL)                 /*!< HACHINT (Bitfield-Mask: 0xfff) */
/* =======================================================  HACHINTEN  ======================================================= */
#define HS_HOST_HACHINTEN_CINTEN_Pos      (0UL)                     /*!< CINTEN (Bit 0) */
#define HS_HOST_HACHINTEN_CINTEN_Msk      (0xfffUL)                 /*!< CINTEN (Bitfield-Mask: 0xfff) */
/* =========================================================  HPCS  ========================================================== */
#define HS_HOST_HPCS_PCST_Pos             (0UL)                     /*!< PCST (Bit 0) */
#define HS_HOST_HPCS_PCST_Msk             (0x1UL)                   /*!< PCST (Bitfield-Mask: 0x01) */
#define HS_HOST_HPCS_PCD_Pos              (1UL)                     /*!< PCD (Bit 1) */
#define HS_HOST_HPCS_PCD_Msk              (0x2UL)                   /*!< PCD (Bitfield-Mask: 0x01) */
#define HS_HOST_HPCS_PE_Pos               (2UL)                     /*!< PE (Bit 2) */
#define HS_HOST_HPCS_PE_Msk               (0x4UL)                   /*!< PE (Bitfield-Mask: 0x01) */
#define HS_HOST_HPCS_PEDC_Pos             (3UL)                     /*!< PEDC (Bit 3) */
#define HS_HOST_HPCS_PEDC_Msk             (0x8UL)                   /*!< PEDC (Bitfield-Mask: 0x01) */
#define HS_HOST_HPCS_PREM_Pos             (6UL)                     /*!< PREM (Bit 6) */
#define HS_HOST_HPCS_PREM_Msk             (0x40UL)                  /*!< PREM (Bitfield-Mask: 0x01) */
#define HS_HOST_HPCS_PSP_Pos              (7UL)                     /*!< PSP (Bit 7) */
#define HS_HOST_HPCS_PSP_Msk              (0x80UL)                  /*!< PSP (Bitfield-Mask: 0x01) */
#define HS_HOST_HPCS_PRST_Pos             (8UL)                     /*!< PRST (Bit 8) */
#define HS_HOST_HPCS_PRST_Msk             (0x100UL)                 /*!< PRST (Bitfield-Mask: 0x01) */
#define HS_HOST_HPCS_PLST_Pos             (10UL)                    /*!< PLST (Bit 10) */
#define HS_HOST_HPCS_PLST_Msk             (0xc00UL)                 /*!< PLST (Bitfield-Mask: 0x03) */
#define HS_HOST_HPCS_PP_Pos               (12UL)                    /*!< PP (Bit 12) */
#define HS_HOST_HPCS_PP_Msk               (0x1000UL)                /*!< PP (Bitfield-Mask: 0x01) */
#define HS_HOST_HPCS_PS_Pos               (17UL)                    /*!< PS (Bit 17) */
#define HS_HOST_HPCS_PS_Msk               (0x60000UL)               /*!< PS (Bitfield-Mask: 0x03) */
/* ========================================================  HCH0CTL  ======================================================== */
#define HS_HOST_HCH0CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH0CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH0CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH0CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH0CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH0CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH0CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH0CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH0CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH0CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH0CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH0CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH0CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH0CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH0CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH0CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH1CTL  ======================================================== */
#define HS_HOST_HCH1CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH1CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH1CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH1CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH1CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH1CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH1CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH1CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH1CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH1CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH1CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH1CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH1CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH1CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH1CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH1CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH2CTL  ======================================================== */
#define HS_HOST_HCH2CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH2CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH2CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH2CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH2CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH2CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH2CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH2CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH2CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH2CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH2CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH2CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH2CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH2CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH2CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH2CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH3CTL  ======================================================== */
#define HS_HOST_HCH3CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH3CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH3CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH3CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH3CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH3CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH3CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH3CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH3CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH3CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH3CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH3CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH3CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH3CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH3CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH3CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH4CTL  ======================================================== */
#define HS_HOST_HCH4CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH4CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH4CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH4CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH4CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH4CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH4CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH4CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH4CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH4CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH4CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH4CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH4CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH4CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH4CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH4CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH5CTL  ======================================================== */
#define HS_HOST_HCH5CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH5CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH5CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH5CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH5CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH5CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH5CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH5CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH5CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH5CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH5CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH5CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH5CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH5CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH5CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH5CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH6CTL  ======================================================== */
#define HS_HOST_HCH6CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH6CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH6CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH6CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH6CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH6CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH6CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH6CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH6CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH6CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH6CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH6CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH6CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH6CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH6CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH6CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH7CTL  ======================================================== */
#define HS_HOST_HCH7CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH7CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH7CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH7CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH7CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH7CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH7CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH7CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH7CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH7CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH7CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH7CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH7CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH7CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH7CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH7CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH8CTL  ======================================================== */
#define HS_HOST_HCH8CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH8CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH8CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH8CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH8CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH8CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH8CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH8CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH8CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH8CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH8CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH8CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH8CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH8CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH8CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH8CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* ========================================================  HCH9CTL  ======================================================== */
#define HS_HOST_HCH9CTL_MPL_Pos           (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH9CTL_MPL_Msk           (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH9CTL_EPNUM_Pos         (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH9CTL_EPNUM_Msk         (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH9CTL_EPDIR_Pos         (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH9CTL_EPDIR_Msk         (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9CTL_LSD_Pos           (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH9CTL_LSD_Msk           (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9CTL_EPTYPE_Pos        (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH9CTL_EPTYPE_Msk        (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH9CTL_MPC_Pos           (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH9CTL_MPC_Msk           (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH9CTL_DAR_Pos           (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH9CTL_DAR_Msk           (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH9CTL_ODDFRM_Pos        (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH9CTL_ODDFRM_Msk        (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9CTL_CDIS_Pos          (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH9CTL_CDIS_Msk          (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9CTL_CEN_Pos           (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH9CTL_CEN_Msk           (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH10CTL  ======================================================== */
#define HS_HOST_HCH10CTL_MPL_Pos          (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH10CTL_MPL_Msk          (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH10CTL_EPNUM_Pos        (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH10CTL_EPNUM_Msk        (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH10CTL_EPDIR_Pos        (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH10CTL_EPDIR_Msk        (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10CTL_LSD_Pos          (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH10CTL_LSD_Msk          (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10CTL_EPTYPE_Pos       (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH10CTL_EPTYPE_Msk       (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH10CTL_MPC_Pos          (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH10CTL_MPC_Msk          (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH10CTL_DAR_Pos          (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH10CTL_DAR_Msk          (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH10CTL_ODDFRM_Pos       (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH10CTL_ODDFRM_Msk       (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10CTL_CDIS_Pos         (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH10CTL_CDIS_Msk         (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10CTL_CEN_Pos          (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH10CTL_CEN_Msk          (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH11CTL  ======================================================== */
#define HS_HOST_HCH11CTL_MPL_Pos          (0UL)                     /*!< MPL (Bit 0) */
#define HS_HOST_HCH11CTL_MPL_Msk          (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
#define HS_HOST_HCH11CTL_EPNUM_Pos        (11UL)                    /*!< EPNUM (Bit 11) */
#define HS_HOST_HCH11CTL_EPNUM_Msk        (0x7800UL)                /*!< EPNUM (Bitfield-Mask: 0x0f) */
#define HS_HOST_HCH11CTL_EPDIR_Pos        (15UL)                    /*!< EPDIR (Bit 15) */
#define HS_HOST_HCH11CTL_EPDIR_Msk        (0x8000UL)                /*!< EPDIR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11CTL_LSD_Pos          (17UL)                    /*!< LSD (Bit 17) */
#define HS_HOST_HCH11CTL_LSD_Msk          (0x20000UL)               /*!< LSD (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11CTL_EPTYPE_Pos       (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_HOST_HCH11CTL_EPTYPE_Msk       (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH11CTL_MPC_Pos          (20UL)                    /*!< MPC (Bit 20) */
#define HS_HOST_HCH11CTL_MPC_Msk          (0x300000UL)              /*!< MPC (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH11CTL_DAR_Pos          (22UL)                    /*!< DAR (Bit 22) */
#define HS_HOST_HCH11CTL_DAR_Msk          (0x1fc00000UL)            /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH11CTL_ODDFRM_Pos       (29UL)                    /*!< ODDFRM (Bit 29) */
#define HS_HOST_HCH11CTL_ODDFRM_Msk       (0x20000000UL)            /*!< ODDFRM (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11CTL_CDIS_Pos         (30UL)                    /*!< CDIS (Bit 30) */
#define HS_HOST_HCH11CTL_CDIS_Msk         (0x40000000UL)            /*!< CDIS (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11CTL_CEN_Pos          (31UL)                    /*!< CEN (Bit 31) */
#define HS_HOST_HCH11CTL_CEN_Msk          (0x80000000UL)            /*!< CEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH0STCTL  ======================================================= */
#define HS_HOST_HCH0STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH0STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH0STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH0STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH0STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH0STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH0STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH0STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH0STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH1STCTL  ======================================================= */
#define HS_HOST_HCH1STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH1STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH1STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH1STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH1STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH1STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH1STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH1STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH1STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH2STCTL  ======================================================= */
#define HS_HOST_HCH2STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH2STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH2STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH2STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH2STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH2STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH2STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH2STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH2STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH3STCTL  ======================================================= */
#define HS_HOST_HCH3STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH3STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH3STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH3STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH3STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH3STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH3STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH3STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH3STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH4STCTL  ======================================================= */
#define HS_HOST_HCH4STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH4STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH4STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH4STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH4STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH4STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH4STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH4STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH4STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH5STCTL  ======================================================= */
#define HS_HOST_HCH5STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH5STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH5STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH5STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH5STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH5STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH5STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH5STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH5STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH6STCTL  ======================================================= */
#define HS_HOST_HCH6STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH6STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH6STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH6STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH6STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH6STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH6STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH6STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH6STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH7STCTL  ======================================================= */
#define HS_HOST_HCH7STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH7STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH7STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH7STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH7STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH7STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH7STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH7STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH7STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH8STCTL  ======================================================= */
#define HS_HOST_HCH8STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH8STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH8STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH8STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH8STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH8STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH8STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH8STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH8STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH9STCTL  ======================================================= */
#define HS_HOST_HCH9STCTL_PADDR_Pos       (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH9STCTL_PADDR_Msk       (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH9STCTL_HADDR_Pos       (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH9STCTL_HADDR_Msk       (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH9STCTL_ISOPCE_Pos      (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH9STCTL_ISOPCE_Msk      (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH9STCTL_CSPLT_Pos       (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH9STCTL_CSPLT_Msk       (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9STCTL_SPLEN_Pos       (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH9STCTL_SPLEN_Msk       (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* ======================================================  HCH10STCTL  ======================================================= */
#define HS_HOST_HCH10STCTL_PADDR_Pos      (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH10STCTL_PADDR_Msk      (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH10STCTL_HADDR_Pos      (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH10STCTL_HADDR_Msk      (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH10STCTL_ISOPCE_Pos     (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH10STCTL_ISOPCE_Msk     (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH10STCTL_CSPLT_Pos      (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH10STCTL_CSPLT_Msk      (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10STCTL_SPLEN_Pos      (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH10STCTL_SPLEN_Msk      (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* ======================================================  HCH11STCTL  ======================================================= */
#define HS_HOST_HCH11STCTL_PADDR_Pos      (0UL)                     /*!< PADDR (Bit 0) */
#define HS_HOST_HCH11STCTL_PADDR_Msk      (0x7fUL)                  /*!< PADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH11STCTL_HADDR_Pos      (7UL)                     /*!< HADDR (Bit 7) */
#define HS_HOST_HCH11STCTL_HADDR_Msk      (0x3f80UL)                /*!< HADDR (Bitfield-Mask: 0x7f) */
#define HS_HOST_HCH11STCTL_ISOPCE_Pos     (14UL)                    /*!< ISOPCE (Bit 14) */
#define HS_HOST_HCH11STCTL_ISOPCE_Msk     (0xc000UL)                /*!< ISOPCE (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH11STCTL_CSPLT_Pos      (16UL)                    /*!< CSPLT (Bit 16) */
#define HS_HOST_HCH11STCTL_CSPLT_Msk      (0x10000UL)               /*!< CSPLT (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11STCTL_SPLEN_Pos      (31UL)                    /*!< SPLEN (Bit 31) */
#define HS_HOST_HCH11STCTL_SPLEN_Msk      (0x80000000UL)            /*!< SPLEN (Bitfield-Mask: 0x01) */
/* =======================================================  HCH0INTF  ======================================================== */
#define HS_HOST_HCH0INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH0INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH0INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH0INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH0INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH0INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH0INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH0INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH0INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH0INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH0INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH0INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH1INTF  ======================================================== */
#define HS_HOST_HCH1INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH1INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH1INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH1INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH1INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH1INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH1INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH1INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH1INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH1INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH1INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH1INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH2INTF  ======================================================== */
#define HS_HOST_HCH2INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH2INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH2INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH2INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH2INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH2INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH2INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH2INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH2INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH2INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH2INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH2INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH3INTF  ======================================================== */
#define HS_HOST_HCH3INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH3INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH3INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH3INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH3INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH3INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH3INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH3INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH3INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH3INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH3INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH3INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH4INTF  ======================================================== */
#define HS_HOST_HCH4INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH4INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH4INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH4INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH4INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH4INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH4INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH4INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH4INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH4INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH4INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH4INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH5INTF  ======================================================== */
#define HS_HOST_HCH5INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH5INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH5INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH5INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH5INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH5INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH5INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH5INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH5INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH5INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH5INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH5INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH6INTF  ======================================================== */
#define HS_HOST_HCH6INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH6INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH6INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH6INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH6INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH6INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH6INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH6INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH6INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH6INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH6INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH6INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH7INTF  ======================================================== */
#define HS_HOST_HCH7INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH7INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH7INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH7INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH7INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH7INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH7INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH7INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH7INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH7INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH7INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH7INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH8INTF  ======================================================== */
#define HS_HOST_HCH8INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH8INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH8INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH8INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH8INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH8INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH8INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH8INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH8INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH8INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH8INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH8INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH9INTF  ======================================================== */
#define HS_HOST_HCH9INTF_TF_Pos           (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH9INTF_TF_Msk           (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_CH_Pos           (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH9INTF_CH_Msk           (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_DMAER_Pos        (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH9INTF_DMAER_Msk        (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_STALL_Pos        (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH9INTF_STALL_Msk        (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_NAK_Pos          (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH9INTF_NAK_Msk          (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_ACK_Pos          (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH9INTF_ACK_Msk          (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_NYET_Pos         (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH9INTF_NYET_Msk         (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_USBER_Pos        (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH9INTF_USBER_Msk        (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_BBER_Pos         (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH9INTF_BBER_Msk         (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_REQOVR_Pos       (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH9INTF_REQOVR_Msk       (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTF_DTER_Pos         (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH9INTF_DTER_Msk         (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH10INTF  ======================================================= */
#define HS_HOST_HCH10INTF_TF_Pos          (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH10INTF_TF_Msk          (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_CH_Pos          (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH10INTF_CH_Msk          (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_DMAER_Pos       (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH10INTF_DMAER_Msk       (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_STALL_Pos       (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH10INTF_STALL_Msk       (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_NAK_Pos         (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH10INTF_NAK_Msk         (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_ACK_Pos         (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH10INTF_ACK_Msk         (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_NYET_Pos        (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH10INTF_NYET_Msk        (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_USBER_Pos       (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH10INTF_USBER_Msk       (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_BBER_Pos        (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH10INTF_BBER_Msk        (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_REQOVR_Pos      (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH10INTF_REQOVR_Msk      (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTF_DTER_Pos        (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH10INTF_DTER_Msk        (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH11INTF  ======================================================= */
#define HS_HOST_HCH11INTF_TF_Pos          (0UL)                     /*!< TF (Bit 0) */
#define HS_HOST_HCH11INTF_TF_Msk          (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_CH_Pos          (1UL)                     /*!< CH (Bit 1) */
#define HS_HOST_HCH11INTF_CH_Msk          (0x2UL)                   /*!< CH (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_DMAER_Pos       (2UL)                     /*!< DMAER (Bit 2) */
#define HS_HOST_HCH11INTF_DMAER_Msk       (0x4UL)                   /*!< DMAER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_STALL_Pos       (3UL)                     /*!< STALL (Bit 3) */
#define HS_HOST_HCH11INTF_STALL_Msk       (0x8UL)                   /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_NAK_Pos         (4UL)                     /*!< NAK (Bit 4) */
#define HS_HOST_HCH11INTF_NAK_Msk         (0x10UL)                  /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_ACK_Pos         (5UL)                     /*!< ACK (Bit 5) */
#define HS_HOST_HCH11INTF_ACK_Msk         (0x20UL)                  /*!< ACK (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_NYET_Pos        (6UL)                     /*!< NYET (Bit 6) */
#define HS_HOST_HCH11INTF_NYET_Msk        (0x40UL)                  /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_USBER_Pos       (7UL)                     /*!< USBER (Bit 7) */
#define HS_HOST_HCH11INTF_USBER_Msk       (0x80UL)                  /*!< USBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_BBER_Pos        (8UL)                     /*!< BBER (Bit 8) */
#define HS_HOST_HCH11INTF_BBER_Msk        (0x100UL)                 /*!< BBER (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_REQOVR_Pos      (9UL)                     /*!< REQOVR (Bit 9) */
#define HS_HOST_HCH11INTF_REQOVR_Msk      (0x200UL)                 /*!< REQOVR (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTF_DTER_Pos        (10UL)                    /*!< DTER (Bit 10) */
#define HS_HOST_HCH11INTF_DTER_Msk        (0x400UL)                 /*!< DTER (Bitfield-Mask: 0x01) */
/* =======================================================  HCH0INTEN  ======================================================= */
#define HS_HOST_HCH0INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH0INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH0INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH0INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH0INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH0INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH0INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH0INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH0INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH0INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH0INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH0INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH0INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH1INTEN  ======================================================= */
#define HS_HOST_HCH1INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH1INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH1INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH1INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH1INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH1INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH1INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH1INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH1INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH1INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH1INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH1INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH1INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH2INTEN  ======================================================= */
#define HS_HOST_HCH2INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH2INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH2INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH2INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH2INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH2INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH2INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH2INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH2INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH2INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH2INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH2INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH2INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH3INTEN  ======================================================= */
#define HS_HOST_HCH3INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH3INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH3INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH3INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH3INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH3INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH3INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH3INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH3INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH3INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH3INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH3INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH3INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH4INTEN  ======================================================= */
#define HS_HOST_HCH4INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH4INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH4INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH4INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH4INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH4INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH4INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH4INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH4INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH4INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH4INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH4INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH4INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH5INTEN  ======================================================= */
#define HS_HOST_HCH5INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH5INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH5INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH5INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH5INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH5INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH5INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH5INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH5INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH5INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH5INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH5INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH5INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH6INTEN  ======================================================= */
#define HS_HOST_HCH6INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH6INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH6INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH6INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH6INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH6INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH6INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH6INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH6INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH6INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH6INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH6INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH6INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH7INTEN  ======================================================= */
#define HS_HOST_HCH7INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH7INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH7INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH7INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH7INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH7INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH7INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH7INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH7INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH7INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH7INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH7INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH7INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH8INTEN  ======================================================= */
#define HS_HOST_HCH8INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH8INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH8INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH8INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH8INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH8INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH8INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH8INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH8INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH8INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH8INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH8INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH8INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* =======================================================  HCH9INTEN  ======================================================= */
#define HS_HOST_HCH9INTEN_TFIE_Pos        (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH9INTEN_TFIE_Msk        (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_CHIE_Pos        (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH9INTEN_CHIE_Msk        (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_DMAERIE_Pos     (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH9INTEN_DMAERIE_Msk     (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_STALLIE_Pos     (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH9INTEN_STALLIE_Msk     (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_NAKIE_Pos       (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH9INTEN_NAKIE_Msk       (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_ACKIE_Pos       (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH9INTEN_ACKIE_Msk       (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_NYETIE_Pos      (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH9INTEN_NYETIE_Msk      (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_USBERIE_Pos     (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH9INTEN_USBERIE_Msk     (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_BBERIE_Pos      (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH9INTEN_BBERIE_Msk      (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_REQOVRIE_Pos    (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH9INTEN_REQOVRIE_Msk    (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH9INTEN_DTERIE_Pos      (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH9INTEN_DTERIE_Msk      (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* ======================================================  HCH10INTEN  ======================================================= */
#define HS_HOST_HCH10INTEN_TFIE_Pos       (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH10INTEN_TFIE_Msk       (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_CHIE_Pos       (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH10INTEN_CHIE_Msk       (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_DMAERIE_Pos    (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH10INTEN_DMAERIE_Msk    (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_STALLIE_Pos    (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH10INTEN_STALLIE_Msk    (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_NAKIE_Pos      (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH10INTEN_NAKIE_Msk      (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_ACKIE_Pos      (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH10INTEN_ACKIE_Msk      (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_NYETIE_Pos     (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH10INTEN_NYETIE_Msk     (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_USBERIE_Pos    (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH10INTEN_USBERIE_Msk    (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_BBERIE_Pos     (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH10INTEN_BBERIE_Msk     (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_REQOVRIE_Pos   (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH10INTEN_REQOVRIE_Msk   (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH10INTEN_DTERIE_Pos     (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH10INTEN_DTERIE_Msk     (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* ======================================================  HCH11INTEN  ======================================================= */
#define HS_HOST_HCH11INTEN_TFIE_Pos       (0UL)                     /*!< TFIE (Bit 0) */
#define HS_HOST_HCH11INTEN_TFIE_Msk       (0x1UL)                   /*!< TFIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_CHIE_Pos       (1UL)                     /*!< CHIE (Bit 1) */
#define HS_HOST_HCH11INTEN_CHIE_Msk       (0x2UL)                   /*!< CHIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_DMAERIE_Pos    (2UL)                     /*!< DMAERIE (Bit 2) */
#define HS_HOST_HCH11INTEN_DMAERIE_Msk    (0x4UL)                   /*!< DMAERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_STALLIE_Pos    (3UL)                     /*!< STALLIE (Bit 3) */
#define HS_HOST_HCH11INTEN_STALLIE_Msk    (0x8UL)                   /*!< STALLIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_NAKIE_Pos      (4UL)                     /*!< NAKIE (Bit 4) */
#define HS_HOST_HCH11INTEN_NAKIE_Msk      (0x10UL)                  /*!< NAKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_ACKIE_Pos      (5UL)                     /*!< ACKIE (Bit 5) */
#define HS_HOST_HCH11INTEN_ACKIE_Msk      (0x20UL)                  /*!< ACKIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_NYETIE_Pos     (6UL)                     /*!< NYETIE (Bit 6) */
#define HS_HOST_HCH11INTEN_NYETIE_Msk     (0x40UL)                  /*!< NYETIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_USBERIE_Pos    (7UL)                     /*!< USBERIE (Bit 7) */
#define HS_HOST_HCH11INTEN_USBERIE_Msk    (0x80UL)                  /*!< USBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_BBERIE_Pos     (8UL)                     /*!< BBERIE (Bit 8) */
#define HS_HOST_HCH11INTEN_BBERIE_Msk     (0x100UL)                 /*!< BBERIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_REQOVRIE_Pos   (9UL)                     /*!< REQOVRIE (Bit 9) */
#define HS_HOST_HCH11INTEN_REQOVRIE_Msk   (0x200UL)                 /*!< REQOVRIE (Bitfield-Mask: 0x01) */
#define HS_HOST_HCH11INTEN_DTERIE_Pos     (10UL)                    /*!< DTERIE (Bit 10) */
#define HS_HOST_HCH11INTEN_DTERIE_Msk     (0x400UL)                 /*!< DTERIE (Bitfield-Mask: 0x01) */
/* ========================================================  HCH0LEN  ======================================================== */
#define HS_HOST_HCH0LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH0LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH0LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH0LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH0LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH0LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH0LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH0LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ========================================================  HCH1LEN  ======================================================== */
#define HS_HOST_HCH1LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH1LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH1LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH1LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH1LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH1LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH1LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH1LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ========================================================  HCH2LEN  ======================================================== */
#define HS_HOST_HCH2LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH2LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH2LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH2LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH2LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH2LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH2LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH2LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ========================================================  HCH3LEN  ======================================================== */
#define HS_HOST_HCH3LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH3LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH3LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH3LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH3LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH3LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH3LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH3LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ========================================================  HCH4LEN  ======================================================== */
#define HS_HOST_HCH4LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH4LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH4LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH4LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH4LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH4LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH4LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH4LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ========================================================  HCH5LEN  ======================================================== */
#define HS_HOST_HCH5LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH5LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH5LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH5LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH5LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH5LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH5LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH5LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ========================================================  HCH6LEN  ======================================================== */
#define HS_HOST_HCH6LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH6LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH6LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH6LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH6LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH6LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH6LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH6LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ========================================================  HCH7LEN  ======================================================== */
#define HS_HOST_HCH7LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH7LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH7LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH7LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH7LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH7LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH7LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH7LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ========================================================  HCH8LEN  ======================================================== */
#define HS_HOST_HCH8LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH8LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH8LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH8LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH8LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH8LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH8LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH8LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ========================================================  HCH9LEN  ======================================================== */
#define HS_HOST_HCH9LEN_TLEN_Pos          (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH9LEN_TLEN_Msk          (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH9LEN_PCNT_Pos          (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH9LEN_PCNT_Msk          (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH9LEN_DPID_Pos          (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH9LEN_DPID_Msk          (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH9LEN_PING_Pos          (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH9LEN_PING_Msk          (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* =======================================================  HCH10LEN  ======================================================== */
#define HS_HOST_HCH10LEN_TLEN_Pos         (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH10LEN_TLEN_Msk         (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH10LEN_PCNT_Pos         (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH10LEN_PCNT_Msk         (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH10LEN_DPID_Pos         (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH10LEN_DPID_Msk         (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH10LEN_PING_Pos         (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH10LEN_PING_Msk         (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* =======================================================  HCH11LEN  ======================================================== */
#define HS_HOST_HCH11LEN_TLEN_Pos         (0UL)                     /*!< TLEN (Bit 0) */
#define HS_HOST_HCH11LEN_TLEN_Msk         (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
#define HS_HOST_HCH11LEN_PCNT_Pos         (19UL)                    /*!< PCNT (Bit 19) */
#define HS_HOST_HCH11LEN_PCNT_Msk         (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_HOST_HCH11LEN_DPID_Pos         (29UL)                    /*!< DPID (Bit 29) */
#define HS_HOST_HCH11LEN_DPID_Msk         (0x60000000UL)            /*!< DPID (Bitfield-Mask: 0x03) */
#define HS_HOST_HCH11LEN_PING_Pos         (31UL)                    /*!< PING (Bit 31) */
#define HS_HOST_HCH11LEN_PING_Msk         (0x80000000UL)            /*!< PING (Bitfield-Mask: 0x01) */
/* ======================================================  HCH0DMAADDR  ====================================================== */
#define HS_HOST_HCH0DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH0DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  HCH1DMAADDR  ====================================================== */
#define HS_HOST_HCH1DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH1DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  HCH2DMAADDR  ====================================================== */
#define HS_HOST_HCH2DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH2DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  HCH3DMAADDR  ====================================================== */
#define HS_HOST_HCH3DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH3DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  HCH4DMAADDR  ====================================================== */
#define HS_HOST_HCH4DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH4DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  HCH5DMAADDR  ====================================================== */
#define HS_HOST_HCH5DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH5DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  HCH6DMAADDR  ====================================================== */
#define HS_HOST_HCH6DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH6DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  HCH7DMAADDR  ====================================================== */
#define HS_HOST_HCH7DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH7DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  HCH8DMAADDR  ====================================================== */
#define HS_HOST_HCH8DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH8DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  HCH9DMAADDR  ====================================================== */
#define HS_HOST_HCH9DMAADDR_DMAADDR_Pos   (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH9DMAADDR_DMAADDR_Msk   (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  HCH10DMAADDR  ====================================================== */
#define HS_HOST_HCH10DMAADDR_DMAADDR_Pos  (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH10DMAADDR_DMAADDR_Msk  (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  HCH11DMAADDR  ====================================================== */
#define HS_HOST_HCH11DMAADDR_DMAADDR_Pos  (0UL)                     /*!< DMAADDR (Bit 0) */
#define HS_HOST_HCH11DMAADDR_DMAADDR_Msk  (0xffffffffUL)            /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                         HS_DEVICE                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  DCFG  ========================================================== */
#define HS_DEVICE_DCFG_DS_Pos             (0UL)                     /*!< DS (Bit 0) */
#define HS_DEVICE_DCFG_DS_Msk             (0x3UL)                   /*!< DS (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DCFG_NZLSOH_Pos         (2UL)                     /*!< NZLSOH (Bit 2) */
#define HS_DEVICE_DCFG_NZLSOH_Msk         (0x4UL)                   /*!< NZLSOH (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DCFG_DAR_Pos            (4UL)                     /*!< DAR (Bit 4) */
#define HS_DEVICE_DCFG_DAR_Msk            (0x7f0UL)                 /*!< DAR (Bitfield-Mask: 0x7f) */
#define HS_DEVICE_DCFG_EOPFT_Pos          (11UL)                    /*!< EOPFT (Bit 11) */
#define HS_DEVICE_DCFG_EOPFT_Msk          (0x1800UL)                /*!< EOPFT (Bitfield-Mask: 0x03) */
/* =========================================================  DCTL  ========================================================== */
#define HS_DEVICE_DCTL_RWKUP_Pos          (0UL)                     /*!< RWKUP (Bit 0) */
#define HS_DEVICE_DCTL_RWKUP_Msk          (0x1UL)                   /*!< RWKUP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DCTL_SD_Pos             (1UL)                     /*!< SD (Bit 1) */
#define HS_DEVICE_DCTL_SD_Msk             (0x2UL)                   /*!< SD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DCTL_GINS_Pos           (2UL)                     /*!< GINS (Bit 2) */
#define HS_DEVICE_DCTL_GINS_Msk           (0x4UL)                   /*!< GINS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DCTL_GONS_Pos           (3UL)                     /*!< GONS (Bit 3) */
#define HS_DEVICE_DCTL_GONS_Msk           (0x8UL)                   /*!< GONS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DCTL_SGINAK_Pos         (7UL)                     /*!< SGINAK (Bit 7) */
#define HS_DEVICE_DCTL_SGINAK_Msk         (0x80UL)                  /*!< SGINAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DCTL_CGINAK_Pos         (8UL)                     /*!< CGINAK (Bit 8) */
#define HS_DEVICE_DCTL_CGINAK_Msk         (0x100UL)                 /*!< CGINAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DCTL_SGONAK_Pos         (9UL)                     /*!< SGONAK (Bit 9) */
#define HS_DEVICE_DCTL_SGONAK_Msk         (0x200UL)                 /*!< SGONAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DCTL_CGONAK_Pos         (10UL)                    /*!< CGONAK (Bit 10) */
#define HS_DEVICE_DCTL_CGONAK_Msk         (0x400UL)                 /*!< CGONAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DCTL_POIF_Pos           (11UL)                    /*!< POIF (Bit 11) */
#define HS_DEVICE_DCTL_POIF_Msk           (0x800UL)                 /*!< POIF (Bitfield-Mask: 0x01) */
/* =========================================================  DSTAT  ========================================================= */
#define HS_DEVICE_DSTAT_SPST_Pos          (0UL)                     /*!< SPST (Bit 0) */
#define HS_DEVICE_DSTAT_SPST_Msk          (0x1UL)                   /*!< SPST (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DSTAT_ES_Pos            (1UL)                     /*!< ES (Bit 1) */
#define HS_DEVICE_DSTAT_ES_Msk            (0x6UL)                   /*!< ES (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DSTAT_FNRSOF_Pos        (8UL)                     /*!< FNRSOF (Bit 8) */
#define HS_DEVICE_DSTAT_FNRSOF_Msk        (0x3fff00UL)              /*!< FNRSOF (Bitfield-Mask: 0x3fff) */
/* =======================================================  DIEPINTEN  ======================================================= */
#define HS_DEVICE_DIEPINTEN_TFEN_Pos      (0UL)                     /*!< TFEN (Bit 0) */
#define HS_DEVICE_DIEPINTEN_TFEN_Msk      (0x1UL)                   /*!< TFEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEPINTEN_EPDISEN_Pos   (1UL)                     /*!< EPDISEN (Bit 1) */
#define HS_DEVICE_DIEPINTEN_EPDISEN_Msk   (0x2UL)                   /*!< EPDISEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEPINTEN_CITOEN_Pos    (3UL)                     /*!< CITOEN (Bit 3) */
#define HS_DEVICE_DIEPINTEN_CITOEN_Msk    (0x8UL)                   /*!< CITOEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEPINTEN_EPTXFUDEN_Pos (4UL)                     /*!< EPTXFUDEN (Bit 4) */
#define HS_DEVICE_DIEPINTEN_EPTXFUDEN_Msk (0x10UL)                  /*!< EPTXFUDEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEPINTEN_IEPNEEN_Pos   (6UL)                     /*!< IEPNEEN (Bit 6) */
#define HS_DEVICE_DIEPINTEN_IEPNEEN_Msk   (0x40UL)                  /*!< IEPNEEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEPINTEN_TXFEEN_Pos    (7UL)                     /*!< TXFEEN (Bit 7) */
#define HS_DEVICE_DIEPINTEN_TXFEEN_Msk    (0x80UL)                  /*!< TXFEEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEPINTEN_NAKEN_Pos     (13UL)                    /*!< NAKEN (Bit 13) */
#define HS_DEVICE_DIEPINTEN_NAKEN_Msk     (0x2000UL)                /*!< NAKEN (Bitfield-Mask: 0x01) */
/* =======================================================  DOEPINTEN  ======================================================= */
#define HS_DEVICE_DOEPINTEN_TFEN_Pos      (0UL)                     /*!< TFEN (Bit 0) */
#define HS_DEVICE_DOEPINTEN_TFEN_Msk      (0x1UL)                   /*!< TFEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEPINTEN_EPDISEN_Pos   (1UL)                     /*!< EPDISEN (Bit 1) */
#define HS_DEVICE_DOEPINTEN_EPDISEN_Msk   (0x2UL)                   /*!< EPDISEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEPINTEN_STPFEN_Pos    (3UL)                     /*!< STPFEN (Bit 3) */
#define HS_DEVICE_DOEPINTEN_STPFEN_Msk    (0x8UL)                   /*!< STPFEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEPINTEN_EPRXFOVREN_Pos (4UL)                    /*!< EPRXFOVREN (Bit 4) */
#define HS_DEVICE_DOEPINTEN_EPRXFOVREN_Msk (0x10UL)                 /*!< EPRXFOVREN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEPINTEN_BTBSTPEN_Pos  (6UL)                     /*!< BTBSTPEN (Bit 6) */
#define HS_DEVICE_DOEPINTEN_BTBSTPEN_Msk  (0x40UL)                  /*!< BTBSTPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEPINTEN_NYETEN_Pos    (14UL)                    /*!< NYETEN (Bit 14) */
#define HS_DEVICE_DOEPINTEN_NYETEN_Msk    (0x4000UL)                /*!< NYETEN (Bitfield-Mask: 0x01) */
/* ========================================================  DAEPINT  ======================================================== */
#define HS_DEVICE_DAEPINT_IEPITB_Pos      (0UL)                     /*!< IEPITB (Bit 0) */
#define HS_DEVICE_DAEPINT_IEPITB_Msk      (0x3fUL)                  /*!< IEPITB (Bitfield-Mask: 0x3f) */
#define HS_DEVICE_DAEPINT_OEPITB_Pos      (16UL)                    /*!< OEPITB (Bit 16) */
#define HS_DEVICE_DAEPINT_OEPITB_Msk      (0x3f0000UL)              /*!< OEPITB (Bitfield-Mask: 0x3f) */
/* =======================================================  DAEPINTEN  ======================================================= */
#define HS_DEVICE_DAEPINTEN_IEPIE_Pos     (0UL)                     /*!< IEPIE (Bit 0) */
#define HS_DEVICE_DAEPINTEN_IEPIE_Msk     (0x3fUL)                  /*!< IEPIE (Bitfield-Mask: 0x3f) */
#define HS_DEVICE_DAEPINTEN_OEPIE_Pos     (16UL)                    /*!< OEPIE (Bit 16) */
#define HS_DEVICE_DAEPINTEN_OEPIE_Msk     (0x3f0000UL)              /*!< OEPIE (Bitfield-Mask: 0x3f) */
/* ========================================================  DVBUSDT  ======================================================== */
#define HS_DEVICE_DVBUSDT_DVBUSDT_Pos     (0UL)                     /*!< DVBUSDT (Bit 0) */
#define HS_DEVICE_DVBUSDT_DVBUSDT_Msk     (0xffffUL)                /*!< DVBUSDT (Bitfield-Mask: 0xffff) */
/* ========================================================  DVBUSPT  ======================================================== */
#define HS_DEVICE_DVBUSPT_DVBUSPT_Pos     (0UL)                     /*!< DVBUSPT (Bit 0) */
#define HS_DEVICE_DVBUSPT_DVBUSPT_Msk     (0xfffUL)                 /*!< DVBUSPT (Bitfield-Mask: 0xfff) */
/* ======================================================  DIEPFEINTEN  ====================================================== */
#define HS_DEVICE_DIEPFEINTEN_IEPTXFEIE_Pos (0UL)                   /*!< IEPTXFEIE (Bit 0) */
#define HS_DEVICE_DIEPFEINTEN_IEPTXFEIE_Msk (0x3fUL)                /*!< IEPTXFEIE (Bitfield-Mask: 0x3f) */
/* ========================================================  DEP1INT  ======================================================== */
#define HS_DEVICE_DEP1INT_IEP1INT_Pos     (1UL)                     /*!< IEP1INT (Bit 1) */
#define HS_DEVICE_DEP1INT_IEP1INT_Msk     (0x2UL)                   /*!< IEP1INT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DEP1INT_OEP1INT_Pos     (17UL)                    /*!< OEP1INT (Bit 17) */
#define HS_DEVICE_DEP1INT_OEP1INT_Msk     (0x20000UL)               /*!< OEP1INT (Bitfield-Mask: 0x01) */
/* =======================================================  DEP1INTEN  ======================================================= */
#define HS_DEVICE_DEP1INTEN_IEP1INTEN_Pos (1UL)                     /*!< IEP1INTEN (Bit 1) */
#define HS_DEVICE_DEP1INTEN_IEP1INTEN_Msk (0x2UL)                   /*!< IEP1INTEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DEP1INTEN_OEP1INTEN_Pos (17UL)                    /*!< OEP1INTEN (Bit 17) */
#define HS_DEVICE_DEP1INTEN_OEP1INTEN_Msk (0x20000UL)               /*!< OEP1INTEN (Bitfield-Mask: 0x01) */
/* ======================================================  DIEP1INTEN  ======================================================= */
#define HS_DEVICE_DIEP1INTEN_TFEN_Pos     (0UL)                     /*!< TFEN (Bit 0) */
#define HS_DEVICE_DIEP1INTEN_TFEN_Msk     (0x1UL)                   /*!< TFEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTEN_EPDISEN_Pos  (1UL)                     /*!< EPDISEN (Bit 1) */
#define HS_DEVICE_DIEP1INTEN_EPDISEN_Msk  (0x2UL)                   /*!< EPDISEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTEN_CITOEN_Pos   (3UL)                     /*!< CITOEN (Bit 3) */
#define HS_DEVICE_DIEP1INTEN_CITOEN_Msk   (0x8UL)                   /*!< CITOEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTEN_EPTXFUDEN_Pos (4UL)                    /*!< EPTXFUDEN (Bit 4) */
#define HS_DEVICE_DIEP1INTEN_EPTXFUDEN_Msk (0x10UL)                 /*!< EPTXFUDEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTEN_IEPNEEN_Pos  (6UL)                     /*!< IEPNEEN (Bit 6) */
#define HS_DEVICE_DIEP1INTEN_IEPNEEN_Msk  (0x40UL)                  /*!< IEPNEEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTEN_NAKEN_Pos    (13UL)                    /*!< NAKEN (Bit 13) */
#define HS_DEVICE_DIEP1INTEN_NAKEN_Msk    (0x2000UL)                /*!< NAKEN (Bitfield-Mask: 0x01) */
/* ======================================================  DOEP1INTEN  ======================================================= */
#define HS_DEVICE_DOEP1INTEN_TFEN_Pos     (0UL)                     /*!< TFEN (Bit 0) */
#define HS_DEVICE_DOEP1INTEN_TFEN_Msk     (0x1UL)                   /*!< TFEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTEN_EPDISEN_Pos  (1UL)                     /*!< EPDISEN (Bit 1) */
#define HS_DEVICE_DOEP1INTEN_EPDISEN_Msk  (0x2UL)                   /*!< EPDISEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTEN_STPFEN_Pos   (3UL)                     /*!< STPFEN (Bit 3) */
#define HS_DEVICE_DOEP1INTEN_STPFEN_Msk   (0x8UL)                   /*!< STPFEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTEN_EPRXFOVREN_Pos (4UL)                   /*!< EPRXFOVREN (Bit 4) */
#define HS_DEVICE_DOEP1INTEN_EPRXFOVREN_Msk (0x10UL)                /*!< EPRXFOVREN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTEN_BTBSTPEN_Pos (6UL)                     /*!< BTBSTPEN (Bit 6) */
#define HS_DEVICE_DOEP1INTEN_BTBSTPEN_Msk (0x40UL)                  /*!< BTBSTPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTEN_NYETEN_Pos   (14UL)                    /*!< NYETEN (Bit 14) */
#define HS_DEVICE_DOEP1INTEN_NYETEN_Msk   (0x4000UL)                /*!< NYETEN (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP0CTL  ======================================================== */
#define HS_DEVICE_DIEP0CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DIEP0CTL_MPL_Msk        (0x3UL)                   /*!< MPL (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP0CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DIEP0CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DIEP0CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DIEP0CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP0CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DIEP0CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define HS_DEVICE_DIEP0CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define HS_DEVICE_DIEP0CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DIEP0CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DIEP0CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DIEP0CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DIEP0CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP1CTL  ======================================================== */
#define HS_DEVICE_DIEP1CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DIEP1CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DIEP1CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DIEP1CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DIEP1CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DIEP1CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DIEP1CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define HS_DEVICE_DIEP1CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define HS_DEVICE_DIEP1CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DIEP1CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DIEP1CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP1CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DIEP1CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DIEP1CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DIEP1CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DIEP1CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DIEP2CTL  ======================================================== */
#define HS_DEVICE_DIEP2CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DIEP2CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DIEP2CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DIEP2CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DIEP2CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DIEP2CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DIEP2CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define HS_DEVICE_DIEP2CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define HS_DEVICE_DIEP2CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DIEP2CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DIEP2CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP2CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DIEP2CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DIEP2CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DIEP2CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DIEP2CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DIEP3CTL  ======================================================== */
#define HS_DEVICE_DIEP3CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DIEP3CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DIEP3CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DIEP3CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DIEP3CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DIEP3CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DIEP3CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define HS_DEVICE_DIEP3CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define HS_DEVICE_DIEP3CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DIEP3CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DIEP3CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP3CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DIEP3CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DIEP3CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DIEP3CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DIEP3CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DIEP4CTL  ======================================================== */
#define HS_DEVICE_DIEP4CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DIEP4CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DIEP4CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DIEP4CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DIEP4CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DIEP4CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DIEP4CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define HS_DEVICE_DIEP4CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define HS_DEVICE_DIEP4CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DIEP4CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DIEP4CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP4CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DIEP4CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DIEP4CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DIEP4CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DIEP4CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DIEP5CTL  ======================================================== */
#define HS_DEVICE_DIEP5CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DIEP5CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DIEP5CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DIEP5CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DIEP5CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DIEP5CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DIEP5CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_TXFNUM_Pos     (22UL)                    /*!< TXFNUM (Bit 22) */
#define HS_DEVICE_DIEP5CTL_TXFNUM_Msk     (0x3c00000UL)             /*!< TXFNUM (Bitfield-Mask: 0x0f) */
#define HS_DEVICE_DIEP5CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DIEP5CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DIEP5CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP5CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DIEP5CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DIEP5CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DIEP5CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DIEP5CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DOEP0CTL  ======================================================== */
#define HS_DEVICE_DOEP0CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DOEP0CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DOEP0CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DOEP0CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DOEP0CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DOEP0CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define HS_DEVICE_DOEP0CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DOEP0CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP0CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DOEP0CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DOEP0CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DOEP0CTL_MPL_Msk        (0x3UL)                   /*!< MPL (Bitfield-Mask: 0x03) */
/* =======================================================  DOEP1CTL  ======================================================== */
#define HS_DEVICE_DOEP1CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DOEP1CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DOEP1CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DOEP1CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DOEP1CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DOEP1CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DOEP1CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DOEP1CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define HS_DEVICE_DOEP1CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DOEP1CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP1CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DOEP1CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DOEP1CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DOEP1CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DOEP1CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DOEP2CTL  ======================================================== */
#define HS_DEVICE_DOEP2CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DOEP2CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DOEP2CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DOEP2CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DOEP2CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DOEP2CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DOEP2CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DOEP2CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define HS_DEVICE_DOEP2CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DOEP2CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP2CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DOEP2CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DOEP2CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DOEP2CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DOEP2CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DOEP3CTL  ======================================================== */
#define HS_DEVICE_DOEP3CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DOEP3CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DOEP3CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DOEP3CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DOEP3CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DOEP3CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DOEP3CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DOEP3CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define HS_DEVICE_DOEP3CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DOEP3CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP3CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DOEP3CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DOEP3CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DOEP3CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DOEP3CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DOEP4CTL  ======================================================== */
#define HS_DEVICE_DOEP4CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DOEP4CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DOEP4CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DOEP4CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DOEP4CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DOEP4CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DOEP4CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DOEP4CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define HS_DEVICE_DOEP4CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DOEP4CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP4CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DOEP4CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DOEP4CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DOEP4CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DOEP4CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DOEP5CTL  ======================================================== */
#define HS_DEVICE_DOEP5CTL_EPEN_Pos       (31UL)                    /*!< EPEN (Bit 31) */
#define HS_DEVICE_DOEP5CTL_EPEN_Msk       (0x80000000UL)            /*!< EPEN (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_EPD_Pos        (30UL)                    /*!< EPD (Bit 30) */
#define HS_DEVICE_DOEP5CTL_EPD_Msk        (0x40000000UL)            /*!< EPD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_SD1PID_SODDFRM_Pos (29UL)                /*!< SD1PID_SODDFRM (Bit 29) */
#define HS_DEVICE_DOEP5CTL_SD1PID_SODDFRM_Msk (0x20000000UL)        /*!< SD1PID_SODDFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_SD0PID_SEVENFRM_Pos (28UL)               /*!< SD0PID_SEVENFRM (Bit 28) */
#define HS_DEVICE_DOEP5CTL_SD0PID_SEVENFRM_Msk (0x10000000UL)       /*!< SD0PID_SEVENFRM (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_SNAK_Pos       (27UL)                    /*!< SNAK (Bit 27) */
#define HS_DEVICE_DOEP5CTL_SNAK_Msk       (0x8000000UL)             /*!< SNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_CNAK_Pos       (26UL)                    /*!< CNAK (Bit 26) */
#define HS_DEVICE_DOEP5CTL_CNAK_Msk       (0x4000000UL)             /*!< CNAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_STALL_Pos      (21UL)                    /*!< STALL (Bit 21) */
#define HS_DEVICE_DOEP5CTL_STALL_Msk      (0x200000UL)              /*!< STALL (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_SNOOP_Pos      (20UL)                    /*!< SNOOP (Bit 20) */
#define HS_DEVICE_DOEP5CTL_SNOOP_Msk      (0x100000UL)              /*!< SNOOP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_EPTYPE_Pos     (18UL)                    /*!< EPTYPE (Bit 18) */
#define HS_DEVICE_DOEP5CTL_EPTYPE_Msk     (0xc0000UL)               /*!< EPTYPE (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP5CTL_NAKS_Pos       (17UL)                    /*!< NAKS (Bit 17) */
#define HS_DEVICE_DOEP5CTL_NAKS_Msk       (0x20000UL)               /*!< NAKS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_EOFRM_DPID_Pos (16UL)                    /*!< EOFRM_DPID (Bit 16) */
#define HS_DEVICE_DOEP5CTL_EOFRM_DPID_Msk (0x10000UL)               /*!< EOFRM_DPID (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_EPACT_Pos      (15UL)                    /*!< EPACT (Bit 15) */
#define HS_DEVICE_DOEP5CTL_EPACT_Msk      (0x8000UL)                /*!< EPACT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5CTL_MPL_Pos        (0UL)                     /*!< MPL (Bit 0) */
#define HS_DEVICE_DOEP5CTL_MPL_Msk        (0x7ffUL)                 /*!< MPL (Bitfield-Mask: 0x7ff) */
/* =======================================================  DIEP0INTF  ======================================================= */
#define HS_DEVICE_DIEP0INTF_NAK_Pos       (13UL)                    /*!< NAK (Bit 13) */
#define HS_DEVICE_DIEP0INTF_NAK_Msk       (0x2000UL)                /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define HS_DEVICE_DIEP0INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define HS_DEVICE_DIEP0INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define HS_DEVICE_DIEP0INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define HS_DEVICE_DIEP0INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DIEP0INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP0INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DIEP0INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP1INTF  ======================================================= */
#define HS_DEVICE_DIEP1INTF_NAK_Pos       (13UL)                    /*!< NAK (Bit 13) */
#define HS_DEVICE_DIEP1INTF_NAK_Msk       (0x2000UL)                /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define HS_DEVICE_DIEP1INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define HS_DEVICE_DIEP1INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define HS_DEVICE_DIEP1INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define HS_DEVICE_DIEP1INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DIEP1INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP1INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DIEP1INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP2INTF  ======================================================= */
#define HS_DEVICE_DIEP2INTF_NAK_Pos       (13UL)                    /*!< NAK (Bit 13) */
#define HS_DEVICE_DIEP2INTF_NAK_Msk       (0x2000UL)                /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define HS_DEVICE_DIEP2INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define HS_DEVICE_DIEP2INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define HS_DEVICE_DIEP2INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define HS_DEVICE_DIEP2INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DIEP2INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP2INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DIEP2INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP3INTF  ======================================================= */
#define HS_DEVICE_DIEP3INTF_NAK_Pos       (13UL)                    /*!< NAK (Bit 13) */
#define HS_DEVICE_DIEP3INTF_NAK_Msk       (0x2000UL)                /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define HS_DEVICE_DIEP3INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define HS_DEVICE_DIEP3INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define HS_DEVICE_DIEP3INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define HS_DEVICE_DIEP3INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DIEP3INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP3INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DIEP3INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP4INTF  ======================================================= */
#define HS_DEVICE_DIEP4INTF_NAK_Pos       (13UL)                    /*!< NAK (Bit 13) */
#define HS_DEVICE_DIEP4INTF_NAK_Msk       (0x2000UL)                /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define HS_DEVICE_DIEP4INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define HS_DEVICE_DIEP4INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define HS_DEVICE_DIEP4INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define HS_DEVICE_DIEP4INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DIEP4INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP4INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DIEP4INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP5INTF  ======================================================= */
#define HS_DEVICE_DIEP5INTF_NAK_Pos       (13UL)                    /*!< NAK (Bit 13) */
#define HS_DEVICE_DIEP5INTF_NAK_Msk       (0x2000UL)                /*!< NAK (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5INTF_TXFE_Pos      (7UL)                     /*!< TXFE (Bit 7) */
#define HS_DEVICE_DIEP5INTF_TXFE_Msk      (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5INTF_IEPNE_Pos     (6UL)                     /*!< IEPNE (Bit 6) */
#define HS_DEVICE_DIEP5INTF_IEPNE_Msk     (0x40UL)                  /*!< IEPNE (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5INTF_EPTXFUD_Pos   (4UL)                     /*!< EPTXFUD (Bit 4) */
#define HS_DEVICE_DIEP5INTF_EPTXFUD_Msk   (0x10UL)                  /*!< EPTXFUD (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5INTF_CITO_Pos      (3UL)                     /*!< CITO (Bit 3) */
#define HS_DEVICE_DIEP5INTF_CITO_Msk      (0x8UL)                   /*!< CITO (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DIEP5INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DIEP5INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DIEP5INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP0INTF  ======================================================= */
#define HS_DEVICE_DOEP0INTF_NYET_Pos      (14UL)                    /*!< NYET (Bit 14) */
#define HS_DEVICE_DOEP0INTF_NYET_Msk      (0x4000UL)                /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define HS_DEVICE_DOEP0INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define HS_DEVICE_DOEP0INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define HS_DEVICE_DOEP0INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DOEP0INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DOEP0INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP1INTF  ======================================================= */
#define HS_DEVICE_DOEP1INTF_NYET_Pos      (14UL)                    /*!< NYET (Bit 14) */
#define HS_DEVICE_DOEP1INTF_NYET_Msk      (0x4000UL)                /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define HS_DEVICE_DOEP1INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define HS_DEVICE_DOEP1INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define HS_DEVICE_DOEP1INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DOEP1INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP1INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DOEP1INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP2INTF  ======================================================= */
#define HS_DEVICE_DOEP2INTF_NYET_Pos      (14UL)                    /*!< NYET (Bit 14) */
#define HS_DEVICE_DOEP2INTF_NYET_Msk      (0x4000UL)                /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define HS_DEVICE_DOEP2INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define HS_DEVICE_DOEP2INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define HS_DEVICE_DOEP2INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DOEP2INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP2INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DOEP2INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP3INTF  ======================================================= */
#define HS_DEVICE_DOEP3INTF_NYET_Pos      (14UL)                    /*!< NYET (Bit 14) */
#define HS_DEVICE_DOEP3INTF_NYET_Msk      (0x4000UL)                /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define HS_DEVICE_DOEP3INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define HS_DEVICE_DOEP3INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define HS_DEVICE_DOEP3INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DOEP3INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP3INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DOEP3INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP4INTF  ======================================================= */
#define HS_DEVICE_DOEP4INTF_NYET_Pos      (14UL)                    /*!< NYET (Bit 14) */
#define HS_DEVICE_DOEP4INTF_NYET_Msk      (0x4000UL)                /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define HS_DEVICE_DOEP4INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define HS_DEVICE_DOEP4INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define HS_DEVICE_DOEP4INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DOEP4INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP4INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DOEP4INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DOEP5INTF  ======================================================= */
#define HS_DEVICE_DOEP5INTF_NYET_Pos      (14UL)                    /*!< NYET (Bit 14) */
#define HS_DEVICE_DOEP5INTF_NYET_Msk      (0x4000UL)                /*!< NYET (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5INTF_BTBSTP_Pos    (6UL)                     /*!< BTBSTP (Bit 6) */
#define HS_DEVICE_DOEP5INTF_BTBSTP_Msk    (0x40UL)                  /*!< BTBSTP (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5INTF_EPRXFOVR_Pos  (4UL)                     /*!< EPRXFOVR (Bit 4) */
#define HS_DEVICE_DOEP5INTF_EPRXFOVR_Msk  (0x10UL)                  /*!< EPRXFOVR (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5INTF_STPF_Pos      (3UL)                     /*!< STPF (Bit 3) */
#define HS_DEVICE_DOEP5INTF_STPF_Msk      (0x8UL)                   /*!< STPF (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5INTF_EPDIS_Pos     (1UL)                     /*!< EPDIS (Bit 1) */
#define HS_DEVICE_DOEP5INTF_EPDIS_Msk     (0x2UL)                   /*!< EPDIS (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP5INTF_TF_Pos        (0UL)                     /*!< TF (Bit 0) */
#define HS_DEVICE_DOEP5INTF_TF_Msk        (0x1UL)                   /*!< TF (Bitfield-Mask: 0x01) */
/* =======================================================  DIEP0LEN  ======================================================== */
#define HS_DEVICE_DIEP0LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DIEP0LEN_PCNT_Msk       (0x180000UL)              /*!< PCNT (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP0LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DIEP0LEN_TLEN_Msk       (0x7fUL)                  /*!< TLEN (Bitfield-Mask: 0x7f) */
/* =======================================================  DOEP0LEN  ======================================================== */
#define HS_DEVICE_DOEP0LEN_STPCNT_Pos     (29UL)                    /*!< STPCNT (Bit 29) */
#define HS_DEVICE_DOEP0LEN_STPCNT_Msk     (0x60000000UL)            /*!< STPCNT (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP0LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DOEP0LEN_PCNT_Msk       (0x80000UL)               /*!< PCNT (Bitfield-Mask: 0x01) */
#define HS_DEVICE_DOEP0LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DOEP0LEN_TLEN_Msk       (0x7fUL)                  /*!< TLEN (Bitfield-Mask: 0x7f) */
/* =======================================================  DIEP1LEN  ======================================================== */
#define HS_DEVICE_DIEP1LEN_MCNT_Pos       (29UL)                    /*!< MCNT (Bit 29) */
#define HS_DEVICE_DIEP1LEN_MCNT_Msk       (0x60000000UL)            /*!< MCNT (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP1LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DIEP1LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DIEP1LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DIEP1LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DIEP2LEN  ======================================================== */
#define HS_DEVICE_DIEP2LEN_MCNT_Pos       (29UL)                    /*!< MCNT (Bit 29) */
#define HS_DEVICE_DIEP2LEN_MCNT_Msk       (0x60000000UL)            /*!< MCNT (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP2LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DIEP2LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DIEP2LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DIEP2LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DIEP3LEN  ======================================================== */
#define HS_DEVICE_DIEP3LEN_MCNT_Pos       (29UL)                    /*!< MCNT (Bit 29) */
#define HS_DEVICE_DIEP3LEN_MCNT_Msk       (0x60000000UL)            /*!< MCNT (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP3LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DIEP3LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DIEP3LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DIEP3LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DIEP4LEN  ======================================================== */
#define HS_DEVICE_DIEP4LEN_MCNT_Pos       (29UL)                    /*!< MCNT (Bit 29) */
#define HS_DEVICE_DIEP4LEN_MCNT_Msk       (0x60000000UL)            /*!< MCNT (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP4LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DIEP4LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DIEP4LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DIEP4LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DIEP5LEN  ======================================================== */
#define HS_DEVICE_DIEP5LEN_MCNT_Pos       (29UL)                    /*!< MCNT (Bit 29) */
#define HS_DEVICE_DIEP5LEN_MCNT_Msk       (0x60000000UL)            /*!< MCNT (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DIEP5LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DIEP5LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DIEP5LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DIEP5LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DOEP1LEN  ======================================================== */
#define HS_DEVICE_DOEP1LEN_STPCNT_RXDPID_Pos (29UL)                 /*!< STPCNT_RXDPID (Bit 29) */
#define HS_DEVICE_DOEP1LEN_STPCNT_RXDPID_Msk (0x60000000UL)         /*!< STPCNT_RXDPID (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP1LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DOEP1LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DOEP1LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DOEP1LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DOEP2LEN  ======================================================== */
#define HS_DEVICE_DOEP2LEN_STPCNT_RXDPID_Pos (29UL)                 /*!< STPCNT_RXDPID (Bit 29) */
#define HS_DEVICE_DOEP2LEN_STPCNT_RXDPID_Msk (0x60000000UL)         /*!< STPCNT_RXDPID (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP2LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DOEP2LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DOEP2LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DOEP2LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DOEP3LEN  ======================================================== */
#define HS_DEVICE_DOEP3LEN_STPCNT_RXDPID_Pos (29UL)                 /*!< STPCNT_RXDPID (Bit 29) */
#define HS_DEVICE_DOEP3LEN_STPCNT_RXDPID_Msk (0x60000000UL)         /*!< STPCNT_RXDPID (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP3LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DOEP3LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DOEP3LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DOEP3LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DOEP4LEN  ======================================================== */
#define HS_DEVICE_DOEP4LEN_STPCNT_RXDPID_Pos (29UL)                 /*!< STPCNT_RXDPID (Bit 29) */
#define HS_DEVICE_DOEP4LEN_STPCNT_RXDPID_Msk (0x60000000UL)         /*!< STPCNT_RXDPID (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP4LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DOEP4LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DOEP4LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DOEP4LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =======================================================  DOEP5LEN  ======================================================== */
#define HS_DEVICE_DOEP5LEN_STPCNT_RXDPID_Pos (29UL)                 /*!< STPCNT_RXDPID (Bit 29) */
#define HS_DEVICE_DOEP5LEN_STPCNT_RXDPID_Msk (0x60000000UL)         /*!< STPCNT_RXDPID (Bitfield-Mask: 0x03) */
#define HS_DEVICE_DOEP5LEN_PCNT_Pos       (19UL)                    /*!< PCNT (Bit 19) */
#define HS_DEVICE_DOEP5LEN_PCNT_Msk       (0x1ff80000UL)            /*!< PCNT (Bitfield-Mask: 0x3ff) */
#define HS_DEVICE_DOEP5LEN_TLEN_Pos       (0UL)                     /*!< TLEN (Bit 0) */
#define HS_DEVICE_DOEP5LEN_TLEN_Msk       (0x7ffffUL)               /*!< TLEN (Bitfield-Mask: 0x7ffff) */
/* =====================================================  DIEP0DMAADDR  ====================================================== */
#define HS_DEVICE_DIEP0DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DIEP0DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DIEP1DMAADDR  ====================================================== */
#define HS_DEVICE_DIEP1DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DIEP1DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DIEP2DMAADDR  ====================================================== */
#define HS_DEVICE_DIEP2DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DIEP2DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DIEP3DMAADDR  ====================================================== */
#define HS_DEVICE_DIEP3DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DIEP3DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DIEP4DMAADDR  ====================================================== */
#define HS_DEVICE_DIEP4DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DIEP4DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DIEP5DMAADDR  ====================================================== */
#define HS_DEVICE_DIEP5DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DIEP5DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DOEP0DMAADDR  ====================================================== */
#define HS_DEVICE_DOEP0DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DOEP0DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DOEP1DMAADDR  ====================================================== */
#define HS_DEVICE_DOEP1DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DOEP1DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DOEP2DMAADDR  ====================================================== */
#define HS_DEVICE_DOEP2DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DOEP2DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DOEP3DMAADDR  ====================================================== */
#define HS_DEVICE_DOEP3DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DOEP3DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DOEP4DMAADDR  ====================================================== */
#define HS_DEVICE_DOEP4DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DOEP4DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DOEP5DMAADDR  ====================================================== */
#define HS_DEVICE_DOEP5DMAADDR_DMAADDR_Pos (0UL)                    /*!< DMAADDR (Bit 0) */
#define HS_DEVICE_DOEP5DMAADDR_DMAADDR_Msk (0xffffffffUL)           /*!< DMAADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  DIEP0TFSTAT  ====================================================== */
#define HS_DEVICE_DIEP0TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define HS_DEVICE_DIEP0TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP1TFSTAT  ====================================================== */
#define HS_DEVICE_DIEP1TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define HS_DEVICE_DIEP1TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP2TFSTAT  ====================================================== */
#define HS_DEVICE_DIEP2TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define HS_DEVICE_DIEP2TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP3TFSTAT  ====================================================== */
#define HS_DEVICE_DIEP3TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define HS_DEVICE_DIEP3TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP4TFSTAT  ====================================================== */
#define HS_DEVICE_DIEP4TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define HS_DEVICE_DIEP4TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */
/* ======================================================  DIEP5TFSTAT  ====================================================== */
#define HS_DEVICE_DIEP5TFSTAT_IEPTFS_Pos  (0UL)                     /*!< IEPTFS (Bit 0) */
#define HS_DEVICE_DIEP5TFSTAT_IEPTFS_Msk  (0xffffUL)                /*!< IEPTFS (Bitfield-Mask: 0xffff) */


/* =========================================================================================================================== */
/* ================                                         HS_PWRCLK                                         ================ */
/* =========================================================================================================================== */

/* =======================================================  PWRCLKCTL  ======================================================= */
#define HS_PWRCLK_PWRCLKCTL_SUCLK_Pos     (0UL)                     /*!< SUCLK (Bit 0) */
#define HS_PWRCLK_PWRCLKCTL_SUCLK_Msk     (0x1UL)                   /*!< SUCLK (Bitfield-Mask: 0x01) */
#define HS_PWRCLK_PWRCLKCTL_SHCLK_Pos     (1UL)                     /*!< SHCLK (Bit 1) */
#define HS_PWRCLK_PWRCLKCTL_SHCLK_Msk     (0x2UL)                   /*!< SHCLK (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                           WWDGT                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define WWDGT_CTL_WDGTEN_Pos              (7UL)                     /*!< WDGTEN (Bit 7) */
#define WWDGT_CTL_WDGTEN_Msk              (0x80UL)                  /*!< WDGTEN (Bitfield-Mask: 0x01) */
#define WWDGT_CTL_CNT_Pos                 (0UL)                     /*!< CNT (Bit 0) */
#define WWDGT_CTL_CNT_Msk                 (0x7fUL)                  /*!< CNT (Bitfield-Mask: 0x7f) */
/* ==========================================================  CFG  ========================================================== */
#define WWDGT_CFG_EWIE_Pos                (9UL)                     /*!< EWIE (Bit 9) */
#define WWDGT_CFG_EWIE_Msk                (0x200UL)                 /*!< EWIE (Bitfield-Mask: 0x01) */
#define WWDGT_CFG_PSC_Pos                 (7UL)                     /*!< PSC (Bit 7) */
#define WWDGT_CFG_PSC_Msk                 (0x180UL)                 /*!< PSC (Bitfield-Mask: 0x03) */
#define WWDGT_CFG_WIN_Pos                 (0UL)                     /*!< WIN (Bit 0) */
#define WWDGT_CFG_WIN_Msk                 (0x7fUL)                  /*!< WIN (Bitfield-Mask: 0x7f) */
/* =========================================================  STAT  ========================================================== */
#define WWDGT_STAT_EWIF_Pos               (0UL)                     /*!< EWIF (Bit 0) */
#define WWDGT_STAT_EWIF_Msk               (0x1UL)                   /*!< EWIF (Bitfield-Mask: 0x01) */

/** @} */ /* End of group PosMask_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* GD32F4XX_H */


/** @} */ /* End of group GD32F4xx */

/** @} */ /* End of group  */
